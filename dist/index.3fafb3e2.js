// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1j6wU":[function(require,module,exports) {

var Refresh = require('react-refresh/runtime');

Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
  return function(type) {
    return type;
  };
};
},{"react-refresh/runtime":"592mh"}],"592mh":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/react-refresh-runtime.production.min.js');
} else {
  module.exports = require('./cjs/react-refresh-runtime.development.js');
}

},{"./cjs/react-refresh-runtime.development.js":"2rNh6"}],"2rNh6":[function(require,module,exports) {
/** @license React v0.9.0
* react-refresh-runtime.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap();
    // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap();
    // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = [];
    // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map();
    // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set();
    // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set();
    // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = // $FlowIssue
    typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
      if (signature.fullKey !== null) {
        return signature.fullKey;
      }
      var fullKey = signature.ownKey;
      var hooks;
      try {
        hooks = signature.getCustomHooks();
      } catch (err) {
        // This can happen in an edge case, e.g. if expression like Foo.useSomething
        // depends on Foo which is lazily initialized during rendering.
        // In that case just assume we'll have to remount.
        signature.forceReset = true;
        signature.fullKey = fullKey;
        return fullKey;
      }
      for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i];
        if (typeof hook !== 'function') {
          // Something's wrong. Assume we need to remount.
          signature.forceReset = true;
          signature.fullKey = fullKey;
          return fullKey;
        }
        var nestedHookSignature = allSignaturesByType.get(hook);
        if (nestedHookSignature === undefined) {
          // No signature means Hook wasn't in the source code, e.g. in a library.
          // We'll skip it because we can assume it won't change during this session.
          continue;
        }
        var nestedHookKey = computeFullKey(nestedHookSignature);
        if (nestedHookSignature.forceReset) {
          signature.forceReset = true;
        }
        fullKey += '\n---\n' + nestedHookKey;
      }
      signature.fullKey = fullKey;
      return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
      var prevSignature = allSignaturesByType.get(prevType);
      var nextSignature = allSignaturesByType.get(nextType);
      if (prevSignature === undefined && nextSignature === undefined) {
        return true;
      }
      if (prevSignature === undefined || nextSignature === undefined) {
        return false;
      }
      if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
        return false;
      }
      if (nextSignature.forceReset) {
        return false;
      }
      return true;
    }
    function isReactClass(type) {
      return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
      if (isReactClass(prevType) || isReactClass(nextType)) {
        return false;
      }
      if (haveEqualSignatures(prevType, nextType)) {
        return true;
      }
      return false;
    }
    function resolveFamily(type) {
      // Only check updated types to keep lookups fast.
      return updatedFamiliesByType.get(type);
    }
    // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
      var clone = new Map();
      map.forEach(function (value, key) {
        clone.set(key, value);
      });
      return clone;
    }
    function cloneSet(set) {
      var clone = new Set();
      set.forEach(function (value) {
        clone.add(value);
      });
      return clone;
    }
    function performReactRefresh() {
      if (pendingUpdates.length === 0) {
        return null;
      }
      if (isPerformingRefresh) {
        return null;
      }
      isPerformingRefresh = true;
      try {
        var staleFamilies = new Set();
        var updatedFamilies = new Set();
        var updates = pendingUpdates;
        pendingUpdates = [];
        updates.forEach(function (_ref) {
          var family = _ref[0], nextType = _ref[1];
          // Now that we got a real edit, we can create associations
          // that will be read by the React reconciler.
          var prevType = family.current;
          updatedFamiliesByType.set(prevType, family);
          updatedFamiliesByType.set(nextType, family);
          family.current = nextType;
          // Determine whether this should be a re-render or a re-mount.
          if (canPreserveStateBetween(prevType, nextType)) {
            updatedFamilies.add(family);
          } else {
            staleFamilies.add(family);
          }
        });
        // TODO: rename these fields to something more meaningful.
        var update = {
          updatedFamilies: updatedFamilies,
          // Families that will re-render preserving state
          staleFamilies: staleFamilies
        };
        helpersByRendererID.forEach(function (helpers) {
          // Even if there are no roots, set the handler on first update.
          // This ensures that if *new* roots are mounted, they'll use the resolve handler.
          helpers.setRefreshHandler(resolveFamily);
        });
        var didError = false;
        var firstError = null;
        // We snapshot maps and sets that are mutated during commits.
        // If we don't do this, there is a risk they will be mutated while
        // we iterate over them. For example, trying to recover a failed root
        // may cause another root to be added to the failed list -- an infinite loop.
        var failedRootsSnapshot = cloneSet(failedRoots);
        var mountedRootsSnapshot = cloneSet(mountedRoots);
        var helpersByRootSnapshot = cloneMap(helpersByRoot);
        failedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!failedRoots.has(root)) {}
          if (rootElements === null) {
            return;
          }
          if (!rootElements.has(root)) {
            return;
          }
          var element = rootElements.get(root);
          try {
            helpers.scheduleRoot(root, element);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        mountedRootsSnapshot.forEach(function (root) {
          var helpers = helpersByRootSnapshot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          if (!mountedRoots.has(root)) {}
          try {
            helpers.scheduleRefresh(root, update);
          } catch (err) {
            if (!didError) {
              didError = true;
              firstError = err;
            }
          }
        });
        if (didError) {
          throw firstError;
        }
        return update;
      } finally {
        isPerformingRefresh = false;
      }
    }
    function register(type, id) {
      {
        if (type === null) {
          return;
        }
        if (typeof type !== 'function' && typeof type !== 'object') {
          return;
        }
        // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) {
          return;
        }
        // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
          family = {
            current: type
          };
          allFamiliesByID.set(id, family);
        } else {
          pendingUpdates.push([family, type]);
        }
        allFamiliesByType.set(type, family);
        // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              register(type.render, id + '$render');
              break;
            case REACT_MEMO_TYPE:
              register(type.type, id + '$type');
              break;
          }
        }
      }
    }
    function setSignature(type, key) {
      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
      {
        allSignaturesByType.set(type, {
          forceReset: forceReset,
          ownKey: key,
          fullKey: null,
          getCustomHooks: getCustomHooks || (function () {
            return [];
          })
        });
      }
    }
    // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
      {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) {
          computeFullKey(signature);
        }
      }
    }
    function getFamilyByID(id) {
      {
        return allFamiliesByID.get(id);
      }
    }
    function getFamilyByType(type) {
      {
        return allFamiliesByType.get(type);
      }
    }
    function findAffectedHostInstances(families) {
      {
        var affectedInstances = new Set();
        mountedRoots.forEach(function (root) {
          var helpers = helpersByRoot.get(root);
          if (helpers === undefined) {
            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
          }
          var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
          instancesForRoot.forEach(function (inst) {
            affectedInstances.add(inst);
          });
        });
        return affectedInstances;
      }
    }
    function injectIntoGlobalHook(globalObject) {
      {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
          // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
          // Note that in this case it's important that renderer code runs *after* this method call.
          // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
          var nextID = 0;
          globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
            renderers: new Map(),
            supportsFiber: true,
            inject: function (injected) {
              return nextID++;
            },
            onScheduleFiberRoot: function (id, root, children) {},
            onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},
            onCommitFiberUnmount: function () {}
          };
        }
        // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function (injected) {
          var id = oldInject.apply(this, arguments);
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
          return id;
        };
        // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function (injected, id) {
          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
            // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
          }
        });
        // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || (function () {});
        hook.onScheduleFiberRoot = function (id, root, children) {
          if (!isPerformingRefresh) {
            // If it was intentionally scheduled, don't attempt to restore.
            // This includes intentionally scheduled unmounts.
            failedRoots.delete(root);
            if (rootElements !== null) {
              rootElements.set(root, children);
            }
          }
          return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
          var helpers = helpersByRendererID.get(id);
          if (helpers === undefined) {
            return;
          }
          helpersByRoot.set(root, helpers);
          var current = root.current;
          var alternate = current.alternate;
          // We need to determine whether this root has just (un)mounted.
          // This logic is copy-pasted from similar logic in the DevTools backend.
          // If this breaks with some refactoring, you'll want to update DevTools too.
          if (alternate !== null) {
            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
            var isMounted = current.memoizedState != null && current.memoizedState.element != null;
            if (!wasMounted && isMounted) {
              // Mount a new root.
              mountedRoots.add(root);
              failedRoots.delete(root);
            } else if (wasMounted && isMounted) ; else if (wasMounted && !isMounted) {
              // Unmount an existing root.
              mountedRoots.delete(root);
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              } else {
                helpersByRoot.delete(root);
              }
            } else if (!wasMounted && !isMounted) {
              if (didError) {
                // We'll remount it on future edits.
                failedRoots.add(root);
              }
            }
          } else {
            // Mount a new root.
            mountedRoots.add(root);
          }
          return oldOnCommitFiberRoot.apply(this, arguments);
        };
      }
    }
    function hasUnrecoverableErrors() {
      // TODO: delete this after removing dependency in RN.
      return false;
    }
    // Exposed for testing.
    function _getMountedRootCount() {
      {
        return mountedRoots.size;
      }
    }
    // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    // 
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    // 
    // function Hello() {
    // const [foo, setFoo] = useState(0);
    // const value = useCustomHook();
    // _s(); /* Second call triggers collecting the custom Hook list.
    // * This doesn't happen during the module evaluation because we
    // * don't want to change the module order with inline requires.
    // * Next calls are noops. */
    // return <h1>Hi</h1>;
    // }
    // 
    // /* First call specifies the signature: */
    // _s(
    // Hello,
    // 'useState{[foo, setFoo]}(0)',
    // () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
      {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function (type, key, forceReset, getCustomHooks) {
          switch (status) {
            case 'needsSignature':
              if (type !== undefined) {
                // If we received an argument, this is the initial registration call.
                savedType = type;
                hasCustomHooks = typeof getCustomHooks === 'function';
                setSignature(type, key, forceReset, getCustomHooks);
                // The next call we expect is from inside a function, to fill in the custom Hooks.
                status = 'needsCustomHooks';
              }
              break;
            case 'needsCustomHooks':
              if (hasCustomHooks) {
                collectCustomHooksForSignature(savedType);
              }
              status = 'resolved';
              break;
          }
          return type;
        };
      }
    }
    function isLikelyComponentType(type) {
      {
        switch (typeof type) {
          case 'function':
            {
              // First, deal with classes.
              if (type.prototype != null) {
                if (type.prototype.isReactComponent) {
                  // React class.
                  return true;
                }
                var ownNames = Object.getOwnPropertyNames(type.prototype);
                if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                  // This looks like a class.
                  return false;
                }
                // eslint-disable-next-line no-proto
                if (type.prototype.__proto__ !== Object.prototype) {
                  // It has a superclass.
                  return false;
                }
              }
              // For plain functions and arrows, use name as a heuristic.
              var name = type.name || type.displayName;
              return typeof name === 'string' && (/^[A-Z]/).test(name);
            }
          case 'object':
            {
              if (type != null) {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_MEMO_TYPE:
                    // Definitely React components.
                    return true;
                  default:
                    return false;
                }
              }
              return false;
            }
          default:
            {
              return false;
            }
        }
      }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
  })();
}

},{}],"3Imd1":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "0fa2489aa94c8731ee2aee9f3fafb3e2";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"5rkFb":[function(require,module,exports) {
var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _react = require("react");
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _reactDom = require("react-dom");
  var _reactDomDefault = _parcelHelpers.interopDefault(_reactDom);
  var _App = require("./App");
  var _AppDefault = _parcelHelpers.interopDefault(_App);
  var _jsxFileName = "/Users/zhanwu/Desktop/UW/INFO-474/react-parcel-starter/src/index.js";
  _reactDomDefault.default.render(/*#__PURE__*/_reactDefault.default.createElement(_AppDefault.default, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 5,
      columnNumber: 17
    }
  }), document.querySelector("#root"));
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"react":"3b2NM","react-dom":"2sg1U","./App":"6Pm2X","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y","../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"3b2NM":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}

},{"./cjs/react.development.js":"ixJ97"}],"ixJ97":[function(require,module,exports) {
/** @license React v17.0.2
* react.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    exports.Fragment = 0xeacb;
    exports.StrictMode = 0xeacc;
    exports.Profiler = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    exports.Suspense = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      exports.Fragment = symbolFor('react.fragment');
      exports.StrictMode = symbolFor('react.strict_mode');
      exports.Profiler = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      exports.Suspense = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }
    /**
    * Keeps track of the current dispatcher.
    */
    var ReactCurrentDispatcher = {
      /**
      * @internal
      * @type {ReactComponent}
      */
      current: null
    };
    /**
    * Keeps track of the current batch's configuration such as how long an update
    * should suspend for if it needs to.
    */
    var ReactCurrentBatchConfig = {
      transition: 0
    };
    /**
    * Keeps track of the current owner.
    *
    * The current owner is the component who should own any components that are
    * currently being constructed.
    */
    var ReactCurrentOwner = {
      /**
      * @internal
      * @type {ReactComponent}
      */
      current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
      {
        currentExtraStackFrame = stack;
      }
    }
    {
      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
        {
          currentExtraStackFrame = stack;
        }
      };
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = '';
        // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) {
          stack += currentExtraStackFrame;
        }
        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }
        return stack;
      };
          /**
      * Used by act() to track whether you're inside an act() scope.
      */
}
    /**
    * Used by act() to track whether you're inside an act() scope.
    */
    var IsSomeRendererActing = {
      current: false
    };
    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
      ReactCurrentOwner: ReactCurrentOwner,
      IsSomeRendererActing: IsSomeRendererActing,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          // by calls to these methods by a Babel plugin.
      // 
      // In PROD (or in packages without access to React internals),
      // they are left as they are instead.
}
    // by calls to these methods by a Babel plugin.
    // 
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        printWarning('warn', format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        printWarning('error', format, args);
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function (item) {
          return '' + item;
        });
        // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format);
        // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
    * This is the abstract API for an update queue.
    */
    var ReactNoopUpdateQueue = {
      /**
      * Checks whether or not this composite component is mounted.
      * @param {ReactClass} publicInstance The instance we want to test.
      * @return {boolean} True if mounted, false otherwise.
      * @protected
      * @final
      */
      isMounted: function (publicInstance) {
        return false;
      },
      /**
      * Forces an update. This should only be invoked when it is known with
      * certainty that we are **not** in a DOM transaction.
      *
      * You may want to call this when you know that some deeper aspect of the
      * component's state has changed but `setState` was not called.
      *
      * This will not invoke `shouldComponentUpdate`, but it will invoke
      * `componentWillUpdate` and `componentDidUpdate`.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {?function} callback Called after component is updated.
      * @param {?string} callerName name of the calling function in the public API.
      * @internal
      */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },
      /**
      * Replaces all of the state. Always use this or `setState` to mutate state.
      * You should treat `this.state` as immutable.
      *
      * There is no guarantee that `this.state` will be immediately updated, so
      * accessing `this.state` after calling this method may return the old value.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {object} completeState Next state.
      * @param {?function} callback Called after component is updated.
      * @param {?string} callerName name of the calling function in the public API.
      * @internal
      */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },
      /**
      * Sets a subset of the state. This only exists because _pendingState is
      * internal. This provides a merging strategy that is not available to deep
      * properties which is confusing. TODO: Expose pendingState or don't use it
      * during the merge.
      *
      * @param {ReactClass} publicInstance The instance that should rerender.
      * @param {object} partialState Next partial state to be merged with state.
      * @param {?function} callback Called after component is updated.
      * @param {?string} Name of the calling function in the public API.
      * @internal
      */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
          /**
      * Base class helpers for the updating state of a component.
      */
}
    /**
    * Base class helpers for the updating state of a component.
    */
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
    * Sets a subset of the state. Always use this to mutate
    * state. You should treat `this.state` as immutable.
    *
    * There is no guarantee that `this.state` will be immediately updated, so
    * accessing `this.state` after calling this method may return the old value.
    *
    * There is no guarantee that calls to `setState` will run synchronously,
    * as they may eventually be batched together.  You can provide an optional
    * callback that will be executed when the call to setState is actually
    * completed.
    *
    * When a function is provided to setState, it will be called at some point in
    * the future (not synchronously). It will be called with the up to date
    * component arguments (state, props, context). These values can be different
    * from this.* because your function may be called after receiveProps but before
    * shouldComponentUpdate, and this new state, props, and context will not yet be
    * assigned to this.
    *
    * @param {object|function} partialState Next partial state or function to
    *        produce next partial state to be merged with current state.
    * @param {?function} callback Called after state is updated.
    * @final
    * @protected
    */
    Component.prototype.setState = function (partialState, callback) {
      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
        {
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
      }
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
    * Forces an update. This should only be invoked when it is known with
    * certainty that we are **not** in a DOM transaction.
    *
    * You may want to call this when you know that some deeper aspect of the
    * component's state has changed but `setState` was not called.
    *
    * This will not invoke `shouldComponentUpdate`, but it will invoke
    * `componentWillUpdate` and `componentDidUpdate`.
    *
    * @param {?function} callback Called after update is complete.
    * @final
    * @protected
    */
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
    * Deprecated APIs. These APIs used to exist on classic React classes but since
    * we would like to deprecate them, we're not going to move them over to this
    * modern base class. Instead, we define a getter that warns if it's accessed.
    */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
    * Convenience component with default shallow equality check for sCU.
    */
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
      return type.displayName || 'Context';
    }
    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case exports.Fragment:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case exports.Profiler:
          return 'Profiler';
        case exports.StrictMode:
          return 'StrictMode';
        case exports.Suspense:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_BLOCK_TYPE:
            return getComponentName(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }
      return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentName(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    /**
    * Factory method to create a new React element. This no longer adheres to
    * the class pattern, so do not use new to call it. Also, instanceof check
    * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
    * if something is a React Element.
    *
    * @param {*} type
    * @param {*} props
    * @param {*} key
    * @param {string|object} ref
    * @param {*} owner
    * @param {*} self A *temporary* helper to detect places where `this` is
    * different from the `owner` when React.createElement is called, so that we
    * can warn. We want to get rid of owner and replace string `ref`s with arrow
    * functions, and as long as `this` and owner are the same, there will be no
    * change in behavior.
    * @param {*} source An annotation object (added by a transpiler or otherwise)
    * indicating filename, line number, and/or other information.
    * @internal
    */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};
        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
    * Create and return a new ReactElement of the given type.
    * See https://reactjs.org/docs/react-api.html#createelement
    */
    function createElement(type, config, children) {
      var propName;
      // Reserved names are extracted
      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;
      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
          {
            warnIfStringRefCannotBeAutoConverted(config);
          }
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }
        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }
      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
    * Clone and return a new ReactElement using element as the starting point.
    * See https://reactjs.org/docs/react-api.html#cloneelement
    */
    function cloneElement(element, config, children) {
      if (!!(element === null || element === undefined)) {
        {
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
      }
      var propName;
      // Original props are copied
      var props = _assign({}, element.props);
      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;
      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;
      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }
        // Remaining properties override existing props
        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }
      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
    * Verifies the object is a ReactElement.
    * See https://reactjs.org/docs/react-api.html#isvalidelement
    * @param {?object} object
    * @return {boolean} True if `object` is a ReactElement.
    * @final
    */
    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
    * Escape and wrap key so it is safe to use as a reactid
    *
    * @param {string} key to be escaped.
    * @return {string} the escaped key.
    */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = key.replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
    * TODO: Test that a single child and an array with one item have the same key
    * pattern.
    */
    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
    * Generate a key string that identifies a element within a set.
    *
    * @param {*} element A element that could contain a manual key.
    * @param {number} index Index that is used if a manual key is not provided.
    * @return {string}
    */
    function getElementKey(element, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof element === 'object' && element !== null && element.key != null) {
        // Explicit key
        return escape('' + element.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }
      var invokeCallback = false;
      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }
      if (invokeCallback) {
        var _child = children;
        var mappedChild = callback(_child);
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows:
        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
        if (Array.isArray(mappedChild)) {
          var escapedChildKey = '';
          if (childKey != null) {
            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
          }
          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            escapedPrefix + (// $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
          }
          array.push(mappedChild);
        }
        return 1;
      }
      var child;
      var nextName;
      var subtreeCount = 0;
      // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getElementKey(child, i);
          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          var iterableChildren = children;
          {
            // Warn about using Maps as children
            if (iteratorFn === iterableChildren.entries) {
              if (!didWarnAboutMaps) {
                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
              }
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(iterableChildren);
          var step;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getElementKey(child, ii++);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else if (type === 'object') {
          var childrenString = '' + children;
          {
            {
              throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
        }
      }
      return subtreeCount;
    }
    /**
    * Maps children that are typically specified as `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenmap
    *
    * The provided mapFunction(child, index) will be called for each
    * leaf child.
    *
    * @param {?*} children Children tree container.
    * @param {function(*, int)} func The map function.
    * @param {*} context Context for mapFunction.
    * @return {object} Object containing the ordered map of results.
    */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      var count = 0;
      mapIntoArray(children, result, '', '', function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    /**
    * Count the number of children that are typically specified as
    * `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrencount
    *
    * @param {?*} children Children tree container.
    * @return {number} The number of children.
    */
    function countChildren(children) {
      var n = 0;
      mapChildren(children, function () {
        n++;
      });
      return n;
    }
    /**
    * Iterates through children that are typically specified as `props.children`.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
    *
    * The provided forEachFunc(child, index) will be called for each
    * leaf child.
    *
    * @param {?*} children Children tree container.
    * @param {function(*, int)} forEachFunc
    * @param {*} forEachContext Context for forEachContext.
    */
    function forEachChildren(children, forEachFunc, forEachContext) {
      mapChildren(children, function () {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    }
    /**
    * Flatten a children object (typically specified as `props.children`) and
    * return an array with appropriately re-keyed children.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
    */
    function toArray(children) {
      return mapChildren(children, function (child) {
        return child;
      }) || [];
    }
    /**
    * Returns the first child in a collection of children and verifies that there
    * is only one child in the collection.
    *
    * See https://reactjs.org/docs/react-api.html#reactchildrenonly
    *
    * The current implementation of this function assumes that a single child gets
    * passed without a wrapper, but the purpose of this helper function is to
    * abstract away the particular structure of children.
    *
    * @param {?object} children Child collection structure.
    * @return {ReactElement} The first and only `ReactElement` contained in the
    * structure.
    */
    function onlyChild(children) {
      if (!isValidElement(children)) {
        {
          throw Error("React.Children.only expected to receive a single React element child.");
        }
      }
      return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
            error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }
      }
      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      var hasWarnedAboutDisplayNameOnConsumer = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          },
          displayName: {
            get: function () {
              return context.displayName;
            },
            set: function (displayName) {
              if (!hasWarnedAboutDisplayNameOnConsumer) {
                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                hasWarnedAboutDisplayNameOnConsumer = true;
              }
            }
          }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
      if (payload._status === Uninitialized) {
        var ctor = payload._result;
        var thenable = ctor();
        // Transition to the next state.
        var pending = payload;
        pending._status = Pending;
        pending._result = thenable;
        thenable.then(function (moduleObject) {
          if (payload._status === Pending) {
            var defaultExport = moduleObject.default;
            {
              if (defaultExport === undefined) {
                error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
              }
                          // Transition to the next state.
}
            // Transition to the next state.
            var resolved = payload;
            resolved._status = Resolved;
            resolved._result = defaultExport;
          }
        }, function (error) {
          if (payload._status === Pending) {
            // Transition to the next state.
            var rejected = payload;
            rejected._status = Rejected;
            rejected._result = error;
          }
        });
      }
      if (payload._status === Resolved) {
        return payload._result;
      } else {
        throw payload._result;
      }
    }
    function lazy(ctor) {
      var payload = {
        // We use these fields to store the result.
        _status: -1,
        _result: ctor
      };
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: payload,
        _init: lazyInitializer
      };
      {
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes;
        // $FlowFixMe
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps;
              // Match production behavior more closely:
              // $FlowFixMe
              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes;
              // Match production behavior more closely:
              // $FlowFixMe
              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }
    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          if (render.length !== 0 && render.length !== 2) {
            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
          }
        }
        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null) {
            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
          }
        }
      }
      var elementType = {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name;
            if (render.displayName == null) {
              render.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false;
    // Experimental Create Event Handle API.
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      }
      // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
      if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
        return true;
      }
      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
          return true;
        }
      }
      return false;
    }
    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      var elementType = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name;
            if (type.displayName == null) {
              type.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      if (!(dispatcher !== null)) {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }
      return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        if (unstable_observedBits !== undefined) {
          error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
        }
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
          var realContext = Context._context;
          // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.
          if (realContext.Consumer === Context) {
            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          // https://github.com/facebook/react/issues/19099
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            log: _assign({}, props, {
              value: prevLog
            }),
            info: _assign({}, props, {
              value: prevInfo
            }),
            warn: _assign({}, props, {
              value: prevWarn
            }),
            error: _assign({}, props, {
              value: prevError
            }),
            group: _assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: _assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: _assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }
        // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      // $FlowFixMe It does accept undefined.
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher$1.current;
        // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          };
          // $FlowFixMe
          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; (s--, c--)) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                                          // Return the line we found.
}
                    // Return the line we found.
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher$1.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      // Fallback to just using the name if we couldn't make it throw.
      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case exports.Suspense:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_BLOCK_TYPE:
            return describeFunctionComponentFrame(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else {
          setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }
    function getSourceInfoErrorAddendum(source) {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== undefined) {
        return getSourceInfoErrorAddendum(elementProps.__source);
      }
      return '';
    }
    /**
    * Warn if there's no key explicitly set on dynamic arrays of children or
    * object keys are not valid. This allows us to keep track of children between
    * updates.
    */
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();
      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }
      return info;
    }
    /**
    * Warn if the element doesn't have an explicit key assigned to it.
    * This element is in an array. The array could grow and shrink or be
    * reordered. All children that haven't already been validated are required to
    * have a "key" property assigned to it. Error statuses are cached so a warning
    * will only be shown once.
    *
    * @internal
    * @param {ReactElement} element Element that requires a key.
    * @param {*} parentType element's parent's type.
    */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
      }
      {
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
    * Ensure that every element either is passed in a static location, in an
    * array with an explicit keys property defined, or in an object literal
    * with valid key property.
    *
    * @internal
    * @param {ReactNode} node Statically passed child of any type.
    * @param {*} parentType node's parent's type.
    */
    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
    * Given an element, validate that its props follow the propTypes definition,
    * provided by the type.
    *
    * @param {ReactElement} element
    */
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentName(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          // Intentionally inside to avoid triggering lazy initializers:
          var _name = getComponentName(type);
          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
    * Given a fragment, validate that it can only be provided with fragment props
    * @param {ReactElement} fragment
    */
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }
        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }
        var typeString;
        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }
        {
          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
      }
      var element = createElement.apply(this, arguments);
      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }
      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
      if (type === exports.Fragment) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }
      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      {
        if (!didWarnAboutDeprecatedCreateFactory) {
          didWarnAboutDeprecatedCreateFactory = true;
          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
        }
        // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
    {
      try {
        var frozenObject = Object.freeze({});
        /*eslint-disable no-new*/
        new Map([[frozenObject, null]]);
        new Set([frozenObject]);
      } catch (e) {}
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
  })();
}

},{"object-assign":"3eM6x"}],"3eM6x":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],"2sg1U":[function(require,module,exports) {
"use strict";
function checkDCE() {
  /*global __REACT_DEVTOOLS_GLOBAL_HOOK__*/
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if ("development" !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}
if ("development" === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}

},{"./cjs/react-dom.development.js":"6fSaM"}],"6fSaM":[function(require,module,exports) {
/** @license React v17.0.2
* react-dom.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    // 
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        printWarning('warn', format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        printWarning('error', format, args);
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function (item) {
          return '' + item;
        });
        // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format);
        // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    if (!React) {
      {
        throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    // Before we know whether it is function or class
    var HostRoot = 3;
    // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4;
    // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true;
    // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false;
    // Experimental Scope support.
    var enableNewReconciler = false;
    // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
    * Mapping from registration name to event name
    */
    var registrationNameDependencies = {};
    /**
    * Mapping from lowercase registration names to the properly cased version,
    * used to warn in the case of missing event handlers. Available
    * only in true.
    * @type {Object}
    */
    var possibleRegistrationNames = {};
    // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i = 0; i < dependencies.length; i++) {
        allNativeEvents.add(dependencies[i]);
      }
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0;
    // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1;
    // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2;
    // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3;
    // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4;
    // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5;
    // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /*eslint-disable max-len*/
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /*eslint-enable max-len*/
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error('Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value) {
        case 'function':
        case 'symbol':
          // eslint-disable-line
          return true;
        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL;
      this.removeEmptyString = removeEmptyString;
    }
    // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {};
    // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
    reservedProps.forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML boolean attributes.
    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that must be positive numbers.
    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These are HTML attributes that must be numbers.
    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function (token) {
      return token[1].toUpperCase();
    };
    // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // String SVG attributes with the xlink namespace.
    ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
      false);
    });
    // String SVG attributes with the xml namespace.
    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
      false);
    });
    // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null, // attributeNamespace
      false, // sanitizeURL
      false);
    });
    // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
    'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
    false);
    ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null, // attributeNamespace
      true, // sanitizeURL
      true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /*eslint-disable max-len*/
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
        }
      }
    }
    /**
    * Get the value for a property on a node. Only used in DEV for SSR validation.
    * The "expected" argument is used as a hint of what the expected value is.
    * Some properties have multiple equivalent values.
    */
    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          if (propertyInfo.sanitizeURL) {
            // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              if (value === '') {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === '' + expected) {
                return expected;
              }
              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            }
            // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.
            stringValue = node.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
    * Get the value for a attribute on a node. Only used in DEV for SSR validation.
    * The third argument is used as a hint of what the expected value is. Some
    * attributes have multiple equivalent values.
    */
    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) {
          return expected;
        }
        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }
        var value = node.getAttribute(name);
        if (value === '' + expected) {
          return expected;
        }
        return value;
      }
    }
    /**
    * Sets the value for a property on a node.
    *
    * @param {DOMElement} node
    * @param {string} name
    * @param {*} value
    */
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      // If the prop isn't in the special list, treat it as a simple attribute.
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }
        return;
      }
      // The rest are treated as attributes with special cases.
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          // If attribute type is boolean, we know for sure it won't be an execution sink
          // and we won't require Trusted Type here.
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          {
            attributeValue = '' + value;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          // https://github.com/facebook/react/issues/19099
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /*eslint-disable react-internal/no-production-logging*/
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          // $FlowFixMe Flow thinks console is immutable.
          Object.defineProperties(console, {
            log: _assign({}, props, {
              value: prevLog
            }),
            info: _assign({}, props, {
              value: prevInfo
            }),
            warn: _assign({}, props, {
              value: prevWarn
            }),
            error: _assign({}, props, {
              value: prevError
            }),
            group: _assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: _assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: _assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }
        // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      // $FlowFixMe It does accept undefined.
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          };
          // $FlowFixMe
          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; (s--, c--)) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                                          // Return the line we found.
}
                    // Return the line we found.
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      // Fallback to just using the name if we couldn't make it throw.
      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_BLOCK_TYPE:
            return describeFunctionComponentFrame(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    function describeFiber(fiber) {
      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
      var source = fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame('Lazy');
        case SuspenseComponent:
          return describeBuiltInComponentFrame('Suspense');
        case SuspenseListComponent:
          return describeBuiltInComponentFrame('SuspenseList');
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case Block:
          return describeFunctionComponentFrame(fiber.type._render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return '';
      }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
      try {
        var info = '';
        var node = workInProgress;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      } catch (x) {
        return '\nError generating stack: ' + x.message + '\n' + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
      return type.displayName || 'Context';
    }
    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_BLOCK_TYPE:
            return getComponentName(type._render);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        }
        // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function getIsRendering() {
      {
        return isRendering;
      }
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
      return '' + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;
        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
      return node._valueTracker;
    }
    function detachTracker(node) {
      node._valueTracker = null;
    }
    function getValueFromNode(node) {
      var value = '';
      if (!node) {
        return value;
      }
      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }
      return value;
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField];
      // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)
      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }
      var get = descriptor.get, set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      });
      // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }
    function track(node) {
      if (getTracker(node)) {
        return;
      }
      // TODO: Once it's just Fiber we can move this to node._wrapperState
      node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }
      var tracker = getTracker(node);
      // if there is no tracker at this point it's unlikely
      // that trying again will succeed
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);
      if (typeof doc === 'undefined') {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
    * Implements an <input> host component that allows setting these optional
    * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
    *
    * If `checked` or `value` are not supplied (or null/undefined), user actions
    * that affect the checked state or value will trigger updates to the element.
    *
    * If they are supplied (and not null/undefined), the rendered element will not
    * trigger updates to the element. Instead, the props must change in order for
    * the rendered element to be updated.
    *
    * The rendered element will be initialized as unchecked (or `defaultChecked`)
    * with an empty value (or `defaultValue`).
    *
    * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
    */
    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;
      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node = element;
      {
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
          didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;
      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }
      {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        // 1. The value React property
        // 2. The defaultValue React property
        // 3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating) {
      var node = element;
      // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.
      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset';
        // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872
        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }
        var initialValue = toString(node._wrapperState.initialValue);
        // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (!isHydrating) {
          {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            // 
            // 1. The value React property when present
            // 2. The defaultValue React property when present
            // 3. An empty string
            if (initialValue !== node.value) {
              node.value = initialValue;
            }
          }
        }
        {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = initialValue;
        }
      }
      // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.
      var name = node.name;
      if (name !== '') {
        node.name = '';
      }
      {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        // 
        // 1. The checked React property when present
        // 2. The defaultChecked React property when present
        // 3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }
      if (name !== '') {
        node.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.
        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            {
              throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
          }
          // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set
          updateValueIfChanged(otherNode);
          // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    // 
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    // 
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
      if (// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
      var content = '';
      // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).
      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }
        content += child;
      });
      return content;
    }
    /**
    * Implements an <option> host component that warns when `selected` is set.
    */
    function validateProps(element, props) {
      {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }
            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }
            if (typeof child.type !== 'string') {
              return;
            }
            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              error('Only strings and numbers are supported as <option> children.');
            }
          });
        }
        // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }
    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);
      var content = flattenChildren(props.children);
      if (content) {
        hostProps.children = content;
      }
      return hostProps;
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }
      return '';
    }
    var valuePropNames = ['value', 'defaultValue'];
    /**
    * Validation function for `value` and `defaultValue`.
    */
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps('select', props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var isArray = Array.isArray(props[propName]);
          if (props.multiple && !isArray) {
            error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && isArray) {
            error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;
            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
    * Implements a <select> host component that allows optionally setting the
    * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
    * stringable. If `multiple` is true, the prop must be an array of stringables.
    *
    * If `value` is not supplied (or null/undefined), user actions that change the
    * selected option will trigger updates to the rendered options.
    *
    * If it is supplied (and not null/undefined), the rendered options will not
    * update in response to user actions. Instead, the `value` prop must change in
    * order for the rendered options to update.
    *
    * If `defaultValue` is provided, any options with the supplied values will be
    * selected.
    */
    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }
    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node = element;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }
    var didWarnValDefaultVal = false;
    /**
    * Implements a <textarea> host component that allows setting `value`, and
    * `defaultValue`. This differs from the traditional DOM API because value is
    * usually set as PCDATA children.
    *
    * If `value` is not supplied (or null/undefined), user actions that affect the
    * value will trigger updates to the element.
    *
    * If `value` is supplied (and not null/undefined), the rendered element will
    * not trigger updates to the element. Instead, the `value` prop must change in
    * order for the rendered element to be updated.
    *
    * The rendered element will be initialized with an empty value, the prop
    * `defaultValue` if specified, or the children content (deprecated).
    */
    function getHostProps$3(element, props) {
      var node = element;
      if (!(props.dangerouslySetInnerHTML == null)) {
        {
          throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
      }
      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.
      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node = element;
      {
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      // Only bother fetching default value if we're going to use it
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          {
            if (!(defaultValue == null)) {
              {
                throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
            }
            if (Array.isArray(children)) {
              if (!(children.length <= 1)) {
                {
                  throw Error("<textarea> can only have at most one child.");
                }
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = '';
        }
        initialValue = defaultValue;
      }
      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value);
        // To avoid side effects (such as losing text selection), only set value if changed
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node = element;
      // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.
      var textContent = node.textContent;
      // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
      if (textContent === node._wrapperState.initialValue) {
        if (textContent !== '' && textContent !== null) {
          node.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    };
    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;
        case 'math':
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE;
      }
      // By default, pass namespace below.
      return parentNamespace;
    }
    /*globals MSApp*/
    /**
    * Create a function which has 'unsafe' privileges (required by windows8 apps)
    */
    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    /**
    * Set the innerHTML property of a node
    *
    * @param {DOMElement} node
    * @param {string} html
    * @internal
    */
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      if (node.namespaceURI === Namespaces.svg) {
        if (!(('innerHTML' in node))) {
          // IE does not have innerHTML for SVG nodes, so instead we inject the
          // new markup in a temp node and then move the child nodes across into
          // the target node
          reusableSVGContainer = reusableSVGContainer || document.createElement('div');
          reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
          var svgNode = reusableSVGContainer.firstChild;
          while (node.firstChild) {
            node.removeChild(node.firstChild);
          }
          while (svgNode.firstChild) {
            node.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node.innerHTML = html;
    });
    /**
    * HTML nodeType values that represent the type of the node
    */
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
    * Set the textContent property of a node. For text updates, it's faster
    * to set the `nodeValue` of the Text node directly instead of using
    * `.textContent` which will remove the existing node and create a new one.
    *
    * @param {DOMElement} node
    * @param {string} text
    * @internal
    */
    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
      animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
      background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
      backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
      border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
      borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
      borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
      borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
      borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
      borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
      borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
      borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
      borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
      borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
      borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
      borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
      columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
      columns: ['columnCount', 'columnWidth'],
      flex: ['flexBasis', 'flexGrow', 'flexShrink'],
      flexFlow: ['flexDirection', 'flexWrap'],
      font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
      fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
      gap: ['columnGap', 'rowGap'],
      grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
      gridColumn: ['gridColumnEnd', 'gridColumnStart'],
      gridColumnGap: ['columnGap'],
      gridGap: ['columnGap', 'rowGap'],
      gridRow: ['gridRowEnd', 'gridRowStart'],
      gridRowGap: ['rowGap'],
      gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
      margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
      marker: ['markerEnd', 'markerMid', 'markerStart'],
      mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
      maskPosition: ['maskPositionX', 'maskPositionY'],
      outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
      overflow: ['overflowX', 'overflowY'],
      padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
      placeContent: ['alignContent', 'justifyContent'],
      placeItems: ['alignItems', 'justifyItems'],
      placeSelf: ['alignSelf', 'justifySelf'],
      textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
      textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
      transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
      wordWrap: ['overflowWrap']
    };
    /**
    * CSS properties which accept numbers but are not in units of "px".
    */
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
    * @param {string} prefix vendor-specific prefix, eg: Webkit
    * @param {string} key style name, eg: transitionDuration
    * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
    * WebkitTransitionDuration
    */
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
    * Support style names that may come passed in prefixed by adding permutations
    * of vendor prefixes.
    */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
    * Convert a value into the proper css writable value. The style name `name`
    * should be logical (no hyphens), as specified
    * in `CSSProperty.isUnitlessNumber`.
    *
    * @param {string} name CSS property name such as `topMargin`.
    * @param {*} value CSS property value such as `10px`.
    * @return {string} Normalized style value with dimensions applied.
    */
    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';
      if (isEmpty) {
        return '';
      }
      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px';
      }
      return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
    * Hyphenates a camelcased CSS property name, for example:
    *
    *   > hyphenateStyleName('backgroundColor')
    *   < "background-color"
    *   > hyphenateStyleName('MozTransition')
    *   < "-moz-transition"
    *   > hyphenateStyleName('msTransition')
    *   < "-ms-transition"
    *
    * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
    * is converted to `-ms-`.
    */
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function () {};
    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      // style values shouldn't contain a semicolon
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };
      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };
      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
      };
      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
      };
      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
    * Operations for dealing with CSS properties.
    */
    /**
    * This creates a string that is expected to be equivalent to the style
    * attribute generated by server-side rendering. It by-passes warnings and
    * security checks so it's not safe to use this value for anything other than
    * comparison. It is only used in DEV for SSR validation.
    */
    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }
        return serialized || null;
      }
    }
    /**
    * Sets the value for multiple styles on a node.  If a value is specified as
    * '' (empty string), the corresponding style property will be unset.
    *
    * @param {DOMElement} node
    * @param {object} styles
    */
    function setValueForStyles(node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === 'float') {
          styleName = 'cssFloat';
        }
        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === 'boolean' || value === '';
    }
    /**
    * Given {color: 'red', overflow: 'hidden'} returns {
    *   color: 'color',
    *   overflowX: 'overflow',
    *   overflowY: 'overflow',
    * }. This can be read as "the overflowY property was set by the overflow
    * shorthand". That is, the values are the property that each was derived from.
    */
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }
      return expanded;
    }
    /**
    * When mixing shorthand and longhand property names, we warn during updates if
    * we expect an incorrect result to occur. In particular, we warn for:
    *
    * Updating a shorthand property (longhand gets overwritten):
    *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
    *   becomes .style.font = 'baz'
    * Removing a shorthand property (longhand gets lost too):
    *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
    *   becomes .style.font = ''
    * Removing a longhand property (should revert to shorthand; doesn't):
    *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
    *   becomes .style.fontVariant = ''
    */
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + ',' + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
          }
        }
      }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      // Note the use of `==` which checks for null or undefined.
      if (voidElementTags[tag]) {
        if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
          {
            throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (!(props.children == null)) {
          {
            throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
        }
        if (!(typeof props.dangerouslySetInnerHTML === 'object' && (HTML in props.dangerouslySetInnerHTML))) {
          {
            throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
        }
      }
      if (!(props.style == null || typeof props.style === 'object')) {
        {
          throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }
      switch (tagName) {
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;
        default:
          return true;
      }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      disablepictureinpicture: 'disablePictureInPicture',
      disableremoteplayback: 'disableRemotePlayback',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      enterkeyhint: 'enterKeyHint',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = 'aria-' + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          // If this is an aria-* attribute, but is not listed in the known DOM
          // DOM properties, then it is an invalid aria-* attribute.
          if (correctName == null) {
            error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
            warnedProperties[name] = true;
            return true;
          }
          // aria-* attributes should be lowercase; suggest the lowercase version.
          if (name !== correctName) {
            error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          // If this is an aria-* attribute, but is not listed in the known DOM
          // DOM properties, then it is an invalid aria-* attribute.
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          // aria-* attributes should be lowercase; suggest the lowercase version.
          if (name !== standardName) {
            error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) {
          error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === 'select' && props.multiple) {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
          } else {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
          }
        }
      }
    }
    var validateProperty$1 = function () {};
    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
      validateProperty$1 = function (tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        }
        // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
          var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
          if (registrationName != null) {
            error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error('Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === 'innerhtml') {
          error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === 'aria') {
          error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
          error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) {
          return true;
        }
        // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function (type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) {
          error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var IS_REPLAYED = 1 << 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
    * Gets the target node from a native browser event by accounting for
    * inconsistencies in browser DOM APIs.
    *
    * @param {object} nativeEvent Native browser event.
    * @return {DOMEventTarget} Target node.
    */
    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      // Normalize SVG <use> element events #4963
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        // Unmounted
        return;
      }
      if (!(typeof restoreImpl === 'function')) {
        {
          throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var stateNode = internalInstance.stateNode;
      // Guard against Fiber being unmounted.
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function (fn, a, b, c, d) {
      return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function () {};
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
      // Here we wait until all updates have propagated, which is important
      // when using controlled components within layers:
      // https://github.com/facebook/react/issues/1698
      // Then we restore state of any controlled component.
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        // If a controlled event was fired, we may need to restore the state of
        // the DOM node back to the controlled value. This is necessary when React
        // bails out of the update without touching the DOM.
        flushDiscreteUpdatesImpl();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, bookkeeping) {
      if (isInsideEventHandler) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function batchedEventUpdates(fn, a, b) {
      if (isBatchingEventUpdates) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
      }
      isBatchingEventUpdates = true;
      try {
        return batchedEventUpdatesImpl(fn, a, b);
      } finally {
        isBatchingEventUpdates = false;
        finishEventHandler();
      }
    }
    function discreteUpdates(fn, a, b, c, d) {
      var prevIsInsideEventHandler = isInsideEventHandler;
      isInsideEventHandler = true;
      try {
        return discreteUpdatesImpl(fn, a, b, c, d);
      } finally {
        isInsideEventHandler = prevIsInsideEventHandler;
        if (!isInsideEventHandler) {
          finishEventHandler();
        }
      }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
      {
        if (!isInsideEventHandler) {
          flushDiscreteUpdatesImpl();
        }
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      discreteUpdatesImpl = _discreteUpdatesImpl;
      flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
      batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
        case 'onMouseEnter':
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    /**
    * @param {object} inst The instance, which is the source of events.
    * @param {string} registrationName Name of listener (e.g. `onClick`).
    * @return {?function} The stored callback.
    */
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        // Work in progress.
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (!(!listener || typeof listener === 'function')) {
        {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) {
      try {
        var options = {};
        // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
          get: function () {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // unintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      // 
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          if (!(typeof document !== 'undefined')) {
            {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
          }
          var evt = document.createEvent('Event');
          var didCall = false;
          // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.
          var didError = true;
          // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.
          var windowEvent = window.event;
          // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
          function restoreAfterDispatch() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false);
            // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.
            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }
          }
          // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.
          var error;
          // Use this to track whether the error event is ever called.
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error = event.error;
            didSetError = true;
            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {}
              }
            }
          }
          // Create a fake event type.
          var evtType = "react-" + (name ? name : 'invokeguardedcallback');
          // Attach our event handlers
          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false);
          // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
            }
            this.onError(error);
          }
          // Remove our event listeners
          window.removeEventListener('error', handleWindowError);
          if (!didCall) {
            // Something went really wrong, and our event was not dispatched.
            // https://github.com/facebook/react/issues/16734
            // https://github.com/facebook/react/issues/16585
            // Fall back to the production implementation.
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
    * Call a function while guarding against errors that happens within it.
    * Returns an error if it throws, otherwise null.
    *
    * In production, this is implemented using a try-catch. The reason we don't
    * use a try-catch directly is so that we can swap out a different
    * implementation in DEV mode.
    *
    * @param {String} name of the guard to use for logging or debugging
    * @param {Function} func The function to invoke
    * @param {*} context The context to use when calling the function
    * @param {...*} args Arguments for function
    */
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
    * Same as invokeGuardedCallback, but instead of returning an error, it stores
    * it in a global so it can be rethrown by `rethrowCaughtError` later.
    * TODO: See if caughtError and rethrowError can be unified.
    *
    * @param {String} name of the guard to use for logging or debugging
    * @param {Function} func The function to invoke
    * @param {*} context The context to use when calling the function
    * @param {...*} args Arguments for function
    */
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
    * During execution of guarded functions we will capture the first error which
    * we will rethrow to be handled by the top level error handler.
    */
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
    }
    /**
    * `ReactInstanceMap` maintains a mapping from a public facing stateful
    * instance (key) and the internal representation (value). This allows public
    * methods to accept the user facing instance as an argument and map them back
    * to internal methods.
    *
    * Note that this module is currently shared and assumed to be stateless.
    * If this becomes an actual Map, that will break.
    */
    function get(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== undefined;
    }
    function set(key, value) {
      key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /**/
    0;
    var PerformedWork = /**/
    1;
    // You can change the rest (and add more).
    var Placement = /**/
    2;
    var Update = /**/
    4;
    var PlacementAndUpdate = /**/
    6;
    var Deletion = /**/
    8;
    var ContentReset = /**/
    16;
    var Callback = /**/
    32;
    var DidCapture = /**/
    64;
    var Ref = /**/
    128;
    var Snapshot = /**/
    256;
    var Passive = /**/
    512;
    // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /**/
    8192;
    var Hydrating = /**/
    1024;
    var HydratingAndUpdate = /**/
    1028;
    // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /**/
    932;
    // Union of all host effects
    var HostEffectMask = /**/
    2047;
    // These are not really side effects, but we still reuse this field.
    var Incomplete = /**/
    2048;
    var ShouldCapture = /**/
    4096;
    var ForceUpdateForLegacySuspense = /**/
    16384;
    // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        var nextNode = node;
        do {
          node = nextNode;
          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
            // This is an insertion or in-progress hydration. The nearest possible
            // mounted fiber is the parent but we need to continue to figure out
            // if that one is still mounted.
            nearestMounted = node.return;
          }
          nextNode = node.return;
        } while (nextNode);
      } else {
        while (node.return) {
          node = node.return;
        }
      }
      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
      }
      // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current = fiber.alternate;
          if (current !== null) {
            suspenseState = current.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          if (!instance._warnedAboutRefsInRender) {
            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
          }
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (!(getNearestMountedFiber(fiber) === fiber)) {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var nearestMounted = getNearestMountedFiber(fiber);
        if (!(nearestMounted !== null)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          // We're at the root.
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          // There is no alternate. This is an unusual case. Currently, it only
          // happens when a Suspense component is hidden. An extra fragment fiber
          // is inserted in between the Suspense fiber and its children. Skip
          // over this extra fragment fiber and proceed to the next parent.
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          // If there's no parent, we're at the root.
          break;
        }
        // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.
          {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          // 
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
        }
        if (!(a.alternate === b)) {
          {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.
      if (!(a.tag === HostRoot)) {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      }
      // Otherwise B has to be current branch.
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }
      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      if (!currentParent) {
        return null;
      }
      // Next we'll drill down this component to find the first HostComponent/Text.
      var node = currentParent;
      while (true) {
        if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === currentParent) {
          return null;
        }
        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable
      return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
      var node = childFiber;
      var parentFiberAlternate = parentFiber.alternate;
      while (node !== null) {
        if (node === parentFiber || node === parentFiberAlternate) {
          return true;
        }
        node = node.return;
      }
      return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
      attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false;
    // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = [];
    // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map();
    // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
      return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
    'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
    function isReplayableDiscreteEvent(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn: blockedOn,
        domEventName: domEventName,
        eventSystemFlags: eventSystemFlags | IS_REPLAYED,
        nativeEvent: nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
      queuedDiscreteEvents.push(queuedEvent);
    }
    // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'focusin':
        case 'focusout':
          queuedFocus = null;
          break;
        case 'dragenter':
        case 'dragleave':
          queuedDrag = null;
          break;
        case 'mouseover':
        case 'mouseout':
          queuedMouse = null;
          break;
        case 'pointerover':
        case 'pointerout':
          {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
        case 'gotpointercapture':
        case 'lostpointercapture':
          {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            // Attempt to increase the priority of this target.
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      // If we have already queued this exact event, then it's because
      // the different event systems have different DOM event listeners.
      // We can accumulate the flags, and the targetContainers, and
      // store a single event to be replayed.
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      // These set relatedTarget to null because the replayed event will be treated as if we
      // moved from outside the window (no target) onto the target once it hydrates.
      // Instead of mutating we could clone the event.
      switch (domEventName) {
        case 'focusin':
          {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
        case 'dragenter':
          {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
        case 'mouseover':
          {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
        case 'pointerover':
          {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
        case 'gotpointercapture':
          {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
      }
      return false;
    }
    // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
      // TODO: This function shares a lot of logic with attemptToDispatchEvent.
      // Try to unify them. It's a bit tricky since it would require two return
      // values.
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              // We're blocked on hydrating this boundary.
              // Increase its priority.
              queuedTarget.blockedOn = instance;
              attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root = nearestMounted.stateNode;
            if (root.hydrate) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              // We don't currently have a way to increase the priority of
              // a root other than sync.
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn !== null) {
          // We're still blocked. Try again later.
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        // This target container was successfully dispatched. Try the next.
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      // First replay discrete events.
      while (queuedDiscreteEvents.length > 0) {
        var nextDiscreteEvent = queuedDiscreteEvents[0];
        if (nextDiscreteEvent.blockedOn !== null) {
          // We're still blocked.
          // Increase the priority of this boundary to unblock
          // the next discrete event.
          var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
          if (_fiber4 !== null) {
            attemptUserBlockingHydration(_fiber4);
          }
          break;
        }
        var targetContainers = nextDiscreteEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            // We're still blocked. Try again later.
            nextDiscreteEvent.blockedOn = nextBlockedOn;
            break;
          }
          // This target container was successfully dispatched. Try the next.
          targetContainers.shift();
        }
        if (nextDiscreteEvent.blockedOn === null) {
          // We've successfully replayed the first event. Let's try the next one.
          queuedDiscreteEvents.shift();
        }
      }
      // Next replay any continuous events.
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          // Schedule a callback to attempt replaying as many events as are
          // now unblocked. This first might not actually be unblocked yet.
          // We could check it early to avoid scheduling an unnecessary callback.
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      // Mark anything that was blocked on this as no longer blocked
      // and eligible for a replay.
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        // This is a exponential search for each boundary that commits. I think it's
        // worth it because we expect very few discrete events to queue up and once
        // we are actually fully unblocked it will be fast to replay them.
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function (queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          // We're still blocked.
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            // We're unblocked.
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
    * Generate a mapping of standard vendor prefixes using the defined style property and event name.
    *
    * @param {string} styleProp
    * @param {string} eventName
    * @returns {object}
    */
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
    * A list of event names to a configurable list of vendor prefixes.
    */
    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
    * Event names that have already been detected and prefixed (if applicable).
    */
    var prefixedEventNames = {};
    /**
    * Element to check for prefixes on.
    */
    var style = {};
    /**
    * Bootstrap if a DOM exists.
    */
    if (canUseDOM) {
      style = document.createElement('div').style;
      // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.
      if (!(('AnimationEvent' in window))) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      // Same as above
      if (!(('TransitionEvent' in window))) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
    * Attempts to determine the correct vendor prefixed event name.
    *
    * @param {string} eventName
    * @returns {string}
    */
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && (styleProp in style)) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map();
    // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
    'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
    'focusout', 'blur', // Careful!
    'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
    var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];
    var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel'];
    // prettier-ignore
    var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
    /**
    * Turns
    * ['abort', ...]
    *
    * into
    *
    * topLevelEventsToReactNames = new Map([
    *   ['abort', 'onAbort'],
    * ]);
    *
    * and registers them.
    */
    function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
      // As the event types are in pairs of two, we need to iterate
      // through in twos. The events are in pairs of two to save code
      // and improve init perf of processing this array, as it will
      // result in far fewer object allocations and property accesses
      // if we only use three arrays to process all the categories of
      // instead of tuples.
      for (var i = 0; i < eventTypes.length; i += 2) {
        var topEvent = eventTypes[i];
        var event = eventTypes[i + 1];
        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
        var reactName = 'on' + capitalizedEvent;
        eventPriorities.set(topEvent, priority);
        topLevelEventsToReactNames.set(topEvent, reactName);
        registerTwoPhaseEvent(reactName, [topEvent]);
      }
    }
    function setEventPriorities(eventTypes, priority) {
      for (var i = 0; i < eventTypes.length; i++) {
        eventPriorities.set(eventTypes[i], priority);
      }
    }
    function getEventPriorityForPluginSystem(domEventName) {
      var priority = eventPriorities.get(domEventName);
      // Default to a ContinuousEvent. Note: we might
      // want to warn if we can't detect the priority
      // for the event.
      return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
      registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
      registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
      registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
      setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    {
      // Provide explicit error message when production+profiling bundle of e.g.
      // react-dom is used with production (non-profiling) bundle of
      // scheduler/tracing
      if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
        {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
          // ascending numbers so we can compare them like numbers. They start at 90 to
      // avoid clashing with Scheduler's priorities.
}
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95;
    // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now();
    // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /**/
    0;
    var NoLane = /**/
    0;
    var SyncLane = /**/
    1;
    var SyncBatchedLane = /**/
    2;
    var InputDiscreteHydrationLane = /**/
    4;
    var InputDiscreteLanes = /**/
    24;
    var InputContinuousHydrationLane = /**/
    32;
    var InputContinuousLanes = /**/
    192;
    var DefaultHydrationLane = /**/
    256;
    var DefaultLanes = /**/
    3584;
    var TransitionHydrationLane = /**/
    4096;
    var TransitionLanes = /**/
    4186112;
    var RetryLanes = /**/
    62914560;
    var SomeRetryLane = /**/
    33554432;
    var SelectiveHydrationLane = /**/
    67108864;
    var NonIdleLanes = /**/
    134217727;
    var IdleHydrationLane = /**/
    134217728;
    var IdleLanes = /**/
    805306368;
    var OffscreenLane = /**/
    1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {}
    // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
      if ((SyncLane & lanes) !== NoLanes) {
        return_highestLanePriority = SyncLanePriority;
        return SyncLane;
      }
      if ((SyncBatchedLane & lanes) !== NoLanes) {
        return_highestLanePriority = SyncBatchedLanePriority;
        return SyncBatchedLane;
      }
      if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
        return_highestLanePriority = InputDiscreteHydrationLanePriority;
        return InputDiscreteHydrationLane;
      }
      var inputDiscreteLanes = InputDiscreteLanes & lanes;
      if (inputDiscreteLanes !== NoLanes) {
        return_highestLanePriority = InputDiscreteLanePriority;
        return inputDiscreteLanes;
      }
      if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
        return_highestLanePriority = InputContinuousHydrationLanePriority;
        return InputContinuousHydrationLane;
      }
      var inputContinuousLanes = InputContinuousLanes & lanes;
      if (inputContinuousLanes !== NoLanes) {
        return_highestLanePriority = InputContinuousLanePriority;
        return inputContinuousLanes;
      }
      if ((lanes & DefaultHydrationLane) !== NoLanes) {
        return_highestLanePriority = DefaultHydrationLanePriority;
        return DefaultHydrationLane;
      }
      var defaultLanes = DefaultLanes & lanes;
      if (defaultLanes !== NoLanes) {
        return_highestLanePriority = DefaultLanePriority;
        return defaultLanes;
      }
      if ((lanes & TransitionHydrationLane) !== NoLanes) {
        return_highestLanePriority = TransitionHydrationPriority;
        return TransitionHydrationLane;
      }
      var transitionLanes = TransitionLanes & lanes;
      if (transitionLanes !== NoLanes) {
        return_highestLanePriority = TransitionPriority;
        return transitionLanes;
      }
      var retryLanes = RetryLanes & lanes;
      if (retryLanes !== NoLanes) {
        return_highestLanePriority = RetryLanePriority;
        return retryLanes;
      }
      if (lanes & SelectiveHydrationLane) {
        return_highestLanePriority = SelectiveHydrationLanePriority;
        return SelectiveHydrationLane;
      }
      if ((lanes & IdleHydrationLane) !== NoLanes) {
        return_highestLanePriority = IdleHydrationLanePriority;
        return IdleHydrationLane;
      }
      var idleLanes = IdleLanes & lanes;
      if (idleLanes !== NoLanes) {
        return_highestLanePriority = IdleLanePriority;
        return idleLanes;
      }
      if ((OffscreenLane & lanes) !== NoLanes) {
        return_highestLanePriority = OffscreenLanePriority;
        return OffscreenLane;
      }
      {
        error('Should have found matching lanes. This is a bug in React.');
              // This shouldn't be reachable, but as a fallback, return the entire bitmask.
}
      // This shouldn't be reachable, but as a fallback, return the entire bitmask.
      return_highestLanePriority = DefaultLanePriority;
      return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
      switch (schedulerPriorityLevel) {
        case ImmediatePriority:
          return SyncLanePriority;
        case UserBlockingPriority:
          return InputContinuousLanePriority;
        case NormalPriority:
        case LowPriority:
          // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
          return DefaultLanePriority;
        case IdlePriority:
          return IdleLanePriority;
        default:
          return NoLanePriority;
      }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
      switch (lanePriority) {
        case SyncLanePriority:
        case SyncBatchedLanePriority:
          return ImmediatePriority;
        case InputDiscreteHydrationLanePriority:
        case InputDiscreteLanePriority:
        case InputContinuousHydrationLanePriority:
        case InputContinuousLanePriority:
          return UserBlockingPriority;
        case DefaultHydrationLanePriority:
        case DefaultLanePriority:
        case TransitionHydrationPriority:
        case TransitionPriority:
        case SelectiveHydrationLanePriority:
        case RetryLanePriority:
          return NormalPriority;
        case IdleHydrationLanePriority:
        case IdleLanePriority:
        case OffscreenLanePriority:
          return IdlePriority;
        case NoLanePriority:
          return NoPriority;
        default:
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
      }
    }
    function getNextLanes(root, wipLanes) {
      // Early bailout if there's no pending work left.
      var pendingLanes = root.pendingLanes;
      if (pendingLanes === NoLanes) {
        return_highestLanePriority = NoLanePriority;
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var nextLanePriority = NoLanePriority;
      var expiredLanes = root.expiredLanes;
      var suspendedLanes = root.suspendedLanes;
      var pingedLanes = root.pingedLanes;
      // Check if any work has expired.
      if (expiredLanes !== NoLanes) {
        nextLanes = expiredLanes;
        nextLanePriority = return_highestLanePriority = SyncLanePriority;
      } else {
        // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            nextLanePriority = return_highestLanePriority;
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              nextLanePriority = return_highestLanePriority;
            }
          }
        } else {
          // The only remaining work is Idle.
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
            nextLanePriority = return_highestLanePriority;
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
              nextLanePriority = return_highestLanePriority;
            }
          }
        }
      }
      if (nextLanes === NoLanes) {
        // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
      }
      // If there are higher priority lanes, we'll include them even if they
      // are suspended.
      nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
      // If we're already in the middle of a render, switching lanes will interrupt
      // it and we'll lose our progress. We should only do this if the new lanes are
      // higher priority.
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (wipLanes & suspendedLanes) === NoLanes) {
        getHighestPriorityLanes(wipLanes);
        var wipLanePriority = return_highestLanePriority;
        if (nextLanePriority <= wipLanePriority) {
          return wipLanes;
        } else {
          return_highestLanePriority = nextLanePriority;
        }
      }
      // Check for entangled lanes and add them to the batch.
      // 
      // A lane is said to be entangled with another when it's not allowed to render
      // in a batch that does not also include the other lane. Typically we do this
      // when multiple updates have the same source, and we only want to respond to
      // the most recent event from that source.
      // 
      // Note that we apply entanglements *after* checking for partial work above.
      // This means that if a lane is entangled during an interleaved event while
      // it's already rendering, we won't interrupt it. This is intentional, since
      // entanglement is usually "best effort": we'll try our best to render the
      // lanes in the same batch, but it's not worth throwing out partially
      // completed work in order to do it.
      // 
      // For those exceptions where entanglement is semantically important, like
      // useMutableSource, we should ensure that there is no partial work at the
      // time we apply the entanglement.
      var entangledLanes = root.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          nextLanes |= entanglements[index];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
      var eventTimes = root.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        var eventTime = eventTimes[index];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      // TODO: Expiration heuristic is constant per lane, so could use a map.
      getHighestPriorityLanes(lane);
      var priority = return_highestLanePriority;
      if (priority >= InputContinuousLanePriority) {
        // User interactions should expire slightly more quickly.
        // 
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        // 
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        // 
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
      } else if (priority >= TransitionPriority) {
        return currentTime + 5000;
      } else {
        // Anything idle priority or lower should never expire.
        return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
      // TODO: This gets called every time we yield. We can optimize by storing
      // the earliest expiration time on the root. Then use that to quickly bail out
      // of this function.
      var pendingLanes = root.pendingLanes;
      var suspendedLanes = root.suspendedLanes;
      var pingedLanes = root.pingedLanes;
      var expirationTimes = root.expirationTimes;
      // Iterate through the pending lanes and check if we've reached their
      // expiration time. If so, we'll assume the update is being starved and mark
      // it as expired to force it to finish.
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        var expirationTime = expirationTimes[index];
        if (expirationTime === NoTimestamp) {
          // Found a pending lane with no expiration time. If it's not suspended, or
          // if it's pinged, assume it's CPU-bound. Compute a new expiration time
          // using the current time.
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            // Assumes timestamps are monotonically increasing.
            expirationTimes[index] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          // This lane expired
          root.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function returnNextLanesPriority() {
      return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
      switch (lanePriority) {
        case NoLanePriority:
          break;
        case SyncLanePriority:
          return SyncLane;
        case SyncBatchedLanePriority:
          return SyncBatchedLane;
        case InputDiscreteLanePriority:
          {
            var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
            if (_lane === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(InputContinuousLanePriority, wipLanes);
            }
            return _lane;
          }
        case InputContinuousLanePriority:
          {
            var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
            if (_lane2 === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(DefaultLanePriority, wipLanes);
            }
            return _lane2;
          }
        case DefaultLanePriority:
          {
            var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
            if (_lane3 === NoLane) {
              // If all the default lanes are already being worked on, look for a
              // lane in the transition range.
              _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                // All the transition lanes are taken, too. This should be very
                // rare, but as a last resort, pick a default lane. This will have
                // the effect of interrupting the current work-in-progress render.
                _lane3 = pickArbitraryLane(DefaultLanes);
              }
            }
            return _lane3;
          }
        case TransitionPriority:
        case RetryLanePriority:
          // Should be handled by findRetryLane instead
          break;
        case IdleLanePriority:
          var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(IdleLanes);
          }
          return lane;
      }
      {
        {
          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
      }
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
      // First look for lanes that are completely unclaimed, i.e. have no
      // pending work.
      var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
      if (lane === NoLane) {
        // If all lanes have pending work, look for a lane that isn't currently
        // being worked on.
        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
        if (lane === NoLane) {
          // If everything is being worked on, pick any lane. This has the
          // effect of interrupting the current work-in-progress.
          lane = pickArbitraryLane(TransitionLanes);
        }
      }
      return lane;
    }
    // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
      // This is a fork of `findUpdateLane` designed specifically for Suspense
      // "retries" — a special update that attempts to flip a Suspense boundary
      // from its placeholder state to its primary/resolved state.
      var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
      if (lane === NoLane) {
        lane = pickArbitraryLane(RetryLanes);
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
      // This finds the most significant non-zero bit.
      var index = 31 - clz32(lanes);
      return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
      return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
      // This wrapper function gets inlined. Only exists so to communicate that it
      // doesn't matter which bit is selected; you can pick any bit without
      // affecting the algorithms where its used. Here I'm using
      // getHighestPriorityLane because it requires the fewest operations.
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
      return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set, subset) {
      return set & ~subset;
    }
    // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      // This works because the bit ranges decrease in priority as you go left.
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      // Intentionally pushing one by one.
      // https://v8.dev/blog/elements-kinds#avoid-creating-holes
      var laneMap = [];
      for (var i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
      root.pendingLanes |= updateLane;
      // TODO: Theoretically, any update to any lane can unblock any other lane. But
      // it's not practical to try every single possible combination. We need a
      // heuristic to decide which lanes to attempt to render, and in which batches.
      // For now, we use the same heuristic as in the old ExpirationTimes model:
      // retry any lane at equal or lower priority, but don't try updates at higher
      // priority without also including the lower priority updates. This works well
      // when considering updates across different priority levels, but isn't
      // sufficient for updates within the same priority, since we want to treat
      // those updates as parallel.
      // Unsuspend any update at equal or lower priority.
      var higherPriorityLanes = updateLane - 1;
      // Turns 0b1000 into 0b0111
      root.suspendedLanes &= higherPriorityLanes;
      root.pingedLanes &= higherPriorityLanes;
      var eventTimes = root.eventTimes;
      var index = laneToIndex(updateLane);
      // We can always overwrite an existing timestamp because we prefer the most
      // recent event, and we assume time is monotonically increasing.
      eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;
      // The suspended lanes are no longer CPU-bound. Clear their expiration times.
      var expirationTimes = root.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        expirationTimes[index] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
      root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
      return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
      root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
      root.pendingLanes = remainingLanes;
      // Let's try everything again
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.mutableReadLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      var entanglements = root.entanglements;
      var eventTimes = root.eventTimes;
      var expirationTimes = root.expirationTimes;
      // Clear the lanes that no longer have pending work
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        entanglements[index] = NoLanes;
        eventTimes[index] = NoTimestamp;
        expirationTimes[index] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root, entangledLanes) {
      root.entangledLanes |= entangledLanes;
      var entanglements = root.entanglements;
      var lanes = entangledLanes;
      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        entanglements[index] |= entangledLanes;
        lanes &= ~lane;
      }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
      if (lanes === 0) {
        return 32;
      }
      return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
    // TODO: can we stop exporting these?
    var _enabled = true;
    // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriorityForPluginSystem(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEvent:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case UserBlockingEvent:
          listenerWrapper = dispatchUserBlockingUpdate;
          break;
        case ContinuousEvent:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
      }
      discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
      {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      var allowReplay = true;
      {
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
      }
      if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
        // If we already have a queue of discrete events, and this is another discrete
        // event, then we can't dispatch it regardless of its target, since they
        // need to dispatch in order.
        queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
        domEventName, eventSystemFlags, targetContainer, nativeEvent);
        return;
      }
      var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        // We successfully dispatched this event.
        if (allowReplay) {
          clearIfContinuousEvent(domEventName, nativeEvent);
        }
        return;
      }
      if (allowReplay) {
        if (isReplayableDiscreteEvent(domEventName)) {
          // This this to be replayed later once the target is available.
          queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          return;
        }
        // We need to clear only if we didn't queue because
        // queueing is accummulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
      }
      // This is not replayable so we'll invoke it but without a target,
      // in case the event system needs to trace it.
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      // TODO: Warn if _enabled is false.
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          // This tree has been unmounted already. Dispatch without a target.
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              // Queue the event to be replayed later. Abort dispatching since we
              // don't want this event dispatched twice through the event system.
              // TODO: If this is the first discrete event in the queue. Schedule an increased
              // priority for this boundary.
              return instance;
            }
            // This shouldn't happen, something went wrong but to avoid blocking
            // the whole system, dispatch the event without a target.
            // TODO: Warn.
            targetInst = null;
          } else if (tag === HostRoot) {
            var root = nearestMounted.stateNode;
            if (root.hydrate) {
              // If this happens during a replay something went wrong and it might block
              // the whole system.
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            // If we get an event (ex: img onload) before committing that
            // component's mount, ignore it for now (that is, treat it as if it was an
            // event on a non-React tree). We might also consider queueing events and
            // dispatching them after the mount.
            targetInst = null;
          }
        }
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
      // We're not blocked on anything.
      return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive: passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive: passive
      });
      return listener;
    }
    /**
    * These variables store information about text content of a target node,
    * allowing comparison of content before and after a given event.
    *
    * Identify the node where selection currently begins, then observe
    * both its text content and its current position in the DOM. Since the
    * browser may natively replace the target node during composition, we can
    * use its position to find its replacement.
    *
    *
    */
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if (('value' in root)) {
        return root.value;
      }
      return root.textContent;
    }
    /**
    * `charCode` represents the actual "character code" and is safe to use with
    * `String.fromCharCode`. As such, only keys that correspond to printable
    * characters produce a valid `charCode`, the only exception to this is Enter.
    * The Tab-key is considered non-printable and does not have a `charCode`,
    * presumably because it does not produce a tab-character in browsers.
    *
    * @param {object} nativeEvent Native browser event.
    * @return {number} Normalized `charCode` property.
    */
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if (('charCode' in nativeEvent)) {
        charCode = nativeEvent.charCode;
        // FF does not set `charCode` for the Enter-key, check against `keyCode`.
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      }
      // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.
      if (charCode === 10) {
        charCode = 13;
      }
      // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
      /**
      * Synthetic events are dispatched by event plugins, typically in response to a
      * top-level event delegation handler.
      *
      * These systems should generally use pooling to reduce the frequency of garbage
      * collection. The system should check `isPersistent` to determine whether the
      * event should be released into the pool after being dispatched. Users that
      * need a persisted event should invoke `persist`.
      *
      * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
      * normalizing browser quirks. Subclasses do not necessarily have to implement a
      * DOM interface; custom application-specific events can also subclass this.
      */
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize = Interface[_propName];
          if (normalize) {
            this[_propName] = normalize(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      _assign(SyntheticBaseEvent.prototype, {
        preventDefault: function () {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== 'unknown') {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function () {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== 'unknown') {
            // The ChangeEventPlugin registers a "propertychange" event for
            // IE. This event does not support bubbling or cancelling, and
            // any references to cancelBubble throw "Member not found".  A
            // typeof check of "unknown" circumvents this issue (and is also
            // IE specific).
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
        * We release all dispatched `SyntheticEvent`s after each event loop, adding
        * them back into the pool. This allows a way to hold onto a reference that
        * won't be added back into the pool.
        */
        persist: function () {},
        /**
        * Checks if this event should be released back into the pool.
        *
        * @return {boolean} True if this should not be released, false otherwise.
        */
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    /**
    * @interface Event
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === 'mousemove') {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    /**
    * @interface MouseEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var MouseEventInterface = _assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function (event) {
        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function (event) {
        if (('movementX' in event)) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function (event) {
        if (('movementY' in event)) {
          return event.movementY;
        }
        // Don't need to call updateMouseMovementPolyfillState() here
        // because it's guaranteed to have already run when movementX
        // was copied.
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
    * @interface DragEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var DragEventInterface = _assign({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
    * @interface FocusEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var FocusEventInterface = _assign({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
    * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
    */
    var AnimationEventInterface = _assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/clipboard-apis/
    */
    var ClipboardEventInterface = _assign({}, EventInterface, {
      clipboardData: function (event) {
        return ('clipboardData' in event) ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
    */
    var CompositionEventInterface = _assign({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
    *      /#events-inputevents
    */
    // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
    * Normalization of deprecated HTML5 `key` values
    * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
    */
    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
    * Translation from legacy `keyCode` to HTML5 `key`
    * Only special keys supported, all others depend on keyboard layout or browser
    * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
    */
    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
    * @param {object} nativeEvent Native browser event.
    * @return {string} Normalized `key` property.
    */
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== 'Unidentified') {
          return key;
        }
      }
      // Browser does not implement `key`, polyfill as much of it as we can.
      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent);
        // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.
        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }
      return '';
    }
    /**
    * Translation from modifier key to the associated property in the event.
    * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
    */
    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    };
    // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    /**
    * @interface KeyboardEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var KeyboardEventInterface = _assign({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
    * @interface PointerEvent
    * @see http://www.w3.org/TR/pointerevents/
    */
    var PointerEventInterface = _assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
    * @interface TouchEvent
    * @see http://www.w3.org/TR/touch-events/
    */
    var TouchEventInterface = _assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
    * @interface Event
    * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
    * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
    */
    var TransitionEventInterface = _assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
    * @interface WheelEvent
    * @see http://www.w3.org/TR/DOM-Level-3-Events/
    */
    var WheelEventInterface = _assign({}, MouseEventInterface, {
      deltaX: function (event) {
        return ('deltaX' in event) ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        ('wheelDeltaX' in event) ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return ('deltaY' in event) ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        ('wheelDeltaY' in event) ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        ('wheelDelta' in event) ? -event.wheelDelta : 0;
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && ('CompositionEvent' in window);
    var documentMode = null;
    if (canUseDOM && ('documentMode' in document)) {
      documentMode = document.documentMode;
    }
    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && ('TextEvent' in window) && !documentMode;
    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
      registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
      registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
      registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
    }
    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
    * Return whether a native keypress event is assumed to be a command.
    * This is required because Firefox fires `keypress` events for key commands
    * (cut, copy, select-all, etc.) even though no character is inserted.
    */
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
    * Translate native top level events into event types.
    */
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case 'compositionstart':
          return 'onCompositionStart';
        case 'compositionend':
          return 'onCompositionEnd';
        case 'compositionupdate':
          return 'onCompositionUpdate';
      }
    }
    /**
    * Does our fallback best-guess model think this event signifies that
    * composition has begun?
    */
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
    * Does our fallback mode think that this event is the end of composition?
    */
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'keyup':
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case 'keydown':
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;
        case 'keypress':
        case 'mousedown':
        case 'focusout':
          // Events are not possible without cancelling IME.
          return true;
        default:
          return false;
      }
    }
    /**
    * Google Input Tools provides composition data via a CustomEvent,
    * with the `data` property populated in the `detail` object. If this
    * is available on the event object, use it. If not, this is a plain
    * composition event and we have nothing special to extract.
    *
    * @param {object} nativeEvent
    * @return {?string}
    */
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === 'object' && ('data' in detail)) {
        return detail.data;
      }
      return null;
    }
    /**
    * Check if a composition event was triggered by Korean IME.
    * Our fallback mode does not work well with IE's Korean IME,
    * so just use native composition events when Korean IME is used.
    * Although CompositionEvent.locale property is deprecated,
    * it is available in IE, where our fallback mode is enabled.
    *
    * @param {object} nativeEvent
    * @return {boolean}
    */
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    }
    // Track the current IME composition status, if any.
    var isComposing = false;
    /**
    * @return {?object} A SyntheticCompositionEvent.
    */
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = 'onCompositionStart';
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = 'onCompositionEnd';
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === 'onCompositionStart') {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === 'onCompositionEnd') {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
        if (fallbackData) {
          // Inject data generated from fallback path into the synthetic event.
          // This matches the property of native CompositionEventInterface.
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case 'compositionend':
          return getDataFromCustomEvent(nativeEvent);
        case 'keypress':
          /**
          * If native `textInput` events are available, our goal is to make
          * use of them. However, there is a special case: the spacebar key.
          * In Webkit, preventing default on a spacebar `textInput` event
          * cancels character insertion, but it *also* causes the browser
          * to fall back to its default spacebar behavior of scrolling the
          * page.
          *
          * Tracking at:
          * https://code.google.com/p/chromium/issues/detail?id=355103
          *
          * To avoid this issue, use the keypress event as if no `textInput`
          * event is available.
          */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case 'textInput':
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data;
          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars;
        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
    * For browsers that do not provide the `textInput` event, extract the
    * appropriate string to use for SyntheticInputEvent.
    */
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }
      switch (domEventName) {
        case 'paste':
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;
        case 'keypress':
          /**
          * As of v27, Firefox may fire keypress events even when no character
          * will be inserted. A few possibilities:
          *
          * - `which` is `0`. Arrow keys, Esc key, etc.
          *
          * - `which` is the pressed key code, but no char is available.
          *   Ex: 'AltGr + d` in Polish. There is no modified character for
          *   this key combination and no character is inserted into the
          *   document, but FF fires the keypress for char code `100` anyway.
          *   No `input` event will occur.
          *
          * - `which` is the pressed key code, but a command combination is
          *   being used. Ex: `Cmd+C`. No character is inserted, and no
          *   `input` event will occur.
          */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case 'compositionend':
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    /**
    * Extract a SyntheticInputEvent for `beforeInput`, based on either native
    * `textInput` or fallback behavior.
    *
    * @return {?object} A SyntheticInputEvent.
    */
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      // If no characters are being inserted, no BeforeInput event should
      // be fired.
      if (!chars) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
        event.data = chars;
      }
    }
    /**
    * Create an `onBeforeInput` event to match
    * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
    *
    * This event plugin is based on the native `textInput` event
    * available in Chrome, Safari, Opera, and IE. This event fires after
    * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
    *
    * `beforeInput` is spec'd but not implemented in any browsers, and
    * the `input` event does not provide any useful information about what has
    * actually been added, contrary to the spec. Thus, `textInput` is the best
    * available event to identify the characters that have actually been inserted
    * into the target node.
    *
    * This plugin is also responsible for emitting `composition` events, thus
    * allowing us to share composition fallback code for both `beforeInput` and
    * `composition` event types.
    */
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
    * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
    */
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === 'textarea') {
        return true;
      }
      return false;
    }
    /**
    * Checks if an event is supported in the current execution environment.
    *
    * NOTE: This will not work correctly for non-generic events such as `change`,
    * `reset`, `load`, `error`, and `select`.
    *
    * Borrows from Modernizr.
    *
    * @param {string} eventNameSuffix Event name, e.g. "click".
    * @return {boolean} True if the event is supported.
    * @internal
    * @license Modernizr 3.0.0pre (Custom Build) | MIT
    */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = 'on' + eventNameSuffix;
      var isSupported = (eventName in document);
      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      // Flag this event loop as needing state restore.
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
      if (listeners.length > 0) {
        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
      }
    }
    /**
    * For IE shims
    */
    var activeElement = null;
    var activeElementInst = null;
    /**
    * SECTION: handle `change` event
    */
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      // 
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === 'change') {
        return targetInst;
      }
    }
    /**
    * SECTION: handle `input` event
    */
    var isInputEventSupported = false;
    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
    * (For IE <=9) Starts tracking propertychange events on the passed-in element
    * and override the value property so that we can distinguish user events from
    * value changes in JS.
    */
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
    * (For IE <=9) Removes the event listeners from the currently-tracked element,
    * if any exists.
    */
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
    * (For IE <=9) Handles a propertychange event, sending a `change` event if
    * the value of the active element has changed.
    */
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === 'focusin') {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        // 
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === 'focusout') {
        stopWatchingForValueChange();
      }
    }
    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        // 
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
    * SECTION: handle `click` event
    */
    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === 'click') {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === 'input' || domEventName === 'change') {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node) {
      var state = node._wrapperState;
      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }
      {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
    * This plugin creates an `onChange` event that normalizes change events
    * across form elements. This event fires at a time when it's possible to
    * change the element's value without seeing a flicker.
    *
    * Supported elements are:
    * - input (see `isTextInputElement`)
    * - textarea
    * - select
    */
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      // When blurring, set the value attribute for number inputs
      if (domEventName === 'focusout') {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
      registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
      registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
      registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
    }
    /**
    * For almost every interaction we care about, there will be both a top-level
    * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
    * we do not extract duplicate events. However, moving the mouse into the
    * browser from outside will not fire a `mouseout` event. In this case, we use
    * the `mouseover` top-level event.
    */
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
      if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
        // If this is an over event with a target, we might have already dispatched
        // the event in the out event of the other target. If this is replayed,
        // then it's because we couldn't dispatch against this target previously
        // so we have to do it now instead.
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          // If the related node is managed by React, we can assume that we have
          // already dispatched the corresponding events during its mouseout.
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        // Must not be a mouse or pointer in or out - ignoring.
        return;
      }
      var win;
      // TODO: why is this nullable in the types but we read from it?
      if (nativeEventTarget.window === nativeEventTarget) {
        // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        // Moving to a node from outside the window.
        from = null;
        to = targetInst;
      }
      if (from === to) {
        // Nothing pertains to our managed components.
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = 'onMouseLeave';
      var enterEventType = 'onMouseEnter';
      var eventTypePrefix = 'mouse';
      if (domEventName === 'pointerout' || domEventName === 'pointerover') {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = 'onPointerLeave';
        enterEventType = 'onPointerEnter';
        eventTypePrefix = 'pointer';
      }
      var fromNode = from == null ? win : getNodeFromInstance(from);
      var toNode = to == null ? win : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      // We should only process this nativeEvent if we are processing
      // the first ancestor. Next time, we will ignore the event.
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
    * inlined Object.is polyfill to avoid requiring consumers ship their own
    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    */
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
    * Performs equality by iterating through keys on an object and returning false
    * when any key has values which are not strictly equal between the arguments.
    * Returns true when the values of all keys are strictly equal.
    */
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      // Test for A's keys different from B.
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    /**
    * Given any node return the first leaf node without children.
    *
    * @param {DOMElement|DOMTextNode} node
    * @return {DOMElement|DOMTextNode}
    */
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }
    /**
    * Get the next sibling within a container. This will walk up the
    * DOM if a node's siblings have been exhausted.
    *
    * @param {DOMElement|DOMTextNode} node
    * @return {?DOMElement|DOMTextNode}
    */
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }
    /**
    * Get object describing the nodes which contain characters at offset.
    *
    * @param {DOMElement|DOMTextNode} root
    * @param {number} offset
    * @return {?object}
    */
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
    * @param {DOMElement} outerNode
    * @return {?object}
    */
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
      try {
        /*eslint-disable no-unused-expressions*/
        anchorNode.nodeType;
        focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
    * Returns {start, end} where `start` is the character/codepoint index of
    * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
    * `end` is the index of (focusNode, focusOffset).
    *
    * Returns null if you pass in garbage input but we should probably just crash.
    *
    * Exported only for testing.
    */
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;
      outer: while (true) {
        var next = null;
        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }
          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }
          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }
          if ((next = node.firstChild) === null) {
            break;
          }
          // Moving from `node` to its first child `next`.
          parentNode = node;
          node = next;
        }
        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }
          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }
          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }
          if ((next = node.nextSibling) !== null) {
            break;
          }
          node = parentNode;
          parentNode = node.parentNode;
        }
        // Moving from `node` to its next sibling `next`.
        node = next;
      }
      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }
      return {
        start: start,
        end: end
      };
    }
    /**
    * In modern non-IE browsers, we can support both forward and backward
    * selections.
    *
    * Note: IE10+ supports the Selection object, but it does not support
    * the `extend` method, which means that even in modern IE, it's not possible
    * to programmatically create a backward selection. Thus, for all IE
    * versions, we use the old IE API to create our selections.
    *
    * @param {DOMElement|DOMTextNode} node
    * @param {object} offsets
    */
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)
      if (!win.getSelection) {
        return;
      }
      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
      // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if (('contains' in outerNode)) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
      try {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute.
        // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
        // iframe.contentDocument.defaultView;
        // A safety way is to access one of the cross origin properties: Window or Location
        // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
        // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
        return typeof iframe.contentWindow.location.href === 'string';
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    /**
    * @ReactInputSelection: React input selection module. Based on Selection.js,
    * but modified to be suitable for react and has a couple of bug fixes (doesn't
    * assume buttons have range selections allowed).
    * Input selection module for React.
    */
    /**
    * @hasSelectionCapabilities: we get the element types that support selection
    * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
    * and `selectionEnd` rows.
    */
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    /**
    * @restoreSelection: If any selection information was potentially lost,
    * restore it. This is useful when performing operations that could remove dom
    * nodes and place them back in, resulting in focus being lost.
    */
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        // Focusing a node can change the scroll position, which is undesirable
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }
        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
    * @getSelection: Gets the selection bounds of a focused textarea, input or
    * contentEditable node.
    * -@input: Look up selection bounds of this input
    * -@return {start: selectionStart, end: selectionEnd}
    */
    function getSelection(input) {
      var selection;
      if (('selectionStart' in input)) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }
      return selection || ({
        start: 0,
        end: 0
      });
    }
    /**
    * @setSelection: Sets the selection bounds of a textarea or input and focuses
    * the input.
    * -@input     Set selection bounds of this input or textarea
    * -@offsets   Object of same form that is returned from get*
    */
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === undefined) {
        end = start;
      }
      if (('selectionStart' in input)) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && ('documentMode' in document) && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
    * Get an object which is a unique representation of the current selection.
    *
    * The return value will not be consistent across nodes or browsers, but
    * two identical selections on the same node will return identical objects.
    */
    function getSelection$1(node) {
      if (('selectionStart' in node) && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
    * Get document associated with the event target.
    */
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
    * Poll selection to see whether it's changed.
    *
    * @param {object} nativeEvent
    * @param {object} nativeEventTarget
    * @return {?SyntheticEvent}
    */
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      // Only fire when selection has actually changed.
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
        if (listeners.length > 0) {
          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: event,
            listeners: listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    /**
    * This plugin creates an `onSelect` event that normalizes select events
    * across form elements.
    *
    * Supported elements are:
    * - input (see `isTextInputElement`)
    * - textarea
    * - contentEditable
    *
    * This differs from native browser implementations in the following ways:
    * - Fires on contentEditable fields as well as inputs.
    * - Fires for collapsed selection.
    * - Fires after user input.
    */
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case 'focusin':
          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case 'focusout':
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case 'mousedown':
          mouseDown = true;
          break;
        case 'contextmenu':
        case 'mouseup':
        case 'dragend':
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case 'selectionchange':
          if (skipSelectionChangeEvent) {
            break;
          }
        case 'keydown':
        case 'keyup':
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === undefined) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case 'keypress':
          // Firefox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case 'keydown':
        case 'keyup':
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case 'focusin':
          reactEventType = 'focus';
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'focusout':
          reactEventType = 'blur';
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'beforeblur':
        case 'afterblur':
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case 'click':
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return;
          }
        case 'auxclick':
        case 'dblclick':
        case 'mousedown':
        case 'mousemove':
        case 'mouseup':
        case 'mouseout':
        case 'mouseover':
        case 'contextmenu':
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case 'drag':
        case 'dragend':
        case 'dragenter':
        case 'dragexit':
        case 'dragleave':
        case 'dragover':
        case 'dragstart':
        case 'drop':
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case 'touchcancel':
        case 'touchend':
        case 'touchmove':
        case 'touchstart':
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case 'scroll':
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case 'wheel':
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case 'copy':
        case 'cut':
        case 'paste':
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case 'gotpointercapture':
        case 'lostpointercapture':
        case 'pointercancel':
        case 'pointerdown':
        case 'pointermove':
        case 'pointerout':
        case 'pointerover':
        case 'pointerup':
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          // Intentionally create event lazily.
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      // TODO: we should remove the concept of a "SimpleEventPlugin".
      // This is the basic functionality of the event system. All
      // the other plugins are essentially polyfills. So the plugin
      // should probably be inlined somewhere and have its logic
      // be core the to event system. This would potentially allow
      // us to ship builds of React without the polyfilled plugins below.
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      // We don't process these events unless we are in the
      // event's native "bubble" phase, which means that we're
      // not in the capture phase. That's because we emulate
      // the capture phase here still. This is a trade-off,
      // because in an ideal world we would not emulate and use
      // the phases properly, like we do with the SimpleEvent
      // plugin. However, the plugins below either expect
      // emulation (EnterLeave) or use state localized to that
      // plugin (BeforeInput, Change, Select). The state in
      // these modules complicates things, as you'll essentially
      // get the case where the capture phase event might change
      // state, only for the following bubble event to come in
      // later and not trigger anything as the state now
      // invalidates the heuristics of the event plugin. We
      // could alter all these plugins to work in such ways, but
      // that might cause other unknown side-effects that we
      // can't forsee right now.
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    // List of events that need to be individually attached to media elements.
    var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting'];
    // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || 'unknown-event';
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance;
        }
      } else {
        for (var _i = 0; _i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      // This would be a good time to rethrow if any of the event handlers threw.
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      {
        if (rootContainerElement[listeningMarker]) {
          // Performance optimization: don't iterate through events
          // for the same portal container or root node more than once.
          // TODO: once we remove the flag, we may be able to also
          // remove some of the bookkeeping maps used for laziness.
          return;
        }
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function (domEventName) {
          if (!nonDelegatedEvents.has(domEventName)) {
            listenToNativeEvent(domEventName, false, rootContainerElement, null);
          }
          listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
      var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var target = rootContainerElement;
      // selectionchange needs to be attached to the document
      // otherwise it won't capture incoming events that are only
      // triggered on the document directly.
      if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
        target = rootContainerElement.ownerDocument;
      }
      // If the event can be delegated (or is capture phase), we can
      // register it to the root container. Otherwise, we should
      // register the event to the target element and mark it as
      // a non-delegated event.
      if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
        // For all non-delegated events, apart from scroll, we attach
        // their event listeners to the respective elements that their
        // events fire on. That means we can skip this step, as event
        // listener has already been added previously. However, we
        // special case the scroll event because the reality is that any
        // element can scroll.
        // TODO: ideally, we'd eventually apply the same logic to all
        // events from the nonDelegatedEvents list. Then we can remove
        // this special case and use the same logic for all events.
        if (domEventName !== 'scroll') {
          return;
        }
        eventSystemFlags |= IS_NON_DELEGATED;
        target = targetElement;
      }
      var listenerSet = getEventListenerSet(target);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      // If the listener entry is empty or we should upgrade, then
      // we need to trap an event listener onto the target.
      if (!listenerSet.has(listenerSetKey)) {
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      // If passive option is not supported, then the event will be
      // active and not passive.
      var isPassiveListener = undefined;
      if (passiveBrowserEventsSupported) {
        // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      var unsubscribeListener;
      // When legacyFBSupport is enabled, it's for when we
      if (isCapturePhaseListener) {
        if (isPassiveListener !== undefined) {
          unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== undefined) {
          unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        // If we are using the legacy FB support flag, we
        if (targetInst !== null) {
          // The below logic attempts to work out if we need to change
          // the target fiber to a different ancestor. We had similar logic
          // in the legacy event system, except the big difference between
          // systems is that the modern event system now has an event listener
          // attached to each React Root and React Portal Root. Together,
          // the DOM nodes representing these roots are the "rootContainer".
          // To figure out which ancestor instance we should use, we traverse
          // up the fiber tree from the target instance and attempt to find
          // root boundaries that match that of our current "rootContainer".
          // If we find that "rootContainer", we find the parent fiber
          // sub-tree for that root and make that our ancestor instance.
          var node = targetInst;
          mainLoop: while (true) {
            if (node === null) {
              return;
            }
            var nodeTag = node.tag;
            if (nodeTag === HostRoot || nodeTag === HostPortal) {
              var container = node.stateNode.containerInfo;
              if (isMatchingRootContainer(container, targetContainerNode)) {
                break;
              }
              if (nodeTag === HostPortal) {
                // The target is a portal, but it's not the rootContainer we're looking for.
                // Normally portals handle their own events all the way down to the root.
                // So we should be able to stop now. However, we don't know if this portal
                // was part of *our* root.
                var grandNode = node.return;
                while (grandNode !== null) {
                  var grandTag = grandNode.tag;
                  if (grandTag === HostRoot || grandTag === HostPortal) {
                    var grandContainer = grandNode.stateNode.containerInfo;
                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                      // This is the rootContainer we're looking for and we found it as
                      // a parent of the Portal. That means we can ignore it because the
                      // Portal will bubble through to us.
                      return;
                    }
                  }
                  grandNode = grandNode.return;
                }
              }
              // Now we need to find it's corresponding host fiber in the other
              // tree. To do this we can use getClosestInstanceFromNode, but we
              // need to validate that the fiber is a host instance, otherwise
              // we need to traverse up through the DOM till we find the correct
              // node that is from the other tree.
              while (container !== null) {
                var parentNode = getClosestInstanceFromNode(container);
                if (parentNode === null) {
                  return;
                }
                var parentTag = parentNode.tag;
                if (parentTag === HostComponent || parentTag === HostText) {
                  node = ancestorInst = parentNode;
                  continue mainLoop;
                }
                container = container.parentNode;
              }
            }
            node = node.return;
          }
        }
      }
      batchedEventUpdates(function () {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance: instance,
        listener: listener,
        currentTarget: currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
      var captureName = reactName !== null ? reactName + 'Capture' : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance = targetFiber;
      var lastHostComponent = null;
      // Accumulate all instances and listeners via the target -> root path.
      while (instance !== null) {
        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
        // Handle listeners that are on HostComponents (i.e. <div>)
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          // createEventHandle listeners
          if (reactEventName !== null) {
            var listener = getListener(instance, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance, listener, lastHostComponent));
            }
          }
        }
        // If we are only accumulating events for the target, then we don't
        // continue to propagate through the React fiber tree to find other
        // listeners.
        if (accumulateTargetOnly) {
          break;
        }
        instance = instance.return;
      }
      return listeners;
    }
    // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + 'Capture';
      var listeners = [];
      var instance = targetFiber;
      // Accumulate all instances and listeners via the target -> root path.
      while (instance !== null) {
        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
        // Handle listeners that are on HostComponents (i.e. <div>)
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
        instance = instance.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    /**
    * Return the lowest common ancestor of A and B, or null if they are in
    * different trees.
    */
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }
      // If A is deeper, crawl up.
      while (depthA - depthB > 0) {
        nodeA = getParent(nodeA);
        depthA--;
      }
      // If B is deeper, crawl up.
      while (depthB - depthA > 0) {
        nodeB = getParent(nodeB);
        depthB--;
      }
      // Walk in lockstep until we find a match.
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent(nodeA);
        nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance = target;
      while (instance !== null) {
        if (instance === common) {
          break;
        }
        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
        }
        instance = instance.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
      }
    }
    // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      if (from !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };
      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies: registrationNameDependencies,
          possibleRegistrationNames: possibleRegistrationNames
        });
      };
      // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };
      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };
      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        error('Extra attributes from the server: %s', names);
      };
      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      };
      // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.
      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
                      // Relies on `updateStylesByID` not mutating `styleUpdates`.
}
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE$1) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE$1) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
          }
        }
        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>';
          // eslint-disable-line
          // This is guaranteed to yield a script element.
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type);
          // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
          // attributes on `select`s needs to be added before `option`s are inserted.
          // This prevents:
          // - a bug where the `select` does not scroll to the correct option because singular
          // `select` elements automatically pick the first item #13222
          // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
          // See https://github.com/facebook/react/issues/13222
          // and https://github.com/facebook/react/issues/14239
          if (type === 'select') {
            var node = domElement;
            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
              // it is possible that no option is selected.
              // 
              // This is only necessary when a select in "single selection mode".
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE$1) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
              // TODO: Make sure that we check isMounted before firing any of these events.
}
      // TODO: Make sure that we check isMounted before firing any of these events.
      var props;
      switch (tag) {
        case 'dialog':
          listenToNonDelegatedEvent('cancel', domElement);
          listenToNonDelegatedEvent('close', domElement);
          props = rawProps;
          break;
        case 'iframe':
        case 'object':
        case 'embed':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the load event.
          listenToNonDelegatedEvent('load', domElement);
          props = rawProps;
          break;
        case 'video':
        case 'audio':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for all the media events.
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case 'source':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the error event.
          listenToNonDelegatedEvent('error', domElement);
          props = rawProps;
          break;
        case 'img':
        case 'image':
        case 'link':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for error and load events.
          listenToNonDelegatedEvent('error', domElement);
          listenToNonDelegatedEvent('load', domElement);
          props = rawProps;
          break;
        case 'details':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the toggle event.
          listenToNonDelegatedEvent('toggle', domElement);
          props = rawProps;
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;
        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the allowed property list in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
          var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string' || typeof nextProp === 'number') {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
          // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
          // In this case, call the opaque object's toString function which generates a new client
          // ID so client and server IDs match and throws to rerender.
          nextProp.toString();
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the allowed property list during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      // Apply the diff.
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.
      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;
        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;
        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
              // TODO: Make sure that we check isMounted before firing any of these events.
}
      // TODO: Make sure that we check isMounted before firing any of these events.
      switch (tag) {
        case 'dialog':
          listenToNonDelegatedEvent('cancel', domElement);
          listenToNonDelegatedEvent('close', domElement);
          break;
        case 'iframe':
        case 'object':
        case 'embed':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the load event.
          listenToNonDelegatedEvent('load', domElement);
          break;
        case 'video':
        case 'audio':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for all the media events.
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          break;
        case 'source':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the error event.
          listenToNonDelegatedEvent('error', domElement);
          break;
        case 'img':
        case 'image':
        case 'link':
          // We listen to these events in case to ensure emulated bubble
          // listeners still fire for error and load events.
          listenToNonDelegatedEvent('error', domElement);
          listenToNonDelegatedEvent('load', domElement);
          break;
        case 'details':
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the toggle event.
          listenToNonDelegatedEvent('toggle', domElement);
          break;
        case 'input':
          initWrapperState(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'option':
          validateProps(domElement, rawProps);
          break;
        case 'select':
          initWrapperState$1(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          // We listen to this event in case to ensure emulated bubble
          // listeners still fire for the invalid event.
          listenToNonDelegatedEvent('invalid', domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case 'data-reactroot':
              break;
            case 'value':
              break;
            case 'checked':
              break;
            case 'selected':
              break;
            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (!suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }
              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === 'onScroll') {
              listenToNonDelegatedEvent('scroll', domElement);
            }
          }
        } else if (// Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);
          if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE$1) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE$1) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true;
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(standardName);
                }
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }
      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;
        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;
        case 'textarea':
          restoreControlledState$2(domElement, props);
          return;
        case 'select':
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function () {};
    var updatedAncestorInfo = function () {};
    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      // 
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title'];
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
      var buttonScopeTags = inScopeTags.concat(['button']);
      // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
        var info = {
          tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }
        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }
        return ancestorInfo;
      };
      /**
      * Returns whether
      */
      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';
          case 'optgroup':
            return tag === 'option' || tag === '#text';
          case 'option':
            return tag === '#text';
          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'colgroup':
            return tag === 'col' || tag === 'template';
          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          case 'html':
            return tag === 'head' || tag === 'body' || tag === 'frameset';
          case 'frameset':
            return tag === 'frame';
          case '#document':
            return tag === 'html';
        }
        // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;
          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frameset':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }
        return true;
      };
      /**
      * Returns whether
      */
      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;
          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case 'li':
            return ancestorInfo.listItemTagAutoclosing;
          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;
          case 'button':
            return ancestorInfo.buttonTagInScope;
          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;
          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error('validateDOMNesting: when childText is passed, childTag should be null');
          }
          childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
          if ((/\S/).test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }
        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else {
          error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1;
    {
      SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }
      return false;
    }
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }
        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace: namespace,
          ancestorInfo: ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace: namespace,
          ancestorInfo: ancestorInfo
        };
      }
    }
    function getPublicInstance(instance) {
      return instance;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      var style = instance.style;
      if (typeof style.setProperty === 'function') {
        style.setProperty('display', 'none', 'important');
      } else {
        style.display = 'none';
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE$1];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE) {
        container.textContent = '';
      } else if (container.nodeType === DOCUMENT_NODE) {
        var body = container.body;
        if (body != null) {
          body.textContent = '';
        }
      }
    }
    // -------------------
    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    }
    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
      // Skip non-hydratable nodes.
      for (; node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
          break;
        }
      }
      return node;
    }
    function getNextHydratableSibling(instance) {
      return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling;
      // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node = node.nextSibling;
      }
      // TODO: Warn, we didn't find the end comment boundary.
      return null;
    }
    // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
      var node = targetInstance.previousSibling;
      // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node = node.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      // Retry if any event replaying was blocked on this.
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      // Retry if any event replaying was blocked on this.
      retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE) ; else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else if (instance.nodeType === COMMENT_NODE) ; else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForInsertedHydratedElement(parentInstance, type);
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
      var id = 'r:' + (clientId++).toString(36);
      return {
        toString: function () {
          warnOnAccessInDEV();
          return id;
        },
        valueOf: function () {
          warnOnAccessInDEV();
          return id;
        }
      };
    }
    function isOpaqueHydratingObject(value) {
      return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
      return {
        $$typeof: REACT_OPAQUE_ID_TYPE,
        toString: attemptToReadValue,
        valueOf: attemptToReadValue
      };
    }
    function preparePortalMount(portalInstance) {
      {
        listenToAllSupportedEvents(portalInstance);
      }
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
      node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
      node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
      return !!node[internalContainerInstanceKey];
    }
    // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
      }
      // If the direct event target isn't a React owned DOM node, we need to look
      // to see if one of its parents is a React owned DOM node.
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        // We'll check if this is a container root that could include
        // React nodes in the future. We need to check this first because
        // if we're a child of a dehydrated container, we need to first
        // find that inner container before moving on to finding the parent
        // instance. Note that we don't check this field on  the targetNode
        // itself because the fibers are conceptually between the container
        // node and the first child. It isn't surrounding the container node.
        // If it's not a container, we check if it's an instance.
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          // Since this wasn't the direct target of the event, we might have
          // stepped past dehydrated DOM nodes to get here. However they could
          // also have been non-React nodes. We need to answer which one.
          // If we the instance doesn't have any children, then there can't be
          // a nested suspense boundary within it. So we can use this as a fast
          // bailout. Most of the time, when people add non-React children to
          // the tree, it is using a ref to a child-less DOM node.
          // Normally we'd only need to check one of the fibers because if it
          // has ever gone from having children to deleting them or vice versa
          // it would have deleted the dehydrated boundary nested inside already.
          // However, since the HostRoot starts out with an alternate it might
          // have one on the alternate so we need to check in case this was a
          // root.
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            // Next we need to figure out if the node that skipped past is
            // nested within a dehydrated boundary and if so, which one.
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              // We found a suspense instance. That means that we haven't
              // hydrated it yet. Even though we leave the comments in the
              // DOM after hydrating, and there are boundaries in the DOM
              // that could already be hydrated, we wouldn't have found them
              // through this pass since if the target is hydrated it would
              // have had an internalInstanceKey on it.
              // Let's get the fiber associated with the SuspenseComponent
              // as the deepest instance.
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              // If we don't find a Fiber on the comment, it might be because
              // we haven't gotten to hydrate it yet. There might still be a
              // parent boundary that hasn't above this one so we need to find
              // the outer most that is known.
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    /**
    * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
    * instance, or null if the node was not rendered by this React.
    */
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    /**
    * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
    * DOM node.
    */
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      }
      // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.
      {
        {
          throw Error("getNodeFromInstance: Invalid argument.");
        }
      }
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
      node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
      var elementListenerSet = node[internalEventHandlersKey];
      if (elementListenerSet === undefined) {
        elementListenerSet = node[internalEventHandlersKey] = new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !((error$1.message in loggedTypeFailures))) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor, fiber) {
      if (index < 0) {
        {
          error('Unexpected pop.');
        }
        return;
      }
      {
        if (fiber !== fiberStack[index]) {
          error('Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }
    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
          // A cursor to the current merged context object on the stack.
}
    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyContextObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          // If the fiber is a context provider itself, when we read its context
          // we may have already pushed its own child context on the stack. A context
          // provider should not "see" its own child context. Therefore we read the
          // previous (parent) context instead for a context provider.
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
      {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentName(type) || 'Unknown';
          checkPropTypes(contextTypes, context, 'context', name);
                  // Cache unmasked context so we can avoid recreating masked context unless necessary.
          // Context is created before the class component is instantiated so check for instance.
}
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // Context is created before the class component is instantiated so check for instance.
        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (!(contextStackCursor.current === emptyContextObject)) {
          {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
          {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
            }
          }
          return parentContext;
        }
        var childContext = instance.getChildContext();
        for (var contextKey in childContext) {
          if (!((contextKey in childContextTypes))) {
            {
              throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
            }
          }
        }
        {
          var name = getComponentName(type) || 'Unknown';
          checkPropTypes(childContextTypes, childContext, 'child context', name);
        }
        return _assign({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress) {
      {
        var instance = workInProgress.stateNode;
        // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
      {
        var instance = workInProgress.stateNode;
        if (!instance) {
          {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (didChange) {
          // Merge parent and own context.
          // Skip this if we're not updating due to sCU.
          // This avoids unnecessarily recomputing memoized values.
          var mergedContext = processChildContext(workInProgress, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          // Replace the old (or empty) context with the new one.
          // It is important to unwind the context in the reverse order.
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          // Now push the new context and mark that it has changed.
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
          {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var node = fiber;
        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;
            case ClassComponent:
              {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
          }
          node = node.return;
        } while (node !== null);
        {
          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
                  // DevTools exists, even though it doesn't support Fiber.
}
        // DevTools exists, even though it doesn't support Fiber.
        return true;
      }
      try {
        rendererID = hook.inject(internals);
        // We have successfully injected, so now it is safe to set up hooks.
        injectedHook = hook;
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          error('React instrumentation encountered an error: %s.', err);
        }
      }
      // DevTools exists
      return true;
    }
    function onScheduleRoot(root, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    function onCommitRoot(root, priorityLevel) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
        try {
          var didError = (root.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
          } else {
            injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error('React instrumentation encountered an error: %s', err);
            }
          }
        }
      }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    {
      // Provide explicit error message when production+profiling bundle of e.g.
      // react-dom is used with production (non-profiling) bundle of
      // scheduler/tracing
      if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
        {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
    }
    var fakeCallbackNode = {};
    // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95;
    // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
    Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1();
    // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
      return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
      switch (Scheduler_getCurrentPriorityLevel()) {
        case Scheduler_ImmediatePriority:
          return ImmediatePriority$1;
        case Scheduler_UserBlockingPriority:
          return UserBlockingPriority$2;
        case Scheduler_NormalPriority:
          return NormalPriority$1;
        case Scheduler_LowPriority:
          return LowPriority$1;
        case Scheduler_IdlePriority:
          return IdlePriority$1;
        default:
          {
            {
              throw Error("Unknown priority level.");
            }
          }
      }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
      switch (reactPriorityLevel) {
        case ImmediatePriority$1:
          return Scheduler_ImmediatePriority;
        case UserBlockingPriority$2:
          return Scheduler_UserBlockingPriority;
        case NormalPriority$1:
          return Scheduler_NormalPriority;
        case LowPriority$1:
          return Scheduler_LowPriority;
        case IdlePriority$1:
          return Scheduler_IdlePriority;
        default:
          {
            {
              throw Error("Unknown priority level.");
            }
          }
      }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }
    function scheduleSyncCallback(callback) {
      // Push this callback into an internal queue. We'll flush these either in
      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
      if (syncQueue === null) {
        syncQueue = [callback];
        // Flush the queue in the next tick, at the earliest.
        immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
      } else {
        // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
      }
      return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
      if (callbackNode !== fakeCallbackNode) {
        Scheduler_cancelCallback(callbackNode);
      }
    }
    function flushSyncCallbackQueue() {
      if (immediateQueueCallbackNode !== null) {
        var node = immediateQueueCallbackNode;
        immediateQueueCallbackNode = null;
        Scheduler_cancelCallback(node);
      }
      flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        // Prevent re-entrancy.
        isFlushingSyncQueue = true;
        var i = 0;
        {
          try {
            var _isSync2 = true;
            var _queue = syncQueue;
            runWithPriority$1(ImmediatePriority$1, function () {
              for (; i < _queue.length; i++) {
                var callback = _queue[i];
                do {
                  callback = callback(_isSync2);
                } while (callback !== null);
              }
            });
            syncQueue = null;
          } catch (error) {
            // If something throws, leave the remaining callbacks on the queue.
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            // Resume flushing in the next tick
            Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
            throw error;
          } finally {
            isFlushingSyncQueue = false;
          }
        }
      }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1;
    // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {},
      discardPendingWarnings: function () {}
    };
    {
      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }
          node = node.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      // Tracks components we have already warned about.
      var didWarnAboutUnsafeLifecycles = new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = new Map();
      // Tracks components we have already warned about.
      var didWarnAboutLegacyContext = new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        }
        // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
      };
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;
      {
        context._currentValue = currentValue;
      }
    }
    function calculateChangedBits(context, newValue, oldValue) {
      if (objectIs(oldValue, newValue)) {
        // No change
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
        {
          if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
            error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
          }
        }
        return changedBits | 0;
      }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
      // Update the child lanes of all the ancestors, including the alternates.
      var node = parent;
      while (node !== null) {
        var alternate = node.alternate;
        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
          node.childLanes = mergeLanes(node.childLanes, renderLanes);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
        } else {
          // Neither alternate was updated, which means the rest of the
          // ancestor path already has sufficient priority.
          break;
        }
        node = node.return;
      }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
      var fiber = workInProgress.child;
      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        // Visit this fiber.
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                update.tag = ForceUpdate;
                // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.
                enqueueUpdate(fiber, update);
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
              }
              scheduleWorkOnParentPath(fiber.return, renderLanes);
              // Mark the updated lanes on the list, too.
              list.lanes = mergeLanes(list.lanes, renderLanes);
              // Since we already found a match, we can stop traversing the
              // dependency list.
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            // No more siblings. Traverse up.
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var dependencies = workInProgress.dependencies;
      if (dependencies !== null) {
        var firstContext = dependencies.firstContext;
        if (firstContext !== null) {
          if (includesSomeLane(dependencies.lanes, renderLanes)) {
            // Context list has a pending update. Mark that this fiber performed work.
            markWorkInProgressReceivedUpdate();
          }
          // Reset the work-in-progress list
          dependencies.firstContext = null;
        }
      }
    }
    function readContext(context, observedBits) {
      {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) {
          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
        }
      }
      if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
        var resolvedObservedBits;
        // Avoid deopting on observable arguments or heterogeneous types.
        if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
        } else {
          resolvedObservedBits = observedBits;
        }
        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };
        if (lastContextDependency === null) {
          if (!(currentlyRenderingFiber !== null)) {
            {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          // This is the first dependency for this component. Create a new list.
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem,
            responders: null
          };
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
      // Clone the update queue from current. Unless it's already a clone.
      var queue = workInProgress.updateQueue;
      var currentQueue = current.updateQueue;
      if (queue === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime: eventTime,
        lane: lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        // Only occurs if the fiber has been unmounted.
        return;
      }
      var sharedQueue = updateQueue.shared;
      var pending = sharedQueue.pending;
      if (pending === null) {
        // This is the first update. Create a circular list.
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      sharedQueue.pending = update;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      // Captured updates are updates that are thrown by a child during the render
      // phase. They should be discarded if the render is aborted. Therefore,
      // we should only put them on the work-in-progress queue, not the current one.
      var queue = workInProgress.updateQueue;
      // Check if the work-in-progress queue is a clone.
      var current = workInProgress.alternate;
      if (current !== null) {
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
          // The work-in-progress queue is the same as current. This happens when
          // we bail out on a parent fiber that then captures an error thrown by
          // a child. Since we want to append the update only to the work-in
          // -progress queue, we need to clone the updates. We usually clone during
          // processUpdateQueue, but that didn't happen in this case because we
          // skipped over the parent when we bailed out.
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            // Loop through the updates and clone them.
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone;
              } else {
                newLast.next = clone;
                newLast = clone;
              }
              update = update.next;
            } while (update !== null);
            // Append the captured update the end of the cloned list.
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            // There are no base updates.
            newFirst = newLast = capturedUpdate;
          }
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = queue;
          return;
        }
      }
      // Append the update to the end of the list.
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var payload = update.payload;
            if (typeof payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs();
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            // State object
            return payload;
          }
        case CaptureUpdate:
          {
            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
          }
        case UpdateState:
          {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs();
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              // Partial state object
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            }
            // Merge the partial state and the previous state.
            return _assign({}, prevState, partialState);
          }
        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
      // This is always non-null on a ClassComponent or HostRoot
      var queue = workInProgress.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue.shared;
      }
      var firstBaseUpdate = queue.firstBaseUpdate;
      var lastBaseUpdate = queue.lastBaseUpdate;
      // Check if there are pending updates. If so, transfer them to the base queue.
      var pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        // The pending queue is circular. Disconnect the pointer between first
        // and last so that it's non-circular.
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        // Append pending updates to base queue
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        // If there's a current queue, and it's different from the base queue, then
        // we need to transfer the updates to that queue, too. Because the base
        // queue is a singly-linked list with no cycles, we can append to both
        // lists and take advantage of structural sharing.
        // TODO: Pass `current` as argument
        var current = workInProgress.alternate;
        if (current !== null) {
          // This is always non-null on a ClassComponent or HostRoot
          var currentQueue = current.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      // These values may change as we process the queue.
      if (firstBaseUpdate !== null) {
        // Iterate through the list of updates to compute the result.
        var newState = queue.baseState;
        // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
        // from the original lanes.
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            }
            // Update the remaining priority in the queue.
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            // This update does have sufficient priority.
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            // Process this update.
            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null) {
              workInProgress.flags |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              // An update was scheduled from inside a reducer. Add the new
              // pending updates to the end of the list and keep processing.
              var _lastPendingUpdate = pendingQueue;
              // Intentionally unsound. Pending updates form a circular list, but we
              // unravel them when transferring them to the base queue.
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue.lastBaseUpdate = _lastPendingUpdate;
              queue.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue.baseState = newBaseState;
        queue.firstBaseUpdate = newFirstBaseUpdate;
        queue.lastBaseUpdate = newLastBaseUpdate;
        // Set the remaining expiration time to be whatever is remaining in the queue.
        // This should be fine because the only two other things that contribute to
        // expiration time are props and context. We're already in the middle of the
        // begin phase by the time we start processing the queue, so we've already
        // dealt with the props. Context in components that specify
        // shouldComponentUpdate is tricky; but we'll have to account for
        // that regardless.
        markSkippedUpdateLanes(newLanes);
        workInProgress.lanes = newLanes;
        workInProgress.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (!(typeof callback === 'function')) {
        {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      // Commit the effects
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i = 0; i < effects.length; i++) {
          var effect = effects[i];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance);
          }
        }
      }
    }
    var fakeInternalInstance = {};
    var isArray = Array.isArray;
    // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();
      warnOnInvalidCallback = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      };
      // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.
      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            // Invoke the function an extra time to help detect side-effects.
            getDerivedStateFromProps(nextProps, prevState);
          } finally {
            reenableLogs();
          }
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
              // Merge the partial state and the previous state.
}
      // Merge the partial state and the previous state.
      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState;
      // Once the update queue is empty, persist the derived state onto the
      // base state.
      if (workInProgress.lanes === NoLanes) {
        // Queue is always non-null for classes
        var updateQueue = workInProgress.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'setState');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'replaceState');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, 'forceUpdate');
          }
          update.callback = callback;
        }
        enqueueUpdate(fiber, update);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;
      if (typeof instance.shouldComponentUpdate === 'function') {
        {
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              // Invoke the function an extra time to help detect side-effects.
              instance.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              reenableLogs();
            }
          }
        }
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (shouldUpdate === undefined) {
            error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
          error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
        }
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
        }
        if (instance.propTypes) {
          error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
        }
        if (instance.contextType) {
          error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
        }
        {
          if (instance.contextTypes) {
            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
          }
        }
        if (typeof instance.componentShouldUpdate === 'function') {
          error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }
        if (typeof instance.componentDidUnmount === 'function') {
          error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
        }
        if (typeof instance.componentDidReceiveProps === 'function') {
          error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
        }
        if (typeof instance.componentWillRecieveProps === 'function') {
          error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
        }
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
          error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
        }
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) {
          error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
        }
        if (instance.defaultProps) {
          error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') {
          error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
        }
        if (typeof instance.getDerivedStateFromError === 'function') {
          error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
          error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
        }
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) {
          error('%s.state: must be set to an object or null', name);
        }
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
          error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
        }
      }
    }
    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance;
      // The instance needs access to the fiber so that it can schedule updates
      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if (('contextType' in ctor)) {
          var isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
          // Not a <Context.Consumer>
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = '';
            if (contextType === undefined) {
              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
            } else if (typeof contextType !== 'object') {
              addendum = ' However, it is set to a ' + typeof contextType + '.';
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = ' Did you accidentally pass the Context.Provider instead?';
            } else if (contextType._context !== undefined) {
              // <Context.Consumer>
              addendum = ' Did you accidentally pass the Context.Consumer instead?';
            } else {
              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
            }
            error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
          }
        }
      }
      if (typeof contextType === 'object' && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      }
      // Instantiate twice to help detect side-effects.
      {
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            new ctor(props, context);
          } finally {
            reenableLogs();
          }
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        }
        // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }
          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }
          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';
            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
            }
          }
        }
              // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
}
      // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }
      return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
      var oldState = instance.state;
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      if (oldState !== instance.state) {
        {
          error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress);
      var contextType = ctor.contextType;
      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }
      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }
        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        }
      }
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      instance.state = workInProgress.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      }
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance);
        // If we had additional state updates during this life-cycle, let's
        // process them now.
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
      }
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.flags |= Update;
      }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      newState = workInProgress.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update;
        }
        // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }
      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      var unresolvedOldProps = workInProgress.memoizedProps;
      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
      instance.props = oldProps;
      var unresolvedNewProps = workInProgress.pendingProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
      // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      newState = workInProgress.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.flags |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.flags |= Snapshot;
          }
        }
        // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.
        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }
      // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function (child, returnFiber) {};
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      /**
      * Warn if there's no key explicitly set on dynamic arrays of children or
      * object keys are not valid. This allows us to keep track of children between
      * updates.
      */
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function (child, returnFiber) {
        if (child === null || typeof child !== 'object') {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (!(typeof child._store === 'object')) {
          {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) {
          return;
        }
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
      };
    }
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          // TODO: Clean this up once we turn on the string ref warning for
          // everyone, because the strict mode case will no longer be relevant
          if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentName(returnFiber.type) || 'Component';
            if (!didWarnAboutStringRefs[componentName]) {
              {
                error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
              }
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (!(ownerFiber.tag === ClassComponent)) {
              {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stringRef = '' + mixedRef;
          // Check if previous string ref matches new string ref
          if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
            return current.ref;
          }
          var ref = function (value) {
            var refs = inst.refs;
            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (!(typeof mixedRef === 'string')) {
            {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
          }
          if (!element._owner) {
            {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        {
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
      }
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName] = true;
        error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
      }
    }
    // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        }
        // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
        childToDelete.nextEffect = null;
        childToDelete.flags = Deletion;
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        }
        // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        // instead.
        var existingChildren = new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }
        var current = newFiber.alternate;
        if (current !== null) {
          var oldIndex = current.index;
          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.flags = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.flags = Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags = Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (current === null || current.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current, element, lanes) {
        if (current !== null) {
          if (current.elementType === element.type || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current, element)) {
            // Move based on index
            var existing = useFiber(current, element.props);
            existing.ref = coerceRef(returnFiber, current, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        // Insert
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal(returnFiber, current, portal, lanes) {
        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (current === null || current.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
        }
        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
          }
          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      /**
      * Warns if there is a duplicate or missing key
      */
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== 'string') {
                break;
              }
              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        // This algorithm can't optimize by searching from both ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          return resultingFirstChild;
        }
        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        // Keep scanning and use the map to restore deleted items as moves.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (!(typeof iteratorFn === 'function')) {
          {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            if (!didWarnAboutGenerators) {
              error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
            }
            didWarnAboutGenerators = true;
          }
          // Warn about using Maps as children
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
            }
            didWarnAboutMaps = true;
          }
          // First, validate keys.
          // We'll get a different iterator later for the main pass.
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (!(newChildren != null)) {
          {
            throw Error("An iterable object provided no iterator.");
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; (newIdx++, step = newChildren.next())) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; (newIdx++, step = newChildren.next())) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          return resultingFirstChild;
        }
        // Add all children to a key map for quick lookups.
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        // Keep scanning and use the map to restore deleted items as moves.
        for (; !step.done; (newIdx++, step = newChildren.next())) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        // The existing first child is not a text node so we need to create one
        // and delete the existing ones.
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            switch (child.tag) {
              case Fragment:
                {
                  if (element.type === REACT_FRAGMENT_TYPE) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                  break;
                }
              case Block:
              default:
                {
                  if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element)) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing3 = useFiber(child, element.props);
                    _existing3.ref = coerceRef(returnFiber, child, element);
                    _existing3.return = returnFiber;
                    {
                      _existing3._debugSource = element._source;
                      _existing3._debugOwner = element._owner;
                    }
                    return _existing3;
                  }
                  break;
                }
            }
            // Didn't match.
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.
      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        // Handle object types
        var isObject = typeof newChild === 'object' && newChild !== null;
        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
          }
        }
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
        }
        if (isArray$1(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === 'function') {
            warnOnFunctionType(returnFiber);
          }
        }
        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            case Block:
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              {
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
              }
          }
        }
        // Remaining cases are all treated as empty.
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
      if (!(current === null || workInProgress.child === current.child)) {
        {
          throw Error("Resuming work not yet implemented.");
        }
      }
      if (workInProgress.child === null) {
        return;
      }
      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress.child = newChild;
      newChild.return = workInProgress;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress;
      }
      newChild.sibling = null;
    }
    // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
      var child = workInProgress.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (!(c !== NO_CONTEXT)) {
        {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);
      // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      // Now that we know this function doesn't throw, replace it.
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      // Don't push this Fiber's context unless it's unique.
      if (context === nextContext) {
        return;
      }
      // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1;
    // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1;
    // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
      // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.
      var nextState = workInProgress.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          // A dehydrated boundary always captures.
          return true;
        }
        return false;
      }
      var props = workInProgress.memoizedProps;
      // In order to capture, the Suspense component must have a fallback prop.
      if (props.fallback === undefined) {
        return false;
      }
      // Regular boundaries always capture.
      if (props.unstable_avoidThisFallback !== true) {
        return true;
      }
      // If it's a boundary we should avoid, then we prefer to bubble up to the
      // parent boundary if it is currently invisible.
      if (hasInvisibleParent) {
        return false;
      }
      // If the parent is not able to handle it, we must handle it.
      return true;
    }
    function findFirstSuspended(row) {
      var node = row;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node;
            }
          }
        } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        node.memoizedProps.revealOrder !== undefined) {
          var didSuspend = (node.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node;
          }
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) {
          return null;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === row) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    var NoFlags$1 = /**/
    0;
    // Represents whether effect should fire.
    var HasEffect = /**/
    1;
    // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /**/
    2;
    var Passive$1 = /**/
    4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;
          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.flags = Deletion;
      // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.
      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
          default:
            return;
        }
      }
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
        case SuspenseComponent:
          {
            return false;
          }
        default:
          return false;
      }
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.
        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }
      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
      // TODO: Type this specific to this type of component.
      fiber.updateQueue = updatePayload;
      // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        {
          throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }
      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      var type = fiber.type;
      // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.
      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }
    function getIsHydrating() {
      return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    {
      // Used to detect multiple renderers using the same mutable source.
      rendererSigil$1 = {};
    }
    function markSourceAsDirty(mutableSource) {
      workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
      {
        return mutableSource._workInProgressVersionPrimary;
      }
    }
    function setWorkInProgressVersion(mutableSource, version) {
      {
        mutableSource._workInProgressVersionPrimary = version;
      }
      workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
      {
        {
          if (mutableSource._currentPrimaryRenderer == null) {
            mutableSource._currentPrimaryRenderer = rendererSigil$1;
          } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
            error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
          }
        }
      }
    }
    // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    {
      didWarnAboutUseOpaqueIdentifier = {};
      didWarnAboutMismatchedHooksForComponent = new Set();
          // These are set right before calling the component.
}
    // These are set right before calling the component.
    var renderLanes = NoLanes;
    // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null;
    // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null;
    // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false;
    // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25;
    // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null;
    // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
          // Verify deps, but only on mount to avoid extra checks.
          // It's unlikely their type would change as usually you define them inline.
          error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);
          if (hookTypesDev !== null) {
            var table = '';
            var secondColumnStart = 30;
            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;
              // Extra space so second column lines up
              // lol @ IE not supporting String#repeat
              while (row.length < secondColumnStart) {
                row += ' ';
              }
              row += newHookName + '\n';
              table += row;
            }
            error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          // Only true when this component is being hot reloaded.
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }
      {
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) {
          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        }
      }
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
      }
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = NoLanes;
      // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;
      // didScheduleRenderPhaseUpdate = false;
      // TODO Warn if no hooks are used at all during mount, then some are used during update.
      // Currently we will identify the update render as a mount because memoizedState === null.
      // This is tricky because it's valid for certain types of components (e.g. React.lazy)
      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
      // Non-stateful hooks (e.g. context) don't get added to memoizedState,
      // so memoizedState would be null during updates and mounts.
      {
        if (current !== null && current.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          // This dispatcher handles an edge case where a component is updating,
          // but no stateful hooks have been used.
          // We want to match the production code behavior (which will use HooksDispatcherOnMount),
          // but with the extra DEV validation to ensure hooks ordering hasn't changed.
          // This dispatcher does that.
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      // Check if there was a render phase update
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        // Keep rendering in a loop for as long as render phase updates continue to
        // be scheduled. Use a counter to prevent infinite loops.
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
            {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
          }
          numberOfReRenders += 1;
          {
            // Even when hot reloading, allow dependencies to stabilize
            // after first render to prevent infinite render phase updates.
            ignorePreviousDependencies = false;
                      // Start over from the beginning of the list
}
          // Start over from the beginning of the list
          currentHook = null;
          workInProgressHook = null;
          workInProgress.updateQueue = null;
          {
            // Also validate hook order for cascading updates.
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress._debugHookTypes = hookTypesDev;
              // This check uses currentHook so that it works the same in DEV and prod bundles.
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
}
      // This check uses currentHook so that it works the same in DEV and prod bundles.
      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      didScheduleRenderPhaseUpdate = false;
      if (!!didRenderTooFewHooks) {
        {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
      }
      return children;
    }
    function bailoutHooks(current, workInProgress, lanes) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.flags &= ~(Passive | Update);
      current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        // There were render phase updates. These are only valid for this render
        // phase, which we are now aborting. Remove the updates from the queues so
        // they do not persist to the next render. Do not remove updates from hooks
        // that weren't processed.
        // 
        // Only reset the updates from the queue if it has a clone. If it does
        // not have a clone, that means it wasn't processed, and the updates were
        // scheduled before we entered the render phase.
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null) {
            queue.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      // This function is used both for updates and for re-renders triggered by a
      // render phase update. It assumes there is either a current hook we can
      // clone, or a work-in-progress hook from a previous render pass that we can
      // use as a base. When we reach the end of the base list, we must switch to
      // the dispatcher used for mounts.
      var nextCurrentHook;
      if (currentHook === null) {
        var current = currentlyRenderingFiber$1.alternate;
        if (current !== null) {
          nextCurrentHook = current.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        // There's already a work-in-progress. Reuse it.
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        // Clone from the current hook.
        if (!(nextCurrentHook !== null)) {
          {
            throw Error("Rendered more hooks than during the previous render.");
          }
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          // This is the first hook in the list.
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          // Append to the end of the list.
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }
    function basicStateReducer(state, action) {
      // $FlowFixMe: Flow doesn't like mixed types
      return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState;
      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (!(queue !== null)) {
        {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
      }
      queue.lastRenderedReducer = reducer;
      var current = currentHook;
      // The last rebase update that is NOT part of the base state.
      var baseQueue = current.baseQueue;
      // The last pending update that hasn't been processed yet.
      var pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        // We have new updates that haven't been processed yet.
        // We'll add them to the base queue.
        if (baseQueue !== null) {
          // Merge the pending queue and the base queue.
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current.baseQueue !== baseQueue) {
            // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
          }
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      if (baseQueue !== null) {
        // We have a queue to process.
        var first = baseQueue.next;
        var newState = current.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            var clone = {
              lane: updateLane,
              action: update.action,
              eagerReducer: update.eagerReducer,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            // Update the remaining priority in the queue.
            // TODO: Don't need to accumulate this. Instead, we can remove
            // renderLanes from the original lanes.
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            // This update does have sufficient priority.
            if (newBaseQueueLast !== null) {
              var _clone = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            // Process this update.
            if (update.eagerReducer === reducer) {
              // If this update was processed eagerly, and its reducer matches the
              // current reducer, we can use the eagerly computed state.
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        // Mark that the fiber performed work, but only if the new state is
        // different from the current state.
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = newState;
      }
      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (!(queue !== null)) {
        {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
      }
      queue.lastRenderedReducer = reducer;
      // This is a re-render. Apply the new render phase updates to the previous
      // work-in-progress hook.
      var dispatch = queue.dispatch;
      var lastRenderPhaseUpdate = queue.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        // The queue doesn't persist past this render pass.
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        // Mark that the fiber performed work, but only if the new state is
        // different from the current state.
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        // Don't persist the state accumulated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
      {
        warnAboutMultipleRenderersDEV(source);
      }
      var getVersion = source._getVersion;
      var version = getVersion(source._source);
      // Is it safe for this component to read from this source during the current render?
      var isSafeToReadFromSource = false;
      // Check the version first.
      // If this render has already been started with a specific version,
      // we can use it alone to determine if we can safely read from the source.
      var currentRenderVersion = getWorkInProgressVersion(source);
      if (currentRenderVersion !== null) {
        // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
      } else {
        // If there's no version, then this is the first time we've read from the
        // source during the current render pass, so we need to do a bit more work.
        // What we need to determine is if there are any hooks that already
        // subscribed to the source, and if so, whether there are any pending
        // mutations that haven't been synchronized yet.
        // 
        // If there are no pending mutations, then `root.mutableReadLanes` will be
        // empty, and we know we can safely read.
        // 
        // If there *are* pending mutations, we may still be able to safely read
        // if the currently rendering lanes are inclusive of the pending mutation
        // lanes, since that guarantees that the value we're about to read from
        // the source is consistent with the values that we read during the most
        // recent mutation.
        isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);
        if (isSafeToReadFromSource) {
          // If it's safe to read from this source during the current render,
          // store the version in case other components read from it.
          // A changed version number will let those components know to throw and restart the render.
          setWorkInProgressVersion(source, version);
        }
      }
      if (isSafeToReadFromSource) {
        var snapshot = getSnapshot(source._source);
        {
          if (typeof snapshot === 'function') {
            error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
          }
        }
        return snapshot;
      } else {
        // This handles the special case of a mutable source being shared between renderers.
        // In that case, if the source is mutated between the first and second renderer,
        // The second renderer don't know that it needs to reset the WIP version during unwind,
        // (because the hook only marks sources as dirty if it's written to their WIP version).
        // That would cause this tear check to throw again and eventually be visible to the user.
        // We can avoid this infinite loop by explicitly marking the source as dirty.
        // 
        // This can lead to tearing in the first renderer when it resumes,
        // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
        markSourceAsDirty(source);
        {
          {
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
          }
        }
      }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
      var root = getWorkInProgressRoot();
      if (!(root !== null)) {
        {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
      }
      var getVersion = source._getVersion;
      var version = getVersion(source._source);
      var dispatcher = ReactCurrentDispatcher$1.current;
      // eslint-disable-next-line prefer-const
      var _dispatcher$useState = dispatcher.useState(function () {
        return readFromUnsubcribedMutableSource(root, source, getSnapshot);
      }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
      var snapshot = currentSnapshot;
      // Grab a handle to the state hook as well.
      // We use it to clear the pending update queue if we have a new source.
      var stateHook = workInProgressHook;
      var memoizedState = hook.memoizedState;
      var refs = memoizedState.refs;
      var prevGetSnapshot = refs.getSnapshot;
      var prevSource = memoizedState.source;
      var prevSubscribe = memoizedState.subscribe;
      var fiber = currentlyRenderingFiber$1;
      hook.memoizedState = {
        refs: refs,
        source: source,
        subscribe: subscribe
      };
      // Sync the values needed by our subscription handler after each commit.
      dispatcher.useEffect(function () {
        refs.getSnapshot = getSnapshot;
        // Normally the dispatch function for a state hook never changes,
        // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
        // handleChange() below needs to reference the dispatch function without re-subscribing,
        // so we use a ref to ensure that it always has the latest version.
        refs.setSnapshot = setSnapshot;
        // Check for a possible change between when we last rendered now.
        var maybeNewVersion = getVersion(source._source);
        if (!objectIs(version, maybeNewVersion)) {
          var maybeNewSnapshot = getSnapshot(source._source);
          {
            if (typeof maybeNewSnapshot === 'function') {
              error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
            }
          }
          if (!objectIs(snapshot, maybeNewSnapshot)) {
            setSnapshot(maybeNewSnapshot);
            var lane = requestUpdateLane(fiber);
            markRootMutableRead(root, lane);
          }
          // If the source mutated between render and now,
          // there may be state updates already scheduled from the old source.
          // Entangle the updates so that they render in the same batch.
          markRootEntangled(root, root.mutableReadLanes);
        }
      }, [getSnapshot, source, subscribe]);
      // If we got a new source or subscribe function, re-subscribe in a passive effect.
      dispatcher.useEffect(function () {
        var handleChange = function () {
          var latestGetSnapshot = refs.getSnapshot;
          var latestSetSnapshot = refs.setSnapshot;
          try {
            latestSetSnapshot(latestGetSnapshot(source._source));
            // Record a pending mutable source update with the same expiration time.
            var lane = requestUpdateLane(fiber);
            markRootMutableRead(root, lane);
          } catch (error) {
            // A selector might throw after a source mutation.
            // e.g. it might try to read from a part of the store that no longer exists.
            // In this case we should still schedule an update with React.
            // Worst case the selector will throw again and then an error boundary will handle it.
            latestSetSnapshot(function () {
              throw error;
            });
          }
        };
        var unsubscribe = subscribe(source._source, handleChange);
        {
          if (typeof unsubscribe !== 'function') {
            error('Mutable source subscribe function must return an unsubscribe function.');
          }
        }
        return unsubscribe;
      }, [source, subscribe]);
      // If any of the inputs to useMutableSource change, reading is potentially unsafe.
      // 
      // If either the source or the subscription have changed we can't can't trust the update queue.
      // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
      // 
      // If the getSnapshot function changed, we also shouldn't rely on the update queue.
      // It's possible that the underlying source was mutated between the when the last "change" event fired,
      // and when the current render (with the new getSnapshot function) is processed.
      // 
      // In both cases, we need to throw away pending updates (since they are no longer relevant)
      // and treat reading from the source as we do in the mount case.
      if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
        // Create a new queue and setState method,
        // So if there are interleaved updates, they get pushed to the older queue.
        // When this becomes current, the previous queue and dispatch method will be discarded,
        // including any interleaving updates that occur.
        var newQueue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: snapshot
        };
        newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
        stateHook.queue = newQueue;
        stateHook.baseQueue = null;
        snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
        stateHook.memoizedState = stateHook.baseState = snapshot;
      }
      return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = {
        refs: {
          getSnapshot: getSnapshot,
          setSnapshot: null
        },
        source: source,
        subscribe: subscribe
      };
      return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      var hook = updateWorkInProgressHook();
      return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === 'function') {
        // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        // Circular
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(hookFlags, create, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === 'function') {
        var refCallback = ref;
        var _inst = create();
        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty('current')) {
            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
          }
        }
        var _inst2 = create();
        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== 'function') {
          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
        }
              // TODO: If deps are provided, should we skip comparing the ref itself?
}
      // TODO: If deps are provided, should we skip comparing the ref itself?
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== 'function') {
          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
        }
              // TODO: If deps are provided, should we skip comparing the ref itself?
}
      // TODO: If deps are provided, should we skip comparing the ref itself?
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {}
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        // Assume these are defined. If they're not, areHookInputsEqual will warn.
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value) {
      var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
      mountEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function updateDeferredValue(value) {
      var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
      updateEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function rerenderDeferredValue(value) {
      var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
      updateEffect(function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;
        try {
          setValue(value);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      }, [value]);
      return prevValue;
    }
    function startTransition(setPending, callback) {
      var priorityLevel = getCurrentPriorityLevel();
      {
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
          setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setPending(false);
            callback();
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        });
      }
    }
    function mountTransition() {
      var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
      // The `start` method can be stored on a ref, since `setPending`
      // never changes.
      var start = startTransition.bind(null, setPending);
      mountRef(start);
      return [start, isPending];
    }
    function updateTransition() {
      var _updateState2 = updateState(), isPending = _updateState2[0];
      var startRef = updateRef();
      var start = startRef.current;
      return [start, isPending];
    }
    function rerenderTransition() {
      var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
      var startRef = updateRef();
      var start = startRef.current;
      return [start, isPending];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
      {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
          error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');
          didWarnAboutUseOpaqueIdentifier[name] = true;
        }
      }
    }
    function mountOpaqueIdentifier() {
      var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
      if (getIsHydrating()) {
        var didUpgrade = false;
        var fiber = currentlyRenderingFiber$1;
        var readValue = function () {
          if (!didUpgrade) {
            // Only upgrade once. This works even inside the render phase because
            // the update is added to a shared queue, which outlasts the
            // in-progress render.
            didUpgrade = true;
            {
              isUpdatingOpaqueValueInRenderPhase = true;
              setId(makeId());
              isUpdatingOpaqueValueInRenderPhase = false;
              warnOnOpaqueIdentifierAccessInDEV(fiber);
            }
          }
          {
            {
              throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            }
          }
        };
        var id = makeOpaqueHydratingObject(readValue);
        var setId = mountState(id)[1];
        if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
          currentlyRenderingFiber$1.flags |= Update | Passive;
          pushEffect(HasEffect | Passive$1, function () {
            setId(makeId());
          }, undefined, null);
        }
        return id;
      } else {
        var _id = makeId();
        mountState(_id);
        return _id;
      }
    }
    function updateOpaqueIdentifier() {
      var id = updateState()[0];
      return id;
    }
    function rerenderOpaqueIdentifier() {
      var id = rerenderState()[0];
      return id;
    }
    function dispatchAction(fiber, queue, action) {
      {
        if (typeof arguments[3] === 'function') {
          error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
        }
      }
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      var update = {
        lane: lane,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      // Append the update to the end of the list.
      var pending = queue.pending;
      if (pending === null) {
        // This is the first update. Create a circular list.
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue.pending = update;
      var alternate = fiber.alternate;
      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      } else {
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          // The queue is currently empty, which means we can eagerly compute the
          // next state before entering the render phase. If the new state is the
          // same as the current state, we may be able to bail out entirely.
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              // Stash the eagerly computed state, and the reducer used to compute
              // it, on the update object. If the reducer hasn't changed by the
              // time we enter the render phase, then the eager state can be used
              // without calling the reducer again.
              update.eagerReducer = lastRenderedReducer;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                // Fast path. We can bail out without scheduling React to re-render.
                // It's still possible that we'll need to rebase this update later,
                // if the component re-renders for a different reason and by that
                // time the reducer has changed.
                return;
              }
            } catch (error) {} finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        {
          // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
          if ('undefined' !== typeof jest) {
            warnIfNotScopedWithMatchingAct(fiber);
            warnIfNotCurrentlyActingUpdatesInDev(fiber);
          }
        }
        scheduleUpdateOnFiber(fiber, lane, eventTime);
      }
    }
    var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useOpaqueIdentifier: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function () {
        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      };
      var warnInvalidHookAccess = function () {
        error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          mountHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          mountHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          updateHookTypesDev();
          return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function (value) {
          currentHookNameInDev = 'useDeferredValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function () {
          currentHookNameInDev = 'useTransition';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function (source, getSnapshot, subscribe) {
          currentHookNameInDev = 'useMutableSource';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function () {
          currentHookNameInDev = 'useOpaqueIdentifier';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function transferActualDuration(fiber) {
      // Transfer time spent rendering these children so we don't lose it
      // after we rerender. This is used as a helper in special cases
      // where we should count the work of multiple passes.
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
    }
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
      if (current === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
      }
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      // 
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their
      // identities match.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens after the first render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref;
      // The rest is a fork of updateFunctionComponent
      var nextChildren;
      prepareToReadContext(workInProgress, renderLanes);
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
          } finally {
            reenableLogs();
          }
        }
        setIsRendering(false);
      }
      if (current !== null && !didReceiveUpdate) {
        bailoutHooks(current, workInProgress, renderLanes);
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
      if (current === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === undefined) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
                      // If this is a plain function component without default props,
            // and with only the default shallow comparison, we upgrade it
            // to a SimpleMemoComponent to allow fast path updates.
}
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(type));
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(_innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(_type));
        }
      }
      var currentChild = current.child;
      // This is always exactly one child
      if (!includesSomeLane(updateLanes, renderLanes)) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps;
        // Default to shallow comparison
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;
        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens when the inner render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var outerMemoType = workInProgress.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch (x) {
              outerMemoType = null;
            }
            // Inner propTypes will be validated in the function component path.
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
              'prop', getComponentName(outerMemoType));
            }
          }
        }
      }
      if (current !== null) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.
        workInProgress.type === current.type) {
          didReceiveUpdate = false;
          if (!includesSomeLane(renderLanes, updateLanes)) {
            // The pending lanes were cleared at the beginning of beginWork. We're
            // about to bail out, but there might be other lanes that weren't
            // included in the current render. Usually, the priority level of the
            // remaining updates is accumlated during the evaluation of the
            // component (i.e. when processing the update queue). But since since
            // we're bailing out early *without* evaluating the component, we need
            // to account for it here, too. Reset to the value of the current fiber.
            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
            // because a MemoComponent fiber does not have hooks or an update queue;
            // rather, it wraps around an inner component, which may or may not
            // contains hooks.
            // TODO: Move the reset at in beginWork out of the common path so that
            // this is no longer necessary.
            workInProgress.lanes = current.lanes;
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current !== null ? current.memoizedState : null;
      if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
          // In legacy sync mode, don't defer the subtree. Render it now.
          // TODO: Figure out what we should do in Blocking mode.
          var nextState = {
            baseLanes: NoLanes
          };
          workInProgress.memoizedState = nextState;
          pushRenderLanes(workInProgress, renderLanes);
        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
          } else {
            nextBaseLanes = renderLanes;
          }
          // Schedule this fiber to re-render at offscreen priority. Then bailout.
          {
            markSpawnedWork(OffscreenLane);
          }
          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes
          };
          workInProgress.memoizedState = _nextState;
          // We're about to bail out, but we need to push this to the stack anyway
          // to avoid a push/pop misalignment.
          pushRenderLanes(workInProgress, nextBaseLanes);
          return null;
        } else {
          // Rendering at offscreen, so we can clear the base lanes.
          var _nextState2 = {
            baseLanes: NoLanes
          };
          workInProgress.memoizedState = _nextState2;
          // Push the lanes that were skipped when we bailed out.
          var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
          pushRenderLanes(workInProgress, subtreeRenderLanes);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
          // Since we're not hidden anymore, reset the state
          workInProgress.memoizedState = null;
        } else {
          // We weren't previously hidden, and we still aren't, so there's nothing
          // special to do. Need to push to the stack regardless, though, to avoid
          // a push/pop misalignment.
          _subtreeRenderLanes = renderLanes;
        }
        pushRenderLanes(workInProgress, _subtreeRenderLanes);
      }
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current, workInProgress, renderLanes) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
      {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (current === null && ref !== null || current !== null && current.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.flags |= Ref;
      }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }
      var nextChildren;
      prepareToReadContext(workInProgress, renderLanes);
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        if (workInProgress.mode & StrictMode) {
          disableLogs();
          try {
            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
          } finally {
            reenableLogs();
          }
        }
        setIsRendering(false);
      }
      if (current !== null && !didReceiveUpdate) {
        bailoutHooks(current, workInProgress, renderLanes);
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component));
          }
        }
              // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
}
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderLanes);
      var instance = workInProgress.stateNode;
      var shouldUpdate;
      if (instance === null) {
        if (current !== null) {
          // A class component without an instance only mounts if it suspended
          // inside a non-concurrent tree, in an inconsistent state. We want to
          // treat it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current.alternate = null;
          workInProgress.alternate = null;
          // Since this is conceptually a new fiber, schedule a Placement effect
          workInProgress.flags |= Placement;
        }
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        shouldUpdate = true;
      } else if (current === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
      } else {
        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
      }
      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
      {
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current, workInProgress);
      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      var instance = workInProgress.stateNode;
      // Rerender
      ReactCurrentOwner$1.current = workInProgress;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFromError is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          setIsRendering(true);
          nextChildren = instance.render();
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              instance.render();
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
      }
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      if (current !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
      } else {
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      }
      // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.
      workInProgress.memoizedState = instance.state;
      // The context might have changed so we need to recalculate it.
      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }
      return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }
      pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      if (!(current !== null && updateQueue !== null)) {
        {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      cloneUpdateQueue(current, workInProgress);
      processUpdateQueue(workInProgress, nextProps, null, renderLanes);
      var nextState = workInProgress.memoizedState;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      var nextChildren = nextState.element;
      if (nextChildren === prevChildren) {
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      var root = workInProgress.stateNode;
      if (root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        {
          var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
          if (mutableSourceEagerHydrationData != null) {
            for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
              var mutableSource = mutableSourceEagerHydrationData[i];
              var version = mutableSourceEagerHydrationData[i + 1];
              setWorkInProgressVersion(mutableSource, version);
            }
          }
        }
        var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        workInProgress.child = child;
        var node = child;
        while (node) {
          // Mark each child as hydrating. This is a fast path to know whether this
          // tree is part of a hydrating tree. This is used to determine if a child
          // node has fully mounted yet, and for scheduling event replaying.
          // Conceptually this is similar to Placement in that a new subtree is
          // inserted into the React tree here. It just happens to not need DOM
          // mutations because it already exists.
          node.flags = node.flags & ~Placement | Hydrating;
          node = node.sibling;
        }
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        resetHydrationState();
      }
      return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
      pushHostContext(workInProgress);
      if (current === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current !== null ? current.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
      }
      markRef(current, workInProgress);
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
      if (current === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }
      // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.
      return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
      if (_current !== null) {
        // A lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      var props = workInProgress.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init = lazyComponent._init;
      var Component = init(payload);
      // Store the unwrapped component in the type.
      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
              workInProgress.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case ClassComponent:
          {
            {
              workInProgress.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case ForwardRef:
          {
            {
              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
            return child;
          }
        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                  'prop', getComponentName(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateLanes, renderLanes);
            return child;
          }
      }
      var hint = '';
      {
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = ' Did you wrap a component in React.lazy() more than once?';
        }
              // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.
}
      // This message intentionally doesn't mention ForwardRef or MemoComponent
      // because the fact that it's a separate type of work is an
      // implementation detail.
      {
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      // Promote the fiber to a class and try rendering again.
      workInProgress.tag = ClassComponent;
      // The rest of this function is a fork of `updateClassComponent`
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress, renderLanes);
      constructClassInstance(workInProgress, Component, nextProps);
      mountClassInstance(workInProgress, Component, nextProps, renderLanes);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null;
        // Since this is conceptually a new fiber, schedule a Placement effect
        workInProgress.flags |= Placement;
      }
      var props = workInProgress.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }
      prepareToReadContext(workInProgress, renderLanes);
      var value;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutBadClass[componentName]) {
            error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }
        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        setIsRendering(false);
              // React DevTools reads this flag.
}
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      {
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
          var _componentName = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (// Run these checks in production only if the flag is off.
      // Eventually we'll delete this branch altogether.
      typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        {
          var _componentName2 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
                  // Proceed under the assumption that this is a class instance
}
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent;
        // Throw out any hooks that were used.
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }
        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        initializeUpdateQueue(workInProgress);
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }
        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        {
          if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
            } finally {
              reenableLogs();
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderLanes);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
          }
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
          }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
          var _componentName3 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
          var _componentName4 = getComponentName(Component) || 'Unknown';
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error('%s: Function components do not support contextType.', _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
      return {
        baseLanes: renderLanes
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
      };
    }
    // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
      // If we're already showing a fallback, there are cases where we need to
      // remain on that fallback regardless of whether the content has resolved.
      // For example, SuspenseList coordinates when nested content appears.
      if (current !== null) {
        var suspenseState = current.memoizedState;
        if (suspenseState === null) {
          // Currently showing content. Don't hide it, even if ForceSuspenseFallack
          // is true. More precise name might be "ForceRemainSuspenseFallback".
          // Note: This is a factoring smell. Can't remain on a fallback if there's
          // no fallback to remain on.
          return false;
        }
      }
      // Not currently showing content. Consult the Suspense context.
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
      // TODO: Should not remove render lanes that were pinged during this render
      return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      // This is used by DevTools to force a boundary to suspend.
      {
        if (shouldSuspend(workInProgress)) {
          workInProgress.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        showFallback = true;
        workInProgress.flags &= ~DidCapture;
      } else {
        // Attempting the main content
        if (current === null || current.memoizedState !== null) {
          // This is a new mount or this boundary is already showing a fallback state.
          // Mark this subtree context as having at least one invisible parent that could
          // handle the fallback state.
          // Boundaries without fallbacks or should be avoided are not considered since
          // they cannot handle preferred fallback states.
          if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress, suspenseContext);
      // OK, the next part is confusing. We're about to reconcile the Suspense
      // boundary's children. This involves some custom reconcilation logic. Two
      // main reasons this is so complicated.
      // 
      // First, Legacy Mode has different semantics for backwards compatibility. The
      // primary tree will commit in an inconsistent state, so when we do the
      // second pass to render the fallback, we do some exceedingly, uh, clever
      // hacks to make that not totally break. Like transferring effects and
      // deletions from hidden tree. In Concurrent Mode, it's much simpler,
      // because we bailout on the primary tree completely and leave it in its old
      // state, no effects. Same as what we do for Offscreen (except that
      // Offscreen doesn't have the first render pass).
      // 
      // Second is hydration. During hydration, the Suspense fiber has a slightly
      // different layout, where the child points to a dehydrated fragment, which
      // contains the DOM rendered by the server.
      // 
      // Third, even if you set all that aside, Suspense is like error boundaries in
      // that we first we try to render one tree, and if that fails, we render again
      // and switch to a different tree. Like a try/catch block. So we have to track
      // which branch we're currently rendering. Ideally we would model this using
      // a stack.
      if (current === null) {
        // Initial mount
        // If we're currently hydrating, try to hydrate this boundary.
        // But only if this has a fallback.
        if (nextProps.fallback !== undefined) {
          tryToClaimNextHydratableInstance(workInProgress);
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
          var primaryChildFragment = workInProgress.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
          workInProgress.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
          // This is a CPU-bound tree. Skip this tree and show a placeholder to
          // unblock the surrounding content. Then immediately retry after the
          // initial commit.
          var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
          var _primaryChildFragment = workInProgress.child;
          _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
          workInProgress.memoizedState = SUSPENDED_MARKER;
          // Since nothing actually suspended, there will nothing to ping this to
          // get it started back up to attempt the next item. While in terms of
          // priority this work has the same priority as this current render, it's
          // not part of the same transition once the transition has committed. If
          // it's sync, we still want to yield so that it can be painted.
          // Conceptually, this is really the same as pinging. We can use any
          // RetryLane even if it's the one currently rendering since we're leaving
          // it behind on this node.
          workInProgress.lanes = SomeRetryLane;
          {
            markSpawnedWork(SomeRetryLane);
          }
          return _fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
        }
      } else {
        // This is an update.
        // If the current fiber has a SuspenseState, that means it's already showing
        // a fallback.
        var prevState = current.memoizedState;
        if (prevState !== null) {
          if (showFallback) {
            var _nextFallbackChildren2 = nextProps.fallback;
            var _nextPrimaryChildren2 = nextProps.children;
            var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
            var _primaryChildFragment3 = workInProgress.child;
            var prevOffscreenState = current.child.memoizedState;
            _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
            _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return _fallbackChildFragment;
          } else {
            var _nextPrimaryChildren3 = nextProps.children;
            var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
            workInProgress.memoizedState = null;
            return _primaryChildFragment4;
          }
        } else {
          // The current tree is not already showing a fallback.
          if (showFallback) {
            // Timed out.
            var _nextFallbackChildren3 = nextProps.fallback;
            var _nextPrimaryChildren4 = nextProps.children;
            var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
            var _primaryChildFragment5 = workInProgress.child;
            var _prevOffscreenState = current.child.memoizedState;
            _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
            _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
            // Skip the primary children, and continue working on the
            // fallback children.
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return _fallbackChildFragment2;
          } else {
            // Still haven't timed out. Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren5 = nextProps.children;
            var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
            workInProgress.memoizedState = null;
            return _primaryChildFragment6;
          }
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
      var mode = workInProgress.mode;
      var primaryChildProps = {
        mode: 'visible',
        children: primaryChildren
      };
      var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
      primaryChildFragment.return = workInProgress;
      workInProgress.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
      var mode = workInProgress.mode;
      var progressedPrimaryFragment = workInProgress.child;
      var primaryChildProps = {
        mode: 'hidden',
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress.mode & ProfileMode) {
          // Reset the durations from the first pass so they aren't included in the
          // final amounts. This seems counterintuitive, since we're intentionally
          // not measuring part of the render phase, but this makes it match what we
          // do in Concurrent Mode.
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
      } else {
        primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
      }
      primaryChildFragment.return = workInProgress;
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current, offscreenProps) {
      // The props argument to `createWorkInProgress` is `any` typed, so we use this
      // wrapper function to constrain it.
      return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: 'visible',
        children: primaryChildren
      });
      if ((workInProgress.mode & BlockingMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes;
      }
      primaryChildFragment.return = workInProgress;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        // Delete the fallback child fragment
        currentFallbackChildFragment.nextEffect = null;
        currentFallbackChildFragment.flags = Deletion;
        workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
      }
      workInProgress.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
      var mode = workInProgress.mode;
      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: 'hidden',
        children: primaryChildren
      };
      var primaryChildFragment;
      if (// In legacy mode, we commit the primary tree as if it successfully
      // completed, even though it's in an inconsistent state.
      (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
      // already cloned. In legacy mode, the only case where this isn't true is
      // when DevTools forces us to display a fallback; we skip the first render
      // pass entirely and go straight to rendering the fallback. (In Concurrent
      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
      // only codepath.)
      workInProgress.child !== currentPrimaryChildFragment) {
        var progressedPrimaryFragment = workInProgress.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress.mode & ProfileMode) {
          // Reset the durations from the first pass so they aren't included in the
          // final amounts. This seems counterintuitive, since we're intentionally
          // not measuring part of the render phase, but this makes it match what we
          // do in Concurrent Mode.
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        // The fallback fiber was added as a deletion effect during the first pass.
        // However, since we're going to remain on the fallback, we no longer want
        // to delete it. So we need to remove it from the list. Deletions are stored
        // on the same list as effects. We want to keep the effects from the primary
        // tree. So we copy the primary child fragment's effect list, which does not
        // include the fallback deletion effect.
        var progressedLastEffect = primaryChildFragment.lastEffect;
        if (progressedLastEffect !== null) {
          workInProgress.firstEffect = primaryChildFragment.firstEffect;
          workInProgress.lastEffect = progressedLastEffect;
          progressedLastEffect.nextEffect = null;
        } else {
          // TODO: Reset this somewhere else? Lol legacy mode is so weird.
          workInProgress.firstEffect = workInProgress.lastEffect = null;
        }
      } else {
        primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
      }
      scheduleWorkOnParentPath(fiber.return, renderLanes);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
      // Mark any Suspense boundaries with fallbacks as having work to do.
      // If they were previously forced into fallbacks, they may now be able
      // to unblock.
      var node = firstChild;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            scheduleWorkOnFiber(node, renderLanes);
          }
        } else if (node.tag === SuspenseListComponent) {
          // If the tail is hidden there might not be an Suspense boundaries
          // to schedule work on. In this case we have to schedule it on the
          // list itself.
          // We don't have to traverse to the children of the list since
          // the list will propagate the change when it rerenders.
          scheduleWorkOnFiber(node, renderLanes);
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      // This is going to find the last row among these children that is already
      // showing content on the screen, as opposed to being in fallback state or
      // new. If a row has multiple Suspense boundaries, any of them being in the
      // fallback state, counts as the whole row being in a fallback state.
      // Note that the "rows" will be workInProgress, but any nested children
      // will still be current since we haven't rendered them yet. The mounted
      // order may not be the same as the new order. We use the new order.
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        // New rows can't be content rows.
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === 'string') {
            switch (revealOrder.toLowerCase()) {
              case 'together':
              case 'forwards':
              case 'backwards':
                {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
              case 'forward':
              case 'backward':
                {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
            didWarnAboutTailOptions[tailMode] = true;
            error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
            didWarnAboutTailOptions[tailMode] = true;
            error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
      {
        var isArray = Array.isArray(childSlot);
        var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
        if (isArray || isIterable) {
          var type = isArray ? 'array' : 'iterable';
          error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }
                  _i++;
                }
              }
            } else {
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
      var renderState = workInProgress.memoizedState;
      if (renderState === null) {
        workInProgress.memoizedState = {
          isBackwards: isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail: tail,
          tailMode: tailMode,
          lastEffect: lastEffectBeforeRendering
        };
      } else {
        // We can reuse the existing object from previous renders.
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
        renderState.lastEffect = lastEffectBeforeRendering;
      }
    }
    // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress.flags |= DidCapture;
      } else {
        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          // If we previously forced a fallback, we need to schedule work
          // on any nested boundaries to let them know to try to render
          // again. This is the same as context updating.
          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress, suspenseContext);
      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
      } else {
        switch (revealOrder) {
          case 'forwards':
            {
              var lastContentRow = findLastContentRow(workInProgress.child);
              var tail;
              if (lastContentRow === null) {
                // The whole list is part of the tail.
                // TODO: We could fast path by just rendering the tail now.
                tail = workInProgress.child;
                workInProgress.child = null;
              } else {
                // Disconnect the tail rows after the content row.
                // We're going to render them separately later.
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress, false, // isBackwards
              tail, lastContentRow, tailMode, workInProgress.lastEffect);
              break;
            }
          case 'backwards':
            {
              // We're going to find the first row that has existing content.
              // At the same time we're going to reverse the list of everything
              // we pass in the meantime. That's going to be our tail in reverse
              // order.
              var _tail = null;
              var row = workInProgress.child;
              workInProgress.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                // New rows can't be content rows.
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  // This is the beginning of the main content.
                  workInProgress.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              // TODO: If workInProgress.child is null, we can continue on the tail immediately.
              initSuspenseListRenderState(workInProgress, true, // isBackwards
              _tail, null, // last
              tailMode, workInProgress.lastEffect);
              break;
            }
          case 'together':
            {
              initSuspenseListRenderState(workInProgress, false, // isBackwards
              null, // tail
              null, // last
              undefined, workInProgress.lastEffect);
              break;
            }
          default:
            {
              // The default reveal order is the same as not having
              // a boundary.
              workInProgress.memoizedState = null;
            }
        }
      }
      return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;
      if (current === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
      } else {
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      }
      return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        if (!(('value' in newProps))) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
          }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        }
      }
      pushProvider(workInProgress, newValue);
      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);
        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderLanes);
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
      var context = workInProgress.type;
      // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.
      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        if (typeof render !== 'function') {
          error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
        }
      }
      prepareToReadContext(workInProgress, renderLanes);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
              // React DevTools reads this flag.
}
      // React DevTools reads this flag.
      workInProgress.flags |= PerformedWork;
      reconcileChildren(current, workInProgress, newChildren, renderLanes);
      return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
      if (current !== null) {
        // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
      }
      {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress.lanes);
      // Check if the children have any pending work.
      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
      }
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error('Cannot swap the root fiber.');
        }
        // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null;
        // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error('Expected parent to have a child.');
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error('Expected to find the previous sibling.');
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
          last.nextEffect = current;
          returnFiber.lastEffect = current;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current;
        }
        current.nextEffect = null;
        current.flags = Deletion;
        newWorkInProgress.flags |= Placement;
        // Restart work from the new fiber.
        return newWorkInProgress;
      }
    }
    function beginWork(current, workInProgress, renderLanes) {
      var updateLanes = workInProgress.lanes;
      {
        if (workInProgress._debugNeedsRemount && current !== null) {
          // This will restart the begin phase with a new fiber.
          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        }
      }
      if (current !== null) {
        var oldProps = current.memoizedProps;
        var newProps = workInProgress.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
        workInProgress.type !== current.type) {
          // If props or context changed, mark the fiber as having performed work.
          // This may be unset if the props are determined to be equal later (memo).
          didReceiveUpdate = true;
        } else if (!includesSomeLane(renderLanes, updateLanes)) {
          didReceiveUpdate = false;
          // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.
          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress);
              break;
            case ClassComponent:
              {
                var Component = workInProgress.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }
                break;
              }
            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;
            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }
            case Profiler:
              {
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) {
                  workInProgress.flags |= Update;
                }
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
              break;
            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                if (state !== null) {
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  // child fragment.
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes, primaryChildLanes)) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                  } else {
                    // The primary child fragment does not have pending work marked
                    // on it
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
            case SuspenseListComponent:
              {
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                  }
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  workInProgress.flags |= DidCapture;
                }
                // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                  // Reset to the "together" mode in case we've started a different
                  // update in the past but didn't complete it.
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  return null;
                }
              }
            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
              }
          }
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } else {
          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
          } else {
            // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
      }
      // Before entering the begin phase, clear pending update priority.
      // TODO: This assumes that we're about to evaluate the component and process
      // the update queue. However, there's an exception: SimpleMemoComponent
      // sometimes bails out later in the begin phase. This indicates that we should
      // move this assignment out of the common path and into each branch.
      workInProgress.lanes = NoLanes;
      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
          }
        case LazyComponent:
          {
            var elementType = workInProgress.elementType;
            return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
          }
        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
          }
        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;
            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
          }
        case HostRoot:
          return updateHostRoot(current, workInProgress, renderLanes);
        case HostComponent:
          return updateHostComponent(current, workInProgress, renderLanes);
        case HostText:
          return updateHostText(current, workInProgress);
        case SuspenseComponent:
          return updateSuspenseComponent(current, workInProgress, renderLanes);
        case HostPortal:
          return updatePortalComponent(current, workInProgress, renderLanes);
        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;
            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
          }
        case Fragment:
          return updateFragment(current, workInProgress, renderLanes);
        case Mode:
          return updateMode(current, workInProgress, renderLanes);
        case Profiler:
          return updateProfiler(current, workInProgress, renderLanes);
        case ContextProvider:
          return updateContextProvider(current, workInProgress, renderLanes);
        case ContextConsumer:
          return updateContextConsumer(current, workInProgress, renderLanes);
        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;
            // Resolve outer props first, then resolve inner props.
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                  'prop', getComponentName(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
          }
        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
          }
        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;
            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
          }
        case SuspenseListComponent:
          {
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case Block:
          {
            break;
          }
        case OffscreenComponent:
          {
            return updateOffscreenComponent(current, workInProgress, renderLanes);
          }
        case LegacyHiddenComponent:
          {
            return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
          }
      }
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
      workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      // Mutation mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) ; else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      };
      updateHostContainer = function (workInProgress) {};
      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        }
        // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
      }
      switch (renderState.tailMode) {
        case 'hidden':
          {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            // Next we're simply going to delete all insertions after the
            // last rendered item.
            if (lastTailNode === null) {
              // All remaining items in the tail are insertions.
              renderState.tail = null;
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              lastTailNode.sibling = null;
            }
            break;
          }
        case 'collapsed':
          {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            // Next we're simply going to delete all insertions after the
            // last rendered item.
            if (_lastTailNode === null) {
              // All remaining items in the tail are insertions.
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                // We suspended during the head. We want to show at least one
                // row at the tail. So we'll keep on and cut off the rest.
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              _lastTailNode.sibling = null;
            }
            break;
          }
      }
    }
    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      switch (workInProgress.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          return null;
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            return null;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            resetWorkInProgressVersions();
            var fiberRoot = workInProgress.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              var wasHydrated = popHydrationState(workInProgress);
              if (wasHydrated) {
                // If we hydrated, then we'll need to schedule an update for
                // the commit side-effects on the root.
                markUpdate(workInProgress);
              } else if (!fiberRoot.hydrate) {
                // Schedule an effect to clear this container at the start of the next commit.
                // This handles the case of React rendering into a container with previous children.
                // It's also safe to do for updates too, because current.child would only be null
                // if the previous render was null (so the the container would already be empty).
                workInProgress.flags |= Snapshot;
              }
            }
            updateHostContainer(workInProgress);
            return null;
          }
        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;
            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                // This can happen when we abort work.
                return null;
              }
              var currentHostContext = getHostContext();
              // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on whether we want to add them top->down or
              // bottom->up. Top->down is faster in IE11.
              var _wasHydrated = popHydrationState(workInProgress);
              if (_wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node need to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress, false, false);
                workInProgress.stateNode = instance;
                // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress);
                }
              }
              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }
            return null;
          }
        case HostText:
          {
            var newText = newProps;
            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps;
              // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.
              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }
            return null;
          }
        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var nextState = workInProgress.memoizedState;
            if ((workInProgress.flags & DidCapture) !== NoFlags) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.lanes = renderLanes;
              // Do not reset the effect list.
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current === null) {
              if (workInProgress.memoizedProps.fallback !== undefined) {
                popHydrationState(workInProgress);
              }
            } else {
              var prevState = current.memoizedState;
              prevDidTimeout = prevState !== null;
            }
            if (nextDidTimeout && !prevDidTimeout) {
              // If this subtreee is running in blocking mode we can suspend,
              // otherwise we won't suspend.
              // TODO: This will still suspend a synchronous tree if anything
              // in the concurrent tree already suspended during this render.
              // This is a known bug.
              if ((workInProgress.mode & BlockingMode) !== NoMode) {
                // TODO: Move this back to throwException because this is too late
                // if this is a large tree which is common for initial loads. We
                // don't know if we should restart a render or not until we get
                // this marker, and this is too late.
                // If this render already had a ping or lower pri updates,
                // and this is the first time we know we're going to suspend we
                // should be able to immediately restart from within throwException.
                var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  // If this was in an invisible tree or a new render, then showing
                  // this boundary is ok.
                  renderDidSuspend();
                } else {
                  // Otherwise, we're going to have to hide content so we should
                  // suspend for longer if possible.
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            {
              // TODO: Only schedule updates if these values are non equal, i.e. it changed.
              if (nextDidTimeout || prevDidTimeout) {
                // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
              }
            }
            return null;
          }
        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          if (current === null) {
            preparePortalMount(workInProgress.stateNode.containerInfo);
          }
          return null;
        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          return null;
        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }
            return null;
          }
        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            var renderState = workInProgress.memoizedState;
            if (renderState === null) {
              // We're running in the default, "independent" mode.
              // We don't do anything in this mode.
              return null;
            }
            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              // We just rendered the head.
              if (!didSuspendAlready) {
                // This is the first pass. We need to figure out if anything is still
                // suspended in the rendered set.
                // If new content unsuspended, but there's still some content that
                // didn't. Then we need to do a second pass that forces everything
                // to keep showing their fallbacks.
                // We might be suspended if something in this render pass suspended, or
                // something in the previous committed pass suspended. Otherwise,
                // there's no chance so we can skip the expensive call to
                // findFirstSuspended.
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      // If this is a newly suspended tree, it might not get committed as
                      // part of the second pass. In that case nothing will subscribe to
                      // its thennables. Instead, we'll transfer its thennables to the
                      // SuspenseList so that it can retry if they resolve.
                      // There might be multiple of these in the list but since we're
                      // going to wait for all of them anyway, it doesn't really matter
                      // which ones gets to ping. In theory we could get clever and keep
                      // track of how many dependencies remain but it gets tricky because
                      // in the meantime, we can add/remove/change items and dependencies.
                      // We might bail out of the loop before finding any but that
                      // doesn't matter since that means that the other boundaries that
                      // we did find already has their listeners attached.
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress.updateQueue = newThennables;
                        workInProgress.flags |= Update;
                      }
                      // Rerender the whole list, but this time, we'll force fallbacks
                      // to stay in place.
                      // Reset the effect list before doing the second pass since that's now invalid.
                      if (renderState.lastEffect === null) {
                        workInProgress.firstEffect = null;
                      }
                      workInProgress.lastEffect = renderState.lastEffect;
                      // Reset the child fibers to their original state.
                      resetChildFibers(workInProgress, renderLanes);
                      // Set up the Suspense Context to force suspense and immediately
                      // rerender the children.
                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  // We have already passed our CPU deadline but we still have rows
                  // left in the tail. We'll just give up further attempts to render
                  // the main content and only render fallbacks.
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.
                  workInProgress.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              // Append the rendered row to the child list.
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  // Ensure we transfer the update queue to the parent so that it doesn't
                  // get lost if this row ends up dropped during a second pass.
                  var _newThennables = _suspended.updateQueue;
                  if (_newThennables !== null) {
                    workInProgress.updateQueue = _newThennables;
                    workInProgress.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  // This might have been modified.
                  if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) // We don't cut it if we're hydrating.
                  {
                    // We need to delete the row we just rendered.
                    // Reset the effect list to what it was before we rendered this
                    // child. The nested children have already appended themselves.
                    var lastEffect = workInProgress.lastEffect = renderState.lastEffect;
                    // Remove any effects that were appended after this point.
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    // We're done.
                    return null;
                  }
                } else if (// The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                  // We have now passed our CPU deadline and we'll just give up further
                  // attempts to render the main content and only render fallbacks.
                  // The assumption is that this is usually faster.
                  workInProgress.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.
                  workInProgress.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              }
              if (renderState.isBackwards) {
                // The effect list of the backwards tail will have been added
                // to the end. This breaks the guarantee that life-cycles fire in
                // sibling order but that isn't a strong guarantee promised by React.
                // Especially since these might also just pop in during future commits.
                // Append to the beginning of the list.
                renderedTail.sibling = workInProgress.child;
                workInProgress.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              // We still have tail rows to render.
              // Pop a row.
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress.lastEffect;
              renderState.renderingStartTime = now();
              next.sibling = null;
              // Restore the context.
              // TODO: We can probably just avoid popping it instead and only
              // setting it the first time we go from not suspended to suspended.
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress, suspenseContext);
              // Do a pass over the next row.
              return next;
            }
            return null;
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case Block:
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            popRenderLanes(workInProgress);
            if (current !== null) {
              var _nextState = workInProgress.memoizedState;
              var _prevState = current.memoizedState;
              var prevIsHidden = _prevState !== null;
              var nextIsHidden = _nextState !== null;
              if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                workInProgress.flags |= Update;
              }
            }
            return null;
          }
      }
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function unwindWork(workInProgress, renderLanes) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }
            var flags = workInProgress.flags;
            if (flags & ShouldCapture) {
              workInProgress.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            return null;
          }
        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            resetWorkInProgressVersions();
            var _flags = workInProgress.flags;
            if (!((_flags & DidCapture) === NoFlags)) {
              {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }
            }
            workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
        case HostComponent:
          {
            // TODO: popHydrationState
            popHostContext(workInProgress);
            return null;
          }
        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var _flags2 = workInProgress.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;
              // Captured a suspense effect. Re-render the boundary.
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress);
              }
              return workInProgress;
            }
            return null;
          }
        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            // SuspenseList doesn't actually catch anything. It should've been
            // caught by a nested boundary. If not, it should bubble through.
            return null;
          }
        case HostPortal:
          popHostContainer(workInProgress);
          return null;
        case ContextProvider:
          popProvider(workInProgress);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress);
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          popProvider(interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog(boundary, errorInfo);
        // Allow injected showErrorDialog() to prevent default console.error logging.
        // This enables renderers like ReactNative to better manage redbox behavior.
        if (logError === false) {
          return;
        }
        var error = errorInfo.value;
        if (true) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : '';
          // Browsers support silencing uncaught errors by calling
          // `preventDefault()` in window `error` handler.
          // We record this information as an expando on the error.
          if (error != null && error._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              // The error is recoverable and was silenced.
              // Ignore it and don't print the stack addendum.
              // This is handy for testing error boundaries without noise.
              return;
            }
            // The error is fatal. Since the silencing might have
            // been accidental, we'll surface it anyway.
            // However, the browser would have silenced the original error
            // so we'll print it first, and then print the stack addendum.
            console['error'](error);
          }
          var componentName = source ? getComponentName(source.type) : null;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
          var errorBoundaryMessage;
          var errorBoundaryName = getComponentName(boundary.type);
          if (errorBoundaryName) {
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          } else {
            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          // In development, we provide our own message with just the component stack.
          // We don't include the original error message and JS stack because the browser
          // has already printed it. Even if the application swallows the error, it is still
          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
          console['error'](combinedMessage);
        } else {
          // In production, we print the error directly.
          // This will include the message, the JS stack, and anything the browser wants to show.
          // We pass the error object instead of custom message so that the browser displays the error natively.
          console['error'](error);
        }
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      // Unmount the root by rendering null.
      update.tag = CaptureUpdate;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = {
        element: null
      };
      var error = errorInfo.value;
      update.callback = function () {
        onUncaughtError(error);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === 'function') {
        var error$1 = errorInfo.value;
        update.payload = function () {
          logCapturedError(fiber, errorInfo);
          return getDerivedStateFromError(error$1);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            // Only log here if componentDidCatch is the only error boundary method defined
            logCapturedError(fiber, errorInfo);
          }
          var error$1 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$1, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
              }
            }
          }
        };
      } else {
        update.callback = function () {
          markFailedErrorBoundaryForHotReloading(fiber);
        };
      }
      return update;
    }
    function attachPingListener(root, wakeable, lanes) {
      // Attach a listener to the promise to "ping" the root and retry. But only if
      // one does not already exist for the lanes we're currently rendering (which
      // acts like a "thread ID" here).
      var pingCache = root.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap$1();
        threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        // Memoize using the thread ID to prevent redundant listeners.
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
        wakeable.then(ping, ping);
      }
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
      // The source fiber did not complete.
      sourceFiber.flags |= Incomplete;
      // Its effect list is no longer valid.
      sourceFiber.firstEffect = sourceFiber.lastEffect = null;
      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a wakeable.
        var wakeable = value;
        if ((sourceFiber.mode & BlockingMode) === NoMode) {
          // Reset the memoizedState to what it was before we attempted
          // to render it.
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
        var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
        // Schedule the nearest Suspense to re-render the timed out view.
        var _workInProgress = returnFiber;
        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
            // Found the nearest boundary.
            // Stash the promise on the boundary fiber. If the boundary times out, we'll
            // attach another listener to flip the boundary back to its normal state.
            var wakeables = _workInProgress.updateQueue;
            if (wakeables === null) {
              var updateQueue = new Set();
              updateQueue.add(wakeable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
            // If the boundary is outside of blocking mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            // 
            // Note: It doesn't matter whether the component that suspended was
            // inside a blocking mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.
            if ((_workInProgress.mode & BlockingMode) === NoMode) {
              _workInProgress.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force update to
                  // prevent a bail out.
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              }
              // The source fiber did not complete. Mark it with Sync priority to
              // indicate that it still has pending work.
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              // Exit without suspending.
              return;
            }
            // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.
            // 
            // After this we'll use a set of heuristics to determine whether this
            // render pass will run to completion or restart or "suspend" the commit.
            // The actual logic for this is spread out in different places.
            // 
            // This first principle is that if we're going to suspend when we complete
            // a root, then we should also restart if we get an update or ping that
            // might unsuspend it, and vice versa. The only reason to suspend is
            // because you think you might want to restart before committing. However,
            // it doesn't make sense to restart only while in the period we're suspended.
            // 
            // Restarting too aggressively is also not good because it starves out any
            // intermediate loading state. So we use heuristics to determine when.
            // Suspense Heuristics
            // 
            // If nothing threw a Promise or all the same fallbacks are already showing,
            // then don't suspend/restart.
            // 
            // If this is an initial render of a new tree of Suspense boundaries and
            // those trigger a fallback, then don't suspend/restart. We want to ensure
            // that we can show the initial loading state as quickly as possible.
            // 
            // If we hit a "Delayed" case, such as when we'd switch from content back into
            // a fallback, then we should always suspend/restart. Transitions apply
            // to this case. If none is defined, JND is used instead.
            // 
            // If we're already showing a fallback and it gets "retried", allowing us to show
            // another level, but there's still an inner boundary that would show a fallback,
            // then we suspend/restart for 500ms since the last time we showed a fallback
            // anywhere in the tree. This effectively throttles progressive loading into a
            // consistent train of commits. This also gives us an opportunity to restart to
            // get to the completed state slightly earlier.
            // 
            // If there's ambiguity due to batching it's resolved in preference of:
            // 1) "delayed", 2) "initial render", 3) "retry".
            // 
            // We want to ensure that a "busy" state doesn't get force committed. We want to
            // ensure that new initial loading states can commit as soon as possible.
            attachPingListener(root, wakeable, rootRenderLanes);
            _workInProgress.flags |= ShouldCapture;
            _workInProgress.lanes = rootRenderLanes;
            return;
          }
          // This boundary already captured during this render. Continue to the next
          // boundary.
          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null);
        // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?
        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
      }
      // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.
      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;
      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
              var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }
          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;
            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);
              // Schedule the error boundary to re-render using updated state
              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }
            break;
        }
        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function (current, instance) {
      instance.props = current.memoizedProps;
      instance.state = current.memoizedState;
      {
        instance.componentWillUnmount();
      }
    };
    // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current, unmountError);
        }
      }
    }
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);
            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current, error);
        }
      }
    }
    function commitBeforeMutationLifeCycles(current, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
        case Block:
          {
            return;
          }
        case ClassComponent:
          {
            if (finishedWork.flags & Snapshot) {
              if (current !== null) {
                var prevProps = current.memoizedProps;
                var prevState = current.memoizedState;
                var instance = finishedWork.stateNode;
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
            }
            return;
          }
        case HostRoot:
          {
            {
              if (finishedWork.flags & Snapshot) {
                var root = finishedWork.stateNode;
                clearContainer(root.containerInfo);
              }
            }
            return;
          }
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & tag) === tag) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = undefined;
            if (destroy !== undefined) {
              destroy();
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(tag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & tag) === tag) {
            // Mount
            var create = effect.create;
            effect.destroy = create();
            {
              var destroy = effect.destroy;
              if (destroy !== undefined && typeof destroy !== 'function') {
                var addendum = void 0;
                if (destroy === null) {
                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                } else if (typeof destroy.then === 'function') {
                  addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                } else {
                  addendum = ' You returned: ' + destroy;
                }
                error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function schedulePassiveEffects(finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          var _effect = effect, next = _effect.next, tag = _effect.tag;
          if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
            enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
            enqueuePendingPassiveHookEffectMount(finishedWork, effect);
          }
          effect = next;
        } while (effect !== firstEffect);
      }
    }
    function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
        case Block:
          {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
            }
            schedulePassiveEffects(finishedWork);
            return;
          }
        case ClassComponent:
          {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                var prevState = current.memoizedState;
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                }
                {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
                              // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
}
              // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            return;
          }
        case HostRoot:
          {
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            return;
          }
        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode;
            // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.
            if (current === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            return;
          }
        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }
        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }
        case Profiler:
          {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime = getCommitTime();
              if (typeof onRender === 'function') {
                {
                  onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                }
              }
            }
            return;
          }
        case SuspenseComponent:
          {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
        case SuspenseListComponent:
        case IncompleteClassComponent:
        case FundamentalComponent:
        case ScopeComponent:
        case OffscreenComponent:
        case LegacyHiddenComponent:
          return;
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;
            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;
            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        // Moved outside to ensure DCE works with this flag
        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function commitDetachRef(current) {
      var currentRef = current.ref;
      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    }
    // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, renderPriorityLevel) {
      onCommitUnmount(current);
      switch (current.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
        case Block:
          {
            var updateQueue = current.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                  if (destroy !== undefined) {
                    if ((tag & Passive$1) !== NoFlags$1) {
                      enqueuePendingPassiveHookEffectUnmount(current, effect);
                    } else {
                      {
                        safelyCallDestroy(current, destroy);
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
            return;
          }
        case ClassComponent:
          {
            safelyDetachRef(current);
            var instance = current.stateNode;
            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current, instance);
            }
            return;
          }
        case HostComponent:
          {
            safelyDetachRef(current);
            return;
          }
        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            {
              unmountHostComponents(finishedRoot, current);
            }
            return;
          }
        case FundamentalComponent:
          {
            return;
          }
        case DehydratedFragment:
          {
            return;
          }
        case ScopeComponent:
          {
            return;
          }
      }
    }
    function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      // we do an inner loop while we're still inside the host node.
      var node = root;
      while (true) {
        commitUnmount(finishedRoot, node);
        // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.
        if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === root) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function detachFiberMutation(fiber) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      // Note: we cannot null out sibling here, otherwise it can cause issues
      // with findDOMNode and how it requires the sibling field to carry out
      // traversal in a later effect. See PR #16820. We now clear the sibling
      // field after effects, see: detachFiberAfterEffects.
      // 
      // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
      // It may be required if the current component is an error boundary,
      // and one of its descendants throws while unmounting a passive effect.
      fiber.alternate = null;
      fiber.child = null;
      fiber.dependencies = null;
      fiber.firstEffect = null;
      fiber.lastEffect = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.return = null;
      fiber.updateQueue = null;
      {
        fiber._debugOwner = null;
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      {
        {
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      // TODO: Find a more efficient way to do this.
      var node = fiber;
      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.flags & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          }
          // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.
          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        }
        // Check if this host node is stable or about to be placed.
        if (!(node.flags & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      // Note: these two variables *must* always be updated together.
      var parent;
      var isContainer;
      var parentStateNode = parentFiber.stateNode;
      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentStateNode;
          isContainer = false;
          break;
        case HostRoot:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;
        case HostPortal:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;
        case FundamentalComponent:
        default:
          {
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
      }
      if (parentFiber.flags & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent);
        // Clear ContentReset from the effect tag
        parentFiber.flags &= ~ContentReset;
      }
      var before = getHostSibling(finishedWork);
      // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.
      if (isContainer) {
        insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
      } else {
        insertOrAppendPlacementNode(finishedWork, before, parent);
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost || enableFundamentalAPI) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal) ; else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost || enableFundamentalAPI) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal) ; else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
      // We only have the top Fiber that was deleted but we need to recurse down its
      // children to find all the terminal nodes.
      var node = current;
      // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.
      var currentParentIsValid = false;
      // Note: these two variables *must* always be updated together.
      var currentParent;
      var currentParentIsContainer;
      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;
          findParent: while (true) {
            if (!(parent !== null)) {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var parentStateNode = parent.stateNode;
            switch (parent.tag) {
              case HostComponent:
                currentParent = parentStateNode;
                currentParentIsContainer = false;
                break findParent;
              case HostRoot:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
              case HostPortal:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }
            parent = parent.return;
          }
          currentParentIsValid = true;
        }
        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(finishedRoot, node);
          // After all the children have unmounted, it is now safe to remove the
          // node from the tree.
          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true;
            // Visit children because portals might contain host components.
            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(finishedRoot, node);
          // Visit children because we may find more host components below.
          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }
        if (node === current) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === current) {
            return;
          }
          node = node.return;
          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function commitDeletion(finishedRoot, current, renderPriorityLevel) {
      {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current);
      }
      var alternate = current.alternate;
      detachFiberMutation(current);
      if (alternate !== null) {
        detachFiberMutation(alternate);
      }
    }
    function commitWork(current, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
        case Block:
          {
            // Layout effects are destroyed during the mutation phase so that all
            // destroy functions for all fibers are called before any create functions.
            // This prevents sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
            }
            return;
          }
        case ClassComponent:
          {
            return;
          }
        case HostComponent:
          {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps;
              // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.
              var oldProps = current !== null ? current.memoizedProps : newProps;
              var type = finishedWork.type;
              // TODO: Type the updateQueue to be specific to host components.
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps);
              }
            }
            return;
          }
        case HostText:
          {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldText = current !== null ? current.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
        case HostRoot:
          {
            {
              var _root = finishedWork.stateNode;
              if (_root.hydrate) {
                // We've just hydrated. No need to hydrate again.
                _root.hydrate = false;
                commitHydratedContainer(_root.containerInfo);
              }
            }
            return;
          }
        case Profiler:
          {
            return;
          }
        case SuspenseComponent:
          {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
        case SuspenseListComponent:
          {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
        case IncompleteClassComponent:
          {
            return;
          }
        case FundamentalComponent:
          {
            break;
          }
        case ScopeComponent:
          {
            break;
          }
        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            var newState = finishedWork.memoizedState;
            var isHidden = newState !== null;
            hideOrUnhideAllChildren(finishedWork, isHidden);
            return;
          }
      }
      {
        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function commitSuspenseComponent(finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState !== null) {
        markCommitTimeOfFallback();
        {
          // Hide the Offscreen component that contains the primary children. TODO:
          // Ideally, this effect would have been scheduled on the Offscreen fiber
          // itself. That's how unhiding works: the Offscreen component schedules an
          // effect on itself. However, in this case, the component didn't complete,
          // so the fiber was never added to the effect list in the normal path. We
          // could have appended it to the effect list in the Suspense component's
          // second pass, but doing it this way is less complicated. This would be
          // simpler if we got rid of the effect list and traversed the tree, like
          // we're planning to do.
          var primaryChildParent = finishedWork.child;
          hideOrUnhideAllChildren(primaryChildParent, true);
        }
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current = finishedWork.alternate;
        if (current !== null) {
          var prevState = current.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      // If this boundary just timed out, then it will have a set of wakeables.
      // For each wakeable, attach a listener so that when it resolves, React
      // attempts to re-render the boundary in the primary (pre-timeout) state.
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function (wakeable) {
          // Memoize using the boundary fiber to prevent redundant listeners.
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            {
              if (wakeable.__reactDoNotTraceInteractions !== true) {
                retry = tracing.unstable_wrap(retry);
              }
            }
            retryCache.add(wakeable);
            wakeable.then(retry, retry);
          }
        });
      }
    }
    // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current, finishedWork) {
      if (current !== null) {
        var oldState = current.memoizedState;
        if (oldState === null || oldState.dehydrated !== null) {
          var newState = finishedWork.memoizedState;
          return newState !== null && newState.dehydrated === null;
        }
      }
      return false;
    }
    function commitResetTextContent(current) {
      resetTextContent(current.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor$1 = Symbol.for;
      COMPONENT_TYPE = symbolFor$1('selector.component');
      HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
      ROLE_TYPE = symbolFor$1('selector.role');
      TEST_NAME_TYPE = symbolFor$1('selector.test_id');
      TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function (commitHook) {
          return commitHook();
        });
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /**/
    0;
    var BatchedContext = /**/
    1;
    var EventContext = /**/
    2;
    var DiscreteEventContext = /**/
    4;
    var LegacyUnbatchedContext = /**/
    8;
    var RenderContext = /**/
    16;
    var CommitContext = /**/
    32;
    var RetryAfterError = /**/
    64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    // Describes where we are in the React execution stack
    var executionContext = NoContext;
    // The root we're working on
    var workInProgressRoot = null;
    // The fiber we're working on
    var workInProgress = null;
    // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes;
    // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    // 
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete;
    // A fatal error, if one is thrown
    var workInProgressRootFatalError = null;
    // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes;
    // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes;
    // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes;
    // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null;
    // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity;
    // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null;
    // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null;
    // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes;
    // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        // We're inside React, so it's fine to read the actual time.
        return now();
      }
      // We're not inside React, so we may be in the middle of a browser event.
      if (currentEventTime !== NoTimestamp) {
        // Use the same start time for all updates until we enter React again.
        return currentEventTime;
      }
      // This is the first update since React yielded. Compute a new start time.
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      // Special cases
      var mode = fiber.mode;
      if ((mode & BlockingMode) === NoMode) {
        return SyncLane;
      } else if ((mode & ConcurrentMode) === NoMode) {
        return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
      }
      // The algorithm for assigning an update to a lane should be stable for all
      // updates at the same priority within the same event. To do this, the inputs
      // to the algorithm must be the same. For example, we use the `renderLanes`
      // to avoid choosing a lane that is already in the middle of rendering.
      // 
      // However, the "included" lanes could be mutated in between updates in the
      // same event, like if you perform an update inside `flushSync`. Or any other
      // code path that might call `prepareFreshStack`.
      // 
      // The trick we use is to cache the first of each of these inputs within an
      // event. Then reset the cached values once we can be sure the event is over.
      // Our heuristic for that is whenever we enter a concurrent work loop.
      // 
      // We'll do the same for `currentEventPendingLanes` below.
      if (currentEventWipLanes === NoLanes) {
        currentEventWipLanes = workInProgressRootIncludedLanes;
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (currentEventPendingLanes !== NoLanes) {
          currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
        }
        return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
      }
      // TODO: Remove this dependency on the Scheduler priority.
      // To do that, we're replacing it with an update lane priority.
      var schedulerPriority = getCurrentPriorityLevel();
      // The old behavior was using the priority level of the Scheduler.
      // This couples React to the Scheduler internals, so we're replacing it
      // with the currentUpdateLanePriority above. As an example of how this
      // could be problematic, if we're not inside `Scheduler.runWithPriority`,
      // then we'll get the priority of the current running Scheduler task,
      // which is probably not what we want.
      var lane;
      if (// TODO: Temporary. We're removing the concept of discrete updates.
      (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
        lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
      } else {
        var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
        lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
      }
      return lane;
    }
    function requestRetryLane(fiber) {
      // This is a fork of `requestUpdateLane` designed specifically for Suspense
      // "retries" — a special update that attempts to flip a Suspense boundary
      // from its placeholder state to its primary/resolved state.
      // Special cases
      var mode = fiber.mode;
      if ((mode & BlockingMode) === NoMode) {
        return SyncLane;
      } else if ((mode & ConcurrentMode) === NoMode) {
        return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
      }
      // See `requestUpdateLane` for explanation of `currentEventWipLanes`
      if (currentEventWipLanes === NoLanes) {
        currentEventWipLanes = workInProgressRootIncludedLanes;
      }
      return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
      checkForNestedUpdates();
      warnAboutRenderPhaseUpdatesInDEV(fiber);
      var root = markUpdateLaneFromFiberToRoot(fiber, lane);
      if (root === null) {
        warnAboutUpdateOnUnmountedFiberInDEV(fiber);
        return null;
      }
      // Mark that the root has a pending update.
      markRootUpdated(root, lane, eventTime);
      if (root === workInProgressRoot) {
        // Received an update to a tree that's in the middle of rendering. Mark
        // that there was an interleaved update work on this root. Unless the
        // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
        // phase update. In that case, we don't treat render phase updates as if
        // they were interleaved, for backwards compat reasons.
        {
          workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
        }
        if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
          // The root already suspended with a delay, which means this render
          // definitely won't finish. Since we have a new update, let's mark it as
          // suspended now, right before marking the incoming update. This has the
          // effect of interrupting the current render and switching to the update.
          // TODO: Make sure this doesn't override pings that happen while we've
          // already started rendering.
          markRootSuspended$1(root, workInProgressRootRenderLanes);
        }
      }
      // TODO: requestUpdateLanePriority also reads the priority. Pass the
      // priority as an argument to that function and this one.
      var priorityLevel = getCurrentPriorityLevel();
      if (lane === SyncLane) {
        if (// Check if we're inside unbatchedUpdates
        (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
        (executionContext & (RenderContext | CommitContext)) === NoContext) {
          // Register pending interactions on the root to avoid losing traced interaction data.
          schedulePendingInteractions(root, lane);
          // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
          // root inside of batchedUpdates should be synchronous, but layout updates
          // should be deferred until the end of the batch.
          performSyncWorkOnRoot(root);
        } else {
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, lane);
          if (executionContext === NoContext) {
            // Flush the synchronous work now, unless we're already working or inside
            // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
            // scheduleCallbackForFiber to preserve the ability to schedule a callback
            // without immediately flushing it. We only do this for user-initiated
            // updates, to preserve historical behavior of legacy mode.
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      } else {
        // Schedule a discrete update but only if it's not Sync.
        if ((executionContext & DiscreteEventContext) !== NoContext && (// Only updates at user-blocking priority or greater are considered
        // discrete, even inside a discrete event.
        priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
          // This is the result of a discrete event. Track the lowest priority
          // discrete update per root so we can flush them early, if needed.
          if (rootsWithPendingDiscreteUpdates === null) {
            rootsWithPendingDiscreteUpdates = new Set([root]);
          } else {
            rootsWithPendingDiscreteUpdates.add(root);
          }
        }
        // Schedule other updates after in case the callback is sync.
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, lane);
      }
      // We use this when assigning a lane for a transition inside
      // `requestUpdateLane`. We assume it's the same as the root being updated,
      // since in the common case of a single root app it probably is. If it's not
      // the same root, then it's not a huge deal, we just might batch more stuff
      // together more than necessary.
      mostRecentlyUpdatedRoot = root;
    }
    // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      // Update the source fiber's lanes
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
              // Walk the parent path to the root and update the child expiration time.
}
      // Walk the parent path to the root and update the child expiration time.
      var node = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node = parent;
        parent = parent.return;
      }
      if (node.tag === HostRoot) {
        var root = node.stateNode;
        return root;
      } else {
        return null;
      }
    }
    // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
      var existingCallbackNode = root.callbackNode;
      // Check if any lanes are being starved by other work. If so, mark them as
      // expired so we know to work on those next.
      markStarvedLanesAsExpired(root, currentTime);
      // Determine the next lanes to work on, and their priority.
      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      // This returns the priority level computed during the `getNextLanes` call.
      var newCallbackPriority = returnNextLanesPriority();
      if (nextLanes === NoLanes) {
        // Special case: There's nothing to work on.
        if (existingCallbackNode !== null) {
          cancelCallback(existingCallbackNode);
          root.callbackNode = null;
          root.callbackPriority = NoLanePriority;
        }
        return;
      }
      // Check if there's an existing task. We may be able to reuse it.
      if (existingCallbackNode !== null) {
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority) {
          // The priority hasn't changed. We can reuse the existing task. Exit.
          return;
        }
        // The priority changed. Cancel the existing callback. We'll schedule a new
        // one below.
        cancelCallback(existingCallbackNode);
      }
      // Schedule a new callback.
      var newCallbackNode;
      if (newCallbackPriority === SyncLanePriority) {
        // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
      } else if (newCallbackPriority === SyncBatchedLanePriority) {
        newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
      } else {
        var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
        newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = newCallbackPriority;
      root.callbackNode = newCallbackNode;
    }
    // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root) {
      // Since we know we're in a React event, we can clear the current
      // event time. The next update will compute a new event time.
      currentEventTime = NoTimestamp;
      currentEventWipLanes = NoLanes;
      currentEventPendingLanes = NoLanes;
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      // Flush any pending passive effects before deciding which lanes to work on,
      // in case they schedule additional work.
      var originalCallbackNode = root.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        // Something in the passive effect phase may have canceled the current task.
        // Check if the task node for this root was changed.
        if (root.callbackNode !== originalCallbackNode) {
          // The current task was canceled. Exit. We don't need to call
          // `ensureRootIsScheduled` because the check above implies either that
          // there's a new task, or that there's no remaining work on this root.
          return null;
        }
      }
      // Determine the next expiration time to work on, using the fields stored
      // on the root.
      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        // Defensive coding. This is never expected to happen.
        return null;
      }
      var exitStatus = renderRootConcurrent(root, lanes);
      if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
        // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        // 
        // So we'll throw out the current work and restart.
        prepareFreshStack(root, NoLanes);
      } else if (exitStatus !== RootIncomplete) {
        if (exitStatus === RootErrored) {
          executionContext |= RetryAfterError;
          // If an error occurred during hydration,
          // discard server response and fall back to client side render.
          if (root.hydrate) {
            root.hydrate = false;
            clearContainer(root.containerInfo);
          }
          // If something threw an error, try rendering one more time. We'll render
          // synchronously to block concurrent data mutations, and we'll includes
          // all pending updates are included. If it still fails after the second
          // attempt, we'll give up and commit the resulting tree.
          lanes = getLanesToRetrySynchronouslyOnError(root);
          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root, lanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw fatalError;
        }
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        finishConcurrentRender(root, exitStatus, lanes);
      }
      ensureRootIsScheduled(root, now());
      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
      return null;
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
      switch (exitStatus) {
        case RootIncomplete:
        case RootFatalErrored:
          {
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }
          }
        case RootErrored:
          {
            // We should have already attempted to retry this tree. If we reached
            // this point, it errored again. Commit it.
            commitRoot(root);
            break;
          }
        case RootSuspended:
          {
            markRootSuspended$1(root, lanes);
            // We have an acceptable loading state. We need to figure out if we
            // should immediately commit it or wait a bit.
            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              // This render only included retries, no updates. Throttle committing
              // retries so that we don't show too many loading states too quickly.
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              // Don't bother with a very short suspense time.
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root, NoLanes);
                if (nextLanes !== NoLanes) {
                  // There's additional work on this root.
                  break;
                }
                var suspendedLanes = root.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  // We should prefer to render the fallback of at the last
                  // suspended level. Ping the last suspended level to try
                  // rendering it again.
                  // FIXME: What if the suspended lanes are Idle? Should not restart.
                  var eventTime = requestEventTime();
                  markRootPinged(root, suspendedLanes);
                  break;
                }
                // The render is suspended, it hasn't timed out, and there's no
                // lower priority work to do. Instead of committing the fallback
                // immediately, wait for more data to arrive.
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                break;
              }
            }
            // The work expired. Commit immediately.
            commitRoot(root);
            break;
          }
        case RootSuspendedWithDelay:
          {
            markRootSuspended$1(root, lanes);
            if (includesOnlyTransitions(lanes)) {
              // This is a transition, so we should exit without committing a
              // placeholder and without scheduling a timeout. Delay indefinitely
              // until we receive more data.
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              // This is not a transition, but we did trigger an avoided state.
              // Schedule a placeholder to display after a short delay, using the Just
              // Noticeable Difference.
              // TODO: Is the JND optimization worth the added complexity? If this is
              // the only reason we track the event time, then probably not.
              // Consider removing.
              var mostRecentEventTime = getMostRecentEventTime(root, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              // Don't bother with a very short suspense time.
              if (_msUntilTimeout > 10) {
                // Instead of committing the fallback immediately, wait for more data
                // to arrive.
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                break;
              }
            }
            // Commit the placeholder.
            commitRoot(root);
            break;
          }
        case RootCompleted:
          {
            // The work completed. Ready to commit.
            commitRoot(root);
            break;
          }
        default:
          {
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
          }
      }
    }
    function markRootSuspended$1(root, suspendedLanes) {
      // When suspending, we should always exclude lanes that were pinged or (more
      // rarely, since we try to avoid it) updated during the render phase.
      // TODO: Lol maybe there's a better way to factor this besides this
      // obnoxiously named function :)
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
      markRootSuspended(root, suspendedLanes);
    }
    // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      flushPassiveEffects();
      var lanes;
      var exitStatus;
      if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
        // There's a partial tree, and at least one of its lanes has expired. Finish
        // rendering it before rendering the rest of the expired work.
        lanes = workInProgressRootRenderLanes;
        exitStatus = renderRootSync(root, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          // The render included lanes that were updated during the render phase.
          // For example, when unhiding a hidden tree, we include all the lanes
          // that were previously skipped when the tree was hidden. That set of
          // lanes is a superset of the lanes we started rendering with.
          // 
          // Note that this only happens when part of the tree is rendered
          // concurrently. If the whole tree is rendered synchronously, then there
          // are no interleaved events.
          lanes = getNextLanes(root, lanes);
          exitStatus = renderRootSync(root, lanes);
        }
      } else {
        lanes = getNextLanes(root, NoLanes);
        exitStatus = renderRootSync(root, lanes);
      }
      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
        executionContext |= RetryAfterError;
        // If an error occurred during hydration,
        // discard server response and fall back to client side render.
        if (root.hydrate) {
          root.hydrate = false;
          clearContainer(root.containerInfo);
        }
        // If something threw an error, try rendering one more time. We'll render
        // synchronously to block concurrent data mutations, and we'll includes
        // all pending updates are included. If it still fails after the second
        // attempt, we'll give up and commit the resulting tree.
        lanes = getLanesToRetrySynchronouslyOnError(root);
        if (lanes !== NoLanes) {
          exitStatus = renderRootSync(root, lanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root, NoLanes);
        markRootSuspended$1(root, lanes);
        ensureRootIsScheduled(root, now());
        throw fatalError;
      }
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      var finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      commitRoot(root);
      // Before exiting, make sure there's a callback scheduled for the next
      // pending level.
      ensureRootIsScheduled(root, now());
      return null;
    }
    function flushDiscreteUpdates() {
      // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
      // However, `act` uses `batchedUpdates`, so there's no way to distinguish
      // those two cases. Need to fix this before exposing flushDiscreteUpdates
      // as a public API.
      if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
          }
                  // We're already rendering, so we can't synchronously flush pending work.
          // This is probably a nested event dispatch triggered by a lifecycle/effect,
          // like `el.focus()`. Exit.
}
        // We're already rendering, so we can't synchronously flush pending work.
        // This is probably a nested event dispatch triggered by a lifecycle/effect,
        // like `el.focus()`. Exit.
        return;
      }
      flushPendingDiscreteUpdates();
      // If the discrete updates scheduled passive effects, flush them now so that
      // they fire before the next serial event.
      flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
      if (rootsWithPendingDiscreteUpdates !== null) {
        // For each root with pending discrete updates, schedule a callback to
        // immediately flush them.
        var roots = rootsWithPendingDiscreteUpdates;
        rootsWithPendingDiscreteUpdates = null;
        roots.forEach(function (root) {
          markDiscreteUpdatesExpired(root);
          ensureRootIsScheduled(root, now());
        });
      }
      // Now flush the immediate queue.
      flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function batchedEventUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= EventContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
      var prevExecutionContext = executionContext;
      executionContext |= DiscreteEventContext;
      {
        try {
          return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            // Flush the immediate callbacks that were scheduled during this batch
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
    }
    function unbatchedUpdates(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext &= ~BatchedContext;
      executionContext |= LegacyUnbatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
    function flushSync(fn, a) {
      var prevExecutionContext = executionContext;
      if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
        {
          error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
        }
        return fn(a);
      }
      executionContext |= BatchedContext;
      {
        try {
          if (fn) {
            return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
          } else {
            return undefined;
          }
        } finally {
          executionContext = prevExecutionContext;
          // Flush the immediate callbacks that were scheduled during this batch.
          // Note that this will happen even if batchedUpdates is higher up
          // the stack.
          flushSyncCallbackQueue();
        }
      }
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
      root.finishedWork = null;
      root.finishedLanes = NoLanes;
      var timeoutHandle = root.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        // The root previous suspended and scheduled a timeout to commit a fallback
        // state. Now that we have additional work, cancel the timeout.
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root;
      workInProgress = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
      workInProgressRootExitStatus = RootIncomplete;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      {
        spawnedWorkDuringRender = null;
      }
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
    }
    function handleError(root, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          // Reset module-level state that was set during the render phase.
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          // TODO: I found and added this missing line while investigating a
          // separate issue. Write a regression test using string refs.
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            // Expected to be working on a non-root fiber. This is a fatal error
            // because there's no ancestor that can handle it; the root is
            // supposed to capture all errors that weren't caught by an error
            // boundary.
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            // Set `workInProgress` to null. This represents advancing to the next
            // sibling, or the parent if there are no siblings. But since the root
            // has no siblings nor a parent, we set it to null. Usually this is
            // handled by `completeUnitOfWork` or `unwindWork`, but since we're
            // intentionally not calling those, we need set it here.
            // TODO: Consider calling `unwindWork` to pop the contexts.
            workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
            // Record the time spent rendering before an error was thrown. This
            // avoids inaccurate Profiler durations in the case of a
            // suspended render.
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          // Something in the return path also threw.
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            // If this boundary has already errored, then we had trouble processing
            // the error. Bubble it to the next boundary.
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        // Return to the normal work loop.
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root) {
      {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
        return prevInteractions;
      }
    }
    function popInteractions(prevInteractions) {
      {
        tracing.__interactionsRef.current = prevInteractions;
      }
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      // Check if there are updates that we skipped tree that might have unblocked
      // this render.
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
        // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError() {
      if (workInProgressRootExitStatus !== RootCompleted) {
        workInProgressRootExitStatus = RootErrored;
      }
    }
    // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
      // If something errored or completed, we can't really be sure,
      // so those are false.
      return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      // If the root or lanes have changed, throw out the existing stack
      // and prepare a fresh one. Otherwise we'll continue where we left off.
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
        prepareFreshStack(root, lanes);
        startWorkOnPendingInteractions(root, lanes);
      }
      var prevInteractions = pushInteractions(root);
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      {
        popInteractions(prevInteractions);
      }
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        // This is a sync render, so we should have finished the whole tree.
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline*/
    function workLoopSync() {
      // Already timed out, so perform work without checking if we need to yield.
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      // If the root or lanes have changed, throw out the existing stack
      // and prepare a fresh one. Otherwise we'll continue where we left off.
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
        resetRenderTimer();
        prepareFreshStack(root, lanes);
        startWorkOnPendingInteractions(root, lanes);
      }
      var prevInteractions = pushInteractions(root);
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      {
        popInteractions(prevInteractions);
      }
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        return RootIncomplete;
      } else {
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        // Return the final exit status.
        return workInProgressRootExitStatus;
      }
    }
    /** @noinline*/
    function workLoopConcurrent() {
      // Perform work until Scheduler asks us to yield
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      // The current, flushed, state of this fiber is the alternate. Ideally
      // nothing should rely on this, but relying on it here means that we don't
      // need an additional field on the work in progress.
      var current = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      // Attempt to complete the current unit of work, then move to the next
      // sibling. If there are no more siblings, return to the parent fiber.
      var completedWork = unitOfWork;
      do {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = completedWork.alternate;
        var returnFiber = completedWork.return;
        // Check if the work completed or if something threw.
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next = completeWork(current, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next = completeWork(current, completedWork, subtreeRenderLanes);
            // Update render duration assuming we didn't error.
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next !== null) {
            // Completing this fiber spawned new work. Work on that next.
            workInProgress = next;
            return;
          }
          resetChildLanes(completedWork);
          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.flags & Incomplete) === NoFlags) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = completedWork.firstEffect;
            }
            if (completedWork.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
              }
              returnFiber.lastEffect = completedWork.lastEffect;
            }
            // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if needed,
            // by doing multiple passes over the effect list. We don't want to
            // schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.
            var flags = completedWork.flags;
            // Skip both NoWork and PerformedWork tags when creating the effect
            // list. PerformedWork effect is read by React DevTools but shouldn't be
            // committed.
            if (flags > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = completedWork;
              } else {
                returnFiber.firstEffect = completedWork;
              }
              returnFiber.lastEffect = completedWork;
            }
          }
        } else {
          // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.
          var _next = unwindWork(completedWork);
          // Because this fiber did not complete, don't reset its expiration time.
          if (_next !== null) {
            // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            // Include the time spent working on failed children before continuing.
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.flags |= Incomplete;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          // If there is more work to do in this returnFiber, do that next.
          workInProgress = siblingFiber;
          return;
        }
        // Otherwise, return to the parent
        completedWork = returnFiber;
        // Update the next thing we're working on in case something throws.
        workInProgress = completedWork;
      } while (completedWork !== null);
      // We've reached the root.
      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function resetChildLanes(completedWork) {
      if (// TODO: Move this check out of the hot path by moving `resetChildLanes`
      // to switch statement in `completeWork`.
      (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }
      var newChildLanes = NoLanes;
      // Bubble up the earliest expiration time.
      if ((completedWork.mode & ProfileMode) !== NoMode) {
        // In profiling mode, resetChildExpirationTime is also used to reset
        // profiler durations.
        var actualDuration = completedWork.actualDuration;
        var treeBaseDuration = completedWork.selfBaseDuration;
        // When a fiber is cloned, its actualDuration is reset to 0. This value will
        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration. If
        // the fiber has not been cloned though, (meaning no work was done), then
        // this value will reflect the amount of time spent working on a previous
        // render. In that case it should not bubble. We determine whether it was
        // cloned by comparing the child pointer.
        var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
        var child = completedWork.child;
        while (child !== null) {
          newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }
          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }
        var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
        if (isTimedOutSuspense) {
          // Don't count time spent in a timed out Suspense subtree as part of the base duration.
          var primaryChildFragment = completedWork.child;
          if (primaryChildFragment !== null) {
            treeBaseDuration -= primaryChildFragment.treeBaseDuration;
          }
        }
        completedWork.actualDuration = actualDuration;
        completedWork.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = completedWork.child;
        while (_child !== null) {
          newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
          _child = _child.sibling;
        }
      }
      completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root) {
      var renderPriorityLevel = getCurrentPriorityLevel();
      runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
      return null;
    }
    function commitRootImpl(root, renderPriorityLevel) {
      do {
        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Should not already be working.");
        }
      }
      var finishedWork = root.finishedWork;
      var lanes = root.finishedLanes;
      if (finishedWork === null) {
        return null;
      }
      root.finishedWork = null;
      root.finishedLanes = NoLanes;
      if (!(finishedWork !== root.current)) {
        {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      // commitRoot never returns a continuation; it always finishes synchronously.
      // So we can clear these now to allow a new callback to be scheduled.
      root.callbackNode = null;
      // Update the first and last pending times on this root. The new first
      // pending time is whatever is left on the root fiber.
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root, remainingLanes);
      // Clear already finished discrete updates in case that a later call of
      // `flushDiscreteUpdates` starts a useless render pass which may cancels
      // a scheduled timeout.
      if (rootsWithPendingDiscreteUpdates !== null) {
        if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
          rootsWithPendingDiscreteUpdates.delete(root);
        }
      }
      if (root === workInProgressRoot) {
        // We can reset these now that they are finished.
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      // Get the list of effects.
      var firstEffect;
      if (finishedWork.flags > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if it
        // had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }
      if (firstEffect !== null) {
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        // Reset this to null before calling lifecycles
        ReactCurrentOwner$2.current = null;
        // The commit phase is broken into several sub-phases. We do a separate pass
        // of the effect list for each phase: all mutation effects come before all
        // layout effects, and so on.
        // The first phase a "before mutation" phase. We use this phase to read the
        // state of the host tree right before we mutate it. This is where
        // getSnapshotBeforeUpdate is called.
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        shouldFireAfterActiveInstanceBlur = false;
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitBeforeMutationEffects, null);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var error = clearCaughtError();
              captureCommitPhaseError(nextEffect, error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        // We no longer need to track the active instance fiber
        focusedInstanceHandle = null;
        {
          // Mark the current commit time to be shared by all Profilers in this
          // batch. This enables them to be grouped later.
          recordCommitTime();
                  // The next phase is the mutation phase, where we mutate the host tree.
}
        // The next phase is the mutation phase, where we mutate the host tree.
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error = clearCaughtError();
              captureCommitPhaseError(nextEffect, _error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        resetAfterCommit(root.containerInfo);
        // The work-in-progress tree is now the current tree. This must come after
        // the mutation phase, so that the previous tree is still current during
        // componentWillUnmount, but before the layout phase, so that the finished
        // work is current during componentDidMount/Update.
        root.current = finishedWork;
        // The next phase is the layout phase, where we call effects that read
        // the host tree after it's been mutated. The idiomatic use case for this is
        // layout, but class component lifecycles also fire here for legacy reasons.
        nextEffect = firstEffect;
        do {
          {
            invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
            if (hasCaughtError()) {
              if (!(nextEffect !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error2 = clearCaughtError();
              captureCommitPhaseError(nextEffect, _error2);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);
        nextEffect = null;
        // Tell Scheduler to yield at the end of the frame, so the browser has an
        // opportunity to paint.
        requestPaint();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
      } else {
        // No effects.
        root.current = finishedWork;
        // Measure these anyway so the flamegraph explicitly shows that there were
        // no effects.
        // TODO: Maybe there's a better way to report this.
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        // This commit has passive effects. Stash a reference to them. But don't
        // schedule a callback until after flushing layout work.
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root;
        pendingPassiveEffectsLanes = lanes;
        pendingPassiveEffectsRenderPriority = renderPriorityLevel;
      } else {
        // We are done with the effect chain at this point so let's clear the
        // nextEffect pointers to assist with GC. If we have passive effects, we'll
        // clear this in flushPassiveEffects.
        nextEffect = firstEffect;
        while (nextEffect !== null) {
          var nextNextEffect = nextEffect.nextEffect;
          nextEffect.nextEffect = null;
          if (nextEffect.flags & Deletion) {
            detachFiberAfterEffects(nextEffect);
          }
          nextEffect = nextNextEffect;
        }
      }
      // Read this again, since an effect might have updated it
      remainingLanes = root.pendingLanes;
      // Check if there's remaining work on this root
      if (remainingLanes !== NoLanes) {
        {
          if (spawnedWorkDuringRender !== null) {
            var expirationTimes = spawnedWorkDuringRender;
            spawnedWorkDuringRender = null;
            for (var i = 0; i < expirationTimes.length; i++) {
              scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
            }
          }
          schedulePendingInteractions(root, remainingLanes);
        }
      } else {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          // If there are no passive effects, then we can complete the pending interactions.
          // Otherwise, we'll wait until after the passive effects are flushed.
          // Wait to do this until after remaining work has been scheduled,
          // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
          finishPendingInteractions(root, lanes);
        }
      }
      if (remainingLanes === SyncLane) {
        // Count the number of times the root synchronously re-renders without
        // finishing. If there are too many, it indicates an infinite update loop.
        if (root === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root;
        }
      } else {
        nestedUpdateCount = 0;
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        onCommitRoot$1();
              // Always call this before exiting `commitRoot`, to ensure that any
        // additional work on this root is scheduled.
}
      // Always call this before exiting `commitRoot`, to ensure that any
      // additional work on this root is scheduled.
      ensureRootIsScheduled(root, now());
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var _error3 = firstUncaughtError;
        firstUncaughtError = null;
        throw _error3;
      }
      if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
        // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
      }
      // If layout work was scheduled, flush it now.
      flushSyncCallbackQueue();
      return null;
    }
    function commitBeforeMutationEffects() {
      while (nextEffect !== null) {
        var current = nextEffect.alternate;
        if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
          if ((nextEffect.flags & Deletion) !== NoFlags) {
            if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
              shouldFireAfterActiveInstanceBlur = true;
            }
          } else {
            // TODO: Move this out of the hot path using a dedicated effect tag.
            if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
              shouldFireAfterActiveInstanceBlur = true;
            }
          }
        }
        var flags = nextEffect.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(nextEffect);
          commitBeforeMutationLifeCycles(current, nextEffect);
          resetCurrentFiber();
        }
        if ((flags & Passive) !== NoFlags) {
          // If there are passive effects, schedule a callback to flush at
          // the earliest opportunity.
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function () {
              flushPassiveEffects();
              return null;
            });
          }
        }
        nextEffect = nextEffect.nextEffect;
      }
    }
    function commitMutationEffects(root, renderPriorityLevel) {
      // TODO: Should probably move the bulk of this function to commitWork.
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var flags = nextEffect.flags;
        if (flags & ContentReset) {
          commitResetTextContent(nextEffect);
        }
        if (flags & Ref) {
          var current = nextEffect.alternate;
          if (current !== null) {
            commitDetachRef(current);
          }
        }
        // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every possible
        // bitmap value, we remove the secondary effects from the effect tag and
        // switch on that value.
        var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
        switch (primaryFlags) {
          case Placement:
            {
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted does
              // and isMounted is deprecated anyway so we should be able to kill this.
              nextEffect.flags &= ~Placement;
              break;
            }
          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect);
              // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              nextEffect.flags &= ~Placement;
              // Update
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
          case Hydrating:
            {
              nextEffect.flags &= ~Hydrating;
              break;
            }
          case HydratingAndUpdate:
            {
              nextEffect.flags &= ~Hydrating;
              // Update
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
          case Update:
            {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
          case Deletion:
            {
              commitDeletion(root, nextEffect);
              break;
            }
        }
        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }
    function commitLayoutEffects(root, committedLanes) {
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var flags = nextEffect.flags;
        if (flags & (Update | Callback)) {
          var current = nextEffect.alternate;
          commitLifeCycles(root, current, nextEffect);
        }
        {
          if (flags & Ref) {
            commitAttachRef(nextEffect);
          }
        }
        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }
    function flushPassiveEffects() {
      // Returns whether passive effects were flushed.
      if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
        var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
        pendingPassiveEffectsRenderPriority = NoPriority$1;
        {
          return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
      }
      return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
      pendingPassiveHookEffectsMount.push(effect, fiber);
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
      pendingPassiveHookEffectsUnmount.push(effect, fiber);
      {
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.flags |= PassiveUnmountPendingDev;
        }
      }
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }
    function invokePassiveEffectCreate(effect) {
      var create = effect.create;
      effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var root = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
        {
          throw Error("Cannot flush passive effects while already rendering.");
        }
      }
      {
        isFlushingPassiveEffects = true;
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      var prevInteractions = pushInteractions(root);
      // It's important that ALL pending passive effect destroy functions are called
      // before ANY passive effect create functions are called.
      // Otherwise effects in sibling components might interfere with each other.
      // e.g. a destroy function in one component may unintentionally override a ref
      // value set by a create function in another component.
      // Layout effects have the same constraint.
      // First pass: Destroy stale passive effects.
      var unmountEffects = pendingPassiveHookEffectsUnmount;
      pendingPassiveHookEffectsUnmount = [];
      for (var i = 0; i < unmountEffects.length; i += 2) {
        var _effect = unmountEffects[i];
        var fiber = unmountEffects[i + 1];
        var destroy = _effect.destroy;
        _effect.destroy = undefined;
        {
          fiber.flags &= ~PassiveUnmountPendingDev;
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.flags &= ~PassiveUnmountPendingDev;
          }
        }
        if (typeof destroy === 'function') {
          {
            setCurrentFiber(fiber);
            {
              invokeGuardedCallback(null, destroy, null);
            }
            if (hasCaughtError()) {
              if (!(fiber !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var error = clearCaughtError();
              captureCommitPhaseError(fiber, error);
            }
            resetCurrentFiber();
          }
        }
      }
      // Second pass: Create new passive effects.
      var mountEffects = pendingPassiveHookEffectsMount;
      pendingPassiveHookEffectsMount = [];
      for (var _i = 0; _i < mountEffects.length; _i += 2) {
        var _effect2 = mountEffects[_i];
        var _fiber = mountEffects[_i + 1];
        {
          setCurrentFiber(_fiber);
          {
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
          }
          if (hasCaughtError()) {
            if (!(_fiber !== null)) {
              {
                throw Error("Should be working on an effect.");
              }
            }
            var _error4 = clearCaughtError();
            captureCommitPhaseError(_fiber, _error4);
          }
          resetCurrentFiber();
        }
      }
      // Note: This currently assumes there are no passive effects on the root fiber
      // because the root is not part of its own effect list.
      // This could change in the future.
      var effect = root.current.firstEffect;
      while (effect !== null) {
        var nextNextEffect = effect.nextEffect;
        // Remove nextEffect pointer to assist GC
        effect.nextEffect = null;
        if (effect.flags & Deletion) {
          detachFiberAfterEffects(effect);
        }
        effect = nextNextEffect;
      }
      {
        popInteractions(prevInteractions);
        finishPendingInteractions(root, lanes);
      }
      {
        isFlushingPassiveEffects = false;
      }
      executionContext = prevExecutionContext;
      flushSyncCallbackQueue();
      // If additional passive effects were scheduled, increment a counter. If this
      // exceeds the limit, we'll fire a warning.
      nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }
    function prepareToThrowUncaughtError(error) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      var errorInfo = createCapturedValue(error, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      enqueueUpdate(rootFiber, update);
      var eventTime = requestEventTime();
      var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
      if (root !== null) {
        markRootUpdated(root, SyncLane, eventTime);
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, SyncLane);
      }
    }
    function captureCommitPhaseError(sourceFiber, error) {
      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        return;
      }
      var fiber = sourceFiber.return;
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValue(error, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            enqueueUpdate(fiber, update);
            var eventTime = requestEventTime();
            var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
            if (root !== null) {
              markRootUpdated(root, SyncLane, eventTime);
              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, SyncLane);
            } else {
              // This component has already been unmounted.
              // We can't schedule any follow up work for the root because the fiber is already unmounted,
              // but we can still call the log-only boundary so the error isn't swallowed.
              // 
              // TODO This is only a temporary bandaid for the old reconciler fork.
              // We can delete this special case once the new fork is merged.
              if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                try {
                  instance.componentDidCatch(error, errorInfo);
                } catch (errorToIgnore) {}
              }
            }
            return;
          }
        }
        fiber = fiber.return;
      }
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      if (pingCache !== null) {
        // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root, pingedLanes);
      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        // Received a ping at the same priority level at which we're currently
        // rendering. We might want to restart this render. This should mirror
        // the logic of whether or not a root suspends once it completes.
        // TODO: If we're rendering sync either due to Sync, Batched or expired,
        // we should probably never restart.
        // If we're suspended with delay, or if it's a retry, we'll always suspend
        // so we can always restart.
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          // Restart from the root.
          prepareFreshStack(root, NoLanes);
        } else {
          // Even though we can't restart right now, we might get an
          // opportunity later. So we mark this render as having a ping.
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      // The boundary fiber (a Suspense component or SuspenseList component)
      // previously was rendered in its fallback state. One of the promises that
      // suspended it has resolved, which means at least part of the tree was
      // likely unblocked. Try rendering again, at a new expiration time.
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      // TODO: Special case idle priority?
      var eventTime = requestEventTime();
      var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
      if (root !== null) {
        markRootUpdated(root, retryLane, eventTime);
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, retryLane);
      }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      // Default
      var retryCache;
      {
        retryCache = boundaryFiber.stateNode;
      }
      if (retryCache !== null) {
        // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        {
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          // We let the other warning about render phase updates deal with this one.
          return;
        }
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
          // Only warn for user-defined components, not internal ones like Suspense.
          return;
        }
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
      {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
          // Only warn for user-defined components, not internal ones like Suspense.
          return;
        }
        // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
          return;
        }
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
          if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
        }
        if (isFlushingPassiveEffects) ; else {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function (current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
          if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
            // Don't replay promises. Treat everything else like an error.
            throw originalError;
          }
          // Keep this code in sync with handleError; any changes here must have
          // corresponding changes there.
          resetContextDependencies();
          resetHooksAfterThrow();
          // Don't reset current debug fiber, since we're about to work on the
          // same fiber again.
          // Unwind the failed stack frame
          unwindInterruptedWork(unitOfWork);
          // Restore the original properties of the fiber.
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
          }
          // Run beginWork again.
          invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
            // Rethrow this error instead of the original one.
            throw replayError;
          } else {
            // This branch is reachable if the render phase is impure.
            throw originalError;
          }
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              {
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown';
                // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                  error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
            case ClassComponent:
              {
                if (!didWarnAboutUpdateInRender) {
                  error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
          }
        }
      }
    }
    // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
      current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
      {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
            'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
            'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
      {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
        }
      }
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
      {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
    // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false;
    // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
      {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
          if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
            didWarnAboutUnmockedScheduler = true;
            error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
            "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
          }
        }
      }
    }
    function computeThreadID(root, lane) {
      // Interaction threads are unique per root and expiration time.
      // NOTE: Intentionally unsound cast. All that matters is that it's a number
      // and it represents a batch of work. Could make a helper function instead,
      // but meh this is fine for now.
      return lane * 1000 + root.interactionThreadID;
    }
    function markSpawnedWork(lane) {
      if (spawnedWorkDuringRender === null) {
        spawnedWorkDuringRender = [lane];
      } else {
        spawnedWorkDuringRender.push(lane);
      }
    }
    function scheduleInteractions(root, lane, interactions) {
      if (interactions.size > 0) {
        var pendingInteractionMap = root.pendingInteractionMap;
        var pendingInteractions = pendingInteractionMap.get(lane);
        if (pendingInteractions != null) {
          interactions.forEach(function (interaction) {
            if (!pendingInteractions.has(interaction)) {
              // Update the pending async work count for previously unscheduled interaction.
              interaction.__count++;
            }
            pendingInteractions.add(interaction);
          });
        } else {
          pendingInteractionMap.set(lane, new Set(interactions));
          // Update the pending async work count for the current interactions.
          interactions.forEach(function (interaction) {
            interaction.__count++;
          });
        }
        var subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(root, lane);
          subscriber.onWorkScheduled(interactions, threadID);
        }
      }
    }
    function schedulePendingInteractions(root, lane) {
      scheduleInteractions(root, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root, lanes) {
      // we can accurately attribute time spent working on it, And so that cascading
      // work triggered during the render phase will be associated with it.
      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
        if (includesSomeLane(lanes, scheduledLane)) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });
      // Store the current set of interactions on the FiberRoot for a few reasons:
      // We can re-use it in hot functions like performConcurrentWorkOnRoot()
      // without having to recalculate it. We will also use it in commitWork() to
      // pass to any Profiler onRender() hooks. This also provides DevTools with a
      // way to access it when the onCommitRoot() hook is called.
      root.memoizedInteractions = interactions;
      if (interactions.size > 0) {
        var subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(root, lanes);
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function () {
              throw error;
            });
          }
        }
      }
    }
    function finishPendingInteractions(root, committedLanes) {
      var remainingLanesAfterCommit = root.pendingLanes;
      var subscriber;
      try {
        subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null && root.memoizedInteractions.size > 0) {
          // FIXME: More than one lane can finish in a single commit.
          var threadID = computeThreadID(root, committedLanes);
          subscriber.onWorkStopped(root.memoizedInteractions, threadID);
        }
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority$1, function () {
          throw error;
        });
      } finally {
        // Clear completed interactions from the pending Map.
        // Unless the render was suspended or cascading work was scheduled,
        // In which case– leave pending interactions until the subsequent render.
        var pendingInteractionMap = root.pendingInteractionMap;
        pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
          // Only decrement the pending interaction count if we're done.
          // If there's still work at the current priority,
          // That indicates that we are waiting for suspense data.
          if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
            pendingInteractionMap.delete(lane);
            scheduledInteractions.forEach(function (interaction) {
              interaction.__count--;
              if (subscriber !== null && interaction.__count === 0) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  // If the subscriber throws, rethrow it in a separate task
                  scheduleCallback(ImmediatePriority$1, function () {
                    throw error;
                  });
                }
              }
            });
          }
        });
      }
    }
    // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
      // Never force flush in production. This function should get stripped out.
      return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
      fiber.sibling = null;
      fiber.stateNode = null;
    }
    var resolveFamily = null;
    // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function (handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return type;
        }
        var family = resolveFamily(type);
        if (family === undefined) {
          return type;
        }
        // Use the latest known implementation.
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      // No implementation differences.
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return type;
        }
        var family = resolveFamily(type);
        if (family === undefined) {
          // Check if we're dealing with a real forwardRef. Don't want to crash early.
          if (type !== null && type !== undefined && typeof type.render === 'function') {
            // ForwardRef is special because its resolved .type is an object,
            // but it's possible that we only have its inner render function in the map.
            // If that inner render function is different, we'll build a new forwardRef type.
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== undefined) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        // Use the latest known implementation.
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent:
            {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              }
              break;
            }
          case FunctionComponent:
            {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
              }
              break;
            }
          case ForwardRef:
            {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
          case MemoComponent:
          case SimpleMemoComponent:
            {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
          default:
            return false;
        }
        // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
          // Note: memo() and forwardRef() we'll compare outer rather than inner type.
          // This means both of them need to be registered to preserve state.
          // If we unwrapped and compared the inner types for wrappers instead,
          // then we would risk falsely saying two separate memo(Foo)
          // calls are equivalent because they wrap the same Foo function.
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return;
        }
        if (typeof WeakSet !== 'function') {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function (root, update) {
      {
        if (resolveFamily === null) {
          // Hot reloading is disabled.
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function () {
          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function (root, element) {
      {
        if (root.context !== emptyContextObject) {
          // Super edge case: root has a legacy _renderSubtree context
          // but we don't know the parentComponent so we can't pass it.
          // Just ignore. We'll delete this with _renderSubtree code path later.
          return;
        }
        flushPassiveEffects();
        flushSync(function () {
          updateContainer(element, root, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error('Expected resolveFamily to be set during hot reload.');
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== undefined) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function (root, families) {
      {
        var hostInstances = new Set();
        var types = new Set(families.map(function (family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          // We have a match. This only drills down to the closest host components.
          // There's no need to search deeper because for the purpose of giving
          // visual feedback, "flashing" outermost parent rectangles is sufficient.
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          // If there's no match, maybe there will be one further down in the child tree.
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while (true) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }
          if (node.return === null) {
            throw new Error('Expected to reach root first.');
          }
          node = node.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node.tag === HostComponent) {
            // We got a match.
            foundHostInstances = true;
            hostInstances.add(node.stateNode);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === fiber) {
            return foundHostInstances;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === fiber) {
              return foundHostInstances;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /*eslint-disable no-new*/
        new Map([[nonExtensibleObject, null]]);
        new Set([nonExtensibleObject]);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      // Fiber
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      // Effects
      this.flags = NoFlags;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        // Note: The following is done to avoid a v8 performance cliff.
        // 
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        // 
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    }
    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    // more difficult to predict when they get optimized and they are almost
    // never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    // always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    // to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    // is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    // compatible.
    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps;
        // Needed because Blocks store data on type.
        workInProgress.type = current.type;
        // We already have an alternate.
        // Reset the effect tag.
        workInProgress.flags = NoFlags;
        // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      // Clone the dependencies object. This is mutated during the render phase, so
      // it cannot be shared with the current fiber.
      var currentDependencies = current.dependencies;
      workInProgress.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      // These will be overridden during the parent's reconciliation
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }
      {
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress.type = resolveFunctionForHotReloading(current.type);
            break;
          case ClassComponent:
            workInProgress.type = resolveClassForHotReloading(current.type);
            break;
          case ForwardRef:
            workInProgress.type = resolveForwardRefForHotReloading(current.type);
            break;
        }
      }
      return workInProgress;
    }
    // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
      // This resets the Fiber to what createFiber or createWorkInProgress would
      // have set the values to before during the first pass. Ideally this wouldn't
      // be necessary but unfortunately many code paths reads from the workInProgress
      // when they should be reading from current and writing to workInProgress.
      // We assume pendingProps, index, key, ref, return are still untouched to
      // avoid doing another reconciliation.
      // Reset the effect tag but keep any Placement tags, since that's something
      // that child fiber is setting, not the reconciliation.
      workInProgress.flags &= Placement;
      // The effect list is no longer valid.
      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;
      var current = workInProgress.alternate;
      if (current === null) {
        // Reset to createFiber's initial values.
        workInProgress.childLanes = NoLanes;
        workInProgress.lanes = renderLanes;
        workInProgress.child = null;
        workInProgress.memoizedProps = null;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.dependencies = null;
        workInProgress.stateNode = null;
        {
          // Note: We don't reset the actualTime counts. It's useful to accumulate
          // actual time across multiple render passes.
          workInProgress.selfBaseDuration = 0;
          workInProgress.treeBaseDuration = 0;
        }
      } else {
        // Reset to the cloned values that createWorkInProgress would've.
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        // Needed because Blocks store data on type.
        workInProgress.type = current.type;
        // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          // Note: We don't reset the actualTime counts. It's useful to accumulate
          // actual time across multiple render passes.
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
      }
      return workInProgress;
    }
    function createHostRootFiber(tag) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode | BlockingMode | StrictMode;
      } else if (tag === BlockingRoot) {
        mode = BlockingMode | StrictMode;
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
      var resolvedType = type;
      if (typeof type === 'function') {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
          case REACT_DEBUG_TRACING_MODE_TYPE:
            fiberTag = Mode;
            mode |= DebugTracingMode;
            break;
          case REACT_STRICT_MODE_TYPE:
            fiberTag = Mode;
            mode |= StrictMode;
            break;
          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, lanes, key);
          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, lanes, key);
          case REACT_SUSPENSE_LIST_TYPE:
            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
          case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
          case REACT_LEGACY_HIDDEN_TYPE:
            return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
          case REACT_SCOPE_TYPE:
          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                  case REACT_BLOCK_TYPE:
                    fiberTag = Block;
                    break getTag;
                }
              }
              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              {
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
            }
        }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== 'string') {
          error('Profiler must specify an "id" as a prop');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      // TODO: The Profiler fiber shouldn't have a type. It has a tag.
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      fiber.type = REACT_SUSPENSE_TYPE;
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      {
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
      }
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      {
        fiber.type = REACT_OFFSCREEN_TYPE;
      }
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
      var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
      // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      {
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
      }
      fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      // TODO: These should not need a type.
      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }
    // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.hydrate = hydrate;
      this.callbackNode = null;
      this.callbackPriority = NoLanePriority;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
      }
      {
        switch (tag) {
          case BlockingRoot:
            this._debugRootType = 'createBlockingRoot()';
            break;
          case ConcurrentRoot:
            this._debugRootType = 'createRoot()';
            break;
          case LegacyRoot:
            this._debugRootType = 'createLegacyRoot()';
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
      var root = new FiberRootNode(containerInfo, tag, hydrate);
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(tag);
      root.current = uninitializedFiber;
      uninitializedFiber.stateNode = root;
      initializeUpdateQueue(uninitializedFiber);
      return root;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version = getVersion(mutableSource._source);
      // TODO Clear this data once all pending hydration work is finished.
      // Retaining it forever may interfere with GC.
      if (root.mutableSourceEagerHydrationData == null) {
        root.mutableSourceEagerHydrationData = [mutableSource, version];
      } else {
        root.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
    }
    function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          } else {
            {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictMode) {
                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
              } else {
                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
              }
            } finally {
              // Ideally this should reset to previous but this shouldn't be called in
              // render and there's another warning for that anyway.
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
      return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfUnmockedScheduler(current$1);
          warnIfNotScopedWithMatchingAct(current$1);
        }
      }
      var lane = requestUpdateLane(current$1);
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(eventTime, lane);
      // Caution: React DevTools currently depends on this property
      // being called "element".
      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== 'function') {
            error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
          }
        }
        update.callback = callback;
      }
      enqueueUpdate(current$1, update);
      scheduleUpdateOnFiber(current$1, lane, eventTime);
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptUserBlockingHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
      }
      var eventTime = requestEventTime();
      var lane = InputDiscreteHydrationLane;
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
      }
      var eventTime = requestEventTime();
      var lane = SelectiveHydrationLane;
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
      }
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      scheduleUpdateOnFiber(fiber, lane, eventTime);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
      try {
        setCurrentUpdateLanePriority(priority);
        return fn();
      } finally {}
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      if (hostFiber.tag === FundamentalComponent) {
        return hostFiber.stateNode.instance;
      }
      return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function (fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function (obj, path, index) {
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        if (index + 1 === path.length) {
          if (Array.isArray(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
      };
      var copyWithDelete = function (obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      };
      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        if (index + 1 === oldPath.length) {
          var newKey = newPath[index];
          // $FlowFixMe number or string is fine here
          updated[newKey] = updated[oldKey];
          if (Array.isArray(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          // $FlowFixMe number or string is fine here
          updated[oldKey] = copyWithRenameImpl(// $FlowFixMe number or string is fine here
          obj[oldKey], oldPath, newPath, index + 1);
        }
        return updated;
      };
      var copyWithRename = function (obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn('copyWithRename() expects paths of the same length');
          return;
        } else {
          for (var i = 0; i < newPath.length - 1; i++) {
            if (oldPath[i] !== newPath[i]) {
              warn('copyWithRename() expects paths to be the same except for the deepest key');
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function (obj, path, index, value) {
        if (index >= path.length) {
          return value;
        }
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
        // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
      };
      var copyWithSet = function (obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      };
      var findHook = function (fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while (currentHook !== null && id > 0) {
          currentHook = currentHook.next;
          id--;
        }
        return currentHook;
      };
      // Support DevTools editable values for useState and useReducer.
      overrideHookState = function (fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      overrideHookStateDeletePath = function (fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          // We aren't actually adding an update to the queue,
          // because there is no update we can add for useReducer hooks that won't trigger an error.
          // (There's no appropriate action type for DevTools overrides.)
          // As a result though, React will see the scheduled update as a noop and bailout.
          // Shallow cloning props works as a workaround for now to bypass the bailout check.
          fiber.memoizedProps = _assign({}, fiber.memoizedProps);
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
      };
      // Support DevTools props for function components, forwardRef, memo, host components, etc.
      overrideProps = function (fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      overridePropsDeletePath = function (fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      overridePropsRenamePath = function (fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      scheduleUpdate = function (fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      };
      setSuspenseHandler = function (newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState: overrideHookState,
        overrideHookStateDeletePath: overrideHookStateDeletePath,
        overrideHookStateRenamePath: overrideHookStateRenamePath,
        overrideProps: overrideProps,
        overridePropsDeletePath: overridePropsDeletePath,
        overridePropsRenamePath: overridePropsRenamePath,
        setSuspenseHandler: setSuspenseHandler,
        scheduleUpdate: scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        // React Refresh
        findHostInstancesForRefresh: findHostInstancesForRefresh,
        scheduleRefresh: scheduleRefresh,
        scheduleRoot: scheduleRoot,
        setRefreshHandler: setRefreshHandler,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: getCurrentFiberForDevTools
      });
    }
    function ReactDOMRoot(container, options) {
      this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
    }
    function ReactDOMBlockingRoot(container, tag, options) {
      this._internalRoot = createRootImpl(container, tag, options);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
      var root = this._internalRoot;
      {
        if (typeof arguments[1] === 'function') {
          error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
        }
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
      {
        if (typeof arguments[0] === 'function') {
          error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
        }
      }
      var root = this._internalRoot;
      var container = root.containerInfo;
      updateContainer(null, root, null, function () {
        unmarkContainerAsRoot(container);
      });
    };
    function createRootImpl(container, tag, options) {
      // Tag is either LegacyRoot or Concurrent Root
      var hydrate = options != null && options.hydrate === true;
      var hydrationCallbacks = options != null && options.hydrationOptions || null;
      var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
      var root = createContainer(container, tag, hydrate);
      markContainerAsRoot(root.current, container);
      var containerNodeType = container.nodeType;
      {
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
      }
      if (mutableSources) {
        for (var i = 0; i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root, mutableSource);
        }
      }
      return root;
    }
    function createLegacyRoot(container, options) {
      return new ReactDOMBlockingRoot(container, LegacyRoot, options);
    }
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    {
      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
        }
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
          error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
      // First clear any existing content.
      if (!shouldHydrate) {
        var warned = false;
        var rootSibling;
        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }
      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      }
      return createLegacyRoot(container, shouldHydrate ? {
        hydrate: true
      } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== 'function') {
          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
              // TODO: Without `any` type, Flow says "Property cannot be accessed on any
        // member of intersection type." Whyyyyyy.
}
      // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.
      var root = container._reactRootContainer;
      var fiberRoot;
      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
        fiberRoot = root._internalRoot;
        if (typeof callback === 'function') {
          var originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(fiberRoot);
            originalCallback.call(instance);
          };
        }
        // Initial mount should not be batched.
        unbatchedUpdates(function () {
          updateContainer(children, fiberRoot, parentComponent, callback);
        });
      } else {
        fiberRoot = root._internalRoot;
        if (typeof callback === 'function') {
          var _originalCallback = callback;
          callback = function () {
            var instance = getPublicRootInstance(fiberRoot);
            _originalCallback.call(instance);
          };
        }
        // Update
        updateContainer(children, fiberRoot, parentComponent, callback);
      }
      return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
      }
    }
    function hydrate(element, container, callback) {
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
        }
              // TODO: throw or warn if we couldn't hydrate?
}
      // TODO: throw or warn if we couldn't hydrate?
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      if (!isValidContainer(containerNode)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      if (!(parentComponent != null && has(parentComponent))) {
        {
          throw Error("parentComponent must be a valid React Component");
        }
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
      if (!isValidContainer(container)) {
        {
          throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) {
          error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
          }
                  // Unmount should not be batched.
}
        // Unmount should not be batched.
        unbatchedUpdates(function () {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
            // $FlowFixMe This should probably use `delete container._reactRootContainer`
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        // If you call unmountComponentAtNode twice in quick succession, you'll
        // get `true` twice. That's probably fine?
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          // Check if the container itself is a React root node.
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
          }
        }
        return false;
      }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (!isValidContainer(container)) {
        {
          throw Error("Target container is not a DOM element.");
        }
      }
      // TODO: pass ReactDOM portal implementation as third argument
      // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }
      }
      return createPortal$1(children, container, key);
    }
    var Internals = {
      // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
      // This is an array for better minification.
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
      IsThisRendererActing]
    };
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol;
          // Don't warn in exotic cases like chrome-extension://.
          if ((/^(https?|file):$/).test(protocol)) {
            // eslint-disable-next-line react-internal/no-production-logging
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
  })();
}

},{"react":"3b2NM","object-assign":"3eM6x","scheduler":"5K4BD","scheduler/tracing":"6jIZo"}],"5K4BD":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  module.exports = require('./cjs/scheduler.development.js');
}

},{"./cjs/scheduler.development.js":"59Ipp"}],"59Ipp":[function(require,module,exports) {
/** @license React v0.20.2
* scheduler.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
      var localPerformance = performance;
      exports.unstable_now = function () {
        return localPerformance.now();
      };
    } else {
      var localDate = Date;
      var initialTime = localDate.now();
      exports.unstable_now = function () {
        return localDate.now() - initialTime;
      };
    }
    if (// If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;
      var _timeoutID = null;
      var _flushCallback = function () {
        if (_callback !== null) {
          try {
            var currentTime = exports.unstable_now();
            var hasRemainingTime = true;
            _callback(hasRemainingTime, currentTime);
            _callback = null;
          } catch (e) {
            setTimeout(_flushCallback, 0);
            throw e;
          }
        }
      };
      requestHostCallback = function (cb) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0);
        }
      };
      requestHostTimeout = function (cb, ms) {
        _timeoutID = setTimeout(cb, ms);
      };
      cancelHostTimeout = function () {
        clearTimeout(_timeoutID);
      };
      exports.unstable_shouldYield = function () {
        return false;
      };
      requestPaint = exports.unstable_forceFrameRate = function () {};
    } else {
      // Capture local references to native APIs, in case a polyfill overrides them.
      var _setTimeout = window.setTimeout;
      var _clearTimeout = window.clearTimeout;
      if (typeof console !== 'undefined') {
        // TODO: Scheduler no longer requires these methods to be polyfilled. But
        // maybe we want to continue warning if they don't exist, to preserve the
        // option to rely on it in the future?
        var requestAnimationFrame = window.requestAnimationFrame;
        var cancelAnimationFrame = window.cancelAnimationFrame;
        if (typeof requestAnimationFrame !== 'function') {
          // Using console['error'] to evade Babel and ESLint
          console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
        }
        if (typeof cancelAnimationFrame !== 'function') {
          // Using console['error'] to evade Babel and ESLint
          console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
        }
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      // Scheduler periodically yields in case there is other work on the main
      // thread, like user events. By default, it yields multiple times per frame.
      // It does not attempt to align with frame boundaries, since most tasks don't
      // need to be frame aligned; for those that do, use requestAnimationFrame.
      var yieldInterval = 5;
      var deadline = 0;
      // TODO: Make this configurable
      {
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function () {
          return exports.unstable_now() >= deadline;
        };
        // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function () {};
      }
      exports.unstable_forceFrameRate = function (fps) {
        if (fps < 0 || fps > 125) {
          // Using console['error'] to evade Babel and ESLint
          console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
          return;
        }
        if (fps > 0) {
          yieldInterval = Math.floor(1000 / fps);
        } else {
          // reset the framerate
          yieldInterval = 5;
        }
      };
      var performWorkUntilDeadline = function () {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          // Yield after `yieldInterval` ms, regardless of where we are in the vsync
          // cycle. This means there's always time remaining at the beginning of
          // the message event.
          deadline = currentTime + yieldInterval;
          var hasTimeRemaining = true;
          try {
            var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            if (!hasMoreWork) {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            } else {
              // If there's more work, schedule the next message event at the end
              // of the preceding one.
              port.postMessage(null);
            }
          } catch (error) {
            // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            port.postMessage(null);
            throw error;
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var channel = new MessageChannel();
      var port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      requestHostCallback = function (callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          port.postMessage(null);
        }
      };
      requestHostTimeout = function (callback, ms) {
        taskTimeoutID = _setTimeout(function () {
          callback(exports.unstable_now());
        }, ms);
      };
      cancelHostTimeout = function () {
        _clearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      };
    }
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      siftUp(heap, node, index);
    }
    function peek(heap) {
      var first = heap[0];
      return first === undefined ? null : first;
    }
    function pop(heap) {
      var first = heap[0];
      if (first !== undefined) {
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      } else {
        return null;
      }
    }
    function siftUp(heap, node, i) {
      var index = i;
      while (true) {
        var parentIndex = index - 1 >>> 1;
        var parent = heap[parentIndex];
        if (parent !== undefined && compare(parent, node) > 0) {
          // The parent is larger. Swap positions.
          heap[parentIndex] = node;
          heap[index] = parent;
          index = parentIndex;
        } else {
          // The parent is smaller. Exit.
          return;
        }
      }
    }
    function siftDown(heap, node, i) {
      var index = i;
      var length = heap.length;
      while (index < length) {
        var leftIndex = (index + 1) * 2 - 1;
        var left = heap[leftIndex];
        var rightIndex = leftIndex + 1;
        var right = heap[rightIndex];
        // If the left or right node is smaller, swap with the smaller of those.
        if (left !== undefined && compare(left, node) < 0) {
          if (right !== undefined && compare(right, left) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            heap[index] = left;
            heap[leftIndex] = node;
            index = leftIndex;
          }
        } else if (right !== undefined && compare(right, node) < 0) {
          heap[index] = right;
          heap[rightIndex] = node;
          index = rightIndex;
        } else {
          // Neither child is smaller. Exit.
          return;
        }
      }
    }
    function compare(a, b) {
      // Compare sort index first, then task id.
      var diff = a.sortIndex - b.sortIndex;
      return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /*eslint-disable no-var*/
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
    // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = [];
    // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1;
    // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority;
    // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
      // Check for tasks that are no longer delayed and add them to the queue.
      var timer = peek(timerQueue);
      while (timer !== null) {
        if (timer.callback === null) {
          // Timer was cancelled.
          pop(timerQueue);
        } else if (timer.startTime <= currentTime) {
          // Timer fired. Transfer to the task queue.
          pop(timerQueue);
          timer.sortIndex = timer.expirationTime;
          push(taskQueue, timer);
        } else {
          // Remaining timers are pending.
          return;
        }
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = false;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled) {
        if (peek(taskQueue) !== null) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
        }
      }
    }
    function flushWork(hasTimeRemaining, initialTime) {
      isHostCallbackScheduled = false;
      if (isHostTimeoutScheduled) {
        // We scheduled a timeout but it's no longer needed. Cancel it.
        isHostTimeoutScheduled = false;
        cancelHostTimeout();
      }
      isPerformingWork = true;
      var previousPriorityLevel = currentPriorityLevel;
      try {
        if (enableProfiling) {
          try {
            return workLoop(hasTimeRemaining, initialTime);
          } catch (error) {
            if (currentTask !== null) {
              var currentTime = exports.unstable_now();
              markTaskErrored(currentTask, currentTime);
              currentTask.isQueued = false;
            }
            throw error;
          }
        } else {
          // No catch in prod code path.
          return workLoop(hasTimeRemaining, initialTime);
        }
      } finally {
        currentTask = null;
        currentPriorityLevel = previousPriorityLevel;
        isPerformingWork = false;
      }
    }
    function workLoop(hasTimeRemaining, initialTime) {
      var currentTime = initialTime;
      advanceTimers(currentTime);
      currentTask = peek(taskQueue);
      while (currentTask !== null && !enableSchedulerDebugging) {
        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
          // This currentTask hasn't expired, and we've reached the deadline.
          break;
        }
        var callback = currentTask.callback;
        if (typeof callback === 'function') {
          currentTask.callback = null;
          currentPriorityLevel = currentTask.priorityLevel;
          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
          var continuationCallback = callback(didUserCallbackTimeout);
          currentTime = exports.unstable_now();
          if (typeof continuationCallback === 'function') {
            currentTask.callback = continuationCallback;
          } else {
            if (currentTask === peek(taskQueue)) {
              pop(taskQueue);
            }
          }
          advanceTimers(currentTime);
        } else {
          pop(taskQueue);
        }
        currentTask = peek(taskQueue);
      }
      // Return whether there's additional work
      if (currentTask !== null) {
        return true;
      } else {
        var firstTimer = peek(timerQueue);
        if (firstTimer !== null) {
          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
        return false;
      }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_next(eventHandler) {
      var priorityLevel;
      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;
        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    }
    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
      var currentTime = exports.unstable_now();
      var startTime;
      if (typeof options === 'object' && options !== null) {
        var delay = options.delay;
        if (typeof delay === 'number' && delay > 0) {
          startTime = currentTime + delay;
        } else {
          startTime = currentTime;
        }
      } else {
        startTime = currentTime;
      }
      var timeout;
      switch (priorityLevel) {
        case ImmediatePriority:
          timeout = IMMEDIATE_PRIORITY_TIMEOUT;
          break;
        case UserBlockingPriority:
          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
          break;
        case IdlePriority:
          timeout = IDLE_PRIORITY_TIMEOUT;
          break;
        case LowPriority:
          timeout = LOW_PRIORITY_TIMEOUT;
          break;
        case NormalPriority:
        default:
          timeout = NORMAL_PRIORITY_TIMEOUT;
          break;
      }
      var expirationTime = startTime + timeout;
      var newTask = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: startTime,
        expirationTime: expirationTime,
        sortIndex: -1
      };
      if (startTime > currentTime) {
        // This is a delayed task.
        newTask.sortIndex = startTime;
        push(timerQueue, newTask);
        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
          // All tasks are delayed, and this is the task with the earliest delay.
          if (isHostTimeoutScheduled) {
            // Cancel an existing timeout.
            cancelHostTimeout();
          } else {
            isHostTimeoutScheduled = true;
          }
          // Schedule a timeout.
          requestHostTimeout(handleTimeout, startTime - currentTime);
        }
      } else {
        newTask.sortIndex = expirationTime;
        push(taskQueue, newTask);
        // wait until the next time we yield.
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
      if (!isHostCallbackScheduled && !isPerformingWork) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      }
    }
    function unstable_getFirstCallbackNode() {
      return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
      // remove from the queue because you can't remove arbitrary nodes from an
      // array based heap, only the first one.)
      task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}

},{}],"6jIZo":[function(require,module,exports) {
"use strict";
if ("development" === 'production') {
  module.exports = require('./cjs/scheduler-tracing.production.min.js');
} else {
  module.exports = require('./cjs/scheduler-tracing.development.js');
}

},{"./cjs/scheduler-tracing.development.js":"2qFgQ"}],"2qFgQ":[function(require,module,exports) {
/** @license React v0.20.2
* scheduler-tracing.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
"use strict";
if ("development" !== "production") {
  (function () {
    "use strict";
    var DEFAULT_THREAD_ID = 0;
    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;
    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;
    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }
    function unstable_clear(callback) {
      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();
      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }
    function unstable_getCurrent() {
      {
        return exports.__interactionsRef.current;
      }
    }
    function unstable_getThreadID() {
      return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current;
      // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.
      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue;
      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--;
              // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }
      return returnValue;
    }
    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;
      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      }
      // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;
      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;
        try {
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;
              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }
          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true;
            // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }
      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;
        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;
            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };
      return wrapped;
    }
    var subscribers = null;
    {
      subscribers = new Set();
    }
    function unstable_subscribe(subscriber) {
      {
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }
    function unstable_unsubscribe(subscriber) {
      {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }
    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });
      if (didCatchError) {
        throw caughtError;
      }
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
  })();
}

},{}],"6Pm2X":[function(require,module,exports) {
var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _hooksUseFetch = require("./hooks/useFetch");
  var _d3Scale = require("d3-scale");
  var _d3Array = require("d3-array");
  require("vega");
  var _topojsonClient = require("topojson-client");
  var _land50m = require("../land-50m");
  var _land50mDefault = _parcelHelpers.interopDefault(_land50m);
  var _jsxFileName = "/Users/zhanwu/Desktop/UW/INFO-474/react-parcel-starter/src/App.js", _s = $RefreshSig$();
  // https://observablehq.com/@jermspeaks/async-await
  const App = () => {
    _s();
    const [data, loading] = _hooksUseFetch.useFetch("https://raw.githubusercontent.com/colinmegill/react-parcel-starter/main/weather.csv");
    const dataSmallSample = data.slice(0, 5000);
    const TMAXextent = _d3Array.extent(dataSmallSample, d => {
      return +d.TMAX;
    });
    const land = _topojsonClient.feature(_land50mDefault.default, _land50mDefault.default.objects.land);
    const projection = d3.geoNaturalEarth1();
    const path = d3.geoPath(projection);
    const mapPathString = path(land);
    const size = 500;
    const margin = 20;
    const axisTextAlignmentFactor = 3;
    const yScale = _d3Scale.scaleLinear().domain(TMAXextent).// unit: km
    range([size - margin, size - 350]);
    // unit: pixels
    _bins = _d3Array.bin().thresholds(30);
    tmaxBins = _bins(data.map(d => {
      return +d.TMAX;
    }));
    const histogramLeftPadding = 20;
    /*
    binning https://observablehq.com/@d3/d3-bin
    geo https://observablehq.com/@d3/world-airports?collection=@d3/d3-geo https://github.com/d3/d3-geo
    auto axes / ticks https://observablehq.com/@uwdata/scales-axes-and-legends?collection=@uwdata/visualization-curriculum
    means https://danfo.jsdata.org/
    line graph with d3 https://observablehq.com/@d3/line-chart?collection=@d3/d3-shape https://github.com/d3/d3-shape
    dotplots
    ordinal data, legends
    componetization
    */
    {}
    return (
      /*#__PURE__*/_reactDefault.default.createElement("div", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("h1", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 7
        }
      }, "Exploratory Data Analysis, Assignment 2, INFO 474 SP 2021"), /*#__PURE__*/_reactDefault.default.createElement("p", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61,
          columnNumber: 7
        }
      }, loading && "Loading data!"), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63,
          columnNumber: 7
        }
      }, " Working with geo data "), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: 1000,
        height: 600,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("path", {
        d: mapPathString,
        fill: "rgb(200, 200, 200)",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65,
          columnNumber: 9
        }
      }), dataSmallSample.map(measurement => {
        return (
          /*#__PURE__*/_reactDefault.default.createElement("circle", {
            transform: `translate(
                ${projection([measurement.longitude, measurement.latitude])})`,
            r: "1.5",
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77,
          columnNumber: 7
        }
      }, " Binning "), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78,
          columnNumber: 7
        }
      }, tmaxBins.map((bin, i) => {
        return (
          /*#__PURE__*/_reactDefault.default.createElement("rect", {
            y: size - 50 - bin.length,
            width: "10",
            height: bin.length,
            x: histogramLeftPadding + i * 11,
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90,
          columnNumber: 7
        }
      }, "Temperatures"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("text", {
        x: size / 2 - 12,
        y: yScale(0) + axisTextAlignmentFactor,
        textAnchor: "end",
        style: {
          fontSize: 10,
          fontFamily: "Gill Sans, sans serif"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92,
          columnNumber: 9
        }
      }, "0"), /*#__PURE__*/_reactDefault.default.createElement("text", {
        x: size / 2 - 12,
        y: yScale(100) + axisTextAlignmentFactor,
        textAnchor: "end",
        style: {
          fontSize: 10,
          fontFamily: "Gill Sans, sans serif"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100,
          columnNumber: 9
        }
      }, "100"), /*#__PURE__*/_reactDefault.default.createElement("line", {
        x1: size / 2 - 10,
        y1: yScale(100),
        x2: size / 2 - 5,
        y2: yScale(100),
        stroke: "black",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108,
          columnNumber: 9
        }
      }), /*#__PURE__*/_reactDefault.default.createElement("line", {
        x1: size / 2 - 10,
        y1: yScale(0),
        x2: size / 2 - 5,
        y2: yScale(0),
        stroke: "black",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115,
          columnNumber: 9
        }
      }), dataSmallSample.map((measurement, index) => {
        const highlight = measurement.station === "KALISPELL GLACIER AP";
        return (
          /*#__PURE__*/_reactDefault.default.createElement("line", {
            key: index,
            x1: size / 2,
            y1: yScale(measurement.TMAX),
            x2: size / 2 + 20,
            y2: yScale(measurement.TMAX),
            stroke: highlight ? "red" : "steelblue",
            strokeOpacity: highlight ? 1 : 0.1,
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 126,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 138,
          columnNumber: 7
        }
      }, "Scatterplot"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 139,
          columnNumber: 7
        }
      }, dataSmallSample.map((measurement, index) => {
        const highlight = measurement.station === "KALISPELL GLACIER AP";
        return (
          /*#__PURE__*/_reactDefault.default.createElement("circle", {
            key: index,
            cx: 100 - measurement.TMIN,
            cy: size - margin - measurement.TMAX,
            r: "3",
            fill: "none",
            stroke: highlight ? "red" : "steelblue",
            strokeOpacity: "0.2",
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 143,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 155,
          columnNumber: 7
        }
      }, "Barcode plot TMAX at Kalispell Glacier (sounds cold, expect it to be lower than average)"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 159,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("text", {
        x: size / 2 - 12,
        textAnchor: "end",
        y: size - margin + axisTextAlignmentFactor,
        style: {
          fontSize: 10,
          fontFamily: "Gill Sans, sans serif"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 160,
          columnNumber: 9
        }
      }, "0"), /*#__PURE__*/_reactDefault.default.createElement("text", {
        x: size / 2 - 12,
        textAnchor: "end",
        y: size - margin - 100 + axisTextAlignmentFactor,
        style: {
          fontSize: 10,
          fontFamily: "Gill Sans, sans serif"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 168,
          columnNumber: 9
        }
      }, "100"), /*#__PURE__*/_reactDefault.default.createElement("line", {
        x1: size / 2 - 10,
        y1: size - margin - 100,
        x2: size / 2 - 5,
        y2: size - margin - 100,
        stroke: "black",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 176,
          columnNumber: 9
        }
      }), /*#__PURE__*/_reactDefault.default.createElement("line", {
        x1: size / 2 - 10,
        y1: size - margin,
        x2: size / 2 - 5,
        y2: size - margin,
        stroke: "black",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 183,
          columnNumber: 9
        }
      }), data.slice(0, 1000).map((measurement, index) => {
        const highlight = measurement.station === "KALISPELL GLACIER AP";
        return (
          /*#__PURE__*/_reactDefault.default.createElement("line", {
            key: index,
            x1: size / 2,
            y1: size - margin - measurement.TMAX,
            x2: size / 2 + 20,
            y2: size - margin - measurement.TMAX,
            stroke: highlight ? "red" : "steelblue",
            strokeOpacity: highlight ? 1 : 0.1,
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 206,
          columnNumber: 7
        }
      }, "TMAX at Kalispell Glacier (sounds cold, expect it to be lower than average)"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 210,
          columnNumber: 7
        }
      }, data.slice(0, 300).map((measurement, index) => {
        const highlight = measurement.station === "KALISPELL GLACIER AP";
        return (
          /*#__PURE__*/_reactDefault.default.createElement("circle", {
            key: index,
            cx: highlight ? size / 2 : size / 2 - 20,
            cy: size - margin - measurement.TMAX,
            r: "3",
            fill: "none",
            stroke: highlight ? "red" : "steelblue",
            strokeOpacity: "0.2",
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 214,
              columnNumber: 13
            }
          })
        );
      })), /*#__PURE__*/_reactDefault.default.createElement("h3", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 226,
          columnNumber: 7
        }
      }, "Rendering circles :) this shows a distribution of TMAX"), /*#__PURE__*/_reactDefault.default.createElement("svg", {
        width: size,
        height: size,
        style: {
          border: "1px solid black"
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 227,
          columnNumber: 7
        }
      }, data.slice(0, 300).map((measurement, index) => {
        return (
          /*#__PURE__*/_reactDefault.default.createElement("circle", {
            key: index,
            cx: size / 2,
            cy: size - margin - measurement.TMAX,
            r: "3",
            fill: "none",
            stroke: "steelblue",
            strokeOpacity: "0.2",
            __self: undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 230,
              columnNumber: 13
            }
          })
        );
      })))
    );
  };
  _s(App, "Jm65JCcgUFoenM4DufkEA80vRVI=", false, function () {
    return [_hooksUseFetch.useFetch];
  });
  _c = App;
  exports.default = App;
  var _c;
  $RefreshReg$(_c, "App");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"react":"3b2NM","./hooks/useFetch":"5YU3r","d3-scale":"2UZ4X","d3-array":"7CLUA","vega":"4modi","topojson-client":"7lQtw","../land-50m":"4sloD","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y","../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"5YU3r":[function(require,module,exports) {
var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "useFetch", function () {
    return useFetch;
  });
  var _d3Fetch = require("d3-fetch");
  var _react = require("react");
  var _s = $RefreshSig$();
  const useFetch = url => {
    _s();
    const [data, setData] = _react.useState([]);
    const [loading, setLoading] = _react.useState(true);
    async function fetchUrl() {
      const response = await _d3Fetch.csv(url);
      setData(response);
      setLoading(false);
    }
    _react.useEffect(() => {
      fetchUrl();
    }, []);
    return [data, loading];
  };
  _s(useFetch, "YP7e7Smzxlgf2d3MqLcgRZjo83U=");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}

},{"d3-fetch":"3eyo6","react":"3b2NM","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y","../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"4Jj4f"}],"3eyo6":[function(require,module,exports) {
var define;
// https://d3js.org/d3-fetch/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dsv')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-dsv'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Dsv) {
  "use strict";
  function responseBlob(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.blob();
  }
  function blob(input, init) {
    return fetch(input, init).then(responseBlob);
  }
  function responseArrayBuffer(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.arrayBuffer();
  }
  function buffer(input, init) {
    return fetch(input, init).then(responseArrayBuffer);
  }
  function responseText(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.text();
  }
  function text(input, init) {
    return fetch(input, init).then(responseText);
  }
  function dsvParse(parse) {
    return function (input, init, row) {
      if (arguments.length === 2 && typeof init === "function") (row = init, init = undefined);
      return text(input, init).then(function (response) {
        return parse(response, row);
      });
    };
  }
  function dsv(delimiter, input, init, row) {
    if (arguments.length === 3 && typeof init === "function") (row = init, init = undefined);
    var format = d3Dsv.dsvFormat(delimiter);
    return text(input, init).then(function (response) {
      return format.parse(response, row);
    });
  }
  var csv = dsvParse(d3Dsv.csvParse);
  var tsv = dsvParse(d3Dsv.tsvParse);
  function image(input, init) {
    return new Promise(function (resolve, reject) {
      var image = new Image();
      for (var key in init) image[key] = init[key];
      image.onerror = reject;
      image.onload = function () {
        resolve(image);
      };
      image.src = input;
    });
  }
  function responseJson(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    if (response.status === 204 || response.status === 205) return;
    return response.json();
  }
  function json(input, init) {
    return fetch(input, init).then(responseJson);
  }
  function parser(type) {
    return (input, init) => text(input, init).then(text => new DOMParser().parseFromString(text, type));
  }
  var xml = parser("application/xml");
  var html = parser("text/html");
  var svg = parser("image/svg+xml");
  exports.blob = blob;
  exports.buffer = buffer;
  exports.csv = csv;
  exports.dsv = dsv;
  exports.html = html;
  exports.image = image;
  exports.json = json;
  exports.svg = svg;
  exports.text = text;
  exports.tsv = tsv;
  exports.xml = xml;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-dsv":"6T2lj"}],"6T2lj":[function(require,module,exports) {
var define;
// https://d3js.org/d3-dsv/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  var EOL = {}, EOF = {}, QUOTE = 34, NEWLINE = 10, RETURN = 13;
  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function (name, i) {
      return JSON.stringify(name) + ": d[" + i + "] || \"\"";
    }).join(",") + "}");
  }
  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function (row, i) {
      return f(object(row), i, columns);
    };
  }
  // Compute unique columns in order of discovery.
  function inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function (row) {
      for (var column in row) {
        if (!((column in columnSet))) {
          columns.push(columnSet[column] = column);
        }
      }
    });
    return columns;
  }
  function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
  }
  function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
  }
  function formatDate(date) {
    var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
  }
  function dsv(delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse(text, f) {
      var convert, columns, rows = parseRows(text, function (row, i) {
        if (convert) return convert(row, i - 1);
        (columns = row, convert = f ? customConverter(row, f) : objectConverter(row));
      });
      rows.columns = columns || [];
      return rows;
    }
    function parseRows(text, f) {
      var rows = [], // output rows
      N = text.length, I = 0, // current character index
      n = 0, // current line number
      t, // current token
      eof = N <= 0, // current token followed by EOF?
      eol = false;
      // current token followed by EOL?
      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;
      function token() {
        if (eof) return EOF;
        if (eol) return (eol = false, EOL);
        // Unescape quotes.
        var i, j = I, c;
        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) ;
          if ((i = I) >= N) eof = true; else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true; else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE) ++I;
          }
          return text.slice(j + 1, i - 1).replace(/""/g, "\"");
        }
        // Find next delimiter or newline.
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true; else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE) ++I;
          } else if (c !== DELIMITER) continue;
          return text.slice(j, i);
        }
        // Return last token before EOF.
        return (eof = true, text.slice(j, N));
      }
      while ((t = token()) !== EOF) {
        var row = [];
        while (t !== EOL && t !== EOF) (row.push(t), t = token());
        if (f && (row = f(row, n++)) == null) continue;
        rows.push(row);
      }
      return rows;
    }
    function preformatBody(rows, columns) {
      return rows.map(function (row) {
        return columns.map(function (column) {
          return formatValue(row[column]);
        }).join(delimiter);
      });
    }
    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(value) {
      return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
    }
    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatBody: formatBody,
      formatRows: formatRows,
      formatRow: formatRow,
      formatValue: formatValue
    };
  }
  var csv = dsv(",");
  var csvParse = csv.parse;
  var csvParseRows = csv.parseRows;
  var csvFormat = csv.format;
  var csvFormatBody = csv.formatBody;
  var csvFormatRows = csv.formatRows;
  var csvFormatRow = csv.formatRow;
  var csvFormatValue = csv.formatValue;
  var tsv = dsv("\t");
  var tsvParse = tsv.parse;
  var tsvParseRows = tsv.parseRows;
  var tsvFormat = tsv.format;
  var tsvFormatBody = tsv.formatBody;
  var tsvFormatRows = tsv.formatRows;
  var tsvFormatRow = tsv.formatRow;
  var tsvFormatValue = tsv.formatValue;
  function autoType(object) {
    for (var key in object) {
      var value = object[key].trim(), number, m;
      if (!value) value = null; else if (value === "true") value = true; else if (value === "false") value = false; else if (value === "NaN") value = NaN; else if (!isNaN(number = +value)) value = number; else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
        if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
        value = new Date(value);
      } else continue;
      object[key] = value;
    }
    return object;
  }
  // https://github.com/d3/d3-dsv/issues/45
  const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();
  exports.autoType = autoType;
  exports.csvFormat = csvFormat;
  exports.csvFormatBody = csvFormatBody;
  exports.csvFormatRow = csvFormatRow;
  exports.csvFormatRows = csvFormatRows;
  exports.csvFormatValue = csvFormatValue;
  exports.csvParse = csvParse;
  exports.csvParseRows = csvParseRows;
  exports.dsvFormat = dsv;
  exports.tsvFormat = tsvFormat;
  exports.tsvFormatBody = tsvFormatBody;
  exports.tsvFormatRow = tsvFormatRow;
  exports.tsvFormatRows = tsvFormatRows;
  exports.tsvFormatValue = tsvFormatValue;
  exports.tsvParse = tsvParse;
  exports.tsvParseRows = tsvParseRows;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"5gA8y":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}],"4Jj4f":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
  if ("development" === 'test') {
    return function (args) {
      func.call(null, args);
    };
  } else {
    var timeout = undefined;
    return function (args) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        timeout = undefined;
        func.call(null, args);
      }, delay);
    };
  }
}
var enqueueUpdate = debounce(function () {
  Refresh.performReactRefresh();
}, 30);
// Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function (module) {
  window.$RefreshReg$ = function (type, id) {
    Refresh.register(type, module.id + ' ' + id);
  };
  window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function (module) {
  if (isReactRefreshBoundary(module.exports)) {
    registerExportsForReactRefresh(module);
    if (module.hot) {
      module.hot.dispose(function (data) {
        if (Refresh.hasUnrecoverableErrors()) {
          window.location.reload();
        }
        data.prevExports = module.exports;
      });
      module.hot.accept(function (getParents) {
        var prevExports = module.hot.data.prevExports;
        var nextExports = module.exports;
        // Since we just executed the code for it, it's possible
        // that the new exports make it ineligible for being a boundary.
        var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
        // It can also become ineligible if its exports are incompatible
        // with the previous exports.
        // For example, if you add/remove/change exports, we'll want
        // to re-execute the importing modules, and force those components
        // to re-render. Similarly, if you convert a class component
        // to a function, we want to invalidate the boundary.
        var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
        if (isNoLongerABoundary || didInvalidate) {
          // We'll be conservative. The only case in which we won't do a full
          // reload is if all parent modules are also refresh boundaries.
          // In that case we'll add them to the current queue.
          var parents = getParents();
          if (parents.length === 0) {
            // Looks like we bubbled to the root. Can't recover from that.
            window.location.reload();
            return;
          }
          return parents;
        }
        enqueueUpdate();
      });
    }
  }
};
function isReactRefreshBoundary(exports) {
  if (Refresh.isLikelyComponentType(exports)) {
    return true;
  }
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    return false;
  }
  var hasExports = false;
  var areAllExportsComponents = true;
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    hasExports = true;
    if (key === '__esModule') {
      continue;
    }
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      return false;
    }
    var exportValue = exports[key];
    if (!Refresh.isLikelyComponentType(exportValue)) {
      areAllExportsComponents = false;
    }
  }
  return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
  var prevSignature = getRefreshBoundarySignature(prevExports);
  var nextSignature = getRefreshBoundarySignature(nextExports);
  if (prevSignature.length !== nextSignature.length) {
    return true;
  }
  for (var i = 0; i < nextSignature.length; i++) {
    if (prevSignature[i] !== nextSignature[i]) {
      return true;
    }
  }
  return false;
}
// When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
  var signature = [];
  signature.push(Refresh.getFamilyByType(exports));
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
  }
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    if (key === '__esModule') {
      continue;
    }
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      continue;
    }
    var exportValue = exports[key];
    signature.push(key);
    signature.push(Refresh.getFamilyByType(exportValue));
  }
  return signature;
}
function registerExportsForReactRefresh(module) {
  var exports = module.exports, id = module.id;
  Refresh.register(exports, id + ' %exports%');
  if (exports == null || typeof exports !== 'object') {
    // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
  }
  let isESM = ('__esModule' in exports);
  for (var key in exports) {
    var desc = Object.getOwnPropertyDescriptor(exports, key);
    if (desc && desc.get && !isESM) {
      // Don't invoke getters for CJS as they may have side effects.
      continue;
    }
    var exportValue = exports[key];
    Refresh.register(exportValue, id + ' %exports% ' + key);
  }
}

},{"react-refresh/runtime":"592mh"}],"2UZ4X":[function(require,module,exports) {
var define;
// https://d3js.org/d3-scale/ v3.3.0 Copyright 2021 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || ({}), global.d3, global.d3, global.d3, global.d3, global.d3));
})(this, function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) {
  "use strict";
  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        {
          if (typeof domain === "function") this.interpolator(domain); else this.range(domain);
          break;
        }
      default:
        {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator); else this.range(interpolator);
          break;
        }
    }
    return this;
  }
  const implicit = Symbol("implicit");
  function ordinal() {
    var index = new Map(), domain = [], range = [], unknown = implicit;
    function scale(d) {
      var key = d + "", i = index.get(key);
      if (!i) {
        if (unknown !== implicit) return unknown;
        index.set(key, i = domain.push(d));
      }
      return range[(i - 1) % range.length];
    }
    scale.domain = function (_) {
      if (!arguments.length) return domain.slice();
      (domain = [], index = new Map());
      for (const value of _) {
        const key = value + "";
        if (index.has(key)) continue;
        index.set(key, domain.push(value));
      }
      return scale;
    };
    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function () {
      return ordinal(domain, range).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function band() {
    var scale = ordinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round) step = Math.floor(step);
      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round) (start = Math.round(start), bandwidth = Math.round(bandwidth));
      var values = d3Array.range(n).map(function (i) {
        return start + step * i;
      });
      return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function (_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function (_) {
      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
    };
    scale.rangeRound = function (_) {
      return ([r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale());
    };
    scale.bandwidth = function () {
      return bandwidth;
    };
    scale.step = function () {
      return step;
    };
    scale.round = function (_) {
      return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function (_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function (_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function (_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function (_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function () {
      return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return initRange.apply(rescale(), arguments);
  }
  function pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function () {
      return pointish(copy());
    };
    return scale;
  }
  function point() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }
  function constants(x) {
    return function () {
      return x;
    };
  }
  function number$1(x) {
    return +x;
  }
  var unit = [0, 1];
  function identity$1(x) {
    return x;
  }
  function normalize(a, b) {
    return (b -= a = +a) ? function (x) {
      return (x - a) / b;
    } : constants(isNaN(b) ? NaN : 0.5);
  }
  function clamper(a, b) {
    var t;
    if (a > b) (t = a, a = b, b = t);
    return function (x) {
      return Math.max(a, Math.min(b, x));
    };
  }
  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
  function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) (d0 = normalize(d1, d0), r0 = interpolate(r1, r0)); else (d0 = normalize(d0, d1), r0 = interpolate(r0, r1));
    return function (x) {
      return r0(d0(x));
    };
  }
  function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++i < j) {
      d[i] = normalize(domain[i], domain[i + 1]);
      r[i] = interpolate(range[i], range[i + 1]);
    }
    return function (x) {
      var i = d3Array.bisect(domain, x, 1, j) - 1;
      return r[i](d[i](x));
    };
  }
  function copy$1(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer$2() {
    var domain = unit, range = unit, interpolate = d3Interpolate.interpolate, transform, untransform, unknown, clamp = identity$1, piecewise, output, input;
    function rescale() {
      var n = Math.min(domain.length, range.length);
      if (clamp !== identity$1) clamp = clamper(domain[0], domain[n - 1]);
      piecewise = n > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function (y) {
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
    };
    scale.domain = function (_) {
      return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
    };
    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function (_) {
      return (range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale());
    };
    scale.clamp = function (_) {
      return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
    };
    scale.interpolate = function (_) {
      return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function (t, u) {
      (transform = t, untransform = u);
      return rescale();
    };
  }
  function continuous() {
    return transformer$2()(identity$1, identity$1);
  }
  function tickFormat(start, stop, count, specifier) {
    var step = d3Array.tickStep(start, stop, count), precision;
    specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s":
        {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
          return d3Format.formatPrefix(specifier, value);
        }
      case "":
      case "e":
      case "g":
      case "p":
      case "r":
        {
          if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
      case "f":
      case "%":
        {
          if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
    }
    return d3Format.format(specifier);
  }
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function (count) {
      var d = domain();
      return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function (count, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function (count) {
      if (count == null) count = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start = d[i0];
      var stop = d[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start) {
        (step = start, start = stop, stop = step);
        (step = i0, i0 = i1, i1 = step);
      }
      while (maxIter-- > 0) {
        step = d3Array.tickIncrement(start, stop, count);
        if (step === prestep) {
          d[i0] = start;
          d[i1] = stop;
          return domain(d);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear() {
    var scale = continuous();
    scale.copy = function () {
      return copy$1(scale, linear());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }
  function identity(domain) {
    var unknown;
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function (_) {
      return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function () {
      return identity(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, number$1) : [0, 1];
    return linearish(scale);
  }
  function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
      (t = i0, i0 = i1, i1 = t);
      (t = x0, x0 = x1, x1 = t);
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }
  function transformLog(x) {
    return Math.log(x);
  }
  function transformExp(x) {
    return Math.exp(x);
  }
  function transformLogn(x) {
    return -Math.log(-x);
  }
  function transformExpn(x) {
    return -Math.exp(-x);
  }
  function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
  }
  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
      return Math.pow(base, x);
    };
  }
  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
      return Math.log(x) / base;
    });
  }
  function reflect(f) {
    return function (x) {
      return -f(-x);
    };
  }
  function loggish(transform) {
    var scale = transform(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
    function rescale() {
      (logs = logp(base), pows = powp(base));
      if (domain()[0] < 0) {
        (logs = reflect(logs), pows = reflect(pows));
        transform(transformLogn, transformExpn);
      } else {
        transform(transformLog, transformExp);
      }
      return scale;
    }
    scale.base = function (_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function (_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = function (count) {
      var d = domain(), u = d[0], v = d[d.length - 1], r;
      if (r = v < u) (i = u, u = v, v = i);
      var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
      if (!(base % 1) && j - i < n) {
        (i = Math.floor(i), j = Math.ceil(j));
        if (u > 0) for (; i <= j; ++i) {
          for ((k = 1, p = pows(i)); k < base; ++k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        } else for (; i <= j; ++i) {
          for ((k = base - 1, p = pows(i)); k >= 1; --k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        if (z.length * 2 < n) z = d3Array.ticks(u, v, n);
      } else {
        z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
      }
      return r ? z.reverse() : z;
    };
    scale.tickFormat = function (count, specifier) {
      if (specifier == null) specifier = base === 10 ? ".0e" : ",";
      if (typeof specifier !== "function") specifier = d3Format.format(specifier);
      if (count === Infinity) return specifier;
      if (count == null) count = 10;
      var k = Math.max(1, base * count / scale.ticks().length);
      // TODO fast estimate?
      return function (d) {
        var i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5) i *= base;
        return i <= k ? specifier(d) : "";
      };
    };
    scale.nice = function () {
      return domain(nice(domain(), {
        floor: function (x) {
          return pows(Math.floor(logs(x)));
        },
        ceil: function (x) {
          return pows(Math.ceil(logs(x)));
        }
      }));
    };
    return scale;
  }
  function log() {
    var scale = loggish(transformer$2()).domain([1, 10]);
    scale.copy = function () {
      return copy$1(scale, log()).base(scale.base());
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function transformSymlog(c) {
    return function (x) {
      return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
  }
  function transformSymexp(c) {
    return function (x) {
      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
  }
  function symlogish(transform) {
    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
    scale.constant = function (_) {
      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
    };
    return linearish(scale);
  }
  function symlog() {
    var scale = symlogish(transformer$2());
    scale.copy = function () {
      return copy$1(scale, symlog()).constant(scale.constant());
    };
    return initRange.apply(scale, arguments);
  }
  function transformPow(exponent) {
    return function (x) {
      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
  }
  function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
  }
  function transformSquare(x) {
    return x < 0 ? -x * x : x * x;
  }
  function powish(transform) {
    var scale = transform(identity$1, identity$1), exponent = 1;
    function rescale() {
      return exponent === 1 ? transform(identity$1, identity$1) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function (_) {
      return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return linearish(scale);
  }
  function pow() {
    var scale = powish(transformer$2());
    scale.copy = function () {
      return copy$1(scale, pow()).exponent(scale.exponent());
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt() {
    return pow.apply(null, arguments).exponent(0.5);
  }
  function square(x) {
    return Math.sign(x) * x * x;
  }
  function unsquare(x) {
    return Math.sign(x) * Math.sqrt(Math.abs(x));
  }
  function radial() {
    var squared = continuous(), range = [0, 1], round = false, unknown;
    function scale(x) {
      var y = unsquare(squared(x));
      return isNaN(y) ? unknown : round ? Math.round(y) : y;
    }
    scale.invert = function (y) {
      return squared.invert(square(y));
    };
    scale.domain = function (_) {
      return arguments.length ? (squared.domain(_), scale) : squared.domain();
    };
    scale.range = function (_) {
      return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();
    };
    scale.rangeRound = function (_) {
      return scale.range(_).round(true);
    };
    scale.round = function (_) {
      return arguments.length ? (round = !!_, scale) : round;
    };
    scale.clamp = function (_) {
      return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function () {
      return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }
  function quantile() {
    var domain = [], range = [], thresholds = [], unknown;
    function rescale() {
      var i = 0, n = Math.max(1, range.length);
      thresholds = new Array(n - 1);
      while (++i < n) thresholds[i - 1] = d3Array.quantileSorted(domain, i / n);
      return scale;
    }
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
    }
    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
    };
    scale.domain = function (_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
      domain.sort(d3Array.ascending);
      return rescale();
    };
    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function () {
      return thresholds.slice();
    };
    scale.copy = function () {
      return quantile().domain(domain).range(range).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }
  function quantize() {
    var x0 = 0, x1 = 1, n = 1, domain = [0.5], range = [0, 1], unknown;
    function scale(x) {
      return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
    }
    function rescale() {
      var i = -1;
      domain = new Array(n);
      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
      return scale;
    }
    scale.domain = function (_) {
      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
    };
    scale.range = function (_) {
      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
    };
    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function () {
      return domain.slice();
    };
    scale.copy = function () {
      return quantize().domain([x0, x1]).range(range).unknown(unknown);
    };
    return initRange.apply(linearish(scale), arguments);
  }
  function threshold() {
    var domain = [0.5], range = [0, 1], unknown, n = 1;
    function scale(x) {
      return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
    }
    scale.domain = function (_) {
      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return [domain[i - 1], domain[i]];
    };
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function () {
      return threshold().domain(domain).range(range).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }
  function date(t) {
    return new Date(t);
  }
  function number(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }
  function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
    var scale = continuous(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
    function tickFormat(date) {
      return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }
    scale.invert = function (y) {
      return new Date(invert(y));
    };
    scale.domain = function (_) {
      return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
    };
    scale.ticks = function (interval) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function (count, specifier) {
      return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function (interval) {
      var d = domain();
      if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
      return interval ? domain(nice(d, interval)) : scale;
    };
    scale.copy = function () {
      return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
    };
    return scale;
  }
  function time() {
    return initRange.apply(calendar(d3Time.timeTicks, d3Time.timeTickInterval, d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
  }
  function utcTime() {
    return initRange.apply(calendar(d3Time.utcTicks, d3Time.utcTickInterval, d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
  }
  function transformer$1() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = identity$1, clamp = false, unknown;
    function scale(x) {
      return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function (_) {
      return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
    };
    scale.clamp = function (_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function (_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
      return function (_) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
      };
    }
    scale.range = range(d3Interpolate.interpolate);
    scale.rangeRound = range(d3Interpolate.interpolateRound);
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function (t) {
      (transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0));
      return scale;
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = linearish(transformer$1()(identity$1));
    scale.copy = function () {
      return copy(scale, sequential());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = loggish(transformer$1()).domain([1, 10]);
    scale.copy = function () {
      return copy(scale, sequentialLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = symlogish(transformer$1());
    scale.copy = function () {
      return copy(scale, sequentialSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = powish(transformer$1());
    scale.copy = function () {
      return copy(scale, sequentialPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }
  function sequentialQuantile() {
    var domain = [], interpolator = identity$1;
    function scale(x) {
      if (x != null && !isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function (_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
      domain.sort(d3Array.ascending);
      return scale;
    };
    scale.interpolator = function (_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.range = function () {
      return domain.map((d, i) => interpolator(i / (domain.length - 1)));
    };
    scale.quantiles = function (n) {
      return Array.from({
        length: n + 1
      }, (_, i) => d3Array.quantile(domain, i / n));
    };
    scale.copy = function () {
      return sequentialQuantile(interpolator).domain(domain);
    };
    return initInterpolator.apply(scale, arguments);
  }
  function transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = identity$1, transform, clamp = false, unknown;
    function scale(x) {
      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function (_) {
      return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
    };
    scale.clamp = function (_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function (_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
      return function (_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale.range = range(d3Interpolate.interpolate);
    scale.rangeRound = range(d3Interpolate.interpolateRound);
    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function (t) {
      (transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1);
      return scale;
    };
  }
  function diverging() {
    var scale = linearish(transformer()(identity$1));
    scale.copy = function () {
      return copy(scale, diverging());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer()).domain([0.1, 1, 10]);
    scale.copy = function () {
      return copy(scale, divergingLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer());
    scale.copy = function () {
      return copy(scale, divergingSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer());
    scale.copy = function () {
      return copy(scale, divergingPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }
  exports.scaleBand = band;
  exports.scaleDiverging = diverging;
  exports.scaleDivergingLog = divergingLog;
  exports.scaleDivergingPow = divergingPow;
  exports.scaleDivergingSqrt = divergingSqrt;
  exports.scaleDivergingSymlog = divergingSymlog;
  exports.scaleIdentity = identity;
  exports.scaleImplicit = implicit;
  exports.scaleLinear = linear;
  exports.scaleLog = log;
  exports.scaleOrdinal = ordinal;
  exports.scalePoint = point;
  exports.scalePow = pow;
  exports.scaleQuantile = quantile;
  exports.scaleQuantize = quantize;
  exports.scaleRadial = radial;
  exports.scaleSequential = sequential;
  exports.scaleSequentialLog = sequentialLog;
  exports.scaleSequentialPow = sequentialPow;
  exports.scaleSequentialQuantile = sequentialQuantile;
  exports.scaleSequentialSqrt = sequentialSqrt;
  exports.scaleSequentialSymlog = sequentialSymlog;
  exports.scaleSqrt = sqrt;
  exports.scaleSymlog = symlog;
  exports.scaleThreshold = threshold;
  exports.scaleTime = time;
  exports.scaleUtc = utcTime;
  exports.tickFormat = tickFormat;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA","d3-interpolate":"6eByj","d3-format":"3Bu0B","d3-time":"3rCZz","d3-time-format":"13ygP"}],"7CLUA":[function(require,module,exports) {
var define;
// https://d3js.org/d3-array/ v2.12.1 Copyright 2021 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  function bisector(f) {
    let delta = f;
    let compare = f;
    if (f.length === 1) {
      delta = (d, x) => f(d) - x;
      compare = ascendingComparator(f);
    }
    function left(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        const mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
      }
      return lo;
    }
    function right(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        const mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
      }
      return lo;
    }
    function center(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      const i = left(a, x, lo, hi - 1);
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
      left,
      center,
      right
    };
  }
  function ascendingComparator(f) {
    return (d, x) => ascending(f(d), x);
  }
  function number(x) {
    return x === null ? NaN : +x;
  }
  function* numbers(values, valueof) {
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }
  const ascendingBisect = bisector(ascending);
  const bisectRight = ascendingBisect.right;
  const bisectLeft = ascendingBisect.left;
  const bisectCenter = bisector(number).center;
  function count(values, valueof) {
    let count = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          ++count;
        }
      }
    }
    return count;
  }
  function length$1(array) {
    return array.length | 0;
  }
  function empty(length) {
    return !(length > 0);
  }
  function arrayify(values) {
    return typeof values !== "object" || ("length" in values) ? values : Array.from(values);
  }
  function reducer(reduce) {
    return values => reduce(...values);
  }
  function cross(...values) {
    const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
    values = values.map(arrayify);
    const lengths = values.map(length$1);
    const j = values.length - 1;
    const index = new Array(j + 1).fill(0);
    const product = [];
    if (j < 0 || lengths.some(empty)) return product;
    while (true) {
      product.push(index.map((j, i) => values[i][j]));
      let i = j;
      while (++index[i] === lengths[i]) {
        if (i === 0) return reduce ? product.map(reduce) : product;
        index[i--] = 0;
      }
    }
  }
  function cumsum(values, valueof) {
    var sum = 0, index = 0;
    return Float64Array.from(values, valueof === undefined ? v => sum += +v || 0 : v => sum += +valueof(v, index++, values) || 0);
  }
  function descending(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  }
  function variance(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          delta = value - mean;
          mean += delta / ++count;
          sum += delta * (value - mean);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          delta = value - mean;
          mean += delta / ++count;
          sum += delta * (value - mean);
        }
      }
    }
    if (count > 1) return sum / (count - 1);
  }
  function deviation(values, valueof) {
    const v = variance(values, valueof);
    return v ? Math.sqrt(v) : v;
  }
  function extent(values, valueof) {
    let min;
    let max;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null) {
          if (min === undefined) {
            if (value >= value) min = max = value;
          } else {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null) {
          if (min === undefined) {
            if (value >= value) min = max = value;
          } else {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
    return [min, max];
  }
  // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
  class Adder {
    constructor() {
      this._partials = new Float64Array(32);
      this._n = 0;
    }
    add(x) {
      const p = this._partials;
      let i = 0;
      for (let j = 0; j < this._n && j < 32; j++) {
        const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
        if (lo) p[i++] = lo;
        x = hi;
      }
      p[i] = x;
      this._n = i + 1;
      return this;
    }
    valueOf() {
      const p = this._partials;
      let n = this._n, x, y, lo, hi = 0;
      if (n > 0) {
        hi = p[--n];
        while (n > 0) {
          x = hi;
          y = p[--n];
          hi = x + y;
          lo = y - (hi - x);
          if (lo) break;
        }
        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
          y = lo * 2;
          x = hi + y;
          if (y == x - hi) hi = x;
        }
      }
      return hi;
    }
  }
  function fsum(values, valueof) {
    const adder = new Adder();
    if (valueof === undefined) {
      for (let value of values) {
        if (value = +value) {
          adder.add(value);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index, values)) {
          adder.add(value);
        }
      }
    }
    return +adder;
  }
  function fcumsum(values, valueof) {
    const adder = new Adder();
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? v => adder.add(+v || 0) : v => adder.add(+valueof(v, ++index, values) || 0));
  }
  class InternMap extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, {
        _intern: {
          value: new Map()
        },
        _key: {
          value: key
        }
      });
      if (entries != null) for (const [key, value] of entries) this.set(key, value);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value) {
      return super.set(intern_set(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  }
  class InternSet extends Set {
    constructor(values, key = keyof) {
      super();
      Object.defineProperties(this, {
        _intern: {
          value: new Map()
        },
        _key: {
          value: key
        }
      });
      if (values != null) for (const value of values) this.add(value);
    }
    has(value) {
      return super.has(intern_get(this, value));
    }
    add(value) {
      return super.add(intern_set(this, value));
    }
    delete(value) {
      return super.delete(intern_delete(this, value));
    }
  }
  function intern_get({_intern, _key}, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set({_intern, _key}, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete({_intern, _key}, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(value);
      _intern.delete(key);
    }
    return value;
  }
  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
  function identity(x) {
    return x;
  }
  function group(values, ...keys) {
    return nest(values, identity, identity, keys);
  }
  function groups(values, ...keys) {
    return nest(values, Array.from, identity, keys);
  }
  function rollup(values, reduce, ...keys) {
    return nest(values, identity, reduce, keys);
  }
  function rollups(values, reduce, ...keys) {
    return nest(values, Array.from, reduce, keys);
  }
  function index(values, ...keys) {
    return nest(values, identity, unique, keys);
  }
  function indexes(values, ...keys) {
    return nest(values, Array.from, unique, keys);
  }
  function unique(values) {
    if (values.length !== 1) throw new Error("duplicate key");
    return values[0];
  }
  function nest(values, map, reduce, keys) {
    return (function regroup(values, i) {
      if (i >= keys.length) return reduce(values);
      const groups = new InternMap();
      const keyof = keys[i++];
      let index = -1;
      for (const value of values) {
        const key = keyof(value, ++index, values);
        const group = groups.get(key);
        if (group) group.push(value); else groups.set(key, [value]);
      }
      for (const [key, values] of groups) {
        groups.set(key, regroup(values, i));
      }
      return map(groups);
    })(values, 0);
  }
  function permute(source, keys) {
    return Array.from(keys, key => source[key]);
  }
  function sort(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f = ascending] = F;
    if (f.length === 1 || F.length > 1) {
      const index = Uint32Array.from(values, (d, i) => i);
      if (F.length > 1) {
        F = F.map(f => values.map(f));
        index.sort((i, j) => {
          for (const f of F) {
            const c = ascending(f[i], f[j]);
            if (c) return c;
          }
        });
      } else {
        f = values.map(f);
        index.sort((i, j) => ascending(f[i], f[j]));
      }
      return permute(values, index);
    }
    return values.sort(f);
  }
  function groupSort(values, reduce, key) {
    return (reduce.length === 1 ? sort(rollup(values, reduce, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values, key), ([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))).map(([key]) => key);
  }
  var array = Array.prototype;
  var slice = array.slice;
  function constant(x) {
    return function () {
      return x;
    };
  }
  var e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
  function ticks(start, stop, count) {
    var reverse, i = -1, n, ticks, step;
    (stop = +stop, start = +start, count = +count);
    if (start === stop && count > 0) return [start];
    if (reverse = stop < start) (n = start, start = stop, stop = n);
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
    if (step > 0) {
      let r0 = Math.round(start / step), r1 = Math.round(stop / step);
      if (r0 * step < start) ++r0;
      if (r1 * step > stop) --r1;
      ticks = new Array(n = r1 - r0 + 1);
      while (++i < n) ticks[i] = (r0 + i) * step;
    } else {
      step = -step;
      let r0 = Math.round(start * step), r1 = Math.round(stop * step);
      if (r0 / step < start) ++r0;
      if (r1 / step > stop) --r1;
      ticks = new Array(n = r1 - r0 + 1);
      while (++i < n) ticks[i] = (r0 + i) / step;
    }
    if (reverse) ticks.reverse();
    return ticks;
  }
  function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }
  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10) step1 *= 10; else if (error >= e5) step1 *= 5; else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
  }
  function nice(start, stop, count) {
    let prestep;
    while (true) {
      const step = tickIncrement(start, stop, count);
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start, stop];
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      }
      prestep = step;
    }
  }
  function sturges(values) {
    return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
  }
  function bin() {
    var value = identity, domain = extent, threshold = sturges;
    function histogram(data) {
      if (!Array.isArray(data)) data = Array.from(data);
      var i, n = data.length, x, values = new Array(n);
      for (i = 0; i < n; ++i) {
        values[i] = value(data[i], i, data);
      }
      var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
      // Convert number of thresholds into uniform thresholds, and nice the
      // default domain accordingly.
      if (!Array.isArray(tz)) {
        const max = x1, tn = +tz;
        if (domain === extent) [x0, x1] = nice(x0, x1, tn);
        tz = ticks(x0, x1, tn);
        // If the last threshold is coincident with the domain’s upper bound, the
        // last bin will be zero-width. If the default domain is used, and this
        // last threshold is coincident with the maximum input value, we can
        // extend the niced upper bound by one tick to ensure uniform bin widths;
        // otherwise, we simply remove the last threshold. Note that we don’t
        // coerce values or the domain to numbers, and thus must be careful to
        // compare order (>=) rather than strict equality (===)!
        if (tz[tz.length - 1] >= x1) {
          if (max >= x1 && domain === extent) {
            const step = tickIncrement(x0, x1, tn);
            if (isFinite(step)) {
              if (step > 0) {
                x1 = (Math.floor(x1 / step) + 1) * step;
              } else if (step < 0) {
                x1 = (Math.ceil(x1 * -step) + 1) / -step;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      // Remove any thresholds outside the domain.
      var m = tz.length;
      while (tz[0] <= x0) (tz.shift(), --m);
      while (tz[m - 1] > x1) (tz.pop(), --m);
      var bins = new Array(m + 1), bin;
      // Initialize bins.
      for (i = 0; i <= m; ++i) {
        bin = bins[i] = [];
        bin.x0 = i > 0 ? tz[i - 1] : x0;
        bin.x1 = i < m ? tz[i] : x1;
      }
      // Assign data to bins by value, ignoring any outside the domain.
      for (i = 0; i < n; ++i) {
        x = values[i];
        if (x0 <= x && x <= x1) {
          bins[bisectRight(tz, x, 0, m)].push(data[i]);
        }
      }
      return bins;
    }
    histogram.value = function (_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
    };
    histogram.domain = function (_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
    };
    histogram.thresholds = function (_) {
      return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
    };
    return histogram;
  }
  function max(values, valueof) {
    let max;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (max < value || max === undefined && value >= value)) {
          max = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
          max = value;
        }
      }
    }
    return max;
  }
  function min(values, valueof) {
    let min;
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (min > value || min === undefined && value >= value)) {
          min = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
          min = value;
        }
      }
    }
    return min;
  }
  // Based on https://github.com/mourner/quickselect
  // ISC license, Copyright 2018 Vladimir Agafonkin.
  function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1;
        const m = k - left + 1;
        const z = Math.log(n);
        const s = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
        quickselect(array, k, newLeft, newRight, compare);
      }
      const t = array[k];
      let i = left;
      let j = right;
      swap(array, left, k);
      if (compare(array[right], t) > 0) swap(array, left, right);
      while (i < j) {
        (swap(array, i, j), ++i, --j);
        while (compare(array[i], t) < 0) ++i;
        while (compare(array[j], t) > 0) --j;
      }
      if (compare(array[left], t) === 0) swap(array, left, j); else (++j, swap(array, j, right));
      if (j <= k) left = j + 1;
      if (k <= j) right = j - 1;
    }
    return array;
  }
  function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
  }
  function quantile(values, p, valueof) {
    values = Float64Array.from(numbers(values, valueof));
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return min(values);
    if (p >= 1) return max(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values, p, valueof = number) {
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }
  function freedmanDiaconis(values, min, max) {
    return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
  }
  function scott(values, min, max) {
    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
  }
  function maxIndex(values, valueof) {
    let max;
    let maxIndex = -1;
    let index = -1;
    if (valueof === undefined) {
      for (const value of values) {
        ++index;
        if (value != null && (max < value || max === undefined && value >= value)) {
          (max = value, maxIndex = index);
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
          (max = value, maxIndex = index);
        }
      }
    }
    return maxIndex;
  }
  function mean(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          (++count, sum += value);
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          (++count, sum += value);
        }
      }
    }
    if (count) return sum / count;
  }
  function median(values, valueof) {
    return quantile(values, 0.5, valueof);
  }
  function* flatten(arrays) {
    for (const array of arrays) {
      yield* array;
    }
  }
  function merge(arrays) {
    return Array.from(flatten(arrays));
  }
  function minIndex(values, valueof) {
    let min;
    let minIndex = -1;
    let index = -1;
    if (valueof === undefined) {
      for (const value of values) {
        ++index;
        if (value != null && (min > value || min === undefined && value >= value)) {
          (min = value, minIndex = index);
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
          (min = value, minIndex = index);
        }
      }
    }
    return minIndex;
  }
  function pairs(values, pairof = pair) {
    const pairs = [];
    let previous;
    let first = false;
    for (const value of values) {
      if (first) pairs.push(pairof(previous, value));
      previous = value;
      first = true;
    }
    return pairs;
  }
  function pair(a, b) {
    return [a, b];
  }
  function range(start, stop, step) {
    (start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step);
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while (++i < n) {
      range[i] = start + i * step;
    }
    return range;
  }
  function least(values, compare = ascending) {
    let min;
    let defined = false;
    if (compare.length === 1) {
      let minValue;
      for (const element of values) {
        const value = compare(element);
        if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
          min = element;
          minValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
          min = value;
          defined = true;
        }
      }
    }
    return min;
  }
  function leastIndex(values, compare = ascending) {
    if (compare.length === 1) return minIndex(values, compare);
    let minValue;
    let min = -1;
    let index = -1;
    for (const value of values) {
      ++index;
      if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
        minValue = value;
        min = index;
      }
    }
    return min;
  }
  function greatest(values, compare = ascending) {
    let max;
    let defined = false;
    if (compare.length === 1) {
      let maxValue;
      for (const element of values) {
        const value = compare(element);
        if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
          max = element;
          maxValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
          max = value;
          defined = true;
        }
      }
    }
    return max;
  }
  function greatestIndex(values, compare = ascending) {
    if (compare.length === 1) return maxIndex(values, compare);
    let maxValue;
    let max = -1;
    let index = -1;
    for (const value of values) {
      ++index;
      if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
        maxValue = value;
        max = index;
      }
    }
    return max;
  }
  function scan(values, compare) {
    const index = leastIndex(values, compare);
    return index < 0 ? undefined : index;
  }
  var shuffle = shuffler(Math.random);
  function shuffler(random) {
    return function shuffle(array, i0 = 0, i1 = array.length) {
      let m = i1 - (i0 = +i0);
      while (m) {
        const i = random() * m-- | 0, t = array[m + i0];
        array[m + i0] = array[i + i0];
        array[i + i0] = t;
      }
      return array;
    };
  }
  function sum(values, valueof) {
    let sum = 0;
    if (valueof === undefined) {
      for (let value of values) {
        if (value = +value) {
          sum += value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index, values)) {
          sum += value;
        }
      }
    }
    return sum;
  }
  function transpose(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  }
  function length(d) {
    return d.length;
  }
  function zip() {
    return transpose(arguments);
  }
  function every(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values) {
      if (!test(value, ++index, values)) {
        return false;
      }
    }
    return true;
  }
  function some(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values) {
      if (test(value, ++index, values)) {
        return true;
      }
    }
    return false;
  }
  function filter(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    const array = [];
    let index = -1;
    for (const value of values) {
      if (test(value, ++index, values)) {
        array.push(value);
      }
    }
    return array;
  }
  function map(values, mapper) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
    return Array.from(values, (value, index) => mapper(value, index, values));
  }
  function reduce(values, reducer, value) {
    if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
    const iterator = values[Symbol.iterator]();
    let done, next, index = -1;
    if (arguments.length < 3) {
      ({done, value} = iterator.next());
      if (done) return;
      ++index;
    }
    while (({done, value: next} = iterator.next(), !done)) {
      value = reducer(value, next, ++index, values);
    }
    return value;
  }
  function reverse(values) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    return Array.from(values).reverse();
  }
  function difference(values, ...others) {
    values = new Set(values);
    for (const other of others) {
      for (const value of other) {
        values.delete(value);
      }
    }
    return values;
  }
  function disjoint(values, other) {
    const iterator = other[Symbol.iterator](), set = new Set();
    for (const v of values) {
      if (set.has(v)) return false;
      let value, done;
      while ({value, done} = iterator.next()) {
        if (done) break;
        if (Object.is(v, value)) return false;
        set.add(value);
      }
    }
    return true;
  }
  function set(values) {
    return values instanceof Set ? values : new Set(values);
  }
  function intersection(values, ...others) {
    values = new Set(values);
    others = others.map(set);
    out: for (const value of values) {
      for (const other of others) {
        if (!other.has(value)) {
          values.delete(value);
          continue out;
        }
      }
    }
    return values;
  }
  function superset(values, other) {
    const iterator = values[Symbol.iterator](), set = new Set();
    for (const o of other) {
      if (set.has(o)) continue;
      let value, done;
      while ({value, done} = iterator.next()) {
        if (done) return false;
        set.add(value);
        if (Object.is(o, value)) break;
      }
    }
    return true;
  }
  function subset(values, other) {
    return superset(other, values);
  }
  function union(...others) {
    const set = new Set();
    for (const other of others) {
      for (const o of other) {
        set.add(o);
      }
    }
    return set;
  }
  exports.Adder = Adder;
  exports.InternMap = InternMap;
  exports.InternSet = InternSet;
  exports.ascending = ascending;
  exports.bin = bin;
  exports.bisect = bisectRight;
  exports.bisectCenter = bisectCenter;
  exports.bisectLeft = bisectLeft;
  exports.bisectRight = bisectRight;
  exports.bisector = bisector;
  exports.count = count;
  exports.cross = cross;
  exports.cumsum = cumsum;
  exports.descending = descending;
  exports.deviation = deviation;
  exports.difference = difference;
  exports.disjoint = disjoint;
  exports.every = every;
  exports.extent = extent;
  exports.fcumsum = fcumsum;
  exports.filter = filter;
  exports.fsum = fsum;
  exports.greatest = greatest;
  exports.greatestIndex = greatestIndex;
  exports.group = group;
  exports.groupSort = groupSort;
  exports.groups = groups;
  exports.histogram = bin;
  exports.index = index;
  exports.indexes = indexes;
  exports.intersection = intersection;
  exports.least = least;
  exports.leastIndex = leastIndex;
  exports.map = map;
  exports.max = max;
  exports.maxIndex = maxIndex;
  exports.mean = mean;
  exports.median = median;
  exports.merge = merge;
  exports.min = min;
  exports.minIndex = minIndex;
  exports.nice = nice;
  exports.pairs = pairs;
  exports.permute = permute;
  exports.quantile = quantile;
  exports.quantileSorted = quantileSorted;
  exports.quickselect = quickselect;
  exports.range = range;
  exports.reduce = reduce;
  exports.reverse = reverse;
  exports.rollup = rollup;
  exports.rollups = rollups;
  exports.scan = scan;
  exports.shuffle = shuffle;
  exports.shuffler = shuffler;
  exports.some = some;
  exports.sort = sort;
  exports.subset = subset;
  exports.sum = sum;
  exports.superset = superset;
  exports.thresholdFreedmanDiaconis = freedmanDiaconis;
  exports.thresholdScott = scott;
  exports.thresholdSturges = sturges;
  exports.tickIncrement = tickIncrement;
  exports.tickStep = tickStep;
  exports.ticks = ticks;
  exports.transpose = transpose;
  exports.union = union;
  exports.variance = variance;
  exports.zip = zip;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"6eByj":[function(require,module,exports) {
var define;
// https://d3js.org/d3-interpolate/ v2.0.1 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Color) {
  "use strict";
  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis$1(values) {
    var n = values.length - 1;
    return function (t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  function basisClosed(values) {
    var n = values.length;
    return function (t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var constant = x => () => x;
  function linear(a, d) {
    return function (t) {
      return a + t * d;
    };
  }
  function exponential(a, b, y) {
    return (a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
      return Math.pow(a + t * b, y);
    });
  }
  function hue(a, b) {
    var d = b - a;
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
  }
  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function (a, b) {
      return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
    };
  }
  function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : constant(isNaN(a) ? b : a);
  }
  var rgb = (function rgbGamma(y) {
    var color = gamma(y);
    function rgb(start, end) {
      var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }
    rgb.gamma = rgbGamma;
    return rgb;
  })(1);
  function rgbSpline(spline) {
    return function (colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
      for (i = 0; i < n; ++i) {
        color = d3Color.rgb(colors[i]);
        r[i] = color.r || 0;
        g[i] = color.g || 0;
        b[i] = color.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color.opacity = 1;
      return function (t) {
        color.r = r(t);
        color.g = g(t);
        color.b = b(t);
        return color + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis$1);
  var rgbBasisClosed = rgbSpline(basisClosed);
  function numberArray(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function (t) {
      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
      return c;
    };
  }
  function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
  }
  function array(a, b) {
    return (isNumberArray(b) ? numberArray : genericArray)(a, b);
  }
  function genericArray(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
    for (; i < nb; ++i) c[i] = b[i];
    return function (t) {
      for (i = 0; i < na; ++i) c[i] = x[i](t);
      return c;
    };
  }
  function date(a, b) {
    var d = new Date();
    return (a = +a, b = +b, function (t) {
      return (d.setTime(a * (1 - t) + b * t), d);
    });
  }
  function number(a, b) {
    return (a = +a, b = +b, function (t) {
      return a * (1 - t) + b * t;
    });
  }
  function object(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};
    for (k in b) {
      if ((k in a)) {
        i[k] = value(a[k], b[k]);
      } else {
        c[k] = b[k];
      }
    }
    return function (t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
  function zero(b) {
    return function () {
      return b;
    };
  }
  function one(b) {
    return function (t) {
      return b(t) + "";
    };
  }
  function string(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
    am, // current match in a
    bm, // current match in b
    bs, // string preceding current number in b, if any
    i = -1, // index in s
    s = [], // string constants and placeholders
    q = [];
    // number interpolators
    // Coerce inputs to strings.
    (a = a + "", b = b + "");
    // Interpolate pairs of numbers in a & b.
    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        // a string precedes the next number in b
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else // coalesce with previous string
        s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        // numbers in a & b match
        if (s[i]) s[i] += bm; else // coalesce with previous string
        s[++i] = bm;
      } else {
        // interpolate non-matching numbers
        s[++i] = null;
        q.push({
          i: i,
          x: number(am, bm)
        });
      }
      bi = reB.lastIndex;
    }
    // Add remains of b.
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else // coalesce with previous string
      s[++i] = bs;
    }
    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  function value(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? constant(b) : (t === "number" ? number : t === "string" ? (c = d3Color.color(b)) ? (b = c, rgb) : string : b instanceof d3Color.color ? rgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : number)(a, b);
  }
  function discrete(range) {
    var n = range.length;
    return function (t) {
      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }
  function hue$1(a, b) {
    var i = hue(+a, +b);
    return function (t) {
      var x = i(t);
      return x - 360 * Math.floor(x / 360);
    };
  }
  function round(a, b) {
    return (a = +a, b = +b, function (t) {
      return Math.round(a * (1 - t) + b * t);
    });
  }
  var degrees = 180 / Math.PI;
  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) (a /= scaleX, b /= scaleX);
    if (skewX = a * c + b * d) (c -= a * skewX, d -= b * skewX);
    if (scaleY = Math.sqrt(c * c + d * d)) (c /= scaleY, d /= scaleY, skewX /= scaleY);
    if (a * d < b * c) (a = -a, b = -b, skewX = -skewX, scaleX = -scaleX);
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }
  var svgNode;
  /*eslint-disable no-undef*/
  function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value) {
    if (value == null) return identity;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  }
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({
          i: i - 4,
          x: number(xa, xb)
        }, {
          i: i - 2,
          x: number(ya, yb)
        });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360; else if (b - a > 180) a += 360;
        // shortest path
        q.push({
          i: s.push(pop(s) + "rotate(", null, degParen) - 2,
          x: number(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }
    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({
          i: s.push(pop(s) + "skewX(", null, degParen) - 2,
          x: number(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: number(xa, xb)
        }, {
          i: i - 2,
          x: number(ya, yb)
        });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function (a, b) {
      var s = [], // string constants and placeholders
      q = [];
      // number interpolators
      (a = parse(a), b = parse(b));
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null;
      // gc
      return function (t) {
        var i = -1, n = q.length, o;
        while (++i < n) s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  var epsilon2 = 1e-12;
  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  var zoom = (function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom(p0, p1) {
      var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
      // Special case for u0 ≅ u1.
      if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho;
        i = function (t) {
          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
        };
              // General case.
} else // General case.
      {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function (t) {
          var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }
      i.duration = S * 1000 * rho / Math.SQRT2;
      return i;
    }
    zoom.rho = function (_) {
      var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
      return zoomRho(_1, _2, _4);
    };
    return zoom;
  })(Math.SQRT2, 2, 4);
  function hsl(hue) {
    return function (start, end) {
      var h = hue((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    };
  }
  var hsl$1 = hsl(hue);
  var hslLong = hsl(nogamma);
  function lab(start, end) {
    var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.l = l(t);
      start.a = a(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  function hcl(hue) {
    return function (start, end) {
      var h = hue((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.c = c(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    };
  }
  var hcl$1 = hcl(hue);
  var hclLong = hcl(nogamma);
  function cubehelix(hue) {
    return (function cubehelixGamma(y) {
      y = +y;
      function cubehelix(start, end) {
        var h = hue((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(Math.pow(t, y));
          start.opacity = opacity(t);
          return start + "";
        };
      }
      cubehelix.gamma = cubehelixGamma;
      return cubehelix;
    })(1);
  }
  var cubehelix$1 = cubehelix(hue);
  var cubehelixLong = cubehelix(nogamma);
  function piecewise(interpolate, values) {
    if (values === undefined) (values = interpolate, interpolate = value);
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while (i < n) I[i] = interpolate(v, v = values[++i]);
    return function (t) {
      var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i](t - i);
    };
  }
  function quantize(interpolator, n) {
    var samples = new Array(n);
    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
    return samples;
  }
  exports.interpolate = value;
  exports.interpolateArray = array;
  exports.interpolateBasis = basis$1;
  exports.interpolateBasisClosed = basisClosed;
  exports.interpolateCubehelix = cubehelix$1;
  exports.interpolateCubehelixLong = cubehelixLong;
  exports.interpolateDate = date;
  exports.interpolateDiscrete = discrete;
  exports.interpolateHcl = hcl$1;
  exports.interpolateHclLong = hclLong;
  exports.interpolateHsl = hsl$1;
  exports.interpolateHslLong = hslLong;
  exports.interpolateHue = hue$1;
  exports.interpolateLab = lab;
  exports.interpolateNumber = number;
  exports.interpolateNumberArray = numberArray;
  exports.interpolateObject = object;
  exports.interpolateRgb = rgb;
  exports.interpolateRgbBasis = rgbBasis;
  exports.interpolateRgbBasisClosed = rgbBasisClosed;
  exports.interpolateRound = round;
  exports.interpolateString = string;
  exports.interpolateTransformCss = interpolateTransformCss;
  exports.interpolateTransformSvg = interpolateTransformSvg;
  exports.interpolateZoom = zoom;
  exports.piecewise = piecewise;
  exports.quantize = quantize;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-color":"3mmqs"}],"3mmqs":[function(require,module,exports) {
var define;
// https://d3js.org/d3-color/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  function define(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition) prototype[key] = definition[key];
    return prototype;
  }
  function Color() {}
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
  var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
  };
  define(Color, color, {
    copy: function (channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable: function () {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : // #ff0000
    l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) : // #f00
    l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) : // #ff000000
    l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) : // #f000
    null) : // invalid hex
    (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : // rgb(255, 0, 0)
    (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : // rgb(100%, 0%, 0%)
    (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : // rgba(255, 0, 0, 1)
    (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : // rgb(100%, 0%, 0%, 1)
    (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : // hsl(120, 50%, 50%)
    (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : // hsla(120, 50%, 50%, 1)
    named.hasOwnProperty(format) ? rgbn(named[format]) : // eslint-disable-line no-prototype-builtins
    format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  }
  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define(Rgb, rgb, extend(Color, {
    brighter: function (k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function (k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function () {
      return this;
    },
    displayable: function () {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }
  function rgb_formatRgb() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }
  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN; else if (l <= 0 || l >= 1) h = s = NaN; else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
  }
  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl();
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
      if (r === max) h = (g - b) / s + (g < b) * 6; else if (g === max) h = (b - r) / s + 2; else h = (r - g) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  define(Hsl, hsl, extend(Color, {
    brighter: function (k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function (k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function () {
      var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function () {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl: function () {
      var a = this.opacity;
      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
    }
  }));
  /*From FvD 13.37, CSS Color Module Level 3*/
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
  const radians = Math.PI / 180;
  const degrees = 180 / Math.PI;
  // https://observablehq.com/@mbostock/lab-and-rgb
  const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
  function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
    if (r === g && g === b) x = z = y; else {
      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
    }
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
  }
  function gray(l, opacity) {
    return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
  }
  function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
  }
  function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
  }
  define(Lab, lab, extend(Color, {
    brighter: function (k) {
      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker: function (k) {
      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb: function () {
      var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
      x = Xn * lab2xyz(x);
      y = Yn * lab2xyz(y);
      z = Zn * lab2xyz(z);
      return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
  }));
  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }
  function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
  }
  function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }
  function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }
  function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * degrees;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }
  function lch(l, c, h, opacity) {
    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  }
  function hcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  }
  function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
  }
  function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * radians;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  define(Hcl, hcl, extend(Color, {
    brighter: function (k) {
      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker: function (k) {
      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb: function () {
      return hcl2lab(this).rgb();
    }
  }));
  var A = -0.14861, B = +1.78277, C = -0.29227, D = -0.90649, E = +1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
  function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
    h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
  }
  function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
  }
  function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  define(Cubehelix, cubehelix, extend(Color, {
    brighter: function (k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function (k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function () {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
      return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
  }));
  exports.color = color;
  exports.cubehelix = cubehelix;
  exports.gray = gray;
  exports.hcl = hcl;
  exports.hsl = hsl;
  exports.lab = lab;
  exports.lch = lch;
  exports.rgb = rgb;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"3Bu0B":[function(require,module,exports) {
var define;
// https://d3js.org/d3-format/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  function formatDecimal(x) {
    return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
  }
  // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimalParts(1.23) returns ["123", 0].
  function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null;
    // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
  }
  function exponent(x) {
    return (x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN);
  }
  function formatGroup(grouping, thousands) {
    return function (value, width) {
      var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }
  function formatNumerals(numerals) {
    return function (value) {
      return value.replace(/[0-9]/g, function (i) {
        return numerals[+i];
      });
    };
  }
  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  // instanceof
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function () {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };
  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  function formatTrim(s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }
  var prefixExponent;
  function formatPrefixAuto(x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
  }
  function formatRounded(x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }
  var formatTypes = {
    "%": (x, p) => (x * 100).toFixed(p),
    "b": x => Math.round(x).toString(2),
    "c": x => x + "",
    "d": formatDecimal,
    "e": (x, p) => x.toExponential(p),
    "f": (x, p) => x.toFixed(p),
    "g": (x, p) => x.toPrecision(p),
    "o": x => Math.round(x).toString(8),
    "p": (x, p) => formatRounded(x * 100, p),
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": x => Math.round(x).toString(16).toUpperCase(),
    "x": x => Math.round(x).toString(16)
  };
  function identity(x) {
    return x;
  }
  var map = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function formatLocale(locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "−" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
      // The "n" type is an alias for ",g".
      if (type === "n") (comma = true, type = "g"); else // The "" type, and any invalid type, is an alias for ".12~g".
      if (!formatTypes[type]) (precision === undefined && (precision = 12), trim = true, type = "g");
      // If zero fill is specified, padding goes after sign and before digits.
      if (zero || fill === "0" && align === "=") (zero = true, fill = "0", align = "=");
      // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && (/[boxX]/).test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : (/[%p]/).test(type) ? percent : "";
      // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?
      var formatType = formatTypes[type], maybeSuffix = (/[defgprs%]/).test(type);
      // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].
      precision = precision === undefined ? 6 : (/[gprs]/).test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format(value) {
        var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          // Determine the sign. -0 is not less than 0, but 1 / -0 is!
          var valueNegative = value < 0 || 1 / value < 0;
          // Perform the initial formatting.
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          // Trim insignificant zeros.
          if (trim) value = formatTrim(value);
          // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
          if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
          // Compute the prefix and suffix.
          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
          // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.
          if (maybeSuffix) {
            (i = -1, n = value.length);
            while (++i < n) {
              if ((c = value.charCodeAt(i), 48 > c || c > 57)) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }
        // If the fill character is not "0", grouping is applied before padding.
        if (comma && !zero) value = group(value, Infinity);
        // Compute the padding.
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        // If the fill character is "0", grouping is applied after padding.
        if (comma && zero) (value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "");
        // Reconstruct the final output based on the desired alignment.
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format.toString = function () {
        return specifier + "";
      };
      return format;
    }
    function formatPrefix(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
      return function (value) {
        return f(k * value) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix
    };
  }
  var locale;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = formatLocale(definition);
    exports.format = locale.format;
    exports.formatPrefix = locale.formatPrefix;
    return locale;
  }
  function precisionFixed(step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }
  function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  }
  function precisionRound(step, max) {
    (step = Math.abs(step), max = Math.abs(max) - step);
    return Math.max(0, exponent(max) - exponent(step)) + 1;
  }
  exports.FormatSpecifier = FormatSpecifier;
  exports.formatDefaultLocale = defaultLocale;
  exports.formatLocale = formatLocale;
  exports.formatSpecifier = formatSpecifier;
  exports.precisionFixed = precisionFixed;
  exports.precisionPrefix = precisionPrefix;
  exports.precisionRound = precisionRound;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"3rCZz":[function(require,module,exports) {
var define;
// https://d3js.org/d3-time/ v2.1.1 Copyright 2021 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Array) {
  "use strict";
  var t0 = new Date(), t1 = new Date();
  function newInterval(floori, offseti, count, field) {
    function interval(date) {
      return (floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date);
    }
    interval.floor = function (date) {
      return (floori(date = new Date(+date)), date);
    };
    interval.ceil = function (date) {
      return (floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date);
    };
    interval.round = function (date) {
      var d0 = interval(date), d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function (date, step) {
      return (offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date);
    };
    interval.range = function (start, stop, step) {
      var range = [], previous;
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range;
      // also handles Invalid Date
      do (range.push(previous = new Date(+start)), offseti(start, step), floori(start)); while (previous < start && start < stop);
      return range;
    };
    interval.filter = function (test) {
      return newInterval(function (date) {
        if (date >= date) while ((floori(date), !test(date))) date.setTime(date - 1);
      }, function (date, step) {
        if (date >= date) {
          if (step < 0) while (++step <= 0) {
            while ((offseti(date, -1), !test(date))) {}
          } else while (--step >= 0) {
            while ((offseti(date, +1), !test(date))) {}
          }
        }
      });
    };
    if (count) {
      interval.count = function (start, end) {
        (t0.setTime(+start), t1.setTime(+end));
        (floori(t0), floori(t1));
        return Math.floor(count(t0, t1));
      };
      interval.every = function (step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
          return field(d) % step === 0;
        } : function (d) {
          return interval.count(0, d) % step === 0;
        });
      };
    }
    return interval;
  }
  var millisecond = newInterval(function () {}, function (date, step) {
    date.setTime(+date + step);
  }, function (start, end) {
    return end - start;
  });
  // An optimized implementation for this simple case.
  millisecond.every = function (k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return newInterval(function (date) {
      date.setTime(Math.floor(date / k) * k);
    }, function (date, step) {
      date.setTime(+date + step * k);
    }, function (start, end) {
      return (end - start) / k;
    });
  };
  var milliseconds = millisecond.range;
  const durationSecond = 1000;
  const durationMinute = durationSecond * 60;
  const durationHour = durationMinute * 60;
  const durationDay = durationHour * 24;
  const durationWeek = durationDay * 7;
  const durationMonth = durationDay * 30;
  const durationYear = durationDay * 365;
  var second = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds());
  }, function (date, step) {
    date.setTime(+date + step * durationSecond);
  }, function (start, end) {
    return (end - start) / durationSecond;
  }, function (date) {
    return date.getUTCSeconds();
  });
  var seconds = second.range;
  var minute = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getMinutes();
  });
  var minutes = minute.range;
  var hour = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getHours();
  });
  var hours = hour.range;
  var day = newInterval(date => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, date => date.getDate() - 1);
  var days = day.range;
  function weekday(i) {
    return newInterval(function (date) {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setDate(date.getDate() + step * 7);
    }, function (start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);
  var sundays = sunday.range;
  var mondays = monday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;
  var month = newInterval(function (date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setMonth(date.getMonth() + step);
  }, function (start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, function (date) {
    return date.getMonth();
  });
  var months = month.range;
  var year = newInterval(function (date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step);
  }, function (start, end) {
    return end.getFullYear() - start.getFullYear();
  }, function (date) {
    return date.getFullYear();
  });
  // An optimized implementation for this simple case.
  year.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setFullYear(Math.floor(date.getFullYear() / k) * k);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setFullYear(date.getFullYear() + step * k);
    });
  };
  var years = year.range;
  var utcMinute = newInterval(function (date) {
    date.setUTCSeconds(0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getUTCMinutes();
  });
  var utcMinutes = utcMinute.range;
  var utcHour = newInterval(function (date) {
    date.setUTCMinutes(0, 0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getUTCHours();
  });
  var utcHours = utcHour.range;
  var utcDay = newInterval(function (date) {
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step);
  }, function (start, end) {
    return (end - start) / durationDay;
  }, function (date) {
    return date.getUTCDate() - 1;
  });
  var utcDays = utcDay.range;
  function utcWeekday(i) {
    return newInterval(function (date) {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, function (start, end) {
      return (end - start) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;
  var utcMonth = newInterval(function (date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
  }, function (start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, function (date) {
    return date.getUTCMonth();
  });
  var utcMonths = utcMonth.range;
  var utcYear = newInterval(function (date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, function (start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, function (date) {
    return date.getUTCFullYear();
  });
  // An optimized implementation for this simple case.
  utcYear.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
  };
  var utcYears = utcYear.range;
  function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];
    function ticks(start, stop, count) {
      const reverse = stop < start;
      if (reverse) [start, stop] = [stop, start];
      const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
      const ticks = interval ? interval.range(start, +stop + 1) : [];
      // inclusive stop
      return reverse ? ticks.reverse() : ticks;
    }
    function tickInterval(start, stop, count) {
      const target = Math.abs(stop - start) / count;
      const i = d3Array.bisector(([, , step]) => step).right(tickIntervals, target);
      if (i === tickIntervals.length) return year.every(d3Array.tickStep(start / durationYear, stop / durationYear, count));
      if (i === 0) return millisecond.every(Math.max(d3Array.tickStep(start, stop, count), 1));
      const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
      return t.every(step);
    }
    return [ticks, tickInterval];
  }
  const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute);
  const [timeTicks, timeTickInterval] = ticker(year, month, sunday, day, hour, minute);
  exports.timeDay = day;
  exports.timeDays = days;
  exports.timeFriday = friday;
  exports.timeFridays = fridays;
  exports.timeHour = hour;
  exports.timeHours = hours;
  exports.timeInterval = newInterval;
  exports.timeMillisecond = millisecond;
  exports.timeMilliseconds = milliseconds;
  exports.timeMinute = minute;
  exports.timeMinutes = minutes;
  exports.timeMonday = monday;
  exports.timeMondays = mondays;
  exports.timeMonth = month;
  exports.timeMonths = months;
  exports.timeSaturday = saturday;
  exports.timeSaturdays = saturdays;
  exports.timeSecond = second;
  exports.timeSeconds = seconds;
  exports.timeSunday = sunday;
  exports.timeSundays = sundays;
  exports.timeThursday = thursday;
  exports.timeThursdays = thursdays;
  exports.timeTickInterval = timeTickInterval;
  exports.timeTicks = timeTicks;
  exports.timeTuesday = tuesday;
  exports.timeTuesdays = tuesdays;
  exports.timeWednesday = wednesday;
  exports.timeWednesdays = wednesdays;
  exports.timeWeek = sunday;
  exports.timeWeeks = sundays;
  exports.timeYear = year;
  exports.timeYears = years;
  exports.utcDay = utcDay;
  exports.utcDays = utcDays;
  exports.utcFriday = utcFriday;
  exports.utcFridays = utcFridays;
  exports.utcHour = utcHour;
  exports.utcHours = utcHours;
  exports.utcMillisecond = millisecond;
  exports.utcMilliseconds = milliseconds;
  exports.utcMinute = utcMinute;
  exports.utcMinutes = utcMinutes;
  exports.utcMonday = utcMonday;
  exports.utcMondays = utcMondays;
  exports.utcMonth = utcMonth;
  exports.utcMonths = utcMonths;
  exports.utcSaturday = utcSaturday;
  exports.utcSaturdays = utcSaturdays;
  exports.utcSecond = second;
  exports.utcSeconds = seconds;
  exports.utcSunday = utcSunday;
  exports.utcSundays = utcSundays;
  exports.utcThursday = utcThursday;
  exports.utcThursdays = utcThursdays;
  exports.utcTickInterval = utcTickInterval;
  exports.utcTicks = utcTicks;
  exports.utcTuesday = utcTuesday;
  exports.utcTuesdays = utcTuesdays;
  exports.utcWednesday = utcWednesday;
  exports.utcWednesdays = utcWednesdays;
  exports.utcWeek = utcSunday;
  exports.utcWeeks = utcSundays;
  exports.utcYear = utcYear;
  exports.utcYears = utcYears;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA"}],"13ygP":[function(require,module,exports) {
var define;
// https://d3js.org/d3-time-format/ v3.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Time) {
  "use strict";
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date.setFullYear(d.y);
      return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date.setUTCFullYear(d.y);
      return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate(y, m, d) {
    return {
      y: y,
      m: m,
      d: d,
      H: 0,
      M: 0,
      S: 0,
      L: 0
    };
  }
  function formatLocale(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
      return function (date) {
        var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
        if (!(date instanceof Date)) date = new Date(+date);
        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i); else pad = c === "e" ? " " : "0";
            if (format = formats[c]) c = format(date, pad);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }
    function newParse(specifier, Z) {
      return function (string) {
        var d = newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
        if (i != string.length) return null;
        // If a UNIX timestamp is specified, return it.
        if (("Q" in d)) return new Date(d.Q);
        if (("s" in d)) return new Date(d.s * 1000 + (("L" in d) ? d.L : 0));
        // If this is utcParse, never use the local timezone.
        if (Z && !(("Z" in d))) d.Z = 0;
        // The am-pm flag is 0 for AM, and 1 for PM.
        if (("p" in d)) d.H = d.H % 12 + d.p * 12;
        // If the month was not specified, inherit from the quarter.
        if (d.m === undefined) d.m = ("q" in d) ? d.q : 0;
        // Convert day-of-week and week-of-year to day-of-year.
        if (("V" in d)) {
          if (d.V < 1 || d.V > 53) return null;
          if (!(("w" in d))) d.w = 1;
          if (("Z" in d)) {
            (week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay());
            week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
            week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            (week = localDate(newDate(d.y, 0, 1)), day = week.getDay());
            week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
            week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if (("W" in d) || ("U" in d)) {
          if (!(("w" in d))) d.w = ("u" in d) ? d.u % 7 : ("W" in d) ? 1 : 0;
          day = ("Z" in d) ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = ("W" in d) ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        // If a time zone is specified, all fields are interpreted as UTC and then
        // offset according to the specified time zone.
        if (("Z" in d)) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }
        // Otherwise, all fields are in local time.
        return localDate(d);
      };
    }
    function parseSpecifier(d, specifier, string, j) {
      var i = 0, n = specifier.length, m = string.length, c, parse;
      while (i < n) {
        if (j >= m) return -1;
        c = specifier.charCodeAt(i++);
        if (c === 37) {
          c = specifier.charAt(i++);
          parse = parses[(c in pads) ? specifier.charAt(i++) : c];
          if (!parse || (j = parse(d, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function (specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function () {
          return specifier;
        };
        return f;
      },
      parse: function (specifier) {
        var p = newParse(specifier += "", false);
        p.toString = function () {
          return specifier;
        };
        return p;
      },
      utcFormat: function (specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function () {
          return specifier;
        };
        return f;
      },
      utcParse: function (specifier) {
        var p = newParse(specifier += "", true);
        p.toString = function () {
          return specifier;
        };
        return p;
      }
    };
  }
  var pads = {
    "-": "",
    "_": " ",
    "0": "0"
  }, numberRe = /^\s*\d+/, // note: ignores next directive
  percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }
  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }
  function parseZone(d, string, i) {
    var n = (/^(Z)|([+-]\d\d)(?::?(\d\d))?/).exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }
  function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }
  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }
  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }
  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }
  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }
  function formatDayOfYear(d, p) {
    return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
  }
  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }
  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }
  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }
  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }
  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }
  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday(d, p) {
    return pad(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
  }
  function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  }
  function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
  }
  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday(d, p) {
    return pad(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
  }
  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
  }
  function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
    return pad(d.getFullYear() % 10000, p, 4);
  }
  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }
  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }
  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }
  function formatUTCDayOfYear(d, p) {
    return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
  }
  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }
  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }
  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }
  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }
  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }
  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d, p) {
    return pad(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
  }
  function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
  }
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d, p) {
    return pad(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
  }
  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
  }
  function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 10000, p, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d) {
    return +d;
  }
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
  }
  var locale;
  defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale(definition) {
    locale = formatLocale(definition);
    exports.timeFormat = locale.format;
    exports.timeParse = locale.parse;
    exports.utcFormat = locale.utcFormat;
    exports.utcParse = locale.utcParse;
    return locale;
  }
  var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
  function formatIsoNative(date) {
    return date.toISOString();
  }
  var formatIso = Date.prototype.toISOString ? formatIsoNative : exports.utcFormat(isoSpecifier);
  function parseIsoNative(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  }
  var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : exports.utcParse(isoSpecifier);
  exports.isoFormat = formatIso;
  exports.isoParse = parseIso;
  exports.timeFormatDefaultLocale = defaultLocale;
  exports.timeFormatLocale = formatLocale;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-time":"JGVPX"}],"JGVPX":[function(require,module,exports) {
var define;
// https://d3js.org/d3-time/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  var t0 = new Date(), t1 = new Date();
  function newInterval(floori, offseti, count, field) {
    function interval(date) {
      return (floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date);
    }
    interval.floor = function (date) {
      return (floori(date = new Date(+date)), date);
    };
    interval.ceil = function (date) {
      return (floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date);
    };
    interval.round = function (date) {
      var d0 = interval(date), d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function (date, step) {
      return (offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date);
    };
    interval.range = function (start, stop, step) {
      var range = [], previous;
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range;
      // also handles Invalid Date
      do (range.push(previous = new Date(+start)), offseti(start, step), floori(start)); while (previous < start && start < stop);
      return range;
    };
    interval.filter = function (test) {
      return newInterval(function (date) {
        if (date >= date) while ((floori(date), !test(date))) date.setTime(date - 1);
      }, function (date, step) {
        if (date >= date) {
          if (step < 0) while (++step <= 0) {
            while ((offseti(date, -1), !test(date))) {}
          } else while (--step >= 0) {
            while ((offseti(date, +1), !test(date))) {}
          }
        }
      });
    };
    if (count) {
      interval.count = function (start, end) {
        (t0.setTime(+start), t1.setTime(+end));
        (floori(t0), floori(t1));
        return Math.floor(count(t0, t1));
      };
      interval.every = function (step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
          return field(d) % step === 0;
        } : function (d) {
          return interval.count(0, d) % step === 0;
        });
      };
    }
    return interval;
  }
  var millisecond = newInterval(function () {}, function (date, step) {
    date.setTime(+date + step);
  }, function (start, end) {
    return end - start;
  });
  // An optimized implementation for this simple case.
  millisecond.every = function (k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return newInterval(function (date) {
      date.setTime(Math.floor(date / k) * k);
    }, function (date, step) {
      date.setTime(+date + step * k);
    }, function (start, end) {
      return (end - start) / k;
    });
  };
  var milliseconds = millisecond.range;
  var durationSecond = 1e3;
  var durationMinute = 6e4;
  var durationHour = 36e5;
  var durationDay = 864e5;
  var durationWeek = 6048e5;
  var second = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds());
  }, function (date, step) {
    date.setTime(+date + step * durationSecond);
  }, function (start, end) {
    return (end - start) / durationSecond;
  }, function (date) {
    return date.getUTCSeconds();
  });
  var seconds = second.range;
  var minute = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getMinutes();
  });
  var minutes = minute.range;
  var hour = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getHours();
  });
  var hours = hour.range;
  var day = newInterval(date => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, date => date.getDate() - 1);
  var days = day.range;
  function weekday(i) {
    return newInterval(function (date) {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setDate(date.getDate() + step * 7);
    }, function (start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);
  var sundays = sunday.range;
  var mondays = monday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;
  var month = newInterval(function (date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setMonth(date.getMonth() + step);
  }, function (start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, function (date) {
    return date.getMonth();
  });
  var months = month.range;
  var year = newInterval(function (date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step);
  }, function (start, end) {
    return end.getFullYear() - start.getFullYear();
  }, function (date) {
    return date.getFullYear();
  });
  // An optimized implementation for this simple case.
  year.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setFullYear(Math.floor(date.getFullYear() / k) * k);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setFullYear(date.getFullYear() + step * k);
    });
  };
  var years = year.range;
  var utcMinute = newInterval(function (date) {
    date.setUTCSeconds(0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getUTCMinutes();
  });
  var utcMinutes = utcMinute.range;
  var utcHour = newInterval(function (date) {
    date.setUTCMinutes(0, 0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getUTCHours();
  });
  var utcHours = utcHour.range;
  var utcDay = newInterval(function (date) {
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step);
  }, function (start, end) {
    return (end - start) / durationDay;
  }, function (date) {
    return date.getUTCDate() - 1;
  });
  var utcDays = utcDay.range;
  function utcWeekday(i) {
    return newInterval(function (date) {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, function (start, end) {
      return (end - start) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;
  var utcMonth = newInterval(function (date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
  }, function (start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, function (date) {
    return date.getUTCMonth();
  });
  var utcMonths = utcMonth.range;
  var utcYear = newInterval(function (date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, function (start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, function (date) {
    return date.getUTCFullYear();
  });
  // An optimized implementation for this simple case.
  utcYear.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
  };
  var utcYears = utcYear.range;
  exports.timeDay = day;
  exports.timeDays = days;
  exports.timeFriday = friday;
  exports.timeFridays = fridays;
  exports.timeHour = hour;
  exports.timeHours = hours;
  exports.timeInterval = newInterval;
  exports.timeMillisecond = millisecond;
  exports.timeMilliseconds = milliseconds;
  exports.timeMinute = minute;
  exports.timeMinutes = minutes;
  exports.timeMonday = monday;
  exports.timeMondays = mondays;
  exports.timeMonth = month;
  exports.timeMonths = months;
  exports.timeSaturday = saturday;
  exports.timeSaturdays = saturdays;
  exports.timeSecond = second;
  exports.timeSeconds = seconds;
  exports.timeSunday = sunday;
  exports.timeSundays = sundays;
  exports.timeThursday = thursday;
  exports.timeThursdays = thursdays;
  exports.timeTuesday = tuesday;
  exports.timeTuesdays = tuesdays;
  exports.timeWednesday = wednesday;
  exports.timeWednesdays = wednesdays;
  exports.timeWeek = sunday;
  exports.timeWeeks = sundays;
  exports.timeYear = year;
  exports.timeYears = years;
  exports.utcDay = utcDay;
  exports.utcDays = utcDays;
  exports.utcFriday = utcFriday;
  exports.utcFridays = utcFridays;
  exports.utcHour = utcHour;
  exports.utcHours = utcHours;
  exports.utcMillisecond = millisecond;
  exports.utcMilliseconds = milliseconds;
  exports.utcMinute = utcMinute;
  exports.utcMinutes = utcMinutes;
  exports.utcMonday = utcMonday;
  exports.utcMondays = utcMondays;
  exports.utcMonth = utcMonth;
  exports.utcMonths = utcMonths;
  exports.utcSaturday = utcSaturday;
  exports.utcSaturdays = utcSaturdays;
  exports.utcSecond = second;
  exports.utcSeconds = seconds;
  exports.utcSunday = utcSunday;
  exports.utcSundays = utcSundays;
  exports.utcThursday = utcThursday;
  exports.utcThursdays = utcThursdays;
  exports.utcTuesday = utcTuesday;
  exports.utcTuesdays = utcTuesdays;
  exports.utcWednesday = utcWednesday;
  exports.utcWednesdays = utcWednesdays;
  exports.utcWeek = utcSunday;
  exports.utcWeeks = utcSundays;
  exports.utcYear = utcYear;
  exports.utcYears = utcYears;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"4modi":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vegaUtil = require('vega-util');
var vegaDataflow = require('vega-dataflow');
var tx = require('vega-transforms');
var vtx = require('vega-view-transforms');
var encode = require('vega-encode');
var geo = require('vega-geo');
var force = require('vega-force');
var tree = require('vega-hierarchy');
var label = require('vega-label');
var reg = require('vega-regression');
var voronoi = require('vega-voronoi');
var wordcloud = require('vega-wordcloud');
var xf = require('vega-crossfilter');
var vegaStatistics = require('vega-statistics');
var vegaTime = require('vega-time');
var vegaLoader = require('vega-loader');
var vegaScenegraph = require('vega-scenegraph');
var vegaScale = require('vega-scale');
var vegaProjection = require('vega-projection');
var vegaView = require('vega-view');
var vegaFormat = require('vega-format');
var vegaFunctions = require('vega-functions');
var vegaParser = require('vega-parser');
var vegaRuntime = require('vega-runtime');
var vegaExpression = require('vega-expression');
var vegaEventSelector = require('vega-event-selector');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var tx__namespace = /*#__PURE__*/_interopNamespace(tx);
var vtx__namespace = /*#__PURE__*/_interopNamespace(vtx);
var encode__namespace = /*#__PURE__*/_interopNamespace(encode);
var geo__namespace = /*#__PURE__*/_interopNamespace(geo);
var force__namespace = /*#__PURE__*/_interopNamespace(force);
var tree__namespace = /*#__PURE__*/_interopNamespace(tree);
var label__namespace = /*#__PURE__*/_interopNamespace(label);
var reg__namespace = /*#__PURE__*/_interopNamespace(reg);
var voronoi__namespace = /*#__PURE__*/_interopNamespace(voronoi);
var wordcloud__namespace = /*#__PURE__*/_interopNamespace(wordcloud);
var xf__namespace = /*#__PURE__*/_interopNamespace(xf);

var name = "vega";
var version$1 = "5.20.2";
var description = "The Vega visualization grammar.";
var keywords = [
	"vega",
	"visualization",
	"interaction",
	"dataflow",
	"library",
	"data",
	"d3"
];
var license = "BSD-3-Clause";
var author = "UW Interactive Data Lab (http://idl.cs.washington.edu)";
var main = "build/vega-node.js";
var module$1 = "build/vega.module.js";
var unpkg = "build/vega.min.js";
var jsdelivr = "build/vega.min.js";
var types = "index.d.ts";
var repository = "vega/vega";
var scripts = {
	bundle: "rollup -c --config-bundle",
	prebuild: "rimraf build && rimraf build-es5",
	build: "rollup -c --config-core --config-bundle --config-ie",
	postbuild: "node schema-copy",
	pretest: "yarn build --config-test",
	test: "TZ=America/Los_Angeles tape 'test/**/*-test.js'",
	prepublishOnly: "yarn test && yarn build",
	postpublish: "./schema-deploy.sh"
};
var dependencies = {
	"vega-crossfilter": "~4.0.5",
	"vega-dataflow": "~5.7.4",
	"vega-encode": "~4.8.3",
	"vega-event-selector": "~2.0.6",
	"vega-expression": "~4.0.1",
	"vega-force": "~4.0.7",
	"vega-format": "~1.0.4",
	"vega-functions": "~5.12.0",
	"vega-geo": "~4.3.8",
	"vega-hierarchy": "~4.0.9",
	"vega-label": "~1.0.0",
	"vega-loader": "~4.4.0",
	"vega-parser": "~6.1.3",
	"vega-projection": "~1.4.5",
	"vega-regression": "~1.0.9",
	"vega-runtime": "~6.1.3",
	"vega-scale": "~7.1.1",
	"vega-scenegraph": "~4.9.4",
	"vega-statistics": "~1.7.9",
	"vega-time": "~2.0.4",
	"vega-transforms": "~4.9.4",
	"vega-typings": "~0.21.0",
	"vega-util": "~1.16.1",
	"vega-view": "~5.10.1",
	"vega-view-transforms": "~4.5.8",
	"vega-voronoi": "~4.1.5",
	"vega-wordcloud": "~4.1.3"
};
var devDependencies = {
	"vega-schema": "*"
};
var gitHead = "e251dbc61ab6645689d9f349e7dd9d15ddb85bce";
var pkg = {
	name: name,
	version: version$1,
	description: description,
	keywords: keywords,
	license: license,
	author: author,
	main: main,
	module: module$1,
	unpkg: unpkg,
	jsdelivr: jsdelivr,
	types: types,
	repository: repository,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies,
	gitHead: gitHead
};

// -- Transforms -----
vegaUtil.extend(vegaDataflow.transforms, tx__namespace, vtx__namespace, encode__namespace, geo__namespace, force__namespace, label__namespace, tree__namespace, reg__namespace, voronoi__namespace, wordcloud__namespace, xf__namespace); // -- Exports -----

const version = pkg.version;

Object.defineProperty(exports, 'Dataflow', {
  enumerable: true,
  get: function () {
    return vegaDataflow.Dataflow;
  }
});
Object.defineProperty(exports, 'EventStream', {
  enumerable: true,
  get: function () {
    return vegaDataflow.EventStream;
  }
});
Object.defineProperty(exports, 'MultiPulse', {
  enumerable: true,
  get: function () {
    return vegaDataflow.MultiPulse;
  }
});
Object.defineProperty(exports, 'Operator', {
  enumerable: true,
  get: function () {
    return vegaDataflow.Operator;
  }
});
Object.defineProperty(exports, 'Parameters', {
  enumerable: true,
  get: function () {
    return vegaDataflow.Parameters;
  }
});
Object.defineProperty(exports, 'Pulse', {
  enumerable: true,
  get: function () {
    return vegaDataflow.Pulse;
  }
});
Object.defineProperty(exports, 'Transform', {
  enumerable: true,
  get: function () {
    return vegaDataflow.Transform;
  }
});
Object.defineProperty(exports, 'changeset', {
  enumerable: true,
  get: function () {
    return vegaDataflow.changeset;
  }
});
Object.defineProperty(exports, 'definition', {
  enumerable: true,
  get: function () {
    return vegaDataflow.definition;
  }
});
Object.defineProperty(exports, 'ingest', {
  enumerable: true,
  get: function () {
    return vegaDataflow.ingest;
  }
});
Object.defineProperty(exports, 'isTuple', {
  enumerable: true,
  get: function () {
    return vegaDataflow.isTuple;
  }
});
Object.defineProperty(exports, 'transform', {
  enumerable: true,
  get: function () {
    return vegaDataflow.transform;
  }
});
Object.defineProperty(exports, 'transforms', {
  enumerable: true,
  get: function () {
    return vegaDataflow.transforms;
  }
});
Object.defineProperty(exports, 'tupleid', {
  enumerable: true,
  get: function () {
    return vegaDataflow.tupleid;
  }
});
Object.defineProperty(exports, 'interpolate', {
  enumerable: true,
  get: function () {
    return vegaScale.interpolate;
  }
});
Object.defineProperty(exports, 'interpolateColors', {
  enumerable: true,
  get: function () {
    return vegaScale.interpolateColors;
  }
});
Object.defineProperty(exports, 'interpolateRange', {
  enumerable: true,
  get: function () {
    return vegaScale.interpolateRange;
  }
});
Object.defineProperty(exports, 'quantizeInterpolator', {
  enumerable: true,
  get: function () {
    return vegaScale.quantizeInterpolator;
  }
});
Object.defineProperty(exports, 'scale', {
  enumerable: true,
  get: function () {
    return vegaScale.scale;
  }
});
Object.defineProperty(exports, 'scheme', {
  enumerable: true,
  get: function () {
    return vegaScale.scheme;
  }
});
Object.defineProperty(exports, 'projection', {
  enumerable: true,
  get: function () {
    return vegaProjection.projection;
  }
});
Object.defineProperty(exports, 'View', {
  enumerable: true,
  get: function () {
    return vegaView.View;
  }
});
Object.defineProperty(exports, 'defaultLocale', {
  enumerable: true,
  get: function () {
    return vegaFormat.defaultLocale;
  }
});
Object.defineProperty(exports, 'formatLocale', {
  enumerable: true,
  get: function () {
    return vegaFormat.numberFormatDefaultLocale;
  }
});
Object.defineProperty(exports, 'locale', {
  enumerable: true,
  get: function () {
    return vegaFormat.locale;
  }
});
Object.defineProperty(exports, 'resetDefaultLocale', {
  enumerable: true,
  get: function () {
    return vegaFormat.resetDefaultLocale;
  }
});
Object.defineProperty(exports, 'timeFormatLocale', {
  enumerable: true,
  get: function () {
    return vegaFormat.timeFormatDefaultLocale;
  }
});
Object.defineProperty(exports, 'expressionFunction', {
  enumerable: true,
  get: function () {
    return vegaFunctions.expressionFunction;
  }
});
Object.defineProperty(exports, 'parse', {
  enumerable: true,
  get: function () {
    return vegaParser.parse;
  }
});
Object.defineProperty(exports, 'runtimeContext', {
  enumerable: true,
  get: function () {
    return vegaRuntime.context;
  }
});
Object.defineProperty(exports, 'codegenExpression', {
  enumerable: true,
  get: function () {
    return vegaExpression.codegen;
  }
});
Object.defineProperty(exports, 'parseExpression', {
  enumerable: true,
  get: function () {
    return vegaExpression.parse;
  }
});
Object.defineProperty(exports, 'parseSelector', {
  enumerable: true,
  get: function () {
    return vegaEventSelector.selector;
  }
});
exports.version = version;
Object.keys(vegaUtil).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return vegaUtil[k];
    }
  });
});
Object.keys(vegaStatistics).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return vegaStatistics[k];
    }
  });
});
Object.keys(vegaTime).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return vegaTime[k];
    }
  });
});
Object.keys(vegaLoader).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return vegaLoader[k];
    }
  });
});
Object.keys(vegaScenegraph).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return vegaScenegraph[k];
    }
  });
});

},{"vega-util":"4BD5d","vega-dataflow":"1Owpt","vega-transforms":"5jusq","vega-view-transforms":"4BrYl","vega-encode":"4RLpd","vega-geo":"537KK","vega-force":"3Mn3U","vega-hierarchy":"6vEON","vega-label":"7itaU","vega-regression":"GZdnI","vega-voronoi":"26ztH","vega-wordcloud":"7DvpH","vega-crossfilter":"4xToR","vega-statistics":"5GzFx","vega-time":"2Sl4A","vega-loader":"72pzQ","vega-scenegraph":"6y4N1","vega-scale":"13AnI","vega-projection":"4uxzO","vega-view":"5bB4x","vega-format":"2s7uE","vega-functions":"4qZqy","vega-parser":"4AZar","vega-runtime":"1m2MK","vega-expression":"2lNZi","vega-event-selector":"2twGG"}],"4BD5d":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}));
})(this, function (exports) {
  "use strict";
  function accessor(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }
  function accessorName(fn) {
    return fn == null ? null : fn.fname;
  }
  function accessorFields(fn) {
    return fn == null ? null : fn.fields;
  }
  function getter(path) {
    return path.length === 1 ? get1(path[0]) : getN(path);
  }
  const get1 = field => function (obj) {
    return obj[field];
  };
  const getN = path => {
    const len = path.length;
    return function (obj) {
      for (let i = 0; i < len; ++i) {
        obj = obj[path[i]];
      }
      return obj;
    };
  };
  function error(message) {
    throw Error(message);
  }
  function splitAccessPath(p) {
    const path = [], n = p.length;
    let q = null, b = 0, s = '', i, j, c;
    p = p + '';
    function push() {
      path.push(s + p.substring(i, j));
      s = '';
      i = j + 1;
    }
    for (i = j = 0; j < n; ++j) {
      c = p[j];
      if (c === '\\') {
        s += p.substring(i, j);
        s += p.substring(++j, ++j);
        i = j;
      } else if (c === q) {
        push();
        q = null;
        b = -1;
      } else if (q) {
        continue;
      } else if (i === b && c === '"') {
        i = j + 1;
        q = c;
      } else if (i === b && c === "'") {
        i = j + 1;
        q = c;
      } else if (c === '.' && !b) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c === '[') {
        if (j > i) push();
        b = i = j + 1;
      } else if (c === ']') {
        if (!b) error('Access path missing open bracket: ' + p);
        if (b > 0) push();
        b = 0;
        i = j + 1;
      }
    }
    if (b) error('Access path missing closing bracket: ' + p);
    if (q) error('Access path missing closing quote: ' + p);
    if (j > i) {
      j++;
      push();
    }
    return path;
  }
  function field(field, name, opt) {
    const path = splitAccessPath(field);
    field = path.length === 1 ? path[0] : field;
    return accessor((opt && opt.get || getter)(path), [field], name || field);
  }
  const id = field('id');
  const identity = accessor(_ => _, [], 'identity');
  const zero = accessor(() => 0, [], 'zero');
  const one = accessor(() => 1, [], 'one');
  const truthy = accessor(() => true, [], 'true');
  const falsy = accessor(() => false, [], 'false');
  function log$1(method, level, input) {
    const args = [level].concat([].slice.call(input));
    console[method].apply(console, args);
  }
  const None = 0;
  const Error$1 = 1;
  const Warn = 2;
  const Info = 3;
  const Debug = 4;
  function logger(_, method) {
    let level = _ || None;
    return {
      level(_) {
        if (arguments.length) {
          level = +_;
          return this;
        } else {
          return level;
        }
      },
      error() {
        if (level >= Error$1) log$1(method || 'error', 'ERROR', arguments);
        return this;
      },
      warn() {
        if (level >= Warn) log$1(method || 'warn', 'WARN', arguments);
        return this;
      },
      info() {
        if (level >= Info) log$1(method || 'log', 'INFO', arguments);
        return this;
      },
      debug() {
        if (level >= Debug) log$1(method || 'log', 'DEBUG', arguments);
        return this;
      }
    };
  }
  var isArray = Array.isArray;
  function isObject(_) {
    return _ === Object(_);
  }
  const isLegalKey = key => key !== '__proto__';
  function mergeConfig(...configs) {
    return configs.reduce((out, source) => {
      for (const key in source) {
        if (key === 'signals') {
          // for signals, we merge the signals arrays
          // source signals take precedence over
          // existing signals with the same name
          out.signals = mergeNamed(out.signals, source.signals);
        } else {
          // otherwise, merge objects subject to recursion constraints
          // for legend block, recurse for the layout entry only
          // for style block, recurse for all properties
          // otherwise, no recursion: objects overwrite, no merging
          const r = key === 'legend' ? {
            layout: 1
          } : key === 'style' ? true : null;
          writeConfig(out, key, source[key], r);
        }
      }
      return out;
    }, {});
  }
  function writeConfig(output, key, value, recurse) {
    if (!isLegalKey(key)) return;
    let k, o;
    if (isObject(value) && !isArray(value)) {
      o = isObject(output[key]) ? output[key] : output[key] = {};
      for (k in value) {
        if (recurse && (recurse === true || recurse[k])) {
          writeConfig(o, k, value[k]);
        } else if (isLegalKey(k)) {
          o[k] = value[k];
        }
      }
    } else {
      output[key] = value;
    }
  }
  function mergeNamed(a, b) {
    if (a == null) return b;
    const map = {}, out = [];
    function add(_) {
      if (!map[_.name]) {
        map[_.name] = 1;
        out.push(_);
      }
    }
    b.forEach(add);
    a.forEach(add);
    return out;
  }
  function peek(array) {
    return array[array.length - 1];
  }
  function toNumber(_) {
    return _ == null || _ === '' ? null : +_;
  }
  const exp = sign => x => sign * Math.exp(x);
  const log = sign => x => Math.log(sign * x);
  const symlog = c => x => Math.sign(x) * Math.log1p(Math.abs(x / c));
  const symexp = c => x => Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  const pow = exponent => x => x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  function pan(domain, delta, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift(peek(domain)), dd = (d1 - d0) * delta;
    return [ground(d0 - dd), ground(d1 - dd)];
  }
  function panLinear(domain, delta) {
    return pan(domain, delta, toNumber, identity);
  }
  function panLog(domain, delta) {
    var sign = Math.sign(domain[0]);
    return pan(domain, delta, log(sign), exp(sign));
  }
  function panPow(domain, delta, exponent) {
    return pan(domain, delta, pow(exponent), pow(1 / exponent));
  }
  function panSymlog(domain, delta, constant) {
    return pan(domain, delta, symlog(constant), symexp(constant));
  }
  function zoom(domain, anchor, scale, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift(peek(domain)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];
  }
  function zoomLinear(domain, anchor, scale) {
    return zoom(domain, anchor, scale, toNumber, identity);
  }
  function zoomLog(domain, anchor, scale) {
    const sign = Math.sign(domain[0]);
    return zoom(domain, anchor, scale, log(sign), exp(sign));
  }
  function zoomPow(domain, anchor, scale, exponent) {
    return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
  }
  function zoomSymlog(domain, anchor, scale, constant) {
    return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
  }
  function quarter(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
  }
  function utcquarter(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
  }
  function array(_) {
    return _ != null ? isArray(_) ? _ : [_] : [];
  }
  /**
  * Span-preserving range clamp. If the span of the input range is less
  * than (max - min) and an endpoint exceeds either the min or max value,
  * the range is translated such that the span is preserved and one
  * endpoint touches the boundary of the min/max range.
  * If the span exceeds (max - min), the range [min, max] is returned.
  */
  function clampRange(range, min, max) {
    let lo = range[0], hi = range[1], span;
    if (hi < lo) {
      span = hi;
      hi = lo;
      lo = span;
    }
    span = hi - lo;
    return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];
  }
  function isFunction(_) {
    return typeof _ === 'function';
  }
  const DESCENDING = 'descending';
  function compare(fields, orders, opt) {
    opt = opt || ({});
    orders = array(orders) || [];
    const ord = [], get = [], fmap = {}, gen = opt.comparator || comparator;
    array(fields).forEach((f, i) => {
      if (f == null) return;
      ord.push(orders[i] === DESCENDING ? -1 : 1);
      get.push(f = isFunction(f) ? f : field(f, null, opt));
      (accessorFields(f) || []).forEach(_ => fmap[_] = 1);
    });
    return get.length === 0 ? null : accessor(gen(get, ord), Object.keys(fmap));
  }
  const ascending = (u, v) => (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
  const comparator = (fields, orders) => fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);
  const compare1 = (field, order) => function (a, b) {
    return ascending(field(a), field(b)) * order;
  };
  const compareN = (fields, orders, n) => {
    orders.push(0);
    // pad zero for convenient lookup
    return function (a, b) {
      let f, c = 0, i = -1;
      while (c === 0 && ++i < n) {
        f = fields[i];
        c = ascending(f(a), f(b));
      }
      return c * orders[i];
    };
  };
  function constant(_) {
    return isFunction(_) ? _ : () => _;
  }
  function debounce(delay, handler) {
    let tid;
    return e => {
      if (tid) clearTimeout(tid);
      tid = setTimeout(() => (handler(e), tid = null), delay);
    };
  }
  function extend(_) {
    for (let x, k, i = 1, len = arguments.length; i < len; ++i) {
      x = arguments[i];
      for (k in x) {
        _[k] = x[k];
      }
    }
    return _;
  }
  /**
  * Return an array with minimum and maximum values, in the
  * form [min, max]. Ignores null, undefined, and NaN values.
  */
  function extent(array, f) {
    let i = 0, n, v, min, max;
    if (array && (n = array.length)) {
      if (f == null) {
        // find first valid value
        for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]) ;
        min = max = v;
        // visit all other values
        for (; i < n; ++i) {
          v = array[i];
          // skip null/undefined; NaN will fail all comparisons
          if (v != null) {
            if (v < min) min = v;
            if (v > max) max = v;
          }
        }
      } else {
        // find first valid value
        for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i])) ;
        min = max = v;
        // visit all other values
        for (; i < n; ++i) {
          v = f(array[i]);
          // skip null/undefined; NaN will fail all comparisons
          if (v != null) {
            if (v < min) min = v;
            if (v > max) max = v;
          }
        }
      }
    }
    return [min, max];
  }
  function extentIndex(array, f) {
    const n = array.length;
    let i = -1, a, b, c, u, v;
    if (f == null) {
      while (++i < n) {
        b = array[i];
        if (b != null && b >= b) {
          a = c = b;
          break;
        }
      }
      if (i === n) return [-1, -1];
      u = v = i;
      while (++i < n) {
        b = array[i];
        if (b != null) {
          if (a > b) {
            a = b;
            u = i;
          }
          if (c < b) {
            c = b;
            v = i;
          }
        }
      }
    } else {
      while (++i < n) {
        b = f(array[i], i, array);
        if (b != null && b >= b) {
          a = c = b;
          break;
        }
      }
      if (i === n) return [-1, -1];
      u = v = i;
      while (++i < n) {
        b = f(array[i], i, array);
        if (b != null) {
          if (a > b) {
            a = b;
            u = i;
          }
          if (c < b) {
            c = b;
            v = i;
          }
        }
      }
    }
    return [u, v];
  }
  const hop = Object.prototype.hasOwnProperty;
  function has(object, property) {
    return hop.call(object, property);
  }
  const NULL = {};
  function fastmap(input) {
    let obj = {}, test;
    function has$1(key) {
      return has(obj, key) && obj[key] !== NULL;
    }
    const map = {
      size: 0,
      empty: 0,
      object: obj,
      has: has$1,
      get(key) {
        return has$1(key) ? obj[key] : undefined;
      },
      set(key, value) {
        if (!has$1(key)) {
          ++map.size;
          if (obj[key] === NULL) --map.empty;
        }
        obj[key] = value;
        return this;
      },
      delete(key) {
        if (has$1(key)) {
          --map.size;
          ++map.empty;
          obj[key] = NULL;
        }
        return this;
      },
      clear() {
        map.size = map.empty = 0;
        map.object = obj = {};
      },
      test(_) {
        if (arguments.length) {
          test = _;
          return map;
        } else {
          return test;
        }
      },
      clean() {
        const next = {};
        let size = 0;
        for (const key in obj) {
          const value = obj[key];
          if (value !== NULL && (!test || !test(value))) {
            next[key] = value;
            ++size;
          }
        }
        map.size = size;
        map.empty = 0;
        map.object = obj = next;
      }
    };
    if (input) Object.keys(input).forEach(key => {
      map.set(key, input[key]);
    });
    return map;
  }
  function flush(range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    const t = +threshold;
    let a = range[0], b = peek(range), l;
    // swap endpoints if range is reversed
    if (b < a) {
      l = a;
      a = b;
      b = l;
    }
    // compare value to endpoints
    l = Math.abs(value - a);
    const r = Math.abs(b - value);
    // adjust if value is within threshold distance of endpoint
    return l < r && l <= t ? left : r <= t ? right : center;
  }
  function inherits(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, 'constructor', {
      value: child,
      writable: true,
      enumerable: true,
      configurable: true
    });
    return extend(proto, members);
  }
  /**
  * Predicate that returns true if the value lies within the span
  * of the given range. The left and right flags control the use
  * of inclusive (true) or exclusive (false) comparisons.
  */
  function inrange(value, range, left, right) {
    let r0 = range[0], r1 = range[range.length - 1], t;
    if (r0 > r1) {
      t = r0;
      r0 = r1;
      r1 = t;
    }
    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
  }
  function isBoolean(_) {
    return typeof _ === 'boolean';
  }
  function isDate(_) {
    return Object.prototype.toString.call(_) === '[object Date]';
  }
  function isIterable(_) {
    return _ && isFunction(_[Symbol.iterator]);
  }
  function isNumber(_) {
    return typeof _ === 'number';
  }
  function isRegExp(_) {
    return Object.prototype.toString.call(_) === '[object RegExp]';
  }
  function isString(_) {
    return typeof _ === 'string';
  }
  function key(fields, flat, opt) {
    if (fields) {
      fields = flat ? array(fields).map(f => f.replace(/\\(.)/g, '$1')) : array(fields);
    }
    const len = fields && fields.length, gen = opt && opt.get || getter, map = f => gen(flat ? [f] : splitAccessPath(f));
    let fn;
    if (!len) {
      fn = function () {
        return '';
      };
    } else if (len === 1) {
      const get = map(fields[0]);
      fn = function (_) {
        return '' + get(_);
      };
    } else {
      const get = fields.map(map);
      fn = function (_) {
        let s = '' + get[0](_), i = 0;
        while (++i < len) s += '|' + get[i](_);
        return s;
      };
    }
    return accessor(fn, fields, 'key');
  }
  function lerp(array, frac) {
    const lo = array[0], hi = peek(array), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
  }
  const DEFAULT_MAX_SIZE = 10000;
  // adapted from https://github.com/dominictarr/hashlru/ (MIT License)
  function lruCache(maxsize) {
    maxsize = +maxsize || DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear = () => {
      curr = {};
      prev = {};
      size = 0;
    };
    const update = (key, value) => {
      if (++size > maxsize) {
        prev = curr;
        curr = {};
        size = 1;
      }
      return curr[key] = value;
    };
    clear();
    return {
      clear,
      has: key => has(curr, key) || has(prev, key),
      get: key => has(curr, key) ? curr[key] : has(prev, key) ? update(key, prev[key]) : undefined,
      set: (key, value) => has(curr, key) ? curr[key] = value : update(key, value)
    };
  }
  function merge(compare, array0, array1, output) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for (; i0 < n0 && i1 < n1; ++i) {
      merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    }
    for (; i0 < n0; (++i0, ++i)) {
      merged[i] = array0[i0];
    }
    for (; i1 < n1; (++i1, ++i)) {
      merged[i] = array1[i1];
    }
    return merged;
  }
  function repeat(str, reps) {
    let s = '';
    while (--reps >= 0) s += str;
    return s;
  }
  function pad(str, length, padchar, align) {
    const c = padchar || ' ', s = str + '', n = length - s.length;
    return n <= 0 ? s : align === 'left' ? repeat(c, n) + s : align === 'center' ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);
  }
  /**
  * Return the numerical span of an array: the difference between
  * the last and first values.
  */
  function span(array) {
    return array && peek(array) - array[0] || 0;
  }
  function $(x) {
    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.
    // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace('\u2028', '\\u2028').replace('\u2029', '\\u2029') : x;
  }
  function toBoolean(_) {
    return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
  }
  const defaultParser = _ => isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
  function toDate(_, parser) {
    parser = parser || defaultParser;
    return _ == null || _ === '' ? null : parser(_);
  }
  function toString(_) {
    return _ == null || _ === '' ? null : _ + '';
  }
  function toSet(_) {
    const s = {}, n = _.length;
    for (let i = 0; i < n; ++i) s[_[i]] = true;
    return s;
  }
  function truncate(str, length, align, ellipsis) {
    const e = ellipsis != null ? ellipsis : '\u2026', s = str + '', n = s.length, l = Math.max(0, length - e.length);
    return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
  }
  function visitArray(array, filter, visitor) {
    if (array) {
      if (filter) {
        const n = array.length;
        for (let i = 0; i < n; ++i) {
          const t = filter(array[i]);
          if (t) visitor(t, i, array);
        }
      } else {
        array.forEach(visitor);
      }
    }
  }
  exports.Debug = Debug;
  exports.Error = Error$1;
  exports.Info = Info;
  exports.None = None;
  exports.Warn = Warn;
  exports.accessor = accessor;
  exports.accessorFields = accessorFields;
  exports.accessorName = accessorName;
  exports.array = array;
  exports.ascending = ascending;
  exports.clampRange = clampRange;
  exports.compare = compare;
  exports.constant = constant;
  exports.debounce = debounce;
  exports.error = error;
  exports.extend = extend;
  exports.extent = extent;
  exports.extentIndex = extentIndex;
  exports.falsy = falsy;
  exports.fastmap = fastmap;
  exports.field = field;
  exports.flush = flush;
  exports.hasOwnProperty = has;
  exports.id = id;
  exports.identity = identity;
  exports.inherits = inherits;
  exports.inrange = inrange;
  exports.isArray = isArray;
  exports.isBoolean = isBoolean;
  exports.isDate = isDate;
  exports.isFunction = isFunction;
  exports.isIterable = isIterable;
  exports.isNumber = isNumber;
  exports.isObject = isObject;
  exports.isRegExp = isRegExp;
  exports.isString = isString;
  exports.key = key;
  exports.lerp = lerp;
  exports.logger = logger;
  exports.lruCache = lruCache;
  exports.merge = merge;
  exports.mergeConfig = mergeConfig;
  exports.one = one;
  exports.pad = pad;
  exports.panLinear = panLinear;
  exports.panLog = panLog;
  exports.panPow = panPow;
  exports.panSymlog = panSymlog;
  exports.peek = peek;
  exports.quarter = quarter;
  exports.repeat = repeat;
  exports.span = span;
  exports.splitAccessPath = splitAccessPath;
  exports.stringValue = $;
  exports.toBoolean = toBoolean;
  exports.toDate = toDate;
  exports.toNumber = toNumber;
  exports.toSet = toSet;
  exports.toString = toString;
  exports.truncate = truncate;
  exports.truthy = truthy;
  exports.utcquarter = utcquarter;
  exports.visitArray = visitArray;
  exports.writeConfig = writeConfig;
  exports.zero = zero;
  exports.zoomLinear = zoomLinear;
  exports.zoomLog = zoomLog;
  exports.zoomPow = zoomPow;
  exports.zoomSymlog = zoomSymlog;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"1Owpt":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-loader'), require('vega-format')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-loader', 'vega-format'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega));
})(this, function (exports, vegaUtil, vegaLoader, vegaFormat) {
  "use strict";
  function UniqueList(idFunc) {
    const $ = idFunc || vegaUtil.identity, list = [], ids = {};
    list.add = _ => {
      const id = $(_);
      if (!ids[id]) {
        ids[id] = 1;
        list.push(_);
      }
      return list;
    };
    list.remove = _ => {
      const id = $(_);
      if (ids[id]) {
        ids[id] = 0;
        const idx = list.indexOf(_);
        if (idx >= 0) list.splice(idx, 1);
      }
      return list;
    };
    return list;
  }
  /**
  * Invoke and await a potentially async callback function. If
  * an error occurs, trap it and route to Dataflow.error.
  * @param {Dataflow} df - The dataflow instance
  * @param {function} callback - A callback function to invoke
  *   and then await. The dataflow will be passed as the single
  *   argument to the function.
  */
  async function asyncCallback(df, callback) {
    try {
      await callback(df);
    } catch (err) {
      df.error(err);
    }
  }
  const TUPLE_ID_KEY = Symbol('vega_id');
  let TUPLE_ID = 1;
  /**
  * Checks if an input value is a registered tuple.
  * @param {*} t - The value to check.
  * @return {boolean} True if the input is a tuple, false otherwise.
  */
  function isTuple(t) {
    return !!(t && tupleid(t));
  }
  /**
  * Returns the id of a tuple.
  * @param {object} t - The input tuple.
  * @return {*} the tuple id.
  */
  function tupleid(t) {
    return t[TUPLE_ID_KEY];
  }
  /**
  * Sets the id of a tuple.
  * @param {object} t - The input tuple.
  * @param {*} id - The id value to set.
  * @return {object} the input tuple.
  */
  function setid(t, id) {
    t[TUPLE_ID_KEY] = id;
    return t;
  }
  /**
  * Ingest an object or value as a data tuple.
  * If the input value is an object, an id field will be added to it. For
  * efficiency, the input object is modified directly. A copy is not made.
  * If the input value is a literal, it will be wrapped in a new object
  * instance, with the value accessible as the 'data' property.
  * @param datum - The value to ingest.
  * @return {object} The ingested data tuple.
  */
  function ingest$1(datum) {
    const t = datum === Object(datum) ? datum : {
      data: datum
    };
    return tupleid(t) ? t : setid(t, TUPLE_ID++);
  }
  /**
  * Given a source tuple, return a derived copy.
  * @param {object} t - The source tuple.
  * @return {object} The derived tuple.
  */
  function derive(t) {
    return rederive(t, ingest$1({}));
  }
  /**
  * Rederive a derived tuple by copying values from the source tuple.
  * @param {object} t - The source tuple.
  * @param {object} d - The derived tuple.
  * @return {object} The derived tuple.
  */
  function rederive(t, d) {
    for (const k in t) d[k] = t[k];
    return d;
  }
  /**
  * Replace an existing tuple with a new tuple.
  * @param {object} t - The existing data tuple.
  * @param {object} d - The new tuple that replaces the old.
  * @return {object} The new tuple.
  */
  function replace(t, d) {
    return setid(d, tupleid(t));
  }
  /**
  * Generate an augmented comparator function that provides stable
  * sorting by tuple id when the given comparator produces ties.
  * @param {function} cmp - The comparator to augment.
  * @param {function} [f] - Optional tuple accessor function.
  * @return {function} An augmented comparator function.
  */
  function stableCompare(cmp, f) {
    return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);
  }
  function isChangeSet(v) {
    return v && v.constructor === changeset;
  }
  function changeset() {
    const add = [], // insert tuples
    rem = [], // remove tuples
    mod = [], // modify tuples
    remp = [], // remove by predicate
    modp = [];
    // modify by predicate
    let clean = null, reflow = false;
    return {
      constructor: changeset,
      insert(t) {
        const d = vegaUtil.array(t), n = d.length;
        for (let i = 0; i < n; ++i) add.push(d[i]);
        return this;
      },
      remove(t) {
        const a = vegaUtil.isFunction(t) ? remp : rem, d = vegaUtil.array(t), n = d.length;
        for (let i = 0; i < n; ++i) a.push(d[i]);
        return this;
      },
      modify(t, field, value) {
        const m = {
          field: field,
          value: vegaUtil.constant(value)
        };
        if (vegaUtil.isFunction(t)) {
          m.filter = t;
          modp.push(m);
        } else {
          m.tuple = t;
          mod.push(m);
        }
        return this;
      },
      encode(t, set) {
        if (vegaUtil.isFunction(t)) modp.push({
          filter: t,
          field: set
        }); else mod.push({
          tuple: t,
          field: set
        });
        return this;
      },
      clean(value) {
        clean = value;
        return this;
      },
      reflow() {
        reflow = true;
        return this;
      },
      pulse(pulse, tuples) {
        const cur = {}, out = {};
        let i, n, m, f, t, id;
        // build lookup table of current tuples
        for ((i = 0, n = tuples.length); i < n; ++i) {
          cur[tupleid(tuples[i])] = 1;
        }
        // process individual tuples to remove
        for ((i = 0, n = rem.length); i < n; ++i) {
          t = rem[i];
          cur[tupleid(t)] = -1;
        }
        // process predicate-based removals
        for ((i = 0, n = remp.length); i < n; ++i) {
          f = remp[i];
          tuples.forEach(t => {
            if (f(t)) cur[tupleid(t)] = -1;
          });
        }
        // process all add tuples
        for ((i = 0, n = add.length); i < n; ++i) {
          t = add[i];
          id = tupleid(t);
          if (cur[id]) {
            // tuple already resides in dataset
            // if flagged for both add and remove, cancel
            cur[id] = 1;
          } else {
            // tuple does not reside in dataset, add
            pulse.add.push(ingest$1(add[i]));
          }
        }
        // populate pulse rem list
        for ((i = 0, n = tuples.length); i < n; ++i) {
          t = tuples[i];
          if (cur[tupleid(t)] < 0) pulse.rem.push(t);
        }
        // modify helper method
        function modify(t, f, v) {
          if (v) {
            t[f] = v(t);
          } else {
            pulse.encode = f;
          }
          if (!reflow) out[tupleid(t)] = t;
        }
        // process individual tuples to modify
        for ((i = 0, n = mod.length); i < n; ++i) {
          m = mod[i];
          t = m.tuple;
          f = m.field;
          id = cur[tupleid(t)];
          if (id > 0) {
            modify(t, f, m.value);
            pulse.modifies(f);
          }
        }
        // process predicate-based modifications
        for ((i = 0, n = modp.length); i < n; ++i) {
          m = modp[i];
          f = m.filter;
          tuples.forEach(t => {
            if (f(t) && cur[tupleid(t)] > 0) {
              modify(t, m.field, m.value);
            }
          });
          pulse.modifies(m.field);
        }
        // upon reflow request, populate mod with all non-removed tuples
        // otherwise, populate mod with modified tuples only
        if (reflow) {
          pulse.mod = rem.length || remp.length ? tuples.filter(t => cur[tupleid(t)] > 0) : tuples.slice();
        } else {
          for (id in out) pulse.mod.push(out[id]);
        }
        // set pulse garbage collection request
        if (clean || clean == null && (rem.length || remp.length)) {
          pulse.clean(true);
        }
        return pulse;
      }
    };
  }
  const CACHE = '_:mod:_';
  /**
  * Hash that tracks modifications to assigned values.
  * Callers *must* use the set method to update values.
  */
  function Parameters() {
    Object.defineProperty(this, CACHE, {
      writable: true,
      value: {}
    });
  }
  Parameters.prototype = {
    /**
    * Set a parameter value. If the parameter value changes, the parameter
    * will be recorded as modified.
    * @param {string} name - The parameter name.
    * @param {number} index - The index into an array-value parameter. Ignored if
    *   the argument is undefined, null or less than zero.
    * @param {*} value - The parameter value to set.
    * @param {boolean} [force=false] - If true, records the parameter as modified
    *   even if the value is unchanged.
    * @return {Parameters} - This parameter object.
    */
    /**
    * Set a parameter value. If the parameter value changes, the parameter
    * will be recorded as modified.
    * @param {string} name - The parameter name.
    * @param {number} index - The index into an array-value parameter. Ignored if
    *   the argument is undefined, null or less than zero.
    * @param {*} value - The parameter value to set.
    * @param {boolean} [force=false] - If true, records the parameter as modified
    *   even if the value is unchanged.
    * @return {Parameters} - This parameter object.
    */
    set(name, index, value, force) {
      const o = this, v = o[name], mod = o[CACHE];
      if (index != null && index >= 0) {
        if (v[index] !== value || force) {
          v[index] = value;
          mod[index + ':' + name] = -1;
          mod[name] = -1;
        }
      } else if (v !== value || force) {
        o[name] = value;
        mod[name] = vegaUtil.isArray(value) ? 1 + value.length : -1;
      }
      return o;
    },
    /**
    * Tests if one or more parameters has been modified. If invoked with no
    * arguments, returns true if any parameter value has changed. If the first
    * argument is array, returns trues if any parameter name in the array has
    * changed. Otherwise, tests if the given name and optional array index has
    * changed.
    * @param {string} name - The parameter name to test.
    * @param {number} [index=undefined] - The parameter array index to test.
    * @return {boolean} - Returns true if a queried parameter was modified.
    */
    /**
    * Tests if one or more parameters has been modified. If invoked with no
    * arguments, returns true if any parameter value has changed. If the first
    * argument is array, returns trues if any parameter name in the array has
    * changed. Otherwise, tests if the given name and optional array index has
    * changed.
    * @param {string} name - The parameter name to test.
    * @param {number} [index=undefined] - The parameter array index to test.
    * @return {boolean} - Returns true if a queried parameter was modified.
    */
    modified(name, index) {
      const mod = this[CACHE];
      if (!arguments.length) {
        for (const k in mod) {
          if (mod[k]) return true;
        }
        return false;
      } else if (vegaUtil.isArray(name)) {
        for (let k = 0; k < name.length; ++k) {
          if (mod[name[k]]) return true;
        }
        return false;
      }
      return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];
    },
    /**
    * Clears the modification records. After calling this method,
    * all parameters are considered unmodified.
    */
    /**
    * Clears the modification records. After calling this method,
    * all parameters are considered unmodified.
    */
    clear() {
      this[CACHE] = {};
      return this;
    }
  };
  let OP_ID = 0;
  const PULSE = 'pulse', NO_PARAMS = new Parameters();
  // Boolean Flags
  const SKIP$1 = 1, MODIFIED = 2;
  /**
  * An Operator is a processing node in a dataflow graph.
  * Each operator stores a value and an optional value update function.
  * Operators can accept a hash of named parameters. Parameter values can
  * either be direct (JavaScript literals, arrays, objects) or indirect
  * (other operators whose values will be pulled dynamically). Operators
  * included as parameters will have this operator added as a dependency.
  * @constructor
  * @param {*} [init] - The initial value for this operator.
  * @param {function(object, Pulse)} [update] - An update function. Upon
  *   evaluation of this operator, the update function will be invoked and the
  *   return value will be used as the new value of this operator.
  * @param {object} [params] - The parameters for this operator.
  * @param {boolean} [react=true] - Flag indicating if this operator should
  *   listen for changes to upstream operators included as parameters.
  * @see parameters
  */
  function Operator(init, update, params, react) {
    this.id = ++OP_ID;
    this.value = init;
    this.stamp = -1;
    this.rank = -1;
    this.qrank = -1;
    this.flags = 0;
    if (update) {
      this._update = update;
    }
    if (params) this.parameters(params, react);
  }
  function flag(bit) {
    return function (state) {
      const f = this.flags;
      if (arguments.length === 0) return !!(f & bit);
      this.flags = state ? f | bit : f & ~bit;
      return this;
    };
  }
  Operator.prototype = {
    /**
    * Returns a list of target operators dependent on this operator.
    * If this list does not exist, it is created and then returned.
    * @return {UniqueList}
    */
    /**
    * Returns a list of target operators dependent on this operator.
    * If this list does not exist, it is created and then returned.
    * @return {UniqueList}
    */
    targets() {
      return this._targets || (this._targets = UniqueList(vegaUtil.id));
    },
    /**
    * Sets the value of this operator.
    * @param {*} value - the value to set.
    * @return {Number} Returns 1 if the operator value has changed
    *   according to strict equality, returns 0 otherwise.
    */
    /**
    * Sets the value of this operator.
    * @param {*} value - the value to set.
    * @return {Number} Returns 1 if the operator value has changed
    *   according to strict equality, returns 0 otherwise.
    */
    set(value) {
      if (this.value !== value) {
        this.value = value;
        return 1;
      } else {
        return 0;
      }
    },
    /**
    * Indicates that operator evaluation should be skipped on the next pulse.
    * This operator will still propagate incoming pulses, but its update function
    * will not be invoked. The skip flag is reset after every pulse, so calling
    * this method will affect processing of the next pulse only.
    */
    skip: flag(SKIP$1),
    /**
    * Indicates that this operator's value has been modified on its most recent
    * pulse. Normally modification is checked via strict equality; however, in
    * some cases it is more efficient to update the internal state of an object.
    * In those cases, the modified flag can be used to trigger propagation. Once
    * set, the modification flag persists across pulses until unset. The flag can
    * be used with the last timestamp to test if a modification is recent.
    */
    modified: flag(MODIFIED),
    /**
    * Sets the parameters for this operator. The parameter values are analyzed for
    * operator instances. If found, this operator will be added as a dependency
    * of the parameterizing operator. Operator values are dynamically marshalled
    * from each operator parameter prior to evaluation. If a parameter value is
    * an array, the array will also be searched for Operator instances. However,
    * the search does not recurse into sub-arrays or object properties.
    * @param {object} params - A hash of operator parameters.
    * @param {boolean} [react=true] - A flag indicating if this operator should
    *   automatically update (react) when parameter values change. In other words,
    *   this flag determines if the operator registers itself as a listener on
    *   any upstream operators included in the parameters.
    * @param {boolean} [initonly=false] - A flag indicating if this operator
    *   should calculate an update only upon its initiatal evaluation, then
    *   deregister dependencies and suppress all future update invocations.
    * @return {Operator[]} - An array of upstream dependencies.
    */
    /**
    * Sets the parameters for this operator. The parameter values are analyzed for
    * operator instances. If found, this operator will be added as a dependency
    * of the parameterizing operator. Operator values are dynamically marshalled
    * from each operator parameter prior to evaluation. If a parameter value is
    * an array, the array will also be searched for Operator instances. However,
    * the search does not recurse into sub-arrays or object properties.
    * @param {object} params - A hash of operator parameters.
    * @param {boolean} [react=true] - A flag indicating if this operator should
    *   automatically update (react) when parameter values change. In other words,
    *   this flag determines if the operator registers itself as a listener on
    *   any upstream operators included in the parameters.
    * @param {boolean} [initonly=false] - A flag indicating if this operator
    *   should calculate an update only upon its initiatal evaluation, then
    *   deregister dependencies and suppress all future update invocations.
    * @return {Operator[]} - An array of upstream dependencies.
    */
    parameters(params, react, initonly) {
      react = react !== false;
      const argval = this._argval = this._argval || new Parameters(), argops = this._argops = this._argops || [], deps = [];
      let name, value, n, i;
      const add = (name, index, value) => {
        if (value instanceof Operator) {
          if (value !== this) {
            if (react) value.targets().add(this);
            deps.push(value);
          }
          argops.push({
            op: value,
            name: name,
            index: index
          });
        } else {
          argval.set(name, index, value);
        }
      };
      for (name in params) {
        value = params[name];
        if (name === PULSE) {
          vegaUtil.array(value).forEach(op => {
            if (!(op instanceof Operator)) {
              vegaUtil.error('Pulse parameters must be operator instances.');
            } else if (op !== this) {
              op.targets().add(this);
              deps.push(op);
            }
          });
          this.source = value;
        } else if (vegaUtil.isArray(value)) {
          argval.set(name, -1, Array(n = value.length));
          for (i = 0; i < n; ++i) add(name, i, value[i]);
        } else {
          add(name, -1, value);
        }
      }
      this.marshall().clear();
      // initialize values
      if (initonly) argops.initonly = true;
      return deps;
    },
    /**
    * Internal method for marshalling parameter values.
    * Visits each operator dependency to pull the latest value.
    * @return {Parameters} A Parameters object to pass to the update function.
    */
    /**
    * Internal method for marshalling parameter values.
    * Visits each operator dependency to pull the latest value.
    * @return {Parameters} A Parameters object to pass to the update function.
    */
    marshall(stamp) {
      const argval = this._argval || NO_PARAMS, argops = this._argops;
      let item, i, op, mod;
      if (argops) {
        const n = argops.length;
        for (i = 0; i < n; ++i) {
          item = argops[i];
          op = item.op;
          mod = op.modified() && op.stamp === stamp;
          argval.set(item.name, item.index, op.value, mod);
        }
        if (argops.initonly) {
          for (i = 0; i < n; ++i) {
            item = argops[i];
            item.op.targets().remove(this);
          }
          this._argops = null;
          this._update = null;
        }
      }
      return argval;
    },
    /**
    * Detach this operator from the dataflow.
    * Unregisters listeners on upstream dependencies.
    */
    /**
    * Detach this operator from the dataflow.
    * Unregisters listeners on upstream dependencies.
    */
    detach() {
      const argops = this._argops;
      let i, n, item, op;
      if (argops) {
        for ((i = 0, n = argops.length); i < n; ++i) {
          item = argops[i];
          op = item.op;
          if (op._targets) {
            op._targets.remove(this);
          }
        }
      }
      // remove references to the source and pulse object,
      // if present, to prevent memory leaks of old data.
      this.pulse = null;
      this.source = null;
    },
    /**
    * Delegate method to perform operator processing.
    * Subclasses can override this method to perform custom processing.
    * By default, it marshalls parameters and calls the update function
    * if that function is defined. If the update function does not
    * change the operator value then StopPropagation is returned.
    * If no update function is defined, this method does nothing.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return The output pulse or StopPropagation. A falsy return value
    *   (including undefined) will let the input pulse pass through.
    */
    /**
    * Delegate method to perform operator processing.
    * Subclasses can override this method to perform custom processing.
    * By default, it marshalls parameters and calls the update function
    * if that function is defined. If the update function does not
    * change the operator value then StopPropagation is returned.
    * If no update function is defined, this method does nothing.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return The output pulse or StopPropagation. A falsy return value
    *   (including undefined) will let the input pulse pass through.
    */
    evaluate(pulse) {
      const update = this._update;
      if (update) {
        const params = this.marshall(pulse.stamp), v = update.call(this, params, pulse);
        params.clear();
        if (v !== this.value) {
          this.value = v;
        } else if (!this.modified()) {
          return pulse.StopPropagation;
        }
      }
    },
    /**
    * Run this operator for the current pulse. If this operator has already
    * been run at (or after) the pulse timestamp, returns StopPropagation.
    * Internally, this method calls {@link evaluate} to perform processing.
    * If {@link evaluate} returns a falsy value, the input pulse is returned.
    * This method should NOT be overridden, instead overrride {@link evaluate}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return the output pulse for this operator (or StopPropagation)
    */
    /**
    * Run this operator for the current pulse. If this operator has already
    * been run at (or after) the pulse timestamp, returns StopPropagation.
    * Internally, this method calls {@link evaluate} to perform processing.
    * If {@link evaluate} returns a falsy value, the input pulse is returned.
    * This method should NOT be overridden, instead overrride {@link evaluate}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return the output pulse for this operator (or StopPropagation)
    */
    run(pulse) {
      if (pulse.stamp < this.stamp) return pulse.StopPropagation;
      let rv;
      if (this.skip()) {
        this.skip(false);
        rv = 0;
      } else {
        rv = this.evaluate(pulse);
      }
      return this.pulse = rv || pulse;
    }
  };
  /**
  * Add an operator to the dataflow graph. This function accepts a
  * variety of input argument types. The basic signature supports an
  * initial value, update function and parameters. If the first parameter
  * is an Operator instance, it will be added directly. If it is a
  * constructor for an Operator subclass, a new instance will be instantiated.
  * Otherwise, if the first parameter is a function instance, it will be used
  * as the update function and a null initial value is assumed.
  * @param {*} init - One of: the operator to add, the initial value of
  *   the operator, an operator class to instantiate, or an update function.
  * @param {function} [update] - The operator update function.
  * @param {object} [params] - The operator parameters.
  * @param {boolean} [react=true] - Flag indicating if this operator should
  *   listen for changes to upstream operators included as parameters.
  * @return {Operator} - The added operator.
  */
  function add(init, update, params, react) {
    let shift = 1, op;
    if (init instanceof Operator) {
      op = init;
    } else if (init && init.prototype instanceof Operator) {
      op = new init();
    } else if (vegaUtil.isFunction(init)) {
      op = new Operator(null, init);
    } else {
      shift = 0;
      op = new Operator(init, update);
    }
    this.rank(op);
    if (shift) {
      react = params;
      params = update;
    }
    if (params) this.connect(op, op.parameters(params, react));
    this.touch(op);
    return op;
  }
  /**
  * Connect a target operator as a dependent of source operators.
  * If necessary, this method will rerank the target operator and its
  * dependents to ensure propagation proceeds in a topologically sorted order.
  * @param {Operator} target - The target operator.
  * @param {Array<Operator>} - The source operators that should propagate
  *   to the target operator.
  */
  function connect(target, sources) {
    const targetRank = target.rank, n = sources.length;
    for (let i = 0; i < n; ++i) {
      if (targetRank < sources[i].rank) {
        this.rerank(target);
        return;
      }
    }
  }
  let STREAM_ID = 0;
  /**
  * Models an event stream.
  * @constructor
  * @param {function(Object, number): boolean} [filter] - Filter predicate.
  *   Events pass through when truthy, events are suppressed when falsy.
  * @param {function(Object): *} [apply] - Applied to input events to produce
  *   new event values.
  * @param {function(Object)} [receive] - Event callback function to invoke
  *   upon receipt of a new event. Use to override standard event processing.
  */
  function EventStream(filter, apply, receive) {
    this.id = ++STREAM_ID;
    this.value = null;
    if (receive) this.receive = receive;
    if (filter) this._filter = filter;
    if (apply) this._apply = apply;
  }
  /**
  * Creates a new event stream instance with the provided
  * (optional) filter, apply and receive functions.
  * @param {function(Object, number): boolean} [filter] - Filter predicate.
  *   Events pass through when truthy, events are suppressed when falsy.
  * @param {function(Object): *} [apply] - Applied to input events to produce
  *   new event values.
  * @see EventStream
  */
  function stream(filter, apply, receive) {
    return new EventStream(filter, apply, receive);
  }
  EventStream.prototype = {
    _filter: vegaUtil.truthy,
    _apply: vegaUtil.identity,
    targets() {
      return this._targets || (this._targets = UniqueList(vegaUtil.id));
    },
    consume(_) {
      if (!arguments.length) return !!this._consume;
      this._consume = !!_;
      return this;
    },
    receive(evt) {
      if (this._filter(evt)) {
        const val = this.value = this._apply(evt), trg = this._targets, n = trg ? trg.length : 0;
        for (let i = 0; i < n; ++i) trg[i].receive(val);
        if (this._consume) {
          evt.preventDefault();
          evt.stopPropagation();
        }
      }
    },
    filter(filter) {
      const s = stream(filter);
      this.targets().add(s);
      return s;
    },
    apply(apply) {
      const s = stream(null, apply);
      this.targets().add(s);
      return s;
    },
    merge() {
      const s = stream();
      this.targets().add(s);
      for (let i = 0, n = arguments.length; i < n; ++i) {
        arguments[i].targets().add(s);
      }
      return s;
    },
    throttle(pause) {
      let t = -1;
      return this.filter(() => {
        const now = Date.now();
        if (now - t > pause) {
          t = now;
          return 1;
        } else {
          return 0;
        }
      });
    },
    debounce(delay) {
      const s = stream();
      this.targets().add(stream(null, null, vegaUtil.debounce(delay, e => {
        const df = e.dataflow;
        s.receive(e);
        if (df && df.run) df.run();
      })));
      return s;
    },
    between(a, b) {
      let active = false;
      a.targets().add(stream(null, null, () => active = true));
      b.targets().add(stream(null, null, () => active = false));
      return this.filter(() => active);
    },
    detach() {
      // ensures compatibility with operators (#2753)
      // remove references to other streams and filter functions that may
      // be bound to subcontexts that need to be garbage collected.
      this._filter = vegaUtil.truthy;
      this._targets = null;
    }
  };
  /**
  * Create a new event stream from an event source.
  * @param {object} source - The event source to monitor. The input must
  *  support the addEventListener method.
  * @param {string} type - The event type.
  * @param {function(object): boolean} [filter] - Event filter function.
  * @param {function(object): *} [apply] - Event application function.
  *   If provided, this function will be invoked and the result will be
  *   used as the downstream event value.
  * @return {EventStream}
  */
  function events(source, type, filter, apply) {
    const df = this, s = stream(filter, apply), send = function (e) {
      e.dataflow = df;
      try {
        s.receive(e);
      } catch (error) {
        df.error(error);
      } finally {
        df.run();
      }
    };
    let sources;
    if (typeof source === 'string' && typeof document !== 'undefined') {
      sources = document.querySelectorAll(source);
    } else {
      sources = vegaUtil.array(source);
    }
    const n = sources.length;
    for (let i = 0; i < n; ++i) {
      sources[i].addEventListener(type, send);
    }
    return s;
  }
  function parse(data, format) {
    const locale = this.locale();
    return vegaLoader.read(data, format, locale.timeParse, locale.utcParse);
  }
  /**
  * Ingests new data into the dataflow. First parses the data using the
  * vega-loader read method, then pulses a changeset to the target operator.
  * @param {Operator} target - The Operator to target with ingested data,
  *   typically a Collect transform instance.
  * @param {*} data - The input data, prior to parsing. For JSON this may
  *   be a string or an object. For CSV, TSV, etc should be a string.
  * @param {object} format - The data format description for parsing
  *   loaded data. This object is passed to the vega-loader read method.
  * @returns {Dataflow}
  */
  function ingest(target, data, format) {
    data = this.parse(data, format);
    return this.pulse(target, this.changeset().insert(data));
  }
  /**
  * Request data from an external source, parse it, and return a Promise.
  * @param {string} url - The URL from which to load the data. This string
  *   is passed to the vega-loader load method.
  * @param {object} [format] - The data format description for parsing
  *   loaded data. This object is passed to the vega-loader read method.
  * @return {Promise} A Promise that resolves upon completion of the request.
  *   The resolved object contains the following properties:
  *   - data: an array of parsed data (or null upon error)
  *   - status: a code for success (0), load fail (-1), or parse fail (-2)
  */
  async function request(url, format) {
    const df = this;
    let status = 0, data;
    try {
      data = await df.loader().load(url, {
        context: 'dataflow',
        response: vegaLoader.responseType(format && format.type)
      });
      try {
        data = df.parse(data, format);
      } catch (err) {
        status = -2;
        df.warn('Data ingestion failed', url, err);
      }
    } catch (err) {
      status = -1;
      df.warn('Loading failed', url, err);
    }
    return {
      data,
      status
    };
  }
  async function preload(target, url, format) {
    const df = this, pending = df._pending || loadPending(df);
    pending.requests += 1;
    const res = await df.request(url, format);
    df.pulse(target, df.changeset().remove(vegaUtil.truthy).insert(res.data || []));
    pending.done();
    return res;
  }
  function loadPending(df) {
    let accept;
    const pending = new Promise(a => accept = a);
    pending.requests = 0;
    pending.done = () => {
      if (--pending.requests === 0) {
        df._pending = null;
        accept(df);
      }
    };
    return df._pending = pending;
  }
  const SKIP = {
    skip: true
  };
  /**
  * Perform operator updates in response to events. Applies an
  * update function to compute a new operator value. If the update function
  * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
  * changes. Otherwise, the operator value will be updated to the return value.
  * @param {EventStream|Operator} source - The event source to react to.
  *   This argument can be either an EventStream or an Operator.
  * @param {Operator|function(object):Operator} target - The operator to update.
  *   This argument can either be an Operator instance or (if the source
  *   argument is an EventStream), a function that accepts an event object as
  *   input and returns an Operator to target.
  * @param {function(Parameters,Event): *} [update] - Optional update function
  *   to compute the new operator value, or a literal value to set. Update
  *   functions expect to receive a parameter object and event as arguments.
  *   This function can either return a new operator value or (if the source
  *   argument is an EventStream) a {@link ChangeSet} instance to pulse
  *   the target operator with tuple changes.
  * @param {object} [params] - The update function parameters.
  * @param {object} [options] - Additional options hash. If not overridden,
  *   updated operators will be skipped by default.
  * @param {boolean} [options.skip] - If true, the operator will
  *  be skipped: it will not be evaluated, but its dependents will be.
  * @param {boolean} [options.force] - If true, the operator will
  *   be re-evaluated even if its value has not changed.
  * @return {Dataflow}
  */
  function on(source, target, update, params, options) {
    const fn = source instanceof Operator ? onOperator : onStream;
    fn(this, source, target, update, params, options);
    return this;
  }
  function onStream(df, stream, target, update, params, options) {
    const opt = vegaUtil.extend({}, options, SKIP);
    let func, op;
    if (!vegaUtil.isFunction(target)) target = vegaUtil.constant(target);
    if (update === undefined) {
      func = e => df.touch(target(e));
    } else if (vegaUtil.isFunction(update)) {
      op = new Operator(null, update, params, false);
      func = e => {
        op.evaluate(e);
        const t = target(e), v = op.value;
        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
      };
    } else {
      func = e => df.update(target(e), update, opt);
    }
    stream.apply(func);
  }
  function onOperator(df, source, target, update, params, options) {
    if (update === undefined) {
      source.targets().add(target);
    } else {
      const opt = options || ({}), op = new Operator(null, updater(target, update), params, false);
      op.modified(opt.force);
      op.rank = source.rank;
      // immediately follow source
      source.targets().add(op);
      // add dependency
      if (target) {
        op.skip(true);
        // skip first invocation
        op.value = target.value;
        // initialize value
        op.targets().add(target);
        // chain dependencies
        df.connect(target, [op]);
      }
    }
  }
  function updater(target, update) {
    update = vegaUtil.isFunction(update) ? update : vegaUtil.constant(update);
    return target ? function (_, pulse) {
      const value = update(_, pulse);
      if (!target.skip()) {
        target.skip(value !== this.value).value = value;
      }
      return value;
    } : update;
  }
  /**
  * Assigns a rank to an operator. Ranks are assigned in increasing order
  * by incrementing an internal rank counter.
  * @param {Operator} op - The operator to assign a rank.
  */
  function rank(op) {
    op.rank = ++this._rank;
  }
  /**
  * Re-ranks an operator and all downstream target dependencies. This
  * is necessary when upstream dependencies of higher rank are added to
  * a target operator.
  * @param {Operator} op - The operator to re-rank.
  */
  function rerank(op) {
    const queue = [op];
    let cur, list, i;
    while (queue.length) {
      this.rank(cur = queue.pop());
      if (list = cur._targets) {
        for (i = list.length; --i >= 0; ) {
          queue.push(cur = list[i]);
          if (cur === op) vegaUtil.error('Cycle detected in dataflow graph.');
        }
      }
    }
  }
  /**
  * Sentinel value indicating pulse propagation should stop.
  */
  const StopPropagation = {};
  // Pulse visit type flags
  const ADD = 1 << 0, REM = 1 << 1, MOD = 1 << 2, ADD_REM = ADD | REM, ADD_MOD = ADD | MOD, ALL = ADD | REM | MOD, REFLOW = 1 << 3, SOURCE = 1 << 4, NO_SOURCE = 1 << 5, NO_FIELDS = 1 << 6;
  /**
  * A Pulse enables inter-operator communication during a run of the
  * dataflow graph. In addition to the current timestamp, a pulse may also
  * contain a change-set of added, removed or modified data tuples, as well as
  * a pointer to a full backing data source. Tuple change sets may not
  * be fully materialized; for example, to prevent needless array creation
  * a change set may include larger arrays and corresponding filter functions.
  * The pulse provides a {@link visit} method to enable proper and efficient
  * iteration over requested data tuples.
  *
  * In addition, each pulse can track modification flags for data tuple fields.
  * Responsible transform operators should call the {@link modifies} method to
  * indicate changes to data fields. The {@link modified} method enables
  * querying of this modification state.
  *
  * @constructor
  * @param {Dataflow} dataflow - The backing dataflow instance.
  * @param {number} stamp - The current propagation timestamp.
  * @param {string} [encode] - An optional encoding set name, which is then
  *   accessible as Pulse.encode. Operators can respond to (or ignore) this
  *   setting as appropriate. This parameter can be used in conjunction with
  *   the Encode transform in the vega-encode module.
  */
  function Pulse(dataflow, stamp, encode) {
    this.dataflow = dataflow;
    this.stamp = stamp == null ? -1 : stamp;
    this.add = [];
    this.rem = [];
    this.mod = [];
    this.fields = null;
    this.encode = encode || null;
  }
  function materialize(data, filter) {
    const out = [];
    vegaUtil.visitArray(data, filter, _ => out.push(_));
    return out;
  }
  function filter(pulse, flags) {
    const map = {};
    pulse.visit(flags, t => {
      map[tupleid(t)] = 1;
    });
    return t => map[tupleid(t)] ? null : t;
  }
  function addFilter(a, b) {
    return a ? (t, i) => a(t, i) && b(t, i) : b;
  }
  Pulse.prototype = {
    /**
    * Sentinel value indicating pulse propagation should stop.
    */
    StopPropagation,
    /**
    * Boolean flag indicating ADD (added) tuples.
    */
    ADD,
    /**
    * Boolean flag indicating REM (removed) tuples.
    */
    REM,
    /**
    * Boolean flag indicating MOD (modified) tuples.
    */
    MOD,
    /**
    * Boolean flag indicating ADD (added) and REM (removed) tuples.
    */
    ADD_REM,
    /**
    * Boolean flag indicating ADD (added) and MOD (modified) tuples.
    */
    ADD_MOD,
    /**
    * Boolean flag indicating ADD, REM and MOD tuples.
    */
    ALL,
    /**
    * Boolean flag indicating all tuples in a data source
    * except for the ADD, REM and MOD tuples.
    */
    REFLOW,
    /**
    * Boolean flag indicating a 'pass-through' to a
    * backing data source, ignoring ADD, REM and MOD tuples.
    */
    SOURCE,
    /**
    * Boolean flag indicating that source data should be
    * suppressed when creating a forked pulse.
    */
    NO_SOURCE,
    /**
    * Boolean flag indicating that field modifications should be
    * suppressed when creating a forked pulse.
    */
    NO_FIELDS,
    /**
    * Creates a new pulse based on the values of this pulse.
    * The dataflow, time stamp and field modification values are copied over.
    * By default, new empty ADD, REM and MOD arrays are created.
    * @param {number} flags - Integer of boolean flags indicating which (if any)
    *   tuple arrays should be copied to the new pulse. The supported flag values
    *   are ADD, REM and MOD. Array references are copied directly: new array
    *   instances are not created.
    * @return {Pulse} - The forked pulse instance.
    * @see init
    */
    /**
    * Creates a new pulse based on the values of this pulse.
    * The dataflow, time stamp and field modification values are copied over.
    * By default, new empty ADD, REM and MOD arrays are created.
    * @param {number} flags - Integer of boolean flags indicating which (if any)
    *   tuple arrays should be copied to the new pulse. The supported flag values
    *   are ADD, REM and MOD. Array references are copied directly: new array
    *   instances are not created.
    * @return {Pulse} - The forked pulse instance.
    * @see init
    */
    fork(flags) {
      return new Pulse(this.dataflow).init(this, flags);
    },
    /**
    * Creates a copy of this pulse with new materialized array
    * instances for the ADD, REM, MOD, and SOURCE arrays.
    * The dataflow, time stamp and field modification values are copied over.
    * @return {Pulse} - The cloned pulse instance.
    * @see init
    */
    /**
    * Creates a copy of this pulse with new materialized array
    * instances for the ADD, REM, MOD, and SOURCE arrays.
    * The dataflow, time stamp and field modification values are copied over.
    * @return {Pulse} - The cloned pulse instance.
    * @see init
    */
    clone() {
      const p = this.fork(ALL);
      p.add = p.add.slice();
      p.rem = p.rem.slice();
      p.mod = p.mod.slice();
      if (p.source) p.source = p.source.slice();
      return p.materialize(ALL | SOURCE);
    },
    /**
    * Returns a pulse that adds all tuples from a backing source. This is
    * useful for cases where operators are added to a dataflow after an
    * upstream data pipeline has already been processed, ensuring that
    * new operators can observe all tuples within a stream.
    * @return {Pulse} - A pulse instance with all source tuples included
    *   in the add array. If the current pulse already has all source
    *   tuples in its add array, it is returned directly. If the current
    *   pulse does not have a backing source, it is returned directly.
    */
    /**
    * Returns a pulse that adds all tuples from a backing source. This is
    * useful for cases where operators are added to a dataflow after an
    * upstream data pipeline has already been processed, ensuring that
    * new operators can observe all tuples within a stream.
    * @return {Pulse} - A pulse instance with all source tuples included
    *   in the add array. If the current pulse already has all source
    *   tuples in its add array, it is returned directly. If the current
    *   pulse does not have a backing source, it is returned directly.
    */
    addAll() {
      let p = this;
      const reuse = !p.source || p.add === p.rem || // special case for indexed set (e.g., crossfilter)
      !p.rem.length && p.source.length === p.add.length;
      if (reuse) {
        return p;
      } else {
        p = new Pulse(this.dataflow).init(this);
        p.add = p.source;
        p.rem = [];
        // new operators can ignore rem #2769
        return p;
      }
    },
    /**
    * Initialize this pulse based on the values of another pulse. This method
    * is used internally by {@link fork} to initialize a new forked tuple.
    * The dataflow, time stamp and field modification values are copied over.
    * By default, new empty ADD, REM and MOD arrays are created.
    * @param {Pulse} src - The source pulse to copy from.
    * @param {number} flags - Integer of boolean flags indicating which (if any)
    *   tuple arrays should be copied to the new pulse. The supported flag values
    *   are ADD, REM and MOD. Array references are copied directly: new array
    *   instances are not created. By default, source data arrays are copied
    *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
    * @return {Pulse} - Returns this Pulse instance.
    */
    /**
    * Initialize this pulse based on the values of another pulse. This method
    * is used internally by {@link fork} to initialize a new forked tuple.
    * The dataflow, time stamp and field modification values are copied over.
    * By default, new empty ADD, REM and MOD arrays are created.
    * @param {Pulse} src - The source pulse to copy from.
    * @param {number} flags - Integer of boolean flags indicating which (if any)
    *   tuple arrays should be copied to the new pulse. The supported flag values
    *   are ADD, REM and MOD. Array references are copied directly: new array
    *   instances are not created. By default, source data arrays are copied
    *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
    * @return {Pulse} - Returns this Pulse instance.
    */
    init(src, flags) {
      const p = this;
      p.stamp = src.stamp;
      p.encode = src.encode;
      if (src.fields && !(flags & NO_FIELDS)) {
        p.fields = src.fields;
      }
      if (flags & ADD) {
        p.addF = src.addF;
        p.add = src.add;
      } else {
        p.addF = null;
        p.add = [];
      }
      if (flags & REM) {
        p.remF = src.remF;
        p.rem = src.rem;
      } else {
        p.remF = null;
        p.rem = [];
      }
      if (flags & MOD) {
        p.modF = src.modF;
        p.mod = src.mod;
      } else {
        p.modF = null;
        p.mod = [];
      }
      if (flags & NO_SOURCE) {
        p.srcF = null;
        p.source = null;
      } else {
        p.srcF = src.srcF;
        p.source = src.source;
        if (src.cleans) p.cleans = src.cleans;
      }
      return p;
    },
    /**
    * Schedules a function to run after pulse propagation completes.
    * @param {function} func - The function to run.
    */
    /**
    * Schedules a function to run after pulse propagation completes.
    * @param {function} func - The function to run.
    */
    runAfter(func) {
      this.dataflow.runAfter(func);
    },
    /**
    * Indicates if tuples have been added, removed or modified.
    * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
    *   Defaults to ALL, returning true if any tuple type has changed.
    * @return {boolean} - Returns true if one or more queried tuple types have
    *   changed, false otherwise.
    */
    /**
    * Indicates if tuples have been added, removed or modified.
    * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
    *   Defaults to ALL, returning true if any tuple type has changed.
    * @return {boolean} - Returns true if one or more queried tuple types have
    *   changed, false otherwise.
    */
    changed(flags) {
      const f = flags || ALL;
      return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
    },
    /**
    * Forces a "reflow" of tuple values, such that all tuples in the backing
    * source are added to the MOD set, unless already present in the ADD set.
    * @param {boolean} [fork=false] - If true, returns a forked copy of this
    *   pulse, and invokes reflow on that derived pulse.
    * @return {Pulse} - The reflowed pulse instance.
    */
    /**
    * Forces a "reflow" of tuple values, such that all tuples in the backing
    * source are added to the MOD set, unless already present in the ADD set.
    * @param {boolean} [fork=false] - If true, returns a forked copy of this
    *   pulse, and invokes reflow on that derived pulse.
    * @return {Pulse} - The reflowed pulse instance.
    */
    reflow(fork) {
      if (fork) return this.fork(ALL).reflow();
      const len = this.add.length, src = this.source && this.source.length;
      if (src && src !== len) {
        this.mod = this.source;
        if (len) this.filter(MOD, filter(this, ADD));
      }
      return this;
    },
    /**
    * Get/set metadata to pulse requesting garbage collection
    * to reclaim currently unused resources.
    */
    /**
    * Get/set metadata to pulse requesting garbage collection
    * to reclaim currently unused resources.
    */
    clean(value) {
      if (arguments.length) {
        this.cleans = !!value;
        return this;
      } else {
        return this.cleans;
      }
    },
    /**
    * Marks one or more data field names as modified to assist dependency
    * tracking and incremental processing by transform operators.
    * @param {string|Array<string>} _ - The field(s) to mark as modified.
    * @return {Pulse} - This pulse instance.
    */
    /**
    * Marks one or more data field names as modified to assist dependency
    * tracking and incremental processing by transform operators.
    * @param {string|Array<string>} _ - The field(s) to mark as modified.
    * @return {Pulse} - This pulse instance.
    */
    modifies(_) {
      const hash = this.fields || (this.fields = {});
      if (vegaUtil.isArray(_)) {
        _.forEach(f => hash[f] = true);
      } else {
        hash[_] = true;
      }
      return this;
    },
    /**
    * Checks if one or more data fields have been modified during this pulse
    * propagation timestamp.
    * @param {string|Array<string>} _ - The field(s) to check for modified.
    * @param {boolean} nomod - If true, will check the modified flag even if
    *   no mod tuples exist. If false (default), mod tuples must be present.
    * @return {boolean} - Returns true if any of the provided fields has been
    *   marked as modified, false otherwise.
    */
    /**
    * Checks if one or more data fields have been modified during this pulse
    * propagation timestamp.
    * @param {string|Array<string>} _ - The field(s) to check for modified.
    * @param {boolean} nomod - If true, will check the modified flag even if
    *   no mod tuples exist. If false (default), mod tuples must be present.
    * @return {boolean} - Returns true if any of the provided fields has been
    *   marked as modified, false otherwise.
    */
    modified(_, nomod) {
      const fields = this.fields;
      return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : vegaUtil.isArray(_) ? _.some(f => fields[f]) : fields[_];
    },
    /**
    * Adds a filter function to one more tuple sets. Filters are applied to
    * backing tuple arrays, to determine the actual set of tuples considered
    * added, removed or modified. They can be used to delay materialization of
    * a tuple set in order to avoid expensive array copies. In addition, the
    * filter functions can serve as value transformers: unlike standard predicate
    * function (which return boolean values), Pulse filters should return the
    * actual tuple value to process. If a tuple set is already filtered, the
    * new filter function will be appended into a conjuntive ('and') query.
    * @param {number} flags - Flags indicating the tuple set(s) to filter.
    * @param {function(*):object} filter - Filter function that will be applied
    *   to the tuple set array, and should return a data tuple if the value
    *   should be included in the tuple set, and falsy (or null) otherwise.
    * @return {Pulse} - Returns this pulse instance.
    */
    /**
    * Adds a filter function to one more tuple sets. Filters are applied to
    * backing tuple arrays, to determine the actual set of tuples considered
    * added, removed or modified. They can be used to delay materialization of
    * a tuple set in order to avoid expensive array copies. In addition, the
    * filter functions can serve as value transformers: unlike standard predicate
    * function (which return boolean values), Pulse filters should return the
    * actual tuple value to process. If a tuple set is already filtered, the
    * new filter function will be appended into a conjuntive ('and') query.
    * @param {number} flags - Flags indicating the tuple set(s) to filter.
    * @param {function(*):object} filter - Filter function that will be applied
    *   to the tuple set array, and should return a data tuple if the value
    *   should be included in the tuple set, and falsy (or null) otherwise.
    * @return {Pulse} - Returns this pulse instance.
    */
    filter(flags, filter) {
      const p = this;
      if (flags & ADD) p.addF = addFilter(p.addF, filter);
      if (flags & REM) p.remF = addFilter(p.remF, filter);
      if (flags & MOD) p.modF = addFilter(p.modF, filter);
      if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
      return p;
    },
    /**
    * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
    * a registered filter function, it will be applied and the tuple set(s) will
    * be replaced with materialized tuple arrays.
    * @param {number} flags - Flags indicating the tuple set(s) to materialize.
    * @return {Pulse} - Returns this pulse instance.
    */
    /**
    * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
    * a registered filter function, it will be applied and the tuple set(s) will
    * be replaced with materialized tuple arrays.
    * @param {number} flags - Flags indicating the tuple set(s) to materialize.
    * @return {Pulse} - Returns this pulse instance.
    */
    materialize(flags) {
      flags = flags || ALL;
      const p = this;
      if (flags & ADD && p.addF) {
        p.add = materialize(p.add, p.addF);
        p.addF = null;
      }
      if (flags & REM && p.remF) {
        p.rem = materialize(p.rem, p.remF);
        p.remF = null;
      }
      if (flags & MOD && p.modF) {
        p.mod = materialize(p.mod, p.modF);
        p.modF = null;
      }
      if (flags & SOURCE && p.srcF) {
        p.source = p.source.filter(p.srcF);
        p.srcF = null;
      }
      return p;
    },
    /**
    * Visit one or more tuple sets in this pulse.
    * @param {number} flags - Flags indicating the tuple set(s) to visit.
    *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
    *   has been set).
    * @param {function(object):*} - Visitor function invoked per-tuple.
    * @return {Pulse} - Returns this pulse instance.
    */
    /**
    * Visit one or more tuple sets in this pulse.
    * @param {number} flags - Flags indicating the tuple set(s) to visit.
    *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
    *   has been set).
    * @param {function(object):*} - Visitor function invoked per-tuple.
    * @return {Pulse} - Returns this pulse instance.
    */
    visit(flags, visitor) {
      const p = this, v = visitor;
      if (flags & SOURCE) {
        vegaUtil.visitArray(p.source, p.srcF, v);
        return p;
      }
      if (flags & ADD) vegaUtil.visitArray(p.add, p.addF, v);
      if (flags & REM) vegaUtil.visitArray(p.rem, p.remF, v);
      if (flags & MOD) vegaUtil.visitArray(p.mod, p.modF, v);
      const src = p.source;
      if (flags & REFLOW && src) {
        const sum = p.add.length + p.mod.length;
        if (sum === src.length) ; else if (sum) {
          vegaUtil.visitArray(src, filter(p, ADD_MOD), v);
        } else {
          // if no add/rem/mod tuples, visit source
          vegaUtil.visitArray(src, p.srcF, v);
        }
      }
      return p;
    }
  };
  /**
  * Represents a set of multiple pulses. Used as input for operators
  * that accept multiple pulses at a time. Contained pulses are
  * accessible via the public "pulses" array property. This pulse doe
  * not carry added, removed or modified tuples directly. However,
  * the visit method can be used to traverse all such tuples contained
  * in sub-pulses with a timestamp matching this parent multi-pulse.
  * @constructor
  * @param {Dataflow} dataflow - The backing dataflow instance.
  * @param {number} stamp - The timestamp.
  * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
  */
  function MultiPulse(dataflow, stamp, pulses, encode) {
    const p = this, n = pulses.length;
    let c = 0;
    this.dataflow = dataflow;
    this.stamp = stamp;
    this.fields = null;
    this.encode = encode || null;
    this.pulses = pulses;
    for (let i = 0; i < n; ++i) {
      const pulse = pulses[i];
      if (pulse.stamp !== stamp) continue;
      if (pulse.fields) {
        const hash = p.fields || (p.fields = {});
        for (const f in pulse.fields) {
          hash[f] = 1;
        }
      }
      if (pulse.changed(p.ADD)) c |= p.ADD;
      if (pulse.changed(p.REM)) c |= p.REM;
      if (pulse.changed(p.MOD)) c |= p.MOD;
    }
    this.changes = c;
  }
  vegaUtil.inherits(MultiPulse, Pulse, {
    /**
    * Creates a new pulse based on the values of this pulse.
    * The dataflow, time stamp and field modification values are copied over.
    * @return {Pulse}
    */
    /**
    * Creates a new pulse based on the values of this pulse.
    * The dataflow, time stamp and field modification values are copied over.
    * @return {Pulse}
    */
    fork(flags) {
      const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
      if (flags !== undefined) {
        if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));
        if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));
        if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));
      }
      return p;
    },
    changed(flags) {
      return this.changes & flags;
    },
    modified(_) {
      const p = this, fields = p.fields;
      return !(fields && p.changes & p.MOD) ? 0 : vegaUtil.isArray(_) ? _.some(f => fields[f]) : fields[_];
    },
    filter() {
      vegaUtil.error('MultiPulse does not support filtering.');
    },
    materialize() {
      vegaUtil.error('MultiPulse does not support materialization.');
    },
    visit(flags, visitor) {
      const p = this, pulses = p.pulses, n = pulses.length;
      let i = 0;
      if (flags & p.SOURCE) {
        for (; i < n; ++i) {
          pulses[i].visit(flags, visitor);
        }
      } else {
        for (; i < n; ++i) {
          if (pulses[i].stamp === p.stamp) {
            pulses[i].visit(flags, visitor);
          }
        }
      }
      return p;
    }
  });
  /*eslint-disable require-atomic-updates*/
  /**
  * Evaluates the dataflow and returns a Promise that resolves when pulse
  * propagation completes. This method will increment the current timestamp
  * and process all updated, pulsed and touched operators. When invoked for
  * the first time, all registered operators will be processed. This method
  * should not be invoked by third-party clients, use {@link runAsync} or
  * {@link run} instead.
  * @param {string} [encode] - The name of an encoding set to invoke during
  *   propagation. This value is added to generated Pulse instances;
  *   operators can then respond to (or ignore) this setting as appropriate.
  *   This parameter can be used in conjunction with the Encode transform in
  *   the vega-encode package.
  * @param {function} [prerun] - An optional callback function to invoke
  *   immediately before dataflow evaluation commences.
  * @param {function} [postrun] - An optional callback function to invoke
  *   after dataflow evaluation completes. The callback will be invoked
  *   after those registered via {@link runAfter}.
  * @return {Promise} - A promise that resolves to this dataflow after
  *   evaluation completes.
  */
  async function evaluate(encode, prerun, postrun) {
    const df = this, async = [];
    // if the pulse value is set, this is a re-entrant call
    if (df._pulse) return reentrant(df);
    // wait for pending datasets to load
    if (df._pending) await df._pending;
    // invoke prerun function, if provided
    if (prerun) await asyncCallback(df, prerun);
    // exit early if there are no updates
    if (!df._touched.length) {
      df.debug('Dataflow invoked, but nothing to do.');
      return df;
    }
    // increment timestamp clock
    const stamp = ++df._clock;
    // set the current pulse
    df._pulse = new Pulse(df, stamp, encode);
    // initialize priority queue, reset touched operators
    df._touched.forEach(op => df._enqueue(op, true));
    df._touched = UniqueList(vegaUtil.id);
    let count = 0, op, next, error;
    try {
      while (df._heap.size() > 0) {
        // dequeue operator with highest priority
        op = df._heap.pop();
        // re-queue if rank changed
        if (op.rank !== op.qrank) {
          df._enqueue(op, true);
          continue;
        }
        // otherwise, evaluate the operator
        next = op.run(df._getPulse(op, encode));
        if (next.then) {
          // await if operator returns a promise directly
          next = await next;
        } else if (next.async) {
          // queue parallel asynchronous execution
          async.push(next.async);
          next = StopPropagation;
        }
        // propagate evaluation, enqueue dependent operators
        if (next !== StopPropagation) {
          if (op._targets) op._targets.forEach(op => df._enqueue(op));
        }
        // increment visit counter
        ++count;
      }
    } catch (err) {
      df._heap.clear();
      error = err;
    }
    // reset pulse map
    df._input = {};
    df._pulse = null;
    df.debug(`Pulse ${stamp}: ${count} operators`);
    if (error) {
      df._postrun = [];
      df.error(error);
    }
    // invoke callbacks queued via runAfter
    if (df._postrun.length) {
      const pr = df._postrun.sort((a, b) => b.priority - a.priority);
      df._postrun = [];
      for (let i = 0; i < pr.length; ++i) {
        await asyncCallback(df, pr[i].callback);
      }
    }
    // invoke postrun function, if provided
    if (postrun) await asyncCallback(df, postrun);
    // handle non-blocking asynchronous callbacks
    if (async.length) {
      Promise.all(async).then(cb => df.runAsync(null, () => {
        cb.forEach(f => {
          try {
            f(df);
          } catch (err) {
            df.error(err);
          }
        });
      }));
    }
    return df;
  }
  /**
  * Queues dataflow evaluation to run once any other queued evaluations have
  * completed and returns a Promise that resolves when the queued pulse
  * propagation completes. If provided, a callback function will be invoked
  * immediately before evaluation commences. This method will ensure a
  * separate evaluation is invoked for each time it is called.
  * @param {string} [encode] - The name of an encoding set to invoke during
  *   propagation. This value is added to generated Pulse instances;
  *   operators can then respond to (or ignore) this setting as appropriate.
  *   This parameter can be used in conjunction with the Encode transform in
  *   the vega-encode package.
  * @param {function} [prerun] - An optional callback function to invoke
  *   immediately before dataflow evaluation commences.
  * @param {function} [postrun] - An optional callback function to invoke
  *   after dataflow evaluation completes. The callback will be invoked
  *   after those registered via {@link runAfter}.
  * @return {Promise} - A promise that resolves to this dataflow after
  *   evaluation completes.
  */
  async function runAsync(encode, prerun, postrun) {
    // await previously queued functions
    while (this._running) await this._running;
    // run dataflow, manage running promise
    const clear = () => this._running = null;
    (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
    return this._running;
  }
  /**
  * Requests dataflow evaluation and the immediately returns this dataflow
  * instance. If there are pending data loading or other asynchronous
  * operations, the dataflow will evaluate asynchronously after this method
  * has been invoked. To track when dataflow evaluation completes, use the
  * {@link runAsync} method instead. This method will raise an error if
  * invoked while the dataflow is already in the midst of evaluation.
  * @param {string} [encode] - The name of an encoding set to invoke during
  *   propagation. This value is added to generated Pulse instances;
  *   operators can then respond to (or ignore) this setting as appropriate.
  *   This parameter can be used in conjunction with the Encode transform in
  *   the vega-encode module.
  * @param {function} [prerun] - An optional callback function to invoke
  *   immediately before dataflow evaluation commences.
  * @param {function} [postrun] - An optional callback function to invoke
  *   after dataflow evaluation completes. The callback will be invoked
  *   after those registered via {@link runAfter}.
  * @return {Dataflow} - This dataflow instance.
  */
  function run(encode, prerun, postrun) {
    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
  }
  /**
  * Schedules a callback function to be invoked after the current pulse
  * propagation completes. If no propagation is currently occurring,
  * the function is invoked immediately. Callbacks scheduled via runAfter
  * are invoked immediately upon completion of the current cycle, before
  * any request queued via runAsync. This method is primarily intended for
  * internal use. Third-party callers using runAfter to schedule a callback
  * that invokes {@link run} or {@link runAsync} should not use this method,
  * but instead use {@link runAsync} with prerun or postrun arguments.
  * @param {function(Dataflow)} callback - The callback function to run.
  *   The callback will be invoked with this Dataflow instance as its
  *   sole argument.
  * @param {boolean} enqueue - A boolean flag indicating that the
  *   callback should be queued up to run after the next propagation
  *   cycle, suppressing immediate invocation when propagation is not
  *   currently occurring.
  * @param {number} [priority] - A priority value used to sort registered
  *   callbacks to determine execution order. This argument is intended
  *   for internal Vega use only.
  */
  function runAfter(callback, enqueue, priority) {
    if (this._pulse || enqueue) {
      // pulse propagation is currently running, queue to run after
      this._postrun.push({
        priority: priority || 0,
        callback: callback
      });
    } else {
      // pulse propagation already complete, invoke immediately
      try {
        callback(this);
      } catch (err) {
        this.error(err);
      }
    }
  }
  /**
  * Raise an error for re-entrant dataflow evaluation.
  */
  function reentrant(df) {
    df.error('Dataflow already running. Use runAsync() to chain invocations.');
    return df;
  }
  /**
  * Enqueue an operator into the priority queue for evaluation. The operator
  * will be enqueued if it has no registered pulse for the current cycle, or if
  * the force argument is true. Upon enqueue, this method also sets the
  * operator's qrank to the current rank value.
  * @param {Operator} op - The operator to enqueue.
  * @param {boolean} [force] - A flag indicating if the operator should be
  *   forceably added to the queue, even if it has already been previously
  *   enqueued during the current pulse propagation. This is useful when the
  *   dataflow graph is dynamically modified and the operator rank changes.
  */
  function enqueue(op, force) {
    const q = op.stamp < this._clock;
    if (q) op.stamp = this._clock;
    if (q || force) {
      op.qrank = op.rank;
      this._heap.push(op);
    }
  }
  /**
  * Provide a correct pulse for evaluating an operator. If the operator has an
  * explicit source operator, we will try to pull the pulse(s) from it.
  * If there is an array of source operators, we build a multi-pulse.
  * Otherwise, we return a current pulse with correct source data.
  * If the pulse is the pulse map has an explicit target set, we use that.
  * Else if the pulse on the upstream source operator is current, we use that.
  * Else we use the pulse from the pulse map, but copy the source tuple array.
  * @param {Operator} op - The operator for which to get an input pulse.
  * @param {string} [encode] - An (optional) encoding set name with which to
  *   annotate the returned pulse. See {@link run} for more information.
  */
  function getPulse(op, encode) {
    const s = op.source, stamp = this._clock;
    return s && vegaUtil.isArray(s) ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
  }
  function singlePulse(p, s) {
    if (s && s.stamp === p.stamp) {
      return s;
    }
    p = p.fork();
    if (s && s !== StopPropagation) {
      p.source = s.source;
    }
    return p;
  }
  const NO_OPT = {
    skip: false,
    force: false
  };
  /**
  * Touches an operator, scheduling it to be evaluated. If invoked outside of
  * a pulse propagation, the operator will be evaluated the next time this
  * dataflow is run. If invoked in the midst of pulse propagation, the operator
  * will be queued for evaluation if and only if the operator has not yet been
  * evaluated on the current propagation timestamp.
  * @param {Operator} op - The operator to touch.
  * @param {object} [options] - Additional options hash.
  * @param {boolean} [options.skip] - If true, the operator will
  *   be skipped: it will not be evaluated, but its dependents will be.
  * @return {Dataflow}
  */
  function touch(op, options) {
    const opt = options || NO_OPT;
    if (this._pulse) {
      // if in midst of propagation, add to priority queue
      this._enqueue(op);
    } else {
      // otherwise, queue for next propagation
      this._touched.add(op);
    }
    if (opt.skip) op.skip(true);
    return this;
  }
  /**
  * Updates the value of the given operator.
  * @param {Operator} op - The operator to update.
  * @param {*} value - The value to set.
  * @param {object} [options] - Additional options hash.
  * @param {boolean} [options.force] - If true, the operator will
  *   be re-evaluated even if its value has not changed.
  * @param {boolean} [options.skip] - If true, the operator will
  *   be skipped: it will not be evaluated, but its dependents will be.
  * @return {Dataflow}
  */
  function update(op, value, options) {
    const opt = options || NO_OPT;
    if (op.set(value) || opt.force) {
      this.touch(op, opt);
    }
    return this;
  }
  /**
  * Pulses an operator with a changeset of tuples. If invoked outside of
  * a pulse propagation, the pulse will be applied the next time this
  * dataflow is run. If invoked in the midst of pulse propagation, the pulse
  * will be added to the set of active pulses and will be applied if and
  * only if the target operator has not yet been evaluated on the current
  * propagation timestamp.
  * @param {Operator} op - The operator to pulse.
  * @param {ChangeSet} value - The tuple changeset to apply.
  * @param {object} [options] - Additional options hash.
  * @param {boolean} [options.skip] - If true, the operator will
  *   be skipped: it will not be evaluated, but its dependents will be.
  * @return {Dataflow}
  */
  function pulse(op, changeset, options) {
    this.touch(op, options || NO_OPT);
    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)), t = op.pulse && op.pulse.source || [];
    p.target = op;
    this._input[op.id] = changeset.pulse(p, t);
    return this;
  }
  function Heap(cmp) {
    let nodes = [];
    return {
      clear: () => nodes = [],
      size: () => nodes.length,
      peek: () => nodes[0],
      push: x => {
        nodes.push(x);
        return siftdown(nodes, 0, nodes.length - 1, cmp);
      },
      pop: () => {
        const last = nodes.pop();
        let item;
        if (nodes.length) {
          item = nodes[0];
          nodes[0] = last;
          siftup(nodes, 0, cmp);
        } else {
          item = last;
        }
        return item;
      }
    };
  }
  function siftdown(array, start, idx, cmp) {
    let parent, pidx;
    const item = array[idx];
    while (idx > start) {
      pidx = idx - 1 >> 1;
      parent = array[pidx];
      if (cmp(item, parent) < 0) {
        array[idx] = parent;
        idx = pidx;
        continue;
      }
      break;
    }
    return array[idx] = item;
  }
  function siftup(array, idx, cmp) {
    const start = idx, end = array.length, item = array[idx];
    let cidx = (idx << 1) + 1, ridx;
    while (cidx < end) {
      ridx = cidx + 1;
      if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
        cidx = ridx;
      }
      array[idx] = array[cidx];
      idx = cidx;
      cidx = (idx << 1) + 1;
    }
    array[idx] = item;
    return siftdown(array, start, idx, cmp);
  }
  /**
  * A dataflow graph for reactive processing of data streams.
  * @constructor
  */
  function Dataflow() {
    this.logger(vegaUtil.logger());
    this.logLevel(vegaUtil.Error);
    this._clock = 0;
    this._rank = 0;
    this._locale = vegaFormat.defaultLocale();
    try {
      this._loader = vegaLoader.loader();
    } catch (e) {}
    this._touched = UniqueList(vegaUtil.id);
    this._input = {};
    this._pulse = null;
    this._heap = Heap((a, b) => a.qrank - b.qrank);
    this._postrun = [];
  }
  function logMethod(method) {
    return function () {
      return this._log[method].apply(this, arguments);
    };
  }
  Dataflow.prototype = {
    /**
    * The current timestamp of this dataflow. This value reflects the
    * timestamp of the previous dataflow run. The dataflow is initialized
    * with a stamp value of 0. The initial run of the dataflow will have
    * a timestap of 1, and so on. This value will match the
    * {@link Pulse.stamp} property.
    * @return {number} - The current timestamp value.
    */
    /**
    * The current timestamp of this dataflow. This value reflects the
    * timestamp of the previous dataflow run. The dataflow is initialized
    * with a stamp value of 0. The initial run of the dataflow will have
    * a timestap of 1, and so on. This value will match the
    * {@link Pulse.stamp} property.
    * @return {number} - The current timestamp value.
    */
    stamp() {
      return this._clock;
    },
    /**
    * Gets or sets the loader instance to use for data file loading. A
    * loader object must provide a "load" method for loading files and a
    * "sanitize" method for checking URL/filename validity. Both methods
    * should accept a URI and options hash as arguments, and return a Promise
    * that resolves to the loaded file contents (load) or a hash containing
    * sanitized URI data with the sanitized url assigned to the "href" property
    * (sanitize).
    * @param {object} _ - The loader instance to use.
    * @return {object|Dataflow} - If no arguments are provided, returns
    *   the current loader instance. Otherwise returns this Dataflow instance.
    */
    /**
    * Gets or sets the loader instance to use for data file loading. A
    * loader object must provide a "load" method for loading files and a
    * "sanitize" method for checking URL/filename validity. Both methods
    * should accept a URI and options hash as arguments, and return a Promise
    * that resolves to the loaded file contents (load) or a hash containing
    * sanitized URI data with the sanitized url assigned to the "href" property
    * (sanitize).
    * @param {object} _ - The loader instance to use.
    * @return {object|Dataflow} - If no arguments are provided, returns
    *   the current loader instance. Otherwise returns this Dataflow instance.
    */
    loader(_) {
      if (arguments.length) {
        this._loader = _;
        return this;
      } else {
        return this._loader;
      }
    },
    /**
    * Gets or sets the locale instance to use for formatting and parsing
    * string values. The locale object should be provided by the
    * vega-format library, and include methods such as format, timeFormat,
    * utcFormat, timeParse, and utcParse.
    * @param {object} _ - The locale instance to use.
    * @return {object|Dataflow} - If no arguments are provided, returns
    *   the current locale instance. Otherwise returns this Dataflow instance.
    */
    /**
    * Gets or sets the locale instance to use for formatting and parsing
    * string values. The locale object should be provided by the
    * vega-format library, and include methods such as format, timeFormat,
    * utcFormat, timeParse, and utcParse.
    * @param {object} _ - The locale instance to use.
    * @return {object|Dataflow} - If no arguments are provided, returns
    *   the current locale instance. Otherwise returns this Dataflow instance.
    */
    locale(_) {
      if (arguments.length) {
        this._locale = _;
        return this;
      } else {
        return this._locale;
      }
    },
    /**
    * Get or set the logger instance used to log messages. If no arguments are
    * provided, returns the current logger instance. Otherwise, sets the logger
    * and return this Dataflow instance. Provided loggers must support the full
    * API of logger objects generated by the vega-util logger method. Note that
    * by default the log level of the new logger will be used; use the logLevel
    * method to adjust the log level as needed.
    */
    /**
    * Get or set the logger instance used to log messages. If no arguments are
    * provided, returns the current logger instance. Otherwise, sets the logger
    * and return this Dataflow instance. Provided loggers must support the full
    * API of logger objects generated by the vega-util logger method. Note that
    * by default the log level of the new logger will be used; use the logLevel
    * method to adjust the log level as needed.
    */
    logger(logger) {
      if (arguments.length) {
        this._log = logger;
        return this;
      } else {
        return this._log;
      }
    },
    /**
    * Logs an error message. By default, logged messages are written to console
    * output. The message will only be logged if the current log level is high
    * enough to permit error messages.
    */
    error: logMethod('error'),
    /**
    * Logs a warning message. By default, logged messages are written to console
    * output. The message will only be logged if the current log level is high
    * enough to permit warning messages.
    */
    warn: logMethod('warn'),
    /**
    * Logs a information message. By default, logged messages are written to
    * console output. The message will only be logged if the current log level is
    * high enough to permit information messages.
    */
    info: logMethod('info'),
    /**
    * Logs a debug message. By default, logged messages are written to console
    * output. The message will only be logged if the current log level is high
    * enough to permit debug messages.
    */
    debug: logMethod('debug'),
    /**
    * Get or set the current log level. If an argument is provided, it
    * will be used as the new log level.
    * @param {number} [level] - Should be one of None, Warn, Info
    * @return {number} - The current log level.
    */
    logLevel: logMethod('level'),
    /**
    * Empty entry threshold for garbage cleaning. Map data structures will
    * perform cleaning once the number of empty entries exceeds this value.
    */
    cleanThreshold: 1e4,
    // OPERATOR REGISTRATION
    add,
    connect,
    rank,
    rerank,
    // OPERATOR UPDATES
    pulse,
    touch,
    update,
    changeset,
    // DATA LOADING
    ingest,
    parse,
    preload,
    request,
    // EVENT HANDLING
    events,
    on,
    // PULSE PROPAGATION
    evaluate,
    run,
    runAsync,
    runAfter,
    _enqueue: enqueue,
    _getPulse: getPulse
  };
  /**
  * Abstract class for operators that process data tuples.
  * Subclasses must provide a {@link transform} method for operator processing.
  * @constructor
  * @param {*} [init] - The initial value for this operator.
  * @param {object} [params] - The parameters for this operator.
  * @param {Operator} [source] - The operator from which to receive pulses.
  */
  function Transform(init, params) {
    Operator.call(this, init, null, params);
  }
  vegaUtil.inherits(Transform, Operator, {
    /**
    * Overrides {@link Operator.evaluate} for transform operators.
    * Internally, this method calls {@link evaluate} to perform processing.
    * If {@link evaluate} returns a falsy value, the input pulse is returned.
    * This method should NOT be overridden, instead overrride {@link evaluate}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return the output pulse for this operator (or StopPropagation)
    */
    /**
    * Overrides {@link Operator.evaluate} for transform operators.
    * Internally, this method calls {@link evaluate} to perform processing.
    * If {@link evaluate} returns a falsy value, the input pulse is returned.
    * This method should NOT be overridden, instead overrride {@link evaluate}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return the output pulse for this operator (or StopPropagation)
    */
    run(pulse) {
      if (pulse.stamp < this.stamp) return pulse.StopPropagation;
      let rv;
      if (this.skip()) {
        this.skip(false);
      } else {
        rv = this.evaluate(pulse);
      }
      rv = rv || pulse;
      if (rv.then) {
        rv = rv.then(_ => this.pulse = _);
      } else if (rv !== pulse.StopPropagation) {
        this.pulse = rv;
      }
      return rv;
    },
    /**
    * Overrides {@link Operator.evaluate} for transform operators.
    * Marshalls parameter values and then invokes {@link transform}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return {Pulse} The output pulse (or StopPropagation). A falsy return
    value (including undefined) will let the input pulse pass through.
    */
    /**
    * Overrides {@link Operator.evaluate} for transform operators.
    * Marshalls parameter values and then invokes {@link transform}.
    * @param {Pulse} pulse - the current dataflow pulse.
    * @return {Pulse} The output pulse (or StopPropagation). A falsy return
    value (including undefined) will let the input pulse pass through.
    */
    evaluate(pulse) {
      const params = this.marshall(pulse.stamp), out = this.transform(params, pulse);
      params.clear();
      return out;
    },
    /**
    * Process incoming pulses.
    * Subclasses should override this method to implement transforms.
    * @param {Parameters} _ - The operator parameter values.
    * @param {Pulse} pulse - The current dataflow pulse.
    * @return {Pulse} The output pulse (or StopPropagation). A falsy return
    *   value (including undefined) will let the input pulse pass through.
    */
    /**
    * Process incoming pulses.
    * Subclasses should override this method to implement transforms.
    * @param {Parameters} _ - The operator parameter values.
    * @param {Pulse} pulse - The current dataflow pulse.
    * @return {Pulse} The output pulse (or StopPropagation). A falsy return
    *   value (including undefined) will let the input pulse pass through.
    */
    transform() {}
  });
  const transforms = {};
  function definition(type) {
    const t = transform(type);
    return t && t.Definition || null;
  }
  function transform(type) {
    type = type && type.toLowerCase();
    return vegaUtil.hasOwnProperty(transforms, type) ? transforms[type] : null;
  }
  exports.Dataflow = Dataflow;
  exports.EventStream = EventStream;
  exports.MultiPulse = MultiPulse;
  exports.Operator = Operator;
  exports.Parameters = Parameters;
  exports.Pulse = Pulse;
  exports.Transform = Transform;
  exports.UniqueList = UniqueList;
  exports.asyncCallback = asyncCallback;
  exports.changeset = changeset;
  exports.definition = definition;
  exports.derive = derive;
  exports.ingest = ingest$1;
  exports.isChangeSet = isChangeSet;
  exports.isTuple = isTuple;
  exports.rederive = rederive;
  exports.replace = replace;
  exports.stableCompare = stableCompare;
  exports.transform = transform;
  exports.transforms = transforms;
  exports.tupleid = tupleid;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-loader":"72pzQ","vega-format":"2s7uE"}],"72pzQ":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
!(function (e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t(exports, require("vega-util"), require("vega-format")) : "function" == typeof define && define.amd ? define(["exports", "vega-util", "vega-format"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).vega = {}, e.vega, e.vega);
})(this, function (e, t, n) {
  "use strict";
  const r = /^([A-Za-z]+:)?\/\//, o = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i, i = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g, a = "file://";
  async function u(e, t) {
    const n = await this.sanitize(e, t), r = n.href;
    return n.localFile ? this.file(r) : this.http(r, t);
  }
  async function s(e, n) {
    n = t.extend({}, this.options, n);
    const u = this.fileAccess, s = {
      href: null
    };
    let c, f, l;
    const p = o.test(e.replace(i, ""));
    null != e && "string" == typeof e && p || t.error("Sanitize failure, invalid URI: " + t.stringValue(e));
    const h = r.test(e);
    return ((l = n.baseURL) && !h && (e.startsWith("/") || "/" === l[l.length - 1] || (e = "/" + e), e = l + e), f = (c = e.startsWith(a)) || "file" === n.mode || "http" !== n.mode && !h && u, c ? e = e.slice(a.length) : e.startsWith("//") && ("file" === n.defaultProtocol ? (e = e.slice(2), f = !0) : e = (n.defaultProtocol || "http") + ":" + e), Object.defineProperty(s, "localFile", {
      value: !!f
    }), s.href = e, n.target && (s.target = n.target + ""), n.rel && (s.rel = n.rel + ""), "image" === n.context && n.crossOrigin && (s.crossOrigin = n.crossOrigin + ""), s);
  }
  function c(e) {
    return e ? t => new Promise((n, r) => {
      e.readFile(t, (e, t) => {
        e ? r(e) : n(t);
      });
    }) : f;
  }
  async function f() {
    t.error("No file system access.");
  }
  function l(e) {
    return e ? async function (n, r) {
      const o = t.extend({}, this.options.http, r), i = r && r.response, a = await e(n, o);
      return a.ok ? t.isFunction(a[i]) ? a[i]() : a.text() : t.error(a.status + "" + a.statusText);
    } : p;
  }
  async function p() {
    t.error("No HTTP fetch method available.");
  }
  const h = e => !(Number.isNaN(+e) || e instanceof Date), d = {
    boolean: t.toBoolean,
    integer: t.toNumber,
    number: t.toNumber,
    date: t.toDate,
    string: t.toString,
    unknown: t.identity
  }, g = [e => "true" === e || "false" === e || !0 === e || !1 === e, e => h(e) && Number.isInteger(+e), h, e => !Number.isNaN(Date.parse(e))], m = ["boolean", "integer", "number", "date"];
  function y(e, t) {
    if (!e || !e.length) return "unknown";
    const n = e.length, r = g.length, o = g.map((e, t) => t + 1);
    for (let a, u, s = 0, c = 0; s < n; ++s) for ((u = t ? e[s][t] : e[s], a = 0); a < r; ++a) if (o[a] && (null != (i = u) && i == i) && !g[a](u) && (o[a] = 0, ++c, c === g.length)) return "string";
    var i;
    return m[o.reduce((e, t) => 0 === e ? t : e, 0) - 1];
  }
  function v(e, t) {
    return t.reduce((t, n) => (t[n] = y(e, n), t), {});
  }
  var b = {}, T = {};
  function j(e) {
    return new Function("d", "return {" + e.map(function (e, t) {
      return JSON.stringify(e) + ": d[" + t + '] || ""';
    }).join(",") + "}");
  }
  function C(e) {
    var t = Object.create(null), n = [];
    return (e.forEach(function (e) {
      for (var r in e) (r in t) || n.push(t[r] = r);
    }), n);
  }
  function w(e, t) {
    var n = e + "", r = n.length;
    return r < t ? new Array(t - r + 1).join(0) + n : n;
  }
  function N(e) {
    var t, n = e.getUTCHours(), r = e.getUTCMinutes(), o = e.getUTCSeconds(), i = e.getUTCMilliseconds();
    return isNaN(e) ? "Invalid Date" : ((t = e.getUTCFullYear()) < 0 ? "-" + w(-t, 6) : t > 9999 ? "+" + w(t, 6) : w(t, 4)) + "-" + w(e.getUTCMonth() + 1, 2) + "-" + w(e.getUTCDate(), 2) + (i ? "T" + w(n, 2) + ":" + w(r, 2) + ":" + w(o, 2) + "." + w(i, 3) + "Z" : o ? "T" + w(n, 2) + ":" + w(r, 2) + ":" + w(o, 2) + "Z" : r || n ? "T" + w(n, 2) + ":" + w(r, 2) + "Z" : "");
  }
  function A(e) {
    var t = new RegExp('["' + e + "\n\r]"), n = e.charCodeAt(0);
    function r(e, t) {
      var r, o = [], i = e.length, a = 0, u = 0, s = i <= 0, c = !1;
      function f() {
        if (s) return T;
        if (c) return (c = !1, b);
        var t, r, o = a;
        if (34 === e.charCodeAt(o)) {
          for (; a++ < i && 34 !== e.charCodeAt(a) || 34 === e.charCodeAt(++a); ) ;
          return ((t = a) >= i ? s = !0 : 10 === (r = e.charCodeAt(a++)) ? c = !0 : 13 === r && (c = !0, 10 === e.charCodeAt(a) && ++a), e.slice(o + 1, t - 1).replace(/""/g, '"'));
        }
        for (; a < i; ) {
          if (10 === (r = e.charCodeAt(t = a++))) c = !0; else if (13 === r) (c = !0, 10 === e.charCodeAt(a) && ++a); else if (r !== n) continue;
          return e.slice(o, t);
        }
        return (s = !0, e.slice(o, i));
      }
      for ((10 === e.charCodeAt(i - 1) && --i, 13 === e.charCodeAt(i - 1) && --i); (r = f()) !== T; ) {
        for (var l = []; r !== b && r !== T; ) (l.push(r), r = f());
        t && null == (l = t(l, u++)) || o.push(l);
      }
      return o;
    }
    function o(t, n) {
      return t.map(function (t) {
        return n.map(function (e) {
          return a(t[e]);
        }).join(e);
      });
    }
    function i(t) {
      return t.map(a).join(e);
    }
    function a(e) {
      return null == e ? "" : e instanceof Date ? N(e) : t.test(e += "") ? '"' + e.replace(/"/g, '""') + '"' : e;
    }
    return {
      parse: function (e, t) {
        var n, o, i = r(e, function (e, r) {
          if (n) return n(e, r - 1);
          (o = e, n = t ? (function (e, t) {
            var n = j(e);
            return function (r, o) {
              return t(n(r), o, e);
            };
          })(e, t) : j(e));
        });
        return (i.columns = o || [], i);
      },
      parseRows: r,
      format: function (t, n) {
        return (null == n && (n = C(t)), [n.map(a).join(e)].concat(o(t, n)).join("\n"));
      },
      formatBody: function (e, t) {
        return (null == t && (t = C(e)), o(e, t).join("\n"));
      },
      formatRows: function (e) {
        return e.map(i).join("\n");
      },
      formatRow: i,
      formatValue: a
    };
  }
  function x(e) {
    const n = function (n, r) {
      const o = {
        delimiter: e
      };
      return O(n, r ? t.extend(r, o) : o);
    };
    return (n.responseType = "text", n);
  }
  function O(e, n) {
    return (n.header && (e = n.header.map(t.stringValue).join(n.delimiter) + "\n" + e), A(n.delimiter).parse(e + ""));
  }
  function P(e, n) {
    const r = n && n.property ? t.field(n.property) : t.identity;
    return !t.isObject(e) || (o = e, "function" == typeof Buffer && t.isFunction(Buffer.isBuffer) && Buffer.isBuffer(o)) ? r(JSON.parse(e)) : (function (e, n) {
      !t.isArray(e) && t.isIterable(e) && (e = [...e]);
      return n && n.copy ? JSON.parse(JSON.stringify(e)) : e;
    })(r(e), n);
    var o;
  }
  function k(e) {
    return e;
  }
  function E(e, t) {
    return ("string" == typeof t && (t = e.objects[t]), "GeometryCollection" === t.type ? {
      type: "FeatureCollection",
      features: t.geometries.map(function (t) {
        return S(e, t);
      })
    } : S(e, t));
  }
  function S(e, t) {
    var n = t.id, r = t.bbox, o = null == t.properties ? {} : t.properties, i = F(e, t);
    return null == n && null == r ? {
      type: "Feature",
      properties: o,
      geometry: i
    } : null == r ? {
      type: "Feature",
      id: n,
      properties: o,
      geometry: i
    } : {
      type: "Feature",
      id: n,
      bbox: r,
      properties: o,
      geometry: i
    };
  }
  function F(e, t) {
    var n = (function (e) {
      if (null == e) return k;
      var t, n, r = e.scale[0], o = e.scale[1], i = e.translate[0], a = e.translate[1];
      return function (e, u) {
        u || (t = n = 0);
        var s = 2, c = e.length, f = new Array(c);
        for ((f[0] = (t += e[0]) * r + i, f[1] = (n += e[1]) * o + a); s < c; ) (f[s] = e[s], ++s);
        return f;
      };
    })(e.transform), r = e.arcs;
    function o(e, t) {
      t.length && t.pop();
      for (var o = r[e < 0 ? ~e : e], i = 0, a = o.length; i < a; ++i) t.push(n(o[i], i));
      e < 0 && (function (e, t) {
        for (var n, r = e.length, o = r - t; o < --r; ) (n = e[o], e[o++] = e[r], e[r] = n);
      })(t, a);
    }
    function i(e) {
      return n(e);
    }
    function a(e) {
      for (var t = [], n = 0, r = e.length; n < r; ++n) o(e[n], t);
      return (t.length < 2 && t.push(t[0]), t);
    }
    function u(e) {
      for (var t = a(e); t.length < 4; ) t.push(t[0]);
      return t;
    }
    function s(e) {
      return e.map(u);
    }
    return (function e(t) {
      var n, r = t.type;
      switch (r) {
        case "GeometryCollection":
          return {
            type: r,
            geometries: t.geometries.map(e)
          };
        case "Point":
          n = i(t.coordinates);
          break;
        case "MultiPoint":
          n = t.coordinates.map(i);
          break;
        case "LineString":
          n = a(t.arcs);
          break;
        case "MultiLineString":
          n = t.arcs.map(a);
          break;
        case "Polygon":
          n = s(t.arcs);
          break;
        case "MultiPolygon":
          n = t.arcs.map(s);
          break;
        default:
          return null;
      }
      return {
        type: r,
        coordinates: n
      };
    })(t);
  }
  function M(e, t) {
    var n = {}, r = {}, o = {}, i = [], a = -1;
    function u(e, t) {
      for (var r in e) {
        var o = e[r];
        (delete t[o.start], delete o.start, delete o.end, o.forEach(function (e) {
          n[e < 0 ? ~e : e] = 1;
        }), i.push(o));
      }
    }
    return (t.forEach(function (n, r) {
      var o, i = e.arcs[n < 0 ? ~n : n];
      i.length < 3 && !i[1][0] && !i[1][1] && (o = t[++a], t[a] = n, t[r] = o);
    }), t.forEach(function (t) {
      var n, i, a = (function (t) {
        var n, r = e.arcs[t < 0 ? ~t : t], o = r[0];
        e.transform ? (n = [0, 0], r.forEach(function (e) {
          (n[0] += e[0], n[1] += e[1]);
        })) : n = r[r.length - 1];
        return t < 0 ? [n, o] : [o, n];
      })(t), u = a[0], s = a[1];
      if (n = o[u]) if ((delete o[n.end], n.push(t), n.end = s, i = r[s])) {
        delete r[i.start];
        var c = i === n ? n : n.concat(i);
        r[c.start = n.start] = o[c.end = i.end] = c;
      } else r[n.start] = o[n.end] = n; else if (n = r[s]) if ((delete r[n.start], n.unshift(t), n.start = u, i = o[u])) {
        delete o[i.end];
        var f = i === n ? n : i.concat(n);
        r[f.start = i.start] = o[f.end = n.end] = f;
      } else r[n.start] = o[n.end] = n; else r[(n = [t]).start = u] = o[n.end = s] = n;
    }), u(o, r), u(r, o), t.forEach(function (e) {
      n[e < 0 ? ~e : e] || i.push([e]);
    }), i);
  }
  function U(e) {
    return F(e, z.apply(this, arguments));
  }
  function z(e, t, n) {
    var r, o, i;
    if (arguments.length > 1) r = B(e, t, n); else for ((o = 0, r = new Array(i = e.arcs.length)); o < i; ++o) r[o] = o;
    return {
      type: "MultiLineString",
      arcs: M(e, r)
    };
  }
  function B(e, t, n) {
    var r, o = [], i = [];
    function a(e) {
      var t = e < 0 ? ~e : e;
      (i[t] || (i[t] = [])).push({
        i: e,
        g: r
      });
    }
    function u(e) {
      e.forEach(a);
    }
    function s(e) {
      e.forEach(u);
    }
    return ((function e(t) {
      switch ((r = t, t.type)) {
        case "GeometryCollection":
          t.geometries.forEach(e);
          break;
        case "LineString":
          u(t.arcs);
          break;
        case "MultiLineString":
        case "Polygon":
          s(t.arcs);
          break;
        case "MultiPolygon":
          !(function (e) {
            e.forEach(s);
          })(t.arcs);
      }
    })(t), i.forEach(null == n ? function (e) {
      o.push(e[0].i);
    } : function (e) {
      n(e[0].g, e[e.length - 1].g) && o.push(e[0].i);
    }), o);
  }
  (O.responseType = "text", P.responseType = "json");
  const D = {
    interior: (e, t) => e !== t,
    exterior: (e, t) => e === t
  };
  function L(e, n) {
    let r, o, i, a;
    return (e = P(e, n), n && n.feature ? (r = E, i = n.feature) : n && n.mesh ? (r = U, i = n.mesh, a = D[n.filter]) : t.error("Missing TopoJSON feature or mesh parameter."), o = (o = e.objects[i]) ? r(e, o, a) : t.error("Invalid TopoJSON object: " + i), o && o.features || [o]);
  }
  L.responseType = "json";
  const I = {
    dsv: O,
    csv: x(","),
    tsv: x("\t"),
    json: P,
    topojson: L
  };
  function J(e, n) {
    return arguments.length > 1 ? (I[e] = n, this) : t.hasOwnProperty(I, e) ? I[e] : null;
  }
  const R = (function (e, t) {
    return n => ({
      options: n || ({}),
      sanitize: s,
      load: u,
      fileAccess: !!t,
      file: c(t),
      http: l(e)
    });
  })("undefined" != typeof fetch && fetch, null);
  (e.format = I, e.formats = J, e.inferType = y, e.inferTypes = v, e.loader = R, e.read = function (e, r, o, i) {
    const a = J((r = r || ({})).type || "json");
    return (a || t.error("Unknown data format type: " + r.type), e = a(e, r), r.parse && (function (e, t, r, o) {
      if (!e.length) return;
      const i = n.timeFormatDefaultLocale();
      (r = r || i.timeParse, o = o || i.utcParse);
      let a, u, s, c, f, l, p = e.columns || Object.keys(e[0]);
      "auto" === t && (t = v(e, p));
      p = Object.keys(t);
      const h = p.map(e => {
        const n = t[e];
        let i, a;
        if (n && (n.startsWith("date:") || n.startsWith("utc:"))) {
          (i = n.split(/:(.+)?/, 2), a = i[1], ("'" === a[0] && "'" === a[a.length - 1] || '"' === a[0] && '"' === a[a.length - 1]) && (a = a.slice(1, -1)));
          return ("utc" === i[0] ? o : r)(a);
        }
        if (!d[n]) throw Error("Illegal format pattern: " + e + ":" + n);
        return d[n];
      });
      for ((s = 0, f = e.length, l = p.length); s < f; ++s) for ((a = e[s], c = 0); c < l; ++c) (u = p[c], a[u] = h[c](a[u]));
    })(e, r.parse, o, i), t.hasOwnProperty(e, "columns") && delete e.columns, e);
  }, e.responseType = function (e) {
    const t = J(e);
    return t && t.responseType || "text";
  }, e.typeParsers = d, Object.defineProperty(e, "__esModule", {
    value: !0
  }));
});

},{"buffer":"3susO","vega-util":"4BD5d","vega-format":"2s7uE"}],"3susO":[function(require,module,exports) {
/*!
* The buffer module from node.js, for the browser.
*
* @author   Feross Aboukhadijeh <https://feross.org>
* @license  MIT
*/
/*eslint-disable no-proto*/
"use strict";
var base64 = require('base64-js');
var ieee754 = require('ieee754');
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? // eslint-disable-line dot-notation
Symbol['for']('nodejs.util.inspect.custom') : // eslint-disable-line dot-notation
null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
* If `Buffer.TYPED_ARRAY_SUPPORT`:
*   === true    Use Uint8Array implementation (fastest)
*   === false   Print warning and recommend using `buffer` v4.x which has an Object
*               implementation (most compatible, even IE6)
*
* Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
* Opera 11.6+, iOS 4.2+.
*
* We report that the browser does not support typed arrays if the are not subclassable
* using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
* (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
* for __proto__ and has a buggy typed array implementation.
*/
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}
function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    var proto = {
      foo: function () {
        return 42;
      }
    };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}
Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});
function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}
/**
* The Buffer constructor returns instances of `Uint8Array` that have their
* prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
* `Uint8Array`, so the returned instances will have all the node `Buffer` methods
* and the `Uint8Array` methods. Square bracket notation works as expected -- it
* returns a single octet.
*
* The `Uint8Array` prototype remains unmodified.
*/
function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }
    return allocUnsafe(arg);
  }
  return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192;
// not used by this implementation
function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }
  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value);
  }
  if (value == null) {
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
  }
  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }
  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }
  var valueOf = value.valueOf && value.valueOf();
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }
  var b = fromObject(value);
  if (b) return b;
  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }
  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
}
/**
* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
* if value is a number.
* Buffer.from(str[, encoding])
* Buffer.from(array)
* Buffer.from(buffer)
* Buffer.from(arrayBuffer[, byteOffset[, length]])
**/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}
function alloc(size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }
  return createBuffer(size);
}
/**
* Creates a new filled Buffer instance.
* alloc(size[, fill[, encoding]])
**/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
**/
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
*/
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};
function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }
  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }
  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);
  var actual = buf.write(string, encoding);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }
  return buf;
}
function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf;
}
function fromArrayView(arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
  }
  return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }
  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}
function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);
    if (buf.length === 0) {
      return buf;
    }
    obj.copy(buf, 0, 0, len);
    return buf;
  }
  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }
    return fromArrayLike(obj);
  }
  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}
function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }
  return length | 0;
}
function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype;
};
Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }
  if (a === b) return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};
Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer.alloc(0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        Buffer.from(buf).copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(buffer, buf, pos);
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    } else {
      buf.copy(buffer, pos);
    }
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
  }
  var len = string.length;
  var mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0;
  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length;
        }
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }
  if (end === undefined || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return '';
  }
  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return '';
  }
  if (!encoding) encoding = 'utf8';
  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);
      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);
      case 'ascii':
        return asciiSlice(this, start, end);
      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);
      case 'base64':
        return base64Slice(this, start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};
Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};
Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};
Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
  }
  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
// 
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;
  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;
  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1; else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0; else return -1;
  }
  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }
  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF;
    // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }
  return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  if (!encoding) encoding = 'utf8';
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);
      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);
      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length);
      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype);
  return newBuf;
};
/*
* Need to make sure that buffer isn't trying to write out of bounds.
*/
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }
  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }
  return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }
  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }
  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }
  return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;
  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;
  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');
  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }
  return len;
};
// Usage:
// buffer.fill(number[, offset[, end]])
// buffer.fill(buffer[, offset[, end]])
// buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  }
  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    var len = bytes.length;
    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0];
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }
        // valid lead
        leadSurrogate = codePoint;
        continue;
      }
      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }
      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;
    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef';
  var table = new Array(256);
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16;
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }
  return table;
})();

},{"base64-js":"6UXZh","ieee754":"6YlQP"}],"6UXZh":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"6YlQP":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"2s7uE":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-format'), require('vega-time'), require('vega-util'), require('d3-time-format')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-format', 'vega-time', 'vega-util', 'd3-time-format'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3, global.d3, global.vega, global.vega, global.d3));
})(this, function (exports, d3Array, d3Format, vegaTime, vegaUtil, d3TimeFormat) {
  "use strict";
  function memoize(method) {
    const cache = {};
    return spec => cache[spec] || (cache[spec] = method(spec));
  }
  function trimZeroes(numberFormat, decimalChar) {
    return x => {
      const str = numberFormat(x), dec = str.indexOf(decimalChar);
      if (dec < 0) return str;
      let idx = rightmostDigit(str, dec);
      const end = idx < str.length ? str.slice(idx) : '';
      while (--idx > dec) if (str[idx] !== '0') {
        ++idx;
        break;
      }
      return str.slice(0, idx) + end;
    };
  }
  function rightmostDigit(str, dec) {
    let i = str.lastIndexOf('e'), c;
    if (i > 0) return i;
    for (i = str.length; --i > dec; ) {
      c = str.charCodeAt(i);
      if (c >= 48 && c <= 57) return i + 1;
    }
  }
  function numberLocale(locale) {
    const format = memoize(locale.format), formatPrefix = locale.formatPrefix;
    return {
      format,
      formatPrefix,
      formatFloat(spec) {
        const s = d3Format.formatSpecifier(spec || ',');
        if (s.precision == null) {
          s.precision = 12;
          switch (s.type) {
            case '%':
              s.precision -= 2;
              break;
            case 'e':
              s.precision -= 1;
              break;
          }
          return trimZeroes(format(s), // number format
          format('.1f')(1)[1]);
        } else {
          return format(s);
        }
      },
      formatSpan(start, stop, count, specifier) {
        specifier = d3Format.formatSpecifier(specifier == null ? ',f' : specifier);
        const step = d3Array.tickStep(start, stop, count), value = Math.max(Math.abs(start), Math.abs(stop));
        let precision;
        if (specifier.precision == null) {
          switch (specifier.type) {
            case 's':
              {
                if (!isNaN(precision = d3Format.precisionPrefix(step, value))) {
                  specifier.precision = precision;
                }
                return formatPrefix(specifier, value);
              }
            case '':
            case 'e':
            case 'g':
            case 'p':
            case 'r':
              {
                if (!isNaN(precision = d3Format.precisionRound(step, value))) {
                  specifier.precision = precision - (specifier.type === 'e');
                }
                break;
              }
            case 'f':
            case '%':
              {
                if (!isNaN(precision = d3Format.precisionFixed(step))) {
                  specifier.precision = precision - (specifier.type === '%') * 2;
                }
                break;
              }
          }
        }
        return format(specifier);
      }
    };
  }
  let defaultNumberLocale;
  resetNumberFormatDefaultLocale();
  function resetNumberFormatDefaultLocale() {
    return defaultNumberLocale = numberLocale({
      format: d3Format.format,
      formatPrefix: d3Format.formatPrefix
    });
  }
  function numberFormatLocale(definition) {
    return numberLocale(d3Format.formatLocale(definition));
  }
  function numberFormatDefaultLocale(definition) {
    return arguments.length ? defaultNumberLocale = numberFormatLocale(definition) : defaultNumberLocale;
  }
  function timeMultiFormat(format, interval, spec) {
    spec = spec || ({});
    if (!vegaUtil.isObject(spec)) {
      vegaUtil.error(`Invalid time multi-format specifier: ${spec}`);
    }
    const second = interval(vegaTime.SECONDS), minute = interval(vegaTime.MINUTES), hour = interval(vegaTime.HOURS), day = interval(vegaTime.DATE), week = interval(vegaTime.WEEK), month = interval(vegaTime.MONTH), quarter = interval(vegaTime.QUARTER), year = interval(vegaTime.YEAR), L = format(spec[vegaTime.MILLISECONDS] || '.%L'), S = format(spec[vegaTime.SECONDS] || ':%S'), M = format(spec[vegaTime.MINUTES] || '%I:%M'), H = format(spec[vegaTime.HOURS] || '%I %p'), d = format(spec[vegaTime.DATE] || spec[vegaTime.DAY] || '%a %d'), w = format(spec[vegaTime.WEEK] || '%b %d'), m = format(spec[vegaTime.MONTH] || '%B'), q = format(spec[vegaTime.QUARTER] || '%B'), y = format(spec[vegaTime.YEAR] || '%Y');
    return date => (second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);
  }
  function timeLocale(locale) {
    const timeFormat = memoize(locale.format), utcFormat = memoize(locale.utcFormat);
    return {
      timeFormat: spec => vegaUtil.isString(spec) ? timeFormat(spec) : timeMultiFormat(timeFormat, vegaTime.timeInterval, spec),
      utcFormat: spec => vegaUtil.isString(spec) ? utcFormat(spec) : timeMultiFormat(utcFormat, vegaTime.utcInterval, spec),
      timeParse: memoize(locale.parse),
      utcParse: memoize(locale.utcParse)
    };
  }
  let defaultTimeLocale;
  resetTimeFormatDefaultLocale();
  function resetTimeFormatDefaultLocale() {
    return defaultTimeLocale = timeLocale({
      format: d3TimeFormat.timeFormat,
      parse: d3TimeFormat.timeParse,
      utcFormat: d3TimeFormat.utcFormat,
      utcParse: d3TimeFormat.utcParse
    });
  }
  function timeFormatLocale(definition) {
    return timeLocale(d3TimeFormat.timeFormatLocale(definition));
  }
  function timeFormatDefaultLocale(definition) {
    return arguments.length ? defaultTimeLocale = timeFormatLocale(definition) : defaultTimeLocale;
  }
  const createLocale = (number, time) => vegaUtil.extend({}, number, time);
  function locale(numberSpec, timeSpec) {
    const number = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();
    const time = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();
    return createLocale(number, time);
  }
  function defaultLocale(numberSpec, timeSpec) {
    const args = arguments.length;
    if (args && args !== 2) {
      vegaUtil.error('defaultLocale expects either zero or two arguments.');
    }
    return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());
  }
  function resetDefaultLocale() {
    resetNumberFormatDefaultLocale();
    resetTimeFormatDefaultLocale();
    return defaultLocale();
  }
  exports.defaultLocale = defaultLocale;
  exports.locale = locale;
  exports.numberFormatDefaultLocale = numberFormatDefaultLocale;
  exports.numberFormatLocale = numberFormatLocale;
  exports.resetDefaultLocale = resetDefaultLocale;
  exports.resetNumberFormatDefaultLocale = resetNumberFormatDefaultLocale;
  exports.resetTimeFormatDefaultLocale = resetTimeFormatDefaultLocale;
  exports.timeFormatDefaultLocale = timeFormatDefaultLocale;
  exports.timeFormatLocale = timeFormatLocale;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA","d3-format":"3Bu0B","vega-time":"2Sl4A","vega-util":"4BD5d","d3-time-format":"13ygP"}],"2Sl4A":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('d3-time'), require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'd3-time', 'd3-array'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.d3, global.d3));
})(this, function (exports, vegaUtil, d3Time, d3Array) {
  "use strict";
  const YEAR = 'year';
  const QUARTER = 'quarter';
  const MONTH = 'month';
  const WEEK = 'week';
  const DATE = 'date';
  const DAY = 'day';
  const DAYOFYEAR = 'dayofyear';
  const HOURS = 'hours';
  const MINUTES = 'minutes';
  const SECONDS = 'seconds';
  const MILLISECONDS = 'milliseconds';
  const TIME_UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, DAYOFYEAR, HOURS, MINUTES, SECONDS, MILLISECONDS];
  const UNITS = TIME_UNITS.reduce((o, u, i) => (o[u] = 1 + i, o), {});
  function timeUnits(units) {
    const u = vegaUtil.array(units).slice(), m = {};
    // check validity
    if (!u.length) vegaUtil.error('Missing time unit.');
    u.forEach(unit => {
      if (vegaUtil.hasOwnProperty(UNITS, unit)) {
        m[unit] = 1;
      } else {
        vegaUtil.error(`Invalid time unit: ${unit}.`);
      }
    });
    const numTypes = (m[WEEK] || m[DAY] ? 1 : 0) + (m[QUARTER] || m[MONTH] || m[DATE] ? 1 : 0) + (m[DAYOFYEAR] ? 1 : 0);
    if (numTypes > 1) {
      vegaUtil.error(`Incompatible time units: ${units}`);
    }
    // ensure proper sort order
    u.sort((a, b) => UNITS[a] - UNITS[b]);
    return u;
  }
  const defaultSpecifiers = {
    [YEAR]: '%Y ',
    [QUARTER]: 'Q%q ',
    [MONTH]: '%b ',
    [DATE]: '%d ',
    [WEEK]: 'W%U ',
    [DAY]: '%a ',
    [DAYOFYEAR]: '%j ',
    [HOURS]: '%H:00',
    [MINUTES]: '00:%M',
    [SECONDS]: ':%S',
    [MILLISECONDS]: '.%L',
    [`${YEAR}-${MONTH}`]: '%Y-%m ',
    [`${YEAR}-${MONTH}-${DATE}`]: '%Y-%m-%d ',
    [`${HOURS}-${MINUTES}`]: '%H:%M'
  };
  function timeUnitSpecifier(units, specifiers) {
    const s = vegaUtil.extend({}, defaultSpecifiers, specifiers), u = timeUnits(units), n = u.length;
    let fmt = '', start = 0, end, key;
    for (start = 0; start < n; ) {
      for (end = u.length; end > start; --end) {
        key = u.slice(start, end).join('-');
        if (s[key] != null) {
          fmt += s[key];
          start = end;
          break;
        }
      }
    }
    return fmt.trim();
  }
  const t0 = new Date();
  function localYear(y) {
    t0.setFullYear(y);
    t0.setMonth(0);
    t0.setDate(1);
    t0.setHours(0, 0, 0, 0);
    return t0;
  }
  function dayofyear(d) {
    return localDayOfYear(new Date(d));
  }
  function week(d) {
    return localWeekNum(new Date(d));
  }
  function localDayOfYear(d) {
    return d3Time.timeDay.count(localYear(d.getFullYear()) - 1, d);
  }
  function localWeekNum(d) {
    return d3Time.timeWeek.count(localYear(d.getFullYear()) - 1, d);
  }
  function localFirst(y) {
    return localYear(y).getDay();
  }
  function localDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
      const date = new Date(-1, m, d, H, M, S, L);
      date.setFullYear(y);
      return date;
    }
    return new Date(y, m, d, H, M, S, L);
  }
  function utcdayofyear(d) {
    return utcDayOfYear(new Date(d));
  }
  function utcweek(d) {
    return utcWeekNum(new Date(d));
  }
  function utcDayOfYear(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return d3Time.utcDay.count(y - 1, d);
  }
  function utcWeekNum(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return d3Time.utcWeek.count(y - 1, d);
  }
  function utcFirst(y) {
    t0.setTime(Date.UTC(y, 0, 1));
    return t0.getUTCDay();
  }
  function utcDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
      const date = new Date(Date.UTC(-1, m, d, H, M, S, L));
      date.setUTCFullYear(d.y);
      return date;
    }
    return new Date(Date.UTC(y, m, d, H, M, S, L));
  }
  function floor(units, step, get, inv, newDate) {
    const s = step || 1, b = vegaUtil.peek(units), _ = (unit, p, key) => {
      key = key || unit;
      return getUnit(get[key], inv[key], unit === b && s, p);
    };
    const t = new Date(), u = vegaUtil.toSet(units), y = u[YEAR] ? _(YEAR) : vegaUtil.constant(2012), m = u[MONTH] ? _(MONTH) : u[QUARTER] ? _(QUARTER) : vegaUtil.zero, d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY) : u[WEEK] ? _(WEEK, 1) : u[DAY] ? _(DAY, 1) : u[DATE] ? _(DATE, 1) : u[DAYOFYEAR] ? _(DAYOFYEAR, 1) : vegaUtil.one, H = u[HOURS] ? _(HOURS) : vegaUtil.zero, M = u[MINUTES] ? _(MINUTES) : vegaUtil.zero, S = u[SECONDS] ? _(SECONDS) : vegaUtil.zero, L = u[MILLISECONDS] ? _(MILLISECONDS) : vegaUtil.zero;
    return function (v) {
      t.setTime(+v);
      const year = y(t);
      return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));
    };
  }
  function getUnit(f, inv, step, phase) {
    const u = step <= 1 ? f : phase ? (d, y) => phase + step * Math.floor((f(d, y) - phase) / step) : (d, y) => step * Math.floor(f(d, y) / step);
    return inv ? (d, y) => inv(u(d, y), y) : u;
  }
  // returns the day of the year based on week number, day of week,
  // and the day of the week for the first day of the year
  function weekday(week, day, firstDay) {
    return day + week * 7 - (firstDay + 6) % 7;
  }
  // -- LOCAL TIME --
  const localGet = {
    [YEAR]: d => d.getFullYear(),
    [QUARTER]: d => Math.floor(d.getMonth() / 3),
    [MONTH]: d => d.getMonth(),
    [DATE]: d => d.getDate(),
    [HOURS]: d => d.getHours(),
    [MINUTES]: d => d.getMinutes(),
    [SECONDS]: d => d.getSeconds(),
    [MILLISECONDS]: d => d.getMilliseconds(),
    [DAYOFYEAR]: d => localDayOfYear(d),
    [WEEK]: d => localWeekNum(d),
    [WEEK + DAY]: (d, y) => weekday(localWeekNum(d), d.getDay(), localFirst(y)),
    [DAY]: (d, y) => weekday(1, d.getDay(), localFirst(y))
  };
  const localInv = {
    [QUARTER]: q => 3 * q,
    [WEEK]: (w, y) => weekday(w, 0, localFirst(y))
  };
  function timeFloor(units, step) {
    return floor(units, step || 1, localGet, localInv, localDate);
  }
  // -- UTC TIME --
  const utcGet = {
    [YEAR]: d => d.getUTCFullYear(),
    [QUARTER]: d => Math.floor(d.getUTCMonth() / 3),
    [MONTH]: d => d.getUTCMonth(),
    [DATE]: d => d.getUTCDate(),
    [HOURS]: d => d.getUTCHours(),
    [MINUTES]: d => d.getUTCMinutes(),
    [SECONDS]: d => d.getUTCSeconds(),
    [MILLISECONDS]: d => d.getUTCMilliseconds(),
    [DAYOFYEAR]: d => utcDayOfYear(d),
    [WEEK]: d => utcWeekNum(d),
    [DAY]: (d, y) => weekday(1, d.getUTCDay(), utcFirst(y)),
    [WEEK + DAY]: (d, y) => weekday(utcWeekNum(d), d.getUTCDay(), utcFirst(y))
  };
  const utcInv = {
    [QUARTER]: q => 3 * q,
    [WEEK]: (w, y) => weekday(w, 0, utcFirst(y))
  };
  function utcFloor(units, step) {
    return floor(units, step || 1, utcGet, utcInv, utcDate);
  }
  const timeIntervals = {
    [YEAR]: d3Time.timeYear,
    [QUARTER]: d3Time.timeMonth.every(3),
    [MONTH]: d3Time.timeMonth,
    [WEEK]: d3Time.timeWeek,
    [DATE]: d3Time.timeDay,
    [DAY]: d3Time.timeDay,
    [DAYOFYEAR]: d3Time.timeDay,
    [HOURS]: d3Time.timeHour,
    [MINUTES]: d3Time.timeMinute,
    [SECONDS]: d3Time.timeSecond,
    [MILLISECONDS]: d3Time.timeMillisecond
  };
  const utcIntervals = {
    [YEAR]: d3Time.utcYear,
    [QUARTER]: d3Time.utcMonth.every(3),
    [MONTH]: d3Time.utcMonth,
    [WEEK]: d3Time.utcWeek,
    [DATE]: d3Time.utcDay,
    [DAY]: d3Time.utcDay,
    [DAYOFYEAR]: d3Time.utcDay,
    [HOURS]: d3Time.utcHour,
    [MINUTES]: d3Time.utcMinute,
    [SECONDS]: d3Time.utcSecond,
    [MILLISECONDS]: d3Time.utcMillisecond
  };
  function timeInterval(unit) {
    return timeIntervals[unit];
  }
  function utcInterval(unit) {
    return utcIntervals[unit];
  }
  function offset(ival, date, step) {
    return ival ? ival.offset(date, step) : undefined;
  }
  function timeOffset(unit, date, step) {
    return offset(timeInterval(unit), date, step);
  }
  function utcOffset(unit, date, step) {
    return offset(utcInterval(unit), date, step);
  }
  function sequence(ival, start, stop, step) {
    return ival ? ival.range(start, stop, step) : undefined;
  }
  function timeSequence(unit, start, stop, step) {
    return sequence(timeInterval(unit), start, stop, step);
  }
  function utcSequence(unit, start, stop, step) {
    return sequence(utcInterval(unit), start, stop, step);
  }
  const durationSecond = 1000, durationMinute = durationSecond * 60, durationHour = durationMinute * 60, durationDay = durationHour * 24, durationWeek = durationDay * 7, durationMonth = durationDay * 30, durationYear = durationDay * 365;
  const Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS], Seconds = Milli.slice(0, -1), Minutes = Seconds.slice(0, -1), Hours = Minutes.slice(0, -1), Day = Hours.slice(0, -1), Week = [YEAR, WEEK], Month = [YEAR, MONTH], Year = [YEAR];
  const intervals = [[Seconds, 1, durationSecond], [Seconds, 5, 5 * durationSecond], [Seconds, 15, 15 * durationSecond], [Seconds, 30, 30 * durationSecond], [Minutes, 1, durationMinute], [Minutes, 5, 5 * durationMinute], [Minutes, 15, 15 * durationMinute], [Minutes, 30, 30 * durationMinute], [Hours, 1, durationHour], [Hours, 3, 3 * durationHour], [Hours, 6, 6 * durationHour], [Hours, 12, 12 * durationHour], [Day, 1, durationDay], [Week, 1, durationWeek], [Month, 1, durationMonth], [Month, 3, 3 * durationMonth], [Year, 1, durationYear]];
  function bin(opt) {
    const ext = opt.extent, max = opt.maxbins || 40, target = Math.abs(vegaUtil.span(ext)) / max;
    let i = d3Array.bisector(i => i[2]).right(intervals, target), units, step;
    if (i === intervals.length) {
      (units = Year, step = d3Array.tickStep(ext[0] / durationYear, ext[1] / durationYear, max));
    } else if (i) {
      i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];
      units = i[0];
      step = i[1];
    } else {
      units = Milli;
      step = Math.max(d3Array.tickStep(ext[0], ext[1], max), 1);
    }
    return {
      units,
      step
    };
  }
  exports.DATE = DATE;
  exports.DAY = DAY;
  exports.DAYOFYEAR = DAYOFYEAR;
  exports.HOURS = HOURS;
  exports.MILLISECONDS = MILLISECONDS;
  exports.MINUTES = MINUTES;
  exports.MONTH = MONTH;
  exports.QUARTER = QUARTER;
  exports.SECONDS = SECONDS;
  exports.TIME_UNITS = TIME_UNITS;
  exports.WEEK = WEEK;
  exports.YEAR = YEAR;
  exports.dayofyear = dayofyear;
  exports.timeBin = bin;
  exports.timeFloor = timeFloor;
  exports.timeInterval = timeInterval;
  exports.timeOffset = timeOffset;
  exports.timeSequence = timeSequence;
  exports.timeUnitSpecifier = timeUnitSpecifier;
  exports.timeUnits = timeUnits;
  exports.utcFloor = utcFloor;
  exports.utcInterval = utcInterval;
  exports.utcOffset = utcOffset;
  exports.utcSequence = utcSequence;
  exports.utcdayofyear = utcdayofyear;
  exports.utcweek = utcweek;
  exports.week = week;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","d3-time":"JGVPX","d3-array":"7CLUA"}],"5jusq":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array'), require('vega-time')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array', 'vega-time'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.d3, global.vega));
})(this, function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array, vegaTime) {
  "use strict";
  function multikey(f) {
    return x => {
      const n = f.length;
      let i = 1, k = String(f[0](x));
      for (; i < n; ++i) {
        k += '|' + f[i](x);
      }
      return k;
    };
  }
  function groupkey(fields) {
    return !fields || !fields.length ? function () {
      return '';
    } : fields.length === 1 ? fields[0] : multikey(fields);
  }
  function measureName(op, field, as) {
    return as || op + (!field ? '' : '_' + field);
  }
  const noop = () => {};
  const base_op = {
    init: noop,
    add: noop,
    rem: noop,
    idx: 0
  };
  const AggregateOps = {
    values: {
      init: m => m.cell.store = true,
      value: m => m.cell.data.values(),
      idx: -1
    },
    count: {
      value: m => m.cell.num
    },
    __count__: {
      value: m => m.missing + m.valid
    },
    missing: {
      value: m => m.missing
    },
    valid: {
      value: m => m.valid
    },
    sum: {
      init: m => m.sum = 0,
      value: m => m.sum,
      add: (m, v) => m.sum += +v,
      rem: (m, v) => m.sum -= v
    },
    product: {
      init: m => m.product = 1,
      value: m => m.valid ? m.product : undefined,
      add: (m, v) => m.product *= v,
      rem: (m, v) => m.product /= v
    },
    mean: {
      init: m => m.mean = 0,
      value: m => m.valid ? m.mean : undefined,
      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),
      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)
    },
    average: {
      value: m => m.valid ? m.mean : undefined,
      req: ['mean'],
      idx: 1
    },
    variance: {
      init: m => m.dev = 0,
      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,
      add: (m, v) => m.dev += m.mean_d * (v - m.mean),
      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),
      req: ['mean'],
      idx: 1
    },
    variancep: {
      value: m => m.valid > 1 ? m.dev / m.valid : undefined,
      req: ['variance'],
      idx: 2
    },
    stdev: {
      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,
      req: ['variance'],
      idx: 2
    },
    stdevp: {
      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,
      req: ['variance'],
      idx: 2
    },
    stderr: {
      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,
      req: ['variance'],
      idx: 2
    },
    distinct: {
      value: m => m.cell.data.distinct(m.get),
      req: ['values'],
      idx: 3
    },
    ci0: {
      value: m => m.cell.data.ci0(m.get),
      req: ['values'],
      idx: 3
    },
    ci1: {
      value: m => m.cell.data.ci1(m.get),
      req: ['values'],
      idx: 3
    },
    median: {
      value: m => m.cell.data.q2(m.get),
      req: ['values'],
      idx: 3
    },
    q1: {
      value: m => m.cell.data.q1(m.get),
      req: ['values'],
      idx: 3
    },
    q3: {
      value: m => m.cell.data.q3(m.get),
      req: ['values'],
      idx: 3
    },
    min: {
      init: m => m.min = undefined,
      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,
      add: (m, v) => {
        if (v < m.min || m.min === undefined) m.min = v;
      },
      rem: (m, v) => {
        if (v <= m.min) m.min = NaN;
      },
      req: ['values'],
      idx: 4
    },
    max: {
      init: m => m.max = undefined,
      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,
      add: (m, v) => {
        if (v > m.max || m.max === undefined) m.max = v;
      },
      rem: (m, v) => {
        if (v >= m.max) m.max = NaN;
      },
      req: ['values'],
      idx: 4
    },
    argmin: {
      init: m => m.argmin = undefined,
      value: m => m.argmin || m.cell.data.argmin(m.get),
      add: (m, v, t) => {
        if (v < m.min) m.argmin = t;
      },
      rem: (m, v) => {
        if (v <= m.min) m.argmin = undefined;
      },
      req: ['min', 'values'],
      idx: 3
    },
    argmax: {
      init: m => m.argmax = undefined,
      value: m => m.argmax || m.cell.data.argmax(m.get),
      add: (m, v, t) => {
        if (v > m.max) m.argmax = t;
      },
      rem: (m, v) => {
        if (v >= m.max) m.argmax = undefined;
      },
      req: ['max', 'values'],
      idx: 3
    }
  };
  const ValidAggregateOps = Object.keys(AggregateOps);
  function measure(key, value) {
    return out => vegaUtil.extend({
      name: key,
      out: out || key
    }, base_op, value);
  }
  ValidAggregateOps.forEach(key => {
    AggregateOps[key] = measure(key, AggregateOps[key]);
  });
  function createMeasure(op, name) {
    return AggregateOps[op](name);
  }
  function compareIndex(a, b) {
    return a.idx - b.idx;
  }
  function resolve(agg) {
    const map = {};
    agg.forEach(a => map[a.name] = a);
    const getreqs = a => {
      if (!a.req) return;
      a.req.forEach(key => {
        if (!map[key]) getreqs(map[key] = AggregateOps[key]());
      });
    };
    agg.forEach(getreqs);
    return Object.values(map).sort(compareIndex);
  }
  function init() {
    this.valid = 0;
    this.missing = 0;
    this._ops.forEach(op => op.init(this));
  }
  function add(v, t) {
    if (v == null || v === '') {
      ++this.missing;
      return;
    }
    if (v !== v) return;
    ++this.valid;
    this._ops.forEach(op => op.add(this, v, t));
  }
  function rem(v, t) {
    if (v == null || v === '') {
      --this.missing;
      return;
    }
    if (v !== v) return;
    --this.valid;
    this._ops.forEach(op => op.rem(this, v, t));
  }
  function set(t) {
    this._out.forEach(op => t[op.out] = op.value(this));
    return t;
  }
  function compileMeasures(agg, field) {
    const get = field || vegaUtil.identity, ops = resolve(agg), out = agg.slice().sort(compareIndex);
    function ctr(cell) {
      this._ops = ops;
      this._out = out;
      this.cell = cell;
      this.init();
    }
    ctr.prototype.init = init;
    ctr.prototype.add = add;
    ctr.prototype.rem = rem;
    ctr.prototype.set = set;
    ctr.prototype.get = get;
    ctr.fields = agg.map(op => op.out);
    return ctr;
  }
  function TupleStore(key) {
    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;
    this.reset();
  }
  const prototype$1 = TupleStore.prototype;
  prototype$1.reset = function () {
    this._add = [];
    this._rem = [];
    this._ext = null;
    this._get = null;
    this._q = null;
  };
  prototype$1.add = function (v) {
    this._add.push(v);
  };
  prototype$1.rem = function (v) {
    this._rem.push(v);
  };
  prototype$1.values = function () {
    this._get = null;
    if (this._rem.length === 0) return this._add;
    const a = this._add, r = this._rem, k = this._key, n = a.length, m = r.length, x = Array(n - m), map = {};
    let i, j, v;
    // use unique key field to clear removed values
    for (i = 0; i < m; ++i) {
      map[k(r[i])] = 1;
    }
    for ((i = 0, j = 0); i < n; ++i) {
      if (map[k(v = a[i])]) {
        map[k(v)] = 0;
      } else {
        x[j++] = v;
      }
    }
    this._rem = [];
    return this._add = x;
  };
  // memoizing statistics methods
  prototype$1.distinct = function (get) {
    const v = this.values(), map = {};
    let n = v.length, count = 0, s;
    while (--n >= 0) {
      s = get(v[n]) + '';
      if (!vegaUtil.hasOwnProperty(map, s)) {
        map[s] = 1;
        ++count;
      }
    }
    return count;
  };
  prototype$1.extent = function (get) {
    if (this._get !== get || !this._ext) {
      const v = this.values(), i = vegaUtil.extentIndex(v, get);
      this._ext = [v[i[0]], v[i[1]]];
      this._get = get;
    }
    return this._ext;
  };
  prototype$1.argmin = function (get) {
    return this.extent(get)[0] || ({});
  };
  prototype$1.argmax = function (get) {
    return this.extent(get)[1] || ({});
  };
  prototype$1.min = function (get) {
    const m = this.extent(get)[0];
    return m != null ? get(m) : undefined;
  };
  prototype$1.max = function (get) {
    const m = this.extent(get)[1];
    return m != null ? get(m) : undefined;
  };
  prototype$1.quartile = function (get) {
    if (this._get !== get || !this._q) {
      this._q = vegaStatistics.quartiles(this.values(), get);
      this._get = get;
    }
    return this._q;
  };
  prototype$1.q1 = function (get) {
    return this.quartile(get)[0];
  };
  prototype$1.q2 = function (get) {
    return this.quartile(get)[1];
  };
  prototype$1.q3 = function (get) {
    return this.quartile(get)[2];
  };
  prototype$1.ci = function (get) {
    if (this._get !== get || !this._ci) {
      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);
      this._get = get;
    }
    return this._ci;
  };
  prototype$1.ci0 = function (get) {
    return this.ci(get)[0];
  };
  prototype$1.ci1 = function (get) {
    return this.ci(get)[1];
  };
  /**
  * Group-by aggregation operator.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
  * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
  * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
  * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
  * @param {boolean} [params.cross=false] - A flag indicating that the full
  *   cross-product of groupby values should be generated, including empty cells.
  *   If true, the drop parameter is ignored and empty cells are retained.
  * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
  */
  function Aggregate(params) {
    vegaDataflow.Transform.call(this, null, params);
    this._adds = [];
    // array of added output tuples
    this._mods = [];
    // array of modified output tuples
    this._alen = 0;
    // number of active added tuples
    this._mlen = 0;
    // number of active modified tuples
    this._drop = true;
    // should empty aggregation cells be removed
    this._cross = false;
    // produce full cross-product of group-by values
    this._dims = [];
    // group-by dimension accessors
    this._dnames = [];
    // group-by dimension names
    this._measures = [];
    // collection of aggregation monoids
    this._countOnly = false;
    // flag indicating only count aggregation
    this._counts = null;
    // collection of count fields
    this._prev = null;
    // previous aggregation cells
    this._inputs = null;
    // array of dependent input tuple field names
    this._outputs = null;
  }
  Aggregate.Definition = {
    'type': 'Aggregate',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'ops',
      'type': 'enum',
      'array': true,
      'values': ValidAggregateOps
    }, {
      'name': 'fields',
      'type': 'field',
      'null': true,
      'array': true
    }, {
      'name': 'as',
      'type': 'string',
      'null': true,
      'array': true
    }, {
      'name': 'drop',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'cross',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'key',
      'type': 'field'
    }]
  };
  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {
    transform(_, pulse) {
      const aggr = this, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), mod = _.modified();
      aggr.stamp = out.stamp;
      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
        aggr._prev = aggr.value;
        aggr.value = mod ? aggr.init(_) : {};
        pulse.visit(pulse.SOURCE, t => aggr.add(t));
      } else {
        aggr.value = aggr.value || aggr.init(_);
        pulse.visit(pulse.REM, t => aggr.rem(t));
        pulse.visit(pulse.ADD, t => aggr.add(t));
      }
      // Indicate output fields and return aggregate tuples.
      out.modifies(aggr._outputs);
      // Should empty cells be dropped?
      aggr._drop = _.drop !== false;
      // If domain cross-product requested, generate empty cells as needed
      // and ensure that empty cells are not dropped
      if (_.cross && aggr._dims.length > 1) {
        aggr._drop = false;
        aggr.cross();
      }
      if (pulse.clean() && aggr._drop) {
        out.clean(true).runAfter(() => this.clean());
      }
      return aggr.changes(out);
    },
    cross() {
      const aggr = this, curr = aggr.value, dims = aggr._dnames, vals = dims.map(() => ({})), n = dims.length;
      // collect all group-by domain values
      function collect(cells) {
        let key, i, t, v;
        for (key in cells) {
          t = cells[key].tuple;
          for (i = 0; i < n; ++i) {
            vals[i][v = t[dims[i]]] = v;
          }
        }
      }
      collect(aggr._prev);
      collect(curr);
      // iterate over key cross-product, create cells as needed
      function generate(base, tuple, index) {
        const name = dims[index], v = vals[index++];
        for (const k in v) {
          const key = base ? base + '|' + k : k;
          tuple[name] = v[k];
          if (index < n) generate(key, tuple, index); else if (!curr[key]) aggr.cell(key, tuple);
        }
      }
      generate('', {}, 0);
    },
    init(_) {
      // initialize input and output fields
      const inputs = this._inputs = [], outputs = this._outputs = [], inputMap = {};
      function inputVisit(get) {
        const fields = vegaUtil.array(vegaUtil.accessorFields(get)), n = fields.length;
        let i = 0, f;
        for (; i < n; ++i) {
          if (!inputMap[f = fields[i]]) {
            inputMap[f] = 1;
            inputs.push(f);
          }
        }
      }
      // initialize group-by dimensions
      this._dims = vegaUtil.array(_.groupby);
      this._dnames = this._dims.map(d => {
        const dname = vegaUtil.accessorName(d);
        inputVisit(d);
        outputs.push(dname);
        return dname;
      });
      this.cellkey = _.key ? _.key : groupkey(this._dims);
      // initialize aggregate measures
      this._countOnly = true;
      this._counts = [];
      this._measures = [];
      const fields = _.fields || [null], ops = _.ops || ['count'], as = _.as || [], n = fields.length, map = {};
      let field, op, m, mname, outname, i;
      if (n !== ops.length) {
        vegaUtil.error('Unmatched number of fields and aggregate ops.');
      }
      for (i = 0; i < n; ++i) {
        field = fields[i];
        op = ops[i];
        if (field == null && op !== 'count') {
          vegaUtil.error('Null aggregate field specified.');
        }
        mname = vegaUtil.accessorName(field);
        outname = measureName(op, mname, as[i]);
        outputs.push(outname);
        if (op === 'count') {
          this._counts.push(outname);
          continue;
        }
        m = map[mname];
        if (!m) {
          inputVisit(field);
          m = map[mname] = [];
          m.field = field;
          this._measures.push(m);
        }
        if (op !== 'count') this._countOnly = false;
        m.push(createMeasure(op, outname));
      }
      this._measures = this._measures.map(m => compileMeasures(m, m.field));
      return {};
    },
    // -- Cell Management -----
    cellkey: groupkey(),
    cell(key, t) {
      let cell = this.value[key];
      if (!cell) {
        cell = this.value[key] = this.newcell(key, t);
        this._adds[this._alen++] = cell;
      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
        cell.stamp = this.stamp;
        this._adds[this._alen++] = cell;
      } else if (cell.stamp < this.stamp) {
        cell.stamp = this.stamp;
        this._mods[this._mlen++] = cell;
      }
      return cell;
    },
    newcell(key, t) {
      const cell = {
        key: key,
        num: 0,
        agg: null,
        tuple: this.newtuple(t, this._prev && this._prev[key]),
        stamp: this.stamp,
        store: false
      };
      if (!this._countOnly) {
        const measures = this._measures, n = measures.length;
        cell.agg = Array(n);
        for (let i = 0; i < n; ++i) {
          cell.agg[i] = new measures[i](cell);
        }
      }
      if (cell.store) {
        cell.data = new TupleStore();
      }
      return cell;
    },
    newtuple(t, p) {
      const names = this._dnames, dims = this._dims, n = dims.length, x = {};
      for (let i = 0; i < n; ++i) {
        x[names[i]] = dims[i](t);
      }
      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);
    },
    clean() {
      const cells = this.value;
      for (const key in cells) {
        if (cells[key].num === 0) {
          delete cells[key];
        }
      }
    },
    // -- Process Tuples -----
    // -- Process Tuples -----
    add(t) {
      const key = this.cellkey(t), cell = this.cell(key, t);
      cell.num += 1;
      if (this._countOnly) return;
      if (cell.store) cell.data.add(t);
      const agg = cell.agg;
      for (let i = 0, n = agg.length; i < n; ++i) {
        agg[i].add(agg[i].get(t), t);
      }
    },
    rem(t) {
      const key = this.cellkey(t), cell = this.cell(key, t);
      cell.num -= 1;
      if (this._countOnly) return;
      if (cell.store) cell.data.rem(t);
      const agg = cell.agg;
      for (let i = 0, n = agg.length; i < n; ++i) {
        agg[i].rem(agg[i].get(t), t);
      }
    },
    celltuple(cell) {
      const tuple = cell.tuple, counts = this._counts;
      // consolidate stored values
      if (cell.store) {
        cell.data.values();
      }
      // update tuple properties
      for (let i = 0, n = counts.length; i < n; ++i) {
        tuple[counts[i]] = cell.num;
      }
      if (!this._countOnly) {
        const agg = cell.agg;
        for (let i = 0, n = agg.length; i < n; ++i) {
          agg[i].set(tuple);
        }
      }
      return tuple;
    },
    changes(out) {
      const adds = this._adds, mods = this._mods, prev = this._prev, drop = this._drop, add = out.add, rem = out.rem, mod = out.mod;
      let cell, key, i, n;
      if (prev) for (key in prev) {
        cell = prev[key];
        if (!drop || cell.num) rem.push(cell.tuple);
      }
      for ((i = 0, n = this._alen); i < n; ++i) {
        add.push(this.celltuple(adds[i]));
        adds[i] = null;
      }
      for ((i = 0, n = this._mlen); i < n; ++i) {
        cell = mods[i];
        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
        mods[i] = null;
      }
      this._alen = this._mlen = 0;
      // reset list of active cells
      this._prev = null;
      return out;
    }
  });
  const EPSILON$1 = 1e-14;
  /**
  * Generates a binning function for discretizing data.
  * @constructor
  * @param {object} params - The parameters for this operator. The
  *   provided values should be valid options for the {@link bin} function.
  * @param {function(object): *} params.field - The data field to bin.
  */
  function Bin(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Bin.Definition = {
    'type': 'Bin',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'interval',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'anchor',
      'type': 'number'
    }, {
      'name': 'maxbins',
      'type': 'number',
      'default': 20
    }, {
      'name': 'base',
      'type': 'number',
      'default': 10
    }, {
      'name': 'divide',
      'type': 'number',
      'array': true,
      'default': [5, 2]
    }, {
      'name': 'extent',
      'type': 'number',
      'array': true,
      'length': 2,
      'required': true
    }, {
      'name': 'span',
      'type': 'number'
    }, {
      'name': 'step',
      'type': 'number'
    }, {
      'name': 'steps',
      'type': 'number',
      'array': true
    }, {
      'name': 'minstep',
      'type': 'number',
      'default': 0
    }, {
      'name': 'nice',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'name',
      'type': 'string'
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['bin0', 'bin1']
    }]
  };
  vegaUtil.inherits(Bin, vegaDataflow.Transform, {
    transform(_, pulse) {
      const band = _.interval !== false, bins = this._bins(_), start = bins.start, step = bins.step, as = _.as || ['bin0', 'bin1'], b0 = as[0], b1 = as[1];
      let flag;
      if (_.modified()) {
        pulse = pulse.reflow(true);
        flag = pulse.SOURCE;
      } else {
        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;
      }
      pulse.visit(flag, band ? t => {
        const v = bins(t);
        // minimum bin value (inclusive)
        t[b0] = v;
        // maximum bin value (exclusive)
        // use convoluted math for better floating point agreement
        // see https://github.com/vega/vega/issues/830
        // infinite values propagate through this formula! #2227
        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
      } : t => t[b0] = bins(t));
      return pulse.modifies(band ? as : b0);
    },
    _bins(_) {
      if (this.value && !_.modified()) {
        return this.value;
      }
      const field = _.field, bins = vegaStatistics.bin(_), step = bins.step;
      let start = bins.start, stop = start + Math.ceil((bins.stop - start) / step) * step, a, d;
      if ((a = _.anchor) != null) {
        d = a - (start + step * Math.floor((a - start) / step));
        start += d;
        stop += d;
      }
      const f = function (t) {
        let v = vegaUtil.toNumber(field(t));
        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));
      };
      f.start = start;
      f.stop = bins.stop;
      f.step = step;
      return this.value = vegaUtil.accessor(f, vegaUtil.accessorFields(field), _.name || 'bin_' + vegaUtil.accessorName(field));
    }
  });
  function SortedList(idFunc, source, input) {
    const $ = idFunc;
    let data = source || [], add = input || [], rem = {}, cnt = 0;
    return {
      add: t => add.push(t),
      remove: t => rem[$(t)] = ++cnt,
      size: () => data.length,
      data: (compare, resort) => {
        if (cnt) {
          data = data.filter(t => !rem[$(t)]);
          rem = {};
          cnt = 0;
        }
        if (resort && compare) {
          data.sort(compare);
        }
        if (add.length) {
          data = compare ? vegaUtil.merge(compare, data, add.sort(compare)) : data.concat(add);
          add = [];
        }
        return data;
      }
    };
  }
  /**
  * Collects all data tuples that pass through this operator.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(*,*): number} [params.sort] - An optional
  *   comparator function for additionally sorting the collected tuples.
  */
  function Collect(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  Collect.Definition = {
    'type': 'Collect',
    'metadata': {
      'source': true
    },
    'params': [{
      'name': 'sort',
      'type': 'compare'
    }]
  };
  vegaUtil.inherits(Collect, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.ALL), list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add), sort = _.sort, mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));
      out.visit(out.REM, list.remove);
      this.modified(mod);
      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod);
      // propagate tree root if defined
      if (pulse.source && pulse.source.root) {
        this.value.root = pulse.source.root;
      }
      return out;
    }
  });
  /**
  * Generates a comparator function.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<string|function>} params.fields - The fields to compare.
  * @param {Array<string>} [params.orders] - The sort orders.
  *   Each entry should be one of "ascending" (default) or "descending".
  */
  function Compare(params) {
    vegaDataflow.Operator.call(this, null, update$5, params);
  }
  vegaUtil.inherits(Compare, vegaDataflow.Operator);
  function update$5(_) {
    return this.value && !_.modified() ? this.value : vegaUtil.compare(_.fields, _.orders);
  }
  /**
  * Count regexp-defined pattern occurrences in a text field.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - An accessor for the text field.
  * @param {string} [params.pattern] - RegExp string defining the text pattern.
  * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
  * @param {string} [params.stopwords] - RegExp string of words to ignore.
  */
  function CountPattern(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  CountPattern.Definition = {
    'type': 'CountPattern',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'case',
      'type': 'enum',
      'values': ['upper', 'lower', 'mixed'],
      'default': 'mixed'
    }, {
      'name': 'pattern',
      'type': 'string',
      'default': '[\\w"]+'
    }, {
      'name': 'stopwords',
      'type': 'string',
      'default': ''
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['text', 'count']
    }]
  };
  function tokenize(text, tcase, match) {
    switch (tcase) {
      case 'upper':
        text = text.toUpperCase();
        break;
      case 'lower':
        text = text.toLowerCase();
        break;
    }
    return text.match(match);
  }
  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {
    transform(_, pulse) {
      const process = update => tuple => {
        var tokens = tokenize(get(tuple), _.case, match) || [], t;
        for (var i = 0, n = tokens.length; i < n; ++i) {
          if (!stop.test(t = tokens[i])) update(t);
        }
      };
      const init = this._parameterCheck(_, pulse), counts = this._counts, match = this._match, stop = this._stop, get = _.field, as = _.as || ['text', 'count'], add = process(t => counts[t] = 1 + (counts[t] || 0)), rem = process(t => counts[t] -= 1);
      if (init) {
        pulse.visit(pulse.SOURCE, add);
      } else {
        pulse.visit(pulse.ADD, add);
        pulse.visit(pulse.REM, rem);
      }
      return this._finish(pulse, as);
    },
    _parameterCheck(_, pulse) {
      let init = false;
      if (_.modified('stopwords') || !this._stop) {
        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
        init = true;
      }
      if (_.modified('pattern') || !this._match) {
        this._match = new RegExp(_.pattern || '[\\w\']+', 'g');
        init = true;
      }
      if (_.modified('field') || pulse.modified(_.field.fields)) {
        init = true;
      }
      if (init) this._counts = {};
      return init;
    },
    _finish(pulse, as) {
      const counts = this._counts, tuples = this._tuples || (this._tuples = {}), text = as[0], count = as[1], out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
      let w, t, c;
      for (w in counts) {
        t = tuples[w];
        c = counts[w] || 0;
        if (!t && c) {
          tuples[w] = t = vegaDataflow.ingest({});
          t[text] = w;
          t[count] = c;
          out.add.push(t);
        } else if (c === 0) {
          if (t) out.rem.push(t);
          counts[w] = null;
          tuples[w] = null;
        } else if (t[count] !== c) {
          t[count] = c;
          out.mod.push(t);
        }
      }
      return out.modifies(as);
    }
  });
  /**
  * Perform a cross-product of a tuple stream with itself.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object):boolean} [params.filter] - An optional filter
  *   function for selectively including tuples in the cross product.
  * @param {Array<string>} [params.as] - The names of the output fields.
  */
  function Cross(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Cross.Definition = {
    'type': 'Cross',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'filter',
      'type': 'expr'
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['a', 'b']
    }]
  };
  vegaUtil.inherits(Cross, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE), as = _.as || ['a', 'b'], a = as[0], b = as[1], reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');
      let data = this.value;
      if (reset) {
        if (data) out.rem = data;
        data = pulse.materialize(pulse.SOURCE).source;
        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);
      } else {
        out.mod = data;
      }
      out.source = this.value;
      return out.modifies(as);
    }
  });
  function cross(input, a, b, filter) {
    var data = [], t = {}, n = input.length, i = 0, j, left;
    for (; i < n; ++i) {
      t[a] = left = input[i];
      for (j = 0; j < n; ++j) {
        t[b] = input[j];
        if (filter(t)) {
          data.push(vegaDataflow.ingest(t));
          t = {};
          t[a] = left;
        }
      }
    }
    return data;
  }
  const Distributions = {
    kde: vegaStatistics.randomKDE,
    mixture: vegaStatistics.randomMixture,
    normal: vegaStatistics.randomNormal,
    lognormal: vegaStatistics.randomLogNormal,
    uniform: vegaStatistics.randomUniform
  };
  const DISTRIBUTIONS = 'distributions', FUNCTION = 'function', FIELD = 'field';
  /**
  * Parse a parameter object for a probability distribution.
  * @param {object} def - The distribution parameter object.
  * @param {function():Array<object>} - A method for requesting
  *   source data. Used for distributions (such as KDE) that
  *   require sample data points. This method will only be
  *   invoked if the 'from' parameter for a target data source
  *   is not provided. Typically this method returns backing
  *   source data for a Pulse object.
  * @return {object} - The output distribution object.
  */
  function parse(def, data) {
    const func = def[FUNCTION];
    if (!vegaUtil.hasOwnProperty(Distributions, func)) {
      vegaUtil.error('Unknown distribution function: ' + func);
    }
    const d = Distributions[func]();
    for (const name in def) {
      // if data field, extract values
      if (name === FIELD) {
        d.data((def.from || data()).map(def[name]));
              // if distribution mixture, recurse to parse each definition
} else // if distribution mixture, recurse to parse each definition
      if (name === DISTRIBUTIONS) {
        d[name](def[name].map(_ => parse(_, data)));
              // otherwise, simply set the parameter
} else // otherwise, simply set the parameter
      if (typeof d[name] === FUNCTION) {
        d[name](def[name]);
      }
    }
    return d;
  }
  /**
  * Grid sample points for a probability density. Given a distribution and
  * a sampling extent, will generate points suitable for plotting either
  * PDF (probability density function) or CDF (cumulative distribution
  * function) curves.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {object} params.distribution - The probability distribution. This
  *   is an object parameter dependent on the distribution type.
  * @param {string} [params.method='pdf'] - The distribution method to sample.
  *   One of 'pdf' or 'cdf'.
  * @param {Array<number>} [params.extent] - The [min, max] extent over which
  *   to sample the distribution. This argument is required in most cases, but
  *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
  *   that returns numerical sample points from which the extent can be deduced.
  * @param {number} [params.minsteps=25] - The minimum number of curve samples
  *   for plotting the density.
  * @param {number} [params.maxsteps=200] - The maximum number of curve samples
  *   for plotting the density.
  * @param {number} [params.steps] - The exact number of curve samples for
  *   plotting the density. If specified, overrides both minsteps and maxsteps
  *   to set an exact number of uniform samples. Useful in conjunction with
  *   a fixed extent to ensure consistent sample points for stacked densities.
  */
  function Density(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  const distributions = [{
    'key': {
      'function': 'normal'
    },
    'params': [{
      'name': 'mean',
      'type': 'number',
      'default': 0
    }, {
      'name': 'stdev',
      'type': 'number',
      'default': 1
    }]
  }, {
    'key': {
      'function': 'lognormal'
    },
    'params': [{
      'name': 'mean',
      'type': 'number',
      'default': 0
    }, {
      'name': 'stdev',
      'type': 'number',
      'default': 1
    }]
  }, {
    'key': {
      'function': 'uniform'
    },
    'params': [{
      'name': 'min',
      'type': 'number',
      'default': 0
    }, {
      'name': 'max',
      'type': 'number',
      'default': 1
    }]
  }, {
    'key': {
      'function': 'kde'
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'from',
      'type': 'data'
    }, {
      'name': 'bandwidth',
      'type': 'number',
      'default': 0
    }]
  }];
  const mixture = {
    'key': {
      'function': 'mixture'
    },
    'params': [{
      'name': 'distributions',
      'type': 'param',
      'array': true,
      'params': distributions
    }, {
      'name': 'weights',
      'type': 'number',
      'array': true
    }]
  };
  Density.Definition = {
    'type': 'Density',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'extent',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'steps',
      'type': 'number'
    }, {
      'name': 'minsteps',
      'type': 'number',
      'default': 25
    }, {
      'name': 'maxsteps',
      'type': 'number',
      'default': 200
    }, {
      'name': 'method',
      'type': 'string',
      'default': 'pdf',
      'values': ['pdf', 'cdf']
    }, {
      'name': 'distribution',
      'type': 'param',
      'params': distributions.concat(mixture)
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'default': ['value', 'density']
    }]
  };
  vegaUtil.inherits(Density, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
      if (!this.value || pulse.changed() || _.modified()) {
        const dist = parse(_.distribution, source(pulse)), minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
        let method = _.method || 'pdf';
        if (method !== 'pdf' && method !== 'cdf') {
          vegaUtil.error('Invalid density method: ' + method);
        }
        if (!_.extent && !dist.data) {
          vegaUtil.error('Missing density extent parameter.');
        }
        method = dist[method];
        const as = _.as || ['value', 'density'], domain = _.extent || vegaUtil.extent(dist.data()), values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {
          const tuple = {};
          tuple[as[0]] = v[0];
          tuple[as[1]] = v[1];
          return vegaDataflow.ingest(tuple);
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
      }
      return out;
    }
  });
  function source(pulse) {
    return () => pulse.materialize(pulse.SOURCE).source;
  }
  function fieldNames(fields, as) {
    if (!fields) return null;
    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));
  }
  function partition$1(data, groupby, field) {
    const groups = [], get = f => f(t);
    let map, i, n, t, k, g;
    // partition data points into groups
    if (groupby == null) {
      groups.push(data.map(field));
    } else {
      for ((map = {}, i = 0, n = data.length); i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(field(t));
      }
    }
    return groups;
  }
  const Output = 'bin';
  /**
  * Dot density binning for dot plot construction.
  * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
  * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to bin.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
  * @param {number} [params.step] - The step size (bin width) within which dots should be
  *   stacked. Defaults to 1/30 of the extent of the data *field*.
  * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density
  *   stacks should be smoothed to reduce variance.
  */
  function DotBin(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  DotBin.Definition = {
    'type': 'DotBin',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'step',
      'type': 'number'
    }, {
      'name': 'smooth',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'as',
      'type': 'string',
      'default': Output
    }]
  };
  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;
  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !(_.modified() || pulse.changed())) {
        return pulse;
      }
      const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(pulse.source, _.groupby, vegaUtil.identity), smooth = _.smooth || false, field = _.field, step = _.step || autostep(source, field), sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)), as = _.as || Output, n = groups.length;
      // compute dotplot bins per group
      let min = Infinity, max = -Infinity, i = 0, j;
      for (; i < n; ++i) {
        const g = groups[i].sort(sort);
        j = -1;
        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {
          if (v < min) min = v;
          if (v > max) max = v;
          g[++j][as] = v;
        }
      }
      this.value = {
        start: min,
        stop: max,
        step: step
      };
      return pulse.reflow(true).modifies(as);
    }
  });
  /**
  * Wraps an expression function with access to external parameters.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function} params.expr - The expression function. The
  *  function should accept both a datum and a parameter object.
  *  This operator's value will be a new function that wraps the
  *  expression function with access to this operator's parameters.
  */
  function Expression(params) {
    vegaDataflow.Operator.call(this, null, update$4, params);
    this.modified(true);
  }
  vegaUtil.inherits(Expression, vegaDataflow.Operator);
  function update$4(_) {
    const expr = _.expr;
    return this.value && !_.modified('expr') ? this.value : vegaUtil.accessor(datum => expr(datum, _), vegaUtil.accessorFields(expr), vegaUtil.accessorName(expr));
  }
  /**
  * Computes extents (min/max) for a data field.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The field over which to compute extends.
  */
  function Extent(params) {
    vegaDataflow.Transform.call(this, [undefined, undefined], params);
  }
  Extent.Definition = {
    'type': 'Extent',
    'metadata': {},
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }]
  };
  vegaUtil.inherits(Extent, vegaDataflow.Transform, {
    transform(_, pulse) {
      const extent = this.value, field = _.field, mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');
      let min = extent[0], max = extent[1];
      if (mod || min == null) {
        min = +Infinity;
        max = -Infinity;
      }
      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {
        const v = vegaUtil.toNumber(field(t));
        if (v != null) {
          // NaNs will fail all comparisons!
          if (v < min) min = v;
          if (v > max) max = v;
        }
      });
      if (!Number.isFinite(min) || !Number.isFinite(max)) {
        let name = vegaUtil.accessorName(field);
        if (name) name = ` for field "${name}"`;
        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);
        min = max = undefined;
      }
      this.value = [min, max];
    }
  });
  /**
  * Provides a bridge between a parent transform and a target subflow that
  * consumes only a subset of the tuples that pass through the parent.
  * @constructor
  * @param {Pulse} pulse - A pulse to use as the value of this operator.
  * @param {Transform} parent - The parent transform (typically a Facet instance).
  */
  function Subflow(pulse, parent) {
    vegaDataflow.Operator.call(this, pulse);
    this.parent = parent;
    this.count = 0;
  }
  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {
    /**
    * Routes pulses from this subflow to a target transform.
    * @param {Transform} target - A transform that receives the subflow of tuples.
    */
    /**
    * Routes pulses from this subflow to a target transform.
    * @param {Transform} target - A transform that receives the subflow of tuples.
    */
    connect(target) {
      this.detachSubflow = target.detachSubflow;
      this.targets().add(target);
      return target.source = this;
    },
    /**
    * Add an 'add' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being added.
    */
    /**
    * Add an 'add' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being added.
    */
    add(t) {
      this.count += 1;
      this.value.add.push(t);
    },
    /**
    * Add a 'rem' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being removed.
    */
    /**
    * Add a 'rem' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being removed.
    */
    rem(t) {
      this.count -= 1;
      this.value.rem.push(t);
    },
    /**
    * Add a 'mod' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being modified.
    */
    /**
    * Add a 'mod' tuple to the subflow pulse.
    * @param {Tuple} t - The tuple being modified.
    */
    mod(t) {
      this.value.mod.push(t);
    },
    /**
    * Re-initialize this operator's pulse value.
    * @param {Pulse} pulse - The pulse to copy from.
    * @see Pulse.init
    */
    /**
    * Re-initialize this operator's pulse value.
    * @param {Pulse} pulse - The pulse to copy from.
    * @see Pulse.init
    */
    init(pulse) {
      this.value.init(pulse, pulse.NO_SOURCE);
    },
    /**
    * Evaluate this operator. This method overrides the
    * default behavior to simply return the contained pulse value.
    * @return {Pulse}
    */
    /**
    * Evaluate this operator. This method overrides the
    * default behavior to simply return the contained pulse value.
    * @return {Pulse}
    */
    evaluate() {
      // assert: this.value.stamp === pulse.stamp
      return this.value;
    }
  });
  /**
  * Facets a dataflow into a set of subflows based on a key.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(Dataflow, string): Operator} params.subflow - A function
  *   that generates a subflow of operators and returns its root operator.
  * @param {function(object): *} params.key - The key field to facet by.
  */
  function Facet(params) {
    vegaDataflow.Transform.call(this, {}, params);
    this._keys = vegaUtil.fastmap();
    // cache previously calculated key values
    // keep track of active subflows, use as targets array for listeners
    // this allows us to limit propagation to only updated subflows
    const a = this._targets = [];
    a.active = 0;
    a.forEach = f => {
      for (let i = 0, n = a.active; i < n; ++i) {
        f(a[i], i, a);
      }
    };
  }
  vegaUtil.inherits(Facet, vegaDataflow.Transform, {
    activate(flow) {
      this._targets[this._targets.active++] = flow;
    },
    // parent argument provided by PreFacet subclass
    // parent argument provided by PreFacet subclass
    subflow(key, flow, pulse, parent) {
      const flows = this.value;
      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key], df, p;
      if (!sf) {
        p = parent || (p = this._group[key]) && p.tuple;
        df = pulse.dataflow;
        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);
        df.add(sf).connect(flow(df, key, p));
        flows[key] = sf;
        this.activate(sf);
      } else if (sf.value.stamp < pulse.stamp) {
        sf.init(pulse);
        this.activate(sf);
      }
      return sf;
    },
    clean() {
      const flows = this.value;
      let detached = 0;
      for (const key in flows) {
        if (flows[key].count === 0) {
          const detach = flows[key].detachSubflow;
          if (detach) detach();
          delete flows[key];
          ++detached;
        }
      }
      // remove inactive targets from the active targets array
      if (detached) {
        const active = this._targets.filter(sf => sf && sf.count > 0);
        this.initTargets(active);
      }
    },
    initTargets(act) {
      const a = this._targets, n = a.length, m = act ? act.length : 0;
      let i = 0;
      for (; i < m; ++i) {
        a[i] = act[i];
      }
      for (; i < n && a[i] != null; ++i) {
        a[i] = null;
      }
      a.active = m;
    },
    transform(_, pulse) {
      const df = pulse.dataflow, key = _.key, flow = _.subflow, cache = this._keys, rekey = _.modified('key'), subflow = key => this.subflow(key, flow, pulse);
      this._group = _.group || ({});
      this.initTargets();
      // reset list of active subflows
      pulse.visit(pulse.REM, t => {
        const id = vegaDataflow.tupleid(t), k = cache.get(id);
        if (k !== undefined) {
          cache.delete(id);
          subflow(k).rem(t);
        }
      });
      pulse.visit(pulse.ADD, t => {
        const k = key(t);
        cache.set(vegaDataflow.tupleid(t), k);
        subflow(k).add(t);
      });
      if (rekey || pulse.modified(key.fields)) {
        pulse.visit(pulse.MOD, t => {
          const id = vegaDataflow.tupleid(t), k0 = cache.get(id), k1 = key(t);
          if (k0 === k1) {
            subflow(k1).mod(t);
          } else {
            cache.set(id, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      } else if (pulse.changed(pulse.MOD)) {
        pulse.visit(pulse.MOD, t => {
          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);
        });
      }
      if (rekey) {
        pulse.visit(pulse.REFLOW, t => {
          const id = vegaDataflow.tupleid(t), k0 = cache.get(id), k1 = key(t);
          if (k0 !== k1) {
            cache.set(id, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      }
      if (pulse.clean()) {
        df.runAfter(() => {
          this.clean();
          cache.clean();
        });
      } else if (cache.empty > df.cleanThreshold) {
        df.runAfter(cache.clean);
      }
      return pulse;
    }
  });
  /**
  * Generates one or more field accessor functions.
  * If the 'name' parameter is an array, an array of field accessors
  * will be created and the 'as' parameter will be ignored.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {string} params.name - The field name(s) to access.
  * @param {string} params.as - The accessor function name.
  */
  function Field(params) {
    vegaDataflow.Operator.call(this, null, update$3, params);
  }
  vegaUtil.inherits(Field, vegaDataflow.Operator);
  function update$3(_) {
    return this.value && !_.modified() ? this.value : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f)) : vegaUtil.field(_.name, _.as);
  }
  /**
  * Filters data tuples according to a predicate function.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.expr - The predicate expression function
  *   that determines a tuple's filter status. Truthy values pass the filter.
  */
  function Filter(params) {
    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);
  }
  Filter.Definition = {
    'type': 'Filter',
    'metadata': {
      'changes': true
    },
    'params': [{
      'name': 'expr',
      'type': 'expr',
      'required': true
    }]
  };
  vegaUtil.inherits(Filter, vegaDataflow.Transform, {
    transform(_, pulse) {
      const df = pulse.dataflow, cache = this.value, // cache ids of filtered tuples
      output = pulse.fork(), add = output.add, rem = output.rem, mod = output.mod, test = _.expr;
      let isMod = true;
      pulse.visit(pulse.REM, t => {
        const id = vegaDataflow.tupleid(t);
        if (!cache.has(id)) rem.push(t); else cache.delete(id);
      });
      pulse.visit(pulse.ADD, t => {
        if (test(t, _)) add.push(t); else cache.set(vegaDataflow.tupleid(t), 1);
      });
      function revisit(t) {
        const id = vegaDataflow.tupleid(t), b = test(t, _), s = cache.get(id);
        if (b && s) {
          cache.delete(id);
          add.push(t);
        } else if (!b && !s) {
          cache.set(id, 1);
          rem.push(t);
        } else if (isMod && b && !s) {
          mod.push(t);
        }
      }
      pulse.visit(pulse.MOD, revisit);
      if (_.modified()) {
        isMod = false;
        pulse.visit(pulse.REFLOW, revisit);
      }
      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
      return output;
    }
  });
  /**
  * Flattens array-typed field values into new data objects.
  * If multiple fields are specified, they are treated as parallel arrays,
  * with output values included for each matching index (or null if missing).
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} params.fields - An array of field
  *   accessors for the tuple fields that should be flattened.
  * @param {string} [params.index] - Optional output field name for index
  *   value. If unspecified, no index field is included in the output.
  * @param {Array<string>} [params.as] - Output field names for flattened
  *   array fields. Any unspecified fields will use the field name provided
  *   by the fields accessors.
  */
  function Flatten(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  Flatten.Definition = {
    'type': 'Flatten',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'fields',
      'type': 'field',
      'array': true,
      'required': true
    }, {
      'name': 'index',
      'type': 'string'
    }, {
      'name': 'as',
      'type': 'string',
      'array': true
    }]
  };
  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(fields, _.as || []), index = _.index || null, m = as.length;
      // remove any previous results
      out.rem = this.value;
      // generate flattened tuples
      pulse.visit(pulse.SOURCE, t => {
        const arrays = fields.map(f => f(t)), maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);
        let i = 0, j, d, v;
        for (; i < maxlen; ++i) {
          d = vegaDataflow.derive(t);
          for (j = 0; j < m; ++j) {
            d[as[j]] = (v = arrays[j][i]) == null ? null : v;
          }
          if (index) {
            d[index] = i;
          }
          out.add.push(d);
        }
      });
      this.value = out.source = out.add;
      if (index) out.modifies(index);
      return out.modifies(as);
    }
  });
  /**
  * Folds one more tuple fields into multiple tuples in which the field
  * name and values are available under new 'key' and 'value' fields.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.fields - An array of field accessors
  *   for the tuple fields that should be folded.
  * @param {Array<string>} [params.as] - Output field names for folded key
  *   and value fields, defaults to ['key', 'value'].
  */
  function Fold(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  Fold.Definition = {
    'type': 'Fold',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'fields',
      'type': 'field',
      'array': true,
      'required': true
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['key', 'value']
    }]
  };
  vegaUtil.inherits(Fold, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, fnames = fields.map(vegaUtil.accessorName), as = _.as || ['key', 'value'], k = as[0], v = as[1], n = fields.length;
      out.rem = this.value;
      pulse.visit(pulse.SOURCE, t => {
        for (let i = 0, d; i < n; ++i) {
          d = vegaDataflow.derive(t);
          d[k] = fnames[i];
          d[v] = fields[i](t);
          out.add.push(d);
        }
      });
      this.value = out.source = out.add;
      return out.modifies(as);
    }
  });
  /**
  * Invokes a function for each data tuple and saves the results as a new field.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
  * @param {string} params.as - The field name under which to save the result.
  * @param {boolean} [params.initonly=false] - If true, the formula is applied to
  *   added tuples only, and does not update in response to modifications.
  */
  function Formula(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Formula.Definition = {
    'type': 'Formula',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'expr',
      'type': 'expr',
      'required': true
    }, {
      'name': 'as',
      'type': 'string',
      'required': true
    }, {
      'name': 'initonly',
      'type': 'boolean'
    }]
  };
  vegaUtil.inherits(Formula, vegaDataflow.Transform, {
    transform(_, pulse) {
      const func = _.expr, as = _.as, mod = _.modified(), flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;
      if (mod) {
        // parameters updated, need to reflow
        pulse = pulse.materialize().reflow(true);
      }
      if (!_.initonly) {
        pulse.modifies(as);
      }
      return pulse.visit(flag, t => t[as] = func(t, _));
    }
  });
  /**
  * Generates data tuples using a provided generator function.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(Parameters): object} params.generator - A tuple generator
  *   function. This function is given the operator parameters as input.
  *   Changes to any additional parameters will not trigger re-calculation
  *   of previously generated tuples. Only future tuples are affected.
  * @param {number} params.size - The number of tuples to produce.
  */
  function Generate(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  vegaUtil.inherits(Generate, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.ALL), gen = _.generator;
      let data = this.value, num = _.size - data.length, add, rem, t;
      if (num > 0) {
        // need more tuples, generate and add
        for (add = []; --num >= 0; ) {
          add.push(t = vegaDataflow.ingest(gen(_)));
          data.push(t);
        }
        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
      } else {
        // need fewer tuples, remove
        rem = data.slice(0, -num);
        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
        data = data.slice(-num);
      }
      out.source = this.value = data;
      return out;
    }
  });
  const Methods = {
    value: 'value',
    median: d3Array.median,
    mean: d3Array.mean,
    min: d3Array.min,
    max: d3Array.max
  };
  const Empty = [];
  /**
  * Impute missing values.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to impute.
  * @param {Array<function(object): *>} [params.groupby] - An array of
  *   accessors to determine series within which to perform imputation.
  * @param {function(object): *} params.key - An accessor for a key value.
  *   Each key value should be unique within a group. New tuples will be
  *   imputed for any key values that are not found within a group.
  * @param {Array<*>} [params.keyvals] - Optional array of required key
  *   values. New tuples will be imputed for any key values that are not
  *   found within a group. In addition, these values will be automatically
  *   augmented with the key values observed in the input data.
  * @param {string} [method='value'] - The imputation method to use. One of
  *   'value', 'mean', 'median', 'max', 'min'.
  * @param {*} [value=0] - The constant value to use for imputation
  *   when using method 'value'.
  */
  function Impute(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  Impute.Definition = {
    'type': 'Impute',
    'metadata': {
      'changes': true
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'key',
      'type': 'field',
      'required': true
    }, {
      'name': 'keyvals',
      'array': true
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'method',
      'type': 'enum',
      'default': 'value',
      'values': ['value', 'mean', 'median', 'max', 'min']
    }, {
      'name': 'value',
      'default': 0
    }]
  };
  function getValue(_) {
    var m = _.method || Methods.value, v;
    if (Methods[m] == null) {
      vegaUtil.error('Unrecognized imputation method: ' + m);
    } else if (m === Methods.value) {
      v = _.value !== undefined ? _.value : 0;
      return () => v;
    } else {
      return Methods[m];
    }
  }
  function getField(_) {
    const f = _.field;
    return t => t ? f(t) : NaN;
  }
  vegaUtil.inherits(Impute, vegaDataflow.Transform, {
    transform(_, pulse) {
      var out = pulse.fork(pulse.ALL), impute = getValue(_), field = getField(_), fName = vegaUtil.accessorName(_.field), kName = vegaUtil.accessorName(_.key), gNames = (_.groupby || []).map(vegaUtil.accessorName), groups = partition(pulse.source, _.groupby, _.key, _.keyvals), curr = [], prev = this.value, m = groups.domain.length, group, value, gVals, kVal, g, i, j, l, n, t;
      for ((g = 0, l = groups.length); g < l; ++g) {
        group = groups[g];
        gVals = group.values;
        value = NaN;
        // add tuples for missing values
        for (j = 0; j < m; ++j) {
          if (group[j] != null) continue;
          kVal = groups.domain[j];
          t = {
            _impute: true
          };
          for ((i = 0, n = gVals.length); i < n; ++i) t[gNames[i]] = gVals[i];
          t[kName] = kVal;
          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;
          curr.push(vegaDataflow.ingest(t));
        }
      }
      // update pulse with imputed tuples
      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
      this.value = curr;
      return out;
    }
  });
  function partition(data, groupby, key, keyvals) {
    var get = f => f(t), groups = [], domain = keyvals ? keyvals.slice() : [], kMap = {}, gMap = {}, gVals, gKey, group, i, j, k, n, t;
    domain.forEach((k, i) => kMap[k] = i + 1);
    for ((i = 0, n = data.length); i < n; ++i) {
      t = data[i];
      k = key(t);
      j = kMap[k] || (kMap[k] = domain.push(k));
      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';
      if (!(group = gMap[gKey])) {
        group = gMap[gKey] = [];
        groups.push(group);
        group.values = gVals;
      }
      group[j - 1] = t;
    }
    groups.domain = domain;
    return groups;
  }
  /**
  * Extend input tuples with aggregate values.
  * Calcuates aggregate values and joins them with the input stream.
  * @constructor
  */
  function JoinAggregate(params) {
    Aggregate.call(this, params);
  }
  JoinAggregate.Definition = {
    'type': 'JoinAggregate',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'fields',
      'type': 'field',
      'null': true,
      'array': true
    }, {
      'name': 'ops',
      'type': 'enum',
      'array': true,
      'values': ValidAggregateOps
    }, {
      'name': 'as',
      'type': 'string',
      'null': true,
      'array': true
    }, {
      'name': 'key',
      'type': 'field'
    }]
  };
  vegaUtil.inherits(JoinAggregate, Aggregate, {
    transform(_, pulse) {
      const aggr = this, mod = _.modified();
      let cells;
      // process all input tuples to calculate aggregates
      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
        cells = aggr.value = mod ? aggr.init(_) : {};
        pulse.visit(pulse.SOURCE, t => aggr.add(t));
      } else {
        cells = aggr.value = aggr.value || this.init(_);
        pulse.visit(pulse.REM, t => aggr.rem(t));
        pulse.visit(pulse.ADD, t => aggr.add(t));
      }
      // update aggregation cells
      aggr.changes();
      // write aggregate values to input tuples
      pulse.visit(pulse.SOURCE, t => {
        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);
      });
      return pulse.reflow(mod).modifies(this._outputs);
    },
    changes() {
      const adds = this._adds, mods = this._mods;
      let i, n;
      for ((i = 0, n = this._alen); i < n; ++i) {
        this.celltuple(adds[i]);
        adds[i] = null;
      }
      for ((i = 0, n = this._mlen); i < n; ++i) {
        this.celltuple(mods[i]);
        mods[i] = null;
      }
      this._alen = this._mlen = 0;
    }
  });
  /**
  * Compute kernel density estimates (KDE) for one or more data groups.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors
  *   to groupby.
  * @param {function(object): *} params.field - An accessor for the data field
  *   to estimate.
  * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
  *   If zero or unspecified, the bandwidth is automatically determined.
  * @param {boolean} [params.counts=false] - A boolean flag indicating if the
  *   output values should be probability estimates (false, default) or
  *   smoothed counts (true).
  * @param {string} [params.cumulative=false] - A boolean flag indicating if a
  *   density (false) or cumulative distribution (true) should be generated.
  * @param {Array<number>} [params.extent] - The domain extent over which to
  *   plot the density. If unspecified, the [min, max] data extent is used.
  * @param {string} [params.resolve='independent'] - Indicates how parameters for
  *   multiple densities should be resolved. If "independent" (the default), each
  *   density may have its own domain extent and dynamic number of curve sample
  *   steps. If "shared", the KDE transform will ensure that all densities are
  *   defined over a shared domain and curve steps, enabling stacking.
  * @param {number} [params.minsteps=25] - The minimum number of curve samples
  *   for plotting the density.
  * @param {number} [params.maxsteps=200] - The maximum number of curve samples
  *   for plotting the density.
  * @param {number} [params.steps] - The exact number of curve samples for
  *   plotting the density. If specified, overrides both minsteps and maxsteps
  *   to set an exact number of uniform samples. Useful in conjunction with
  *   a fixed extent to ensure consistent sample points for stacked densities.
  */
  function KDE(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  KDE.Definition = {
    'type': 'KDE',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'cumulative',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'counts',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'bandwidth',
      'type': 'number',
      'default': 0
    }, {
      'name': 'extent',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'resolve',
      'type': 'enum',
      'values': ['shared', 'independent'],
      'default': 'independent'
    }, {
      'name': 'steps',
      'type': 'number'
    }, {
      'name': 'minsteps',
      'type': 'number',
      'default': 25
    }, {
      'name': 'maxsteps',
      'type': 'number',
      'default': 200
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'default': ['value', 'density']
    }]
  };
  vegaUtil.inherits(KDE, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
      if (!this.value || pulse.changed() || _.modified()) {
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map(vegaUtil.accessorName), bandwidth = _.bandwidth, method = _.cumulative ? 'cdf' : 'pdf', as = _.as || ['value', 'density'], values = [];
        let domain = _.extent, minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
        if (method !== 'pdf' && method !== 'cdf') {
          vegaUtil.error('Invalid density method: ' + method);
        }
        if (_.resolve === 'shared') {
          if (!domain) domain = vegaUtil.extent(source, _.field);
          minsteps = maxsteps = _.steps || maxsteps;
        }
        groups.forEach(g => {
          const density = vegaStatistics.randomKDE(g, bandwidth)[method], scale = _.counts ? g.length : 1, local = domain || vegaUtil.extent(g);
          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {
            const t = {};
            for (let i = 0; i < names.length; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = v[0];
            t[as[1]] = v[1] * scale;
            values.push(vegaDataflow.ingest(t));
          });
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
      }
      return out;
    }
  });
  /**
  * Generates a key function.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<string>} params.fields - The field name(s) for the key function.
  * @param {boolean} params.flat - A boolean flag indicating if the field names
  *  should be treated as flat property names, side-stepping nested field
  *  lookups normally indicated by dot or bracket notation.
  */
  function Key(params) {
    vegaDataflow.Operator.call(this, null, update$2, params);
  }
  vegaUtil.inherits(Key, vegaDataflow.Operator);
  function update$2(_) {
    return this.value && !_.modified() ? this.value : vegaUtil.key(_.fields, _.flat);
  }
  /**
  * Load and parse data from an external source. Marshalls parameter
  * values and then invokes the Dataflow request method.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {string} params.url - The URL to load from.
  * @param {object} params.format - The data format options.
  */
  function Load(params) {
    vegaDataflow.Transform.call(this, [], params);
    this._pending = null;
  }
  vegaUtil.inherits(Load, vegaDataflow.Transform, {
    transform(_, pulse) {
      const df = pulse.dataflow;
      if (this._pending) {
        // update state and return pulse
        return output(this, pulse, this._pending);
      }
      if (stop(_)) return pulse.StopPropagation;
      if (_.values) {
        // parse and ingest values, return output pulse
        return output(this, pulse, df.parse(_.values, _.format));
      } else if (_.async) {
        // return promise for non-blocking async loading
        const p = df.request(_.url, _.format).then(res => {
          this._pending = vegaUtil.array(res.data);
          return df => df.touch(this);
        });
        return {
          async: p
        };
      } else {
        // return promise for synchronous loading
        return df.request(_.url, _.format).then(res => output(this, pulse, vegaUtil.array(res.data)));
      }
    }
  });
  function stop(_) {
    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));
  }
  function output(op, pulse, data) {
    data.forEach(vegaDataflow.ingest);
    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
    out.rem = op.value;
    op.value = out.source = out.add = data;
    op._pending = null;
    if (out.rem.length) out.clean(true);
    return out;
  }
  /**
  * Extend tuples by joining them with values from a lookup table.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Map} params.index - The lookup table map.
  * @param {Array<function(object): *} params.fields - The fields to lookup.
  * @param {Array<string>} params.as - Output field names for each lookup value.
  * @param {*} [params.default] - A default value to use if lookup fails.
  */
  function Lookup(params) {
    vegaDataflow.Transform.call(this, {}, params);
  }
  Lookup.Definition = {
    'type': 'Lookup',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'index',
      'type': 'index',
      'params': [{
        'name': 'from',
        'type': 'data',
        'required': true
      }, {
        'name': 'key',
        'type': 'field',
        'required': true
      }]
    }, {
      'name': 'values',
      'type': 'field',
      'array': true
    }, {
      'name': 'fields',
      'type': 'field',
      'array': true,
      'required': true
    }, {
      'name': 'as',
      'type': 'string',
      'array': true
    }, {
      'name': 'default',
      'default': null
    }]
  };
  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {
    transform(_, pulse) {
      const keys = _.fields, index = _.index, values = _.values, defaultValue = _.default == null ? null : _.default, reset = _.modified(), n = keys.length;
      let flag = reset ? pulse.SOURCE : pulse.ADD, out = pulse, as = _.as, set, m, mods;
      if (values) {
        m = values.length;
        if (n > 1 && !as) {
          vegaUtil.error('Multi-field lookup requires explicit "as" parameter.');
        }
        if (as && as.length !== n * m) {
          vegaUtil.error('The "as" parameter has too few output field names.');
        }
        as = as || values.map(vegaUtil.accessorName);
        set = function (t) {
          for (var i = 0, k = 0, j, v; i < n; ++i) {
            v = index.get(keys[i](t));
            if (v == null) for (j = 0; j < m; (++j, ++k)) t[as[k]] = defaultValue; else for (j = 0; j < m; (++j, ++k)) t[as[k]] = values[j](v);
          }
        };
      } else {
        if (!as) {
          vegaUtil.error('Missing output field names.');
        }
        set = function (t) {
          for (var i = 0, v; i < n; ++i) {
            v = index.get(keys[i](t));
            t[as[i]] = v == null ? defaultValue : v;
          }
        };
      }
      if (reset) {
        out = pulse.reflow(true);
      } else {
        mods = keys.some(k => pulse.modified(k.fields));
        flag |= mods ? pulse.MOD : 0;
      }
      pulse.visit(flag, set);
      return out.modifies(as);
    }
  });
  /**
  * Computes global min/max extents over a collection of extents.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<Array<number>>} params.extents - The input extents.
  */
  function MultiExtent(params) {
    vegaDataflow.Operator.call(this, null, update$1, params);
  }
  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);
  function update$1(_) {
    if (this.value && !_.modified()) {
      return this.value;
    }
    const ext = _.extents, n = ext.length;
    let min = +Infinity, max = -Infinity, i, e;
    for (i = 0; i < n; ++i) {
      e = ext[i];
      if (e[0] < min) min = e[0];
      if (e[1] > max) max = e[1];
    }
    return [min, max];
  }
  /**
  * Merge a collection of value arrays.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<Array<*>>} params.values - The input value arrrays.
  */
  function MultiValues(params) {
    vegaDataflow.Operator.call(this, null, update, params);
  }
  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);
  function update(_) {
    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);
  }
  /**
  * Operator whose value is simply its parameter hash. This operator is
  * useful for enabling reactive updates to values of nested objects.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function Params(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Params, vegaDataflow.Transform, {
    transform(_, pulse) {
      this.modified(_.modified());
      this.value = _;
      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
  });
  /**
  * Aggregate and pivot selected field values to become new fields.
  * This operator is useful to construction cross-tabulations.
  * @constructor
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors
  *  to groupby. These fields act just like groupby fields of an Aggregate transform.
  * @param {function(object): *} params.field - The field to pivot on. The unique
  *  values of this field become new field names in the output stream.
  * @param {function(object): *} params.value - The field to populate pivoted fields.
  *  The aggregate values of this field become the values of the new pivoted fields.
  * @param {string} [params.op] - The aggregation operation for the value field,
  *  applied per cell in the output stream. The default is "sum".
  * @param {number} [params.limit] - An optional parameter indicating the maximum
  *  number of pivoted fields to generate. The pivoted field names are sorted in
  *  ascending order prior to enforcing the limit.
  */
  function Pivot(params) {
    Aggregate.call(this, params);
  }
  Pivot.Definition = {
    'type': 'Pivot',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'value',
      'type': 'field',
      'required': true
    }, {
      'name': 'op',
      'type': 'enum',
      'values': ValidAggregateOps,
      'default': 'sum'
    }, {
      'name': 'limit',
      'type': 'number',
      'default': 0
    }, {
      'name': 'key',
      'type': 'field'
    }]
  };
  vegaUtil.inherits(Pivot, Aggregate, {
    _transform: Aggregate.prototype.transform,
    transform(_, pulse) {
      return this._transform(aggregateParams(_, pulse), pulse);
    }
  });
  // Shoehorn a pivot transform into an aggregate transform!
  // First collect all unique pivot field values.
  // Then generate aggregate fields for each output pivot field.
  function aggregateParams(_, pulse) {
    const key = _.field, value = _.value, op = (_.op === 'count' ? '__count__' : _.op) || 'sum', fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)), keys = pivotKeys(key, _.limit || 0, pulse);
    // if data stream content changes, pivot fields may change
    // flag parameter modification to ensure re-initialization
    if (pulse.changed()) _.set('__pivot__', null, null, true);
    return {
      key: _.key,
      groupby: _.groupby,
      ops: keys.map(() => op),
      fields: keys.map(k => get(k, key, value, fields)),
      as: keys.map(k => k + ''),
      modified: _.modified.bind(_)
    };
  }
  // Generate aggregate field accessor.
  // Output NaN for non-existent values; aggregator will ignore!
  function get(k, key, value, fields) {
    return vegaUtil.accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');
  }
  // Collect (and optionally limit) all unique pivot values.
  function pivotKeys(key, limit, pulse) {
    const map = {}, list = [];
    pulse.visit(pulse.SOURCE, t => {
      const k = key(t);
      if (!map[k]) {
        map[k] = 1;
        list.push(k);
      }
    });
    list.sort(vegaUtil.ascending);
    return limit ? list.slice(0, limit) : list;
  }
  /**
  * Partitions pre-faceted data into tuple subflows.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(Dataflow, string): Operator} params.subflow - A function
  *   that generates a subflow of operators and returns its root operator.
  * @param {function(object): Array<object>} params.field - The field
  *   accessor for an array of subflow tuple objects.
  */
  function PreFacet(params) {
    Facet.call(this, params);
  }
  vegaUtil.inherits(PreFacet, Facet, {
    transform(_, pulse) {
      const flow = _.subflow, field = _.field, subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);
      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {
        vegaUtil.error('PreFacet does not support field modification.');
      }
      this.initTargets();
      // reset list of active subflows
      if (field) {
        pulse.visit(pulse.MOD, t => {
          const sf = subflow(t);
          field(t).forEach(_ => sf.mod(_));
        });
        pulse.visit(pulse.ADD, t => {
          const sf = subflow(t);
          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));
        });
        pulse.visit(pulse.REM, t => {
          const sf = subflow(t);
          field(t).forEach(_ => sf.rem(_));
        });
      } else {
        pulse.visit(pulse.MOD, t => subflow(t).mod(t));
        pulse.visit(pulse.ADD, t => subflow(t).add(t));
        pulse.visit(pulse.REM, t => subflow(t).rem(t));
      }
      if (pulse.clean()) {
        pulse.runAfter(() => this.clean());
      }
      return pulse;
    }
  });
  /**
  * Performs a relational projection, copying selected fields from source
  * tuples to a new set of derived tuples.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *} params.fields - The fields to project,
  *   as an array of field accessors. If unspecified, all fields will be
  *   copied with names unchanged.
  * @param {Array<string>} [params.as] - Output field names for each projected
  *   field. Any unspecified fields will use the field name provided by
  *   the field accessor.
  */
  function Project(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Project.Definition = {
    'type': 'Project',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'fields',
      'type': 'field',
      'array': true
    }, {
      'name': 'as',
      'type': 'string',
      'null': true,
      'array': true
    }]
  };
  vegaUtil.inherits(Project, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(_.fields, _.as || []), derive = fields ? (s, t) => project(s, t, fields, as) : vegaDataflow.rederive;
      let lut;
      if (this.value) {
        lut = this.value;
      } else {
        pulse = pulse.addAll();
        lut = this.value = {};
      }
      pulse.visit(pulse.REM, t => {
        const id = vegaDataflow.tupleid(t);
        out.rem.push(lut[id]);
        lut[id] = null;
      });
      pulse.visit(pulse.ADD, t => {
        const dt = derive(t, vegaDataflow.ingest({}));
        lut[vegaDataflow.tupleid(t)] = dt;
        out.add.push(dt);
      });
      pulse.visit(pulse.MOD, t => {
        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));
      });
      return out;
    }
  });
  function project(s, t, fields, as) {
    for (let i = 0, n = fields.length; i < n; ++i) {
      t[as[i]] = fields[i](s);
    }
    return t;
  }
  /**
  * Proxy the value of another operator as a pure signal value.
  * Ensures no tuples are propagated.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {*} params.value - The value to proxy, becomes the value of this operator.
  */
  function Proxy(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {
    transform(_, pulse) {
      this.value = _.value;
      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
  });
  /**
  * Generates sample quantile values from an input data stream.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - An accessor for the data field
  *   over which to calculate quantile values.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors
  *   to groupby.
  * @param {Array<number>} [params.probs] - An array of probabilities in
  *   the range (0, 1) for which to compute quantile values. If not specified,
  *   the *step* parameter will be used.
  * @param {Array<number>} [params.step=0.01] - A probability step size for
  *   sampling quantile values. All values from one-half the step size up to
  *   1 (exclusive) will be sampled. This parameter is only used if the
  *   *quantiles* parameter is not provided.
  */
  function Quantile(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Quantile.Definition = {
    'type': 'Quantile',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'probs',
      'type': 'number',
      'array': true
    }, {
      'name': 'step',
      'type': 'number',
      'default': 0.01
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'default': ['prob', 'value']
    }]
  };
  const EPSILON = 1e-14;
  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), as = _.as || ['prob', 'value'];
      if (this.value && !_.modified() && !pulse.changed()) {
        out.source = this.value;
        return out;
      }
      const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map(vegaUtil.accessorName), values = [], step = _.step || 0.01, p = _.probs || d3Array.range(step / 2, 1 - EPSILON, step), n = p.length;
      groups.forEach(g => {
        const q = vegaStatistics.quantiles(g, p);
        for (let i = 0; i < n; ++i) {
          const t = {};
          for (let i = 0; i < names.length; ++i) {
            t[names[i]] = g.dims[i];
          }
          t[as[0]] = p[i];
          t[as[1]] = q[i];
          values.push(vegaDataflow.ingest(t));
        }
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
      return out;
    }
  });
  /**
  * Relays a data stream between data processing pipelines.
  * If the derive parameter is set, this transform will create derived
  * copies of observed tuples. This provides derived data streams in which
  * modifications to the tuples do not pollute an upstream data source.
  * @param {object} params - The parameters for this operator.
  * @param {number} [params.derive=false] - Boolean flag indicating if
  *   the transform should make derived copies of incoming tuples.
  * @constructor
  */
  function Relay(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Relay, vegaDataflow.Transform, {
    transform(_, pulse) {
      let out, lut;
      if (this.value) {
        lut = this.value;
      } else {
        out = pulse = pulse.addAll();
        lut = this.value = {};
      }
      if (_.derive) {
        out = pulse.fork(pulse.NO_SOURCE);
        pulse.visit(pulse.REM, t => {
          const id = vegaDataflow.tupleid(t);
          out.rem.push(lut[id]);
          lut[id] = null;
        });
        pulse.visit(pulse.ADD, t => {
          const dt = vegaDataflow.derive(t);
          lut[vegaDataflow.tupleid(t)] = dt;
          out.add.push(dt);
        });
        pulse.visit(pulse.MOD, t => {
          const dt = lut[vegaDataflow.tupleid(t)];
          for (const k in t) {
            dt[k] = t[k];
            // down stream writes may overwrite re-derived tuples
            // conservatively mark all source fields as modified
            out.modifies(k);
          }
          out.mod.push(dt);
        });
      }
      return out;
    }
  });
  /**
  * Samples tuples passing through this operator.
  * Uses reservoir sampling to maintain a representative sample.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {number} [params.size=1000] - The maximum number of samples.
  */
  function Sample(params) {
    vegaDataflow.Transform.call(this, [], params);
    this.count = 0;
  }
  Sample.Definition = {
    'type': 'Sample',
    'metadata': {},
    'params': [{
      'name': 'size',
      'type': 'number',
      'default': 1000
    }]
  };
  vegaUtil.inherits(Sample, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE), mod = _.modified('size'), num = _.size, map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});
      let res = this.value, cnt = this.count, cap = 0;
      // sample reservoir update function
      function update(t) {
        let p, idx;
        if (res.length < num) {
          res.push(t);
        } else {
          idx = ~~((cnt + 1) * vegaStatistics.random());
          if (idx < res.length && idx >= cap) {
            p = res[idx];
            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p);
            // eviction
            res[idx] = t;
          }
        }
        ++cnt;
      }
      if (pulse.rem.length) {
        // find all tuples that should be removed, add to output
        pulse.visit(pulse.REM, t => {
          const id = vegaDataflow.tupleid(t);
          if (map[id]) {
            map[id] = -1;
            out.rem.push(t);
          }
          --cnt;
        });
        // filter removed tuples out of the sample reservoir
        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);
      }
      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
        // replenish sample if backing data source is available
        cap = cnt = res.length;
        pulse.visit(pulse.SOURCE, t => {
          // update, but skip previously sampled tuples
          if (!map[vegaDataflow.tupleid(t)]) update(t);
        });
        cap = -1;
      }
      if (mod && res.length > num) {
        const n = res.length - num;
        for (let i = 0; i < n; ++i) {
          map[vegaDataflow.tupleid(res[i])] = -1;
          out.rem.push(res[i]);
        }
        res = res.slice(n);
      }
      if (pulse.mod.length) {
        // propagate modified tuples in the sample reservoir
        pulse.visit(pulse.MOD, t => {
          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);
        });
      }
      if (pulse.add.length) {
        // update sample reservoir
        pulse.visit(pulse.ADD, update);
      }
      if (pulse.add.length || cap < 0) {
        // output newly added tuples
        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);
      }
      this.count = cnt;
      this.value = out.source = res;
      return out;
    }
  });
  /**
  * Generates data tuples for a specified sequence range of numbers.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {number} params.start - The first number in the sequence.
  * @param {number} params.stop - The last number (exclusive) in the sequence.
  * @param {number} [params.step=1] - The step size between numbers in the sequence.
  */
  function Sequence(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Sequence.Definition = {
    'type': 'Sequence',
    'metadata': {
      'generates': true,
      'changes': true
    },
    'params': [{
      'name': 'start',
      'type': 'number',
      'required': true
    }, {
      'name': 'stop',
      'type': 'number',
      'required': true
    }, {
      'name': 'step',
      'type': 'number',
      'default': 1
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'data'
    }]
  };
  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !_.modified()) return;
      const out = pulse.materialize().fork(pulse.MOD), as = _.as || 'data';
      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
      this.value = d3Array.range(_.start, _.stop, _.step || 1).map(v => {
        const t = {};
        t[as] = v;
        return vegaDataflow.ingest(t);
      });
      out.add = pulse.add.concat(this.value);
      return out;
    }
  });
  /**
  * Propagates a new pulse without any tuples so long as the input
  * pulse contains some added, removed or modified tuples.
  * @param {object} params - The parameters for this operator.
  * @constructor
  */
  function Sieve(params) {
    vegaDataflow.Transform.call(this, null, params);
    this.modified(true);
  }
  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {
    transform(_, pulse) {
      this.value = pulse.source;
      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
  });
  /**
  * Discretize dates to specific time units.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The data field containing date/time values.
  */
  function TimeUnit(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  const OUTPUT = ['unit0', 'unit1'];
  TimeUnit.Definition = {
    'type': 'TimeUnit',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field',
      'required': true
    }, {
      'name': 'interval',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'units',
      'type': 'enum',
      'values': vegaTime.TIME_UNITS,
      'array': true
    }, {
      'name': 'step',
      'type': 'number',
      'default': 1
    }, {
      'name': 'maxbins',
      'type': 'number',
      'default': 40
    }, {
      'name': 'extent',
      'type': 'date',
      'array': true
    }, {
      'name': 'timezone',
      'type': 'enum',
      'default': 'local',
      'values': ['local', 'utc']
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': OUTPUT
    }]
  };
  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {
    transform(_, pulse) {
      const field = _.field, band = _.interval !== false, utc = _.timezone === 'utc', floor = this._floor(_, pulse), offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset, as = _.as || OUTPUT, u0 = as[0], u1 = as[1], step = floor.step;
      let min = floor.start || Infinity, max = floor.stop || -Infinity, flag = pulse.ADD;
      if (_.modified() || pulse.modified(vegaUtil.accessorFields(field))) {
        pulse = pulse.reflow(true);
        flag = pulse.SOURCE;
        min = Infinity;
        max = -Infinity;
      }
      pulse.visit(flag, t => {
        const v = field(t);
        let a, b;
        if (v == null) {
          t[u0] = null;
          if (band) t[u1] = null;
        } else {
          t[u0] = a = b = floor(v);
          if (band) t[u1] = b = offset(a, step);
          if (a < min) min = a;
          if (b > max) max = b;
        }
      });
      floor.start = min;
      floor.stop = max;
      return pulse.modifies(band ? as : u0);
    },
    _floor(_, pulse) {
      const utc = _.timezone === 'utc';
      // get parameters
      const {units, step} = _.units ? {
        units: _.units,
        step: _.step || 1
      } : vegaTime.timeBin({
        extent: _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),
        maxbins: _.maxbins
      });
      // check / standardize time units
      const tunits = vegaTime.timeUnits(units), prev = this.value || ({}), floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);
      floor.unit = vegaUtil.peek(tunits);
      floor.units = tunits;
      floor.step = step;
      floor.start = prev.start;
      floor.stop = prev.stop;
      return this.value = floor;
    }
  });
  /**
  * An index that maps from unique, string-coerced, field values to tuples.
  * Assumes that the field serves as a unique key with no duplicate values.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The field accessor to index.
  */
  function TupleIndex(params) {
    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);
  }
  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {
    transform(_, pulse) {
      const df = pulse.dataflow, field = _.field, index = this.value, set = t => index.set(field(t), t);
      let mod = true;
      if (_.modified('field') || pulse.modified(field.fields)) {
        index.clear();
        pulse.visit(pulse.SOURCE, set);
      } else if (pulse.changed()) {
        pulse.visit(pulse.REM, t => index.delete(field(t)));
        pulse.visit(pulse.ADD, set);
      } else {
        mod = false;
      }
      this.modified(mod);
      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
      return pulse.fork();
    }
  });
  /**
  * Extracts an array of values. Assumes the source data has already been
  * reduced as needed (e.g., by an upstream Aggregate transform).
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The domain field to extract.
  * @param {function(*,*): number} [params.sort] - An optional
  *   comparator function for sorting the values. The comparator will be
  *   applied to backing tuples prior to value extraction.
  */
  function Values(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Values, vegaDataflow.Transform, {
    transform(_, pulse) {
      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);
      if (run) {
        this.value = (_.sort ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)) : pulse.source).map(_.field);
      }
    }
  });
  function WindowOp(op, field, param, as) {
    const fn = WindowOps[op](field, param);
    return {
      init: fn.init || vegaUtil.zero,
      update: function (w, t) {
        t[as] = fn.next(w);
      }
    };
  }
  const WindowOps = {
    row_number: function () {
      return {
        next: w => w.index + 1
      };
    },
    rank: function () {
      let rank;
      return {
        init: () => rank = 1,
        next: w => {
          const i = w.index, data = w.data;
          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
        }
      };
    },
    dense_rank: function () {
      let drank;
      return {
        init: () => drank = 1,
        next: w => {
          const i = w.index, d = w.data;
          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
        }
      };
    },
    percent_rank: function () {
      const rank = WindowOps.rank(), next = rank.next;
      return {
        init: rank.init,
        next: w => (next(w) - 1) / (w.data.length - 1)
      };
    },
    cume_dist: function () {
      let cume;
      return {
        init: () => cume = 0,
        next: w => {
          const d = w.data, c = w.compare;
          let i = w.index;
          if (cume < i) {
            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;
            cume = i;
          }
          return (1 + cume) / d.length;
        }
      };
    },
    ntile: function (field, num) {
      num = +num;
      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');
      const cume = WindowOps.cume_dist(), next = cume.next;
      return {
        init: cume.init,
        next: w => Math.ceil(num * next(w))
      };
    },
    lag: function (field, offset) {
      offset = +offset || 1;
      return {
        next: w => {
          const i = w.index - offset;
          return i >= 0 ? field(w.data[i]) : null;
        }
      };
    },
    lead: function (field, offset) {
      offset = +offset || 1;
      return {
        next: w => {
          const i = w.index + offset, d = w.data;
          return i < d.length ? field(d[i]) : null;
        }
      };
    },
    first_value: function (field) {
      return {
        next: w => field(w.data[w.i0])
      };
    },
    last_value: function (field) {
      return {
        next: w => field(w.data[w.i1 - 1])
      };
    },
    nth_value: function (field, nth) {
      nth = +nth;
      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');
      return {
        next: w => {
          const i = w.i0 + (nth - 1);
          return i < w.i1 ? field(w.data[i]) : null;
        }
      };
    },
    prev_value: function (field) {
      let prev;
      return {
        init: () => prev = null,
        next: w => {
          const v = field(w.data[w.index]);
          return v != null ? prev = v : prev;
        }
      };
    },
    next_value: function (field) {
      let v, i;
      return {
        init: () => (v = null, i = -1),
        next: w => {
          const d = w.data;
          return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
        }
      };
    }
  };
  function find(field, data, index) {
    for (let n = data.length; index < n; ++index) {
      const v = field(data[index]);
      if (v != null) return index;
    }
    return -1;
  }
  const ValidWindowOps = Object.keys(WindowOps);
  function WindowState(_) {
    const ops = vegaUtil.array(_.ops), fields = vegaUtil.array(_.fields), params = vegaUtil.array(_.params), as = vegaUtil.array(_.as), outputs = this.outputs = [], windows = this.windows = [], inputs = {}, map = {}, counts = [], measures = [];
    let countOnly = true;
    function visitInputs(f) {
      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);
    }
    visitInputs(_.sort);
    ops.forEach((op, i) => {
      const field = fields[i], mname = vegaUtil.accessorName(field), name = measureName(op, mname, as[i]);
      visitInputs(field);
      outputs.push(name);
      // Window operation
      if (vegaUtil.hasOwnProperty(WindowOps, op)) {
        windows.push(WindowOp(op, fields[i], params[i], name));
              // Aggregate operation
} else // Aggregate operation
      {
        if (field == null && op !== 'count') {
          vegaUtil.error('Null aggregate field specified.');
        }
        if (op === 'count') {
          counts.push(name);
          return;
        }
        countOnly = false;
        let m = map[mname];
        if (!m) {
          m = map[mname] = [];
          m.field = field;
          measures.push(m);
        }
        m.push(createMeasure(op, name));
      }
    });
    if (counts.length || measures.length) {
      this.cell = cell(measures, counts, countOnly);
    }
    this.inputs = Object.keys(inputs);
  }
  const prototype = WindowState.prototype;
  prototype.init = function () {
    this.windows.forEach(_ => _.init());
    if (this.cell) this.cell.init();
  };
  prototype.update = function (w, t) {
    const cell = this.cell, wind = this.windows, data = w.data, m = wind && wind.length;
    let j;
    if (cell) {
      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);
      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);
      cell.set(t);
    }
    for (j = 0; j < m; ++j) wind[j].update(w, t);
  };
  function cell(measures, counts, countOnly) {
    measures = measures.map(m => compileMeasures(m, m.field));
    const cell = {
      num: 0,
      agg: null,
      store: false,
      count: counts
    };
    if (!countOnly) {
      var n = measures.length, a = cell.agg = Array(n), i = 0;
      for (; i < n; ++i) a[i] = new measures[i](cell);
    }
    if (cell.store) {
      var store = cell.data = new TupleStore();
    }
    cell.add = function (t) {
      cell.num += 1;
      if (countOnly) return;
      if (store) store.add(t);
      for (let i = 0; i < n; ++i) {
        a[i].add(a[i].get(t), t);
      }
    };
    cell.rem = function (t) {
      cell.num -= 1;
      if (countOnly) return;
      if (store) store.rem(t);
      for (let i = 0; i < n; ++i) {
        a[i].rem(a[i].get(t), t);
      }
    };
    cell.set = function (t) {
      let i, n;
      // consolidate stored values
      if (store) store.values();
      // update tuple properties
      for ((i = 0, n = counts.length); i < n; ++i) t[counts[i]] = cell.num;
      if (!countOnly) for ((i = 0, n = a.length); i < n; ++i) a[i].set(t);
    };
    cell.init = function () {
      cell.num = 0;
      if (store) store.reset();
      for (let i = 0; i < n; ++i) a[i].init();
    };
    return cell;
  }
  /**
  * Perform window calculations and write results to the input stream.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
  * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
  * @param {Array<function(object): *>} [params.fields] - An array of accessors
  *   for data fields to use as inputs to window operations.
  * @param {Array<*>} [params.params] - An array of parameter values for window operations.
  * @param {Array<string>} [params.as] - An array of output field names for window operations.
  * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
  * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
  *   number alone, ignoring peers with identical sort values. If false (default),
  *   the window boundaries will be adjusted to include peer values.
  */
  function Window(params) {
    vegaDataflow.Transform.call(this, {}, params);
    this._mlen = 0;
    this._mods = [];
  }
  Window.Definition = {
    'type': 'Window',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'ops',
      'type': 'enum',
      'array': true,
      'values': ValidWindowOps.concat(ValidAggregateOps)
    }, {
      'name': 'params',
      'type': 'number',
      'null': true,
      'array': true
    }, {
      'name': 'fields',
      'type': 'field',
      'null': true,
      'array': true
    }, {
      'name': 'as',
      'type': 'string',
      'null': true,
      'array': true
    }, {
      'name': 'frame',
      'type': 'number',
      'null': true,
      'array': true,
      'length': 2,
      'default': [null, 0]
    }, {
      'name': 'ignorePeers',
      'type': 'boolean',
      'default': false
    }]
  };
  vegaUtil.inherits(Window, vegaDataflow.Transform, {
    transform(_, pulse) {
      this.stamp = pulse.stamp;
      const mod = _.modified(), cmp = vegaDataflow.stableCompare(_.sort), key = groupkey(_.groupby), group = t => this.group(key(t));
      // initialize window state
      let state = this.state;
      if (!state || mod) {
        state = this.state = new WindowState(_);
      }
      // partition input tuples
      if (mod || pulse.modified(state.inputs)) {
        this.value = {};
        pulse.visit(pulse.SOURCE, t => group(t).add(t));
      } else {
        pulse.visit(pulse.REM, t => group(t).remove(t));
        pulse.visit(pulse.ADD, t => group(t).add(t));
      }
      // perform window calculations for each modified partition
      for (let i = 0, n = this._mlen; i < n; ++i) {
        processPartition(this._mods[i], state, cmp, _);
      }
      this._mlen = 0;
      this._mods = [];
      // TODO don't reflow everything?
      return pulse.reflow(mod).modifies(state.outputs);
    },
    group(key) {
      let group = this.value[key];
      if (!group) {
        group = this.value[key] = SortedList(vegaDataflow.tupleid);
        group.stamp = -1;
      }
      if (group.stamp < this.stamp) {
        group.stamp = this.stamp;
        this._mods[this._mlen++] = group;
      }
      return group;
    }
  });
  function processPartition(list, state, cmp, _) {
    const sort = _.sort, range = sort && !_.ignorePeers, frame = _.frame || [null, 0], data = list.data(cmp), // use cmp for stable sort
    n = data.length, b = range ? d3Array.bisector(sort) : null, w = {
      i0: 0,
      i1: 0,
      p0: 0,
      p1: 0,
      index: 0,
      data: data,
      compare: sort || vegaUtil.constant(-1)
    };
    state.init();
    for (let i = 0; i < n; ++i) {
      setWindow(w, frame, i, n);
      if (range) adjustRange(w, b);
      state.update(w, data[i]);
    }
  }
  function setWindow(w, f, i, n) {
    w.p0 = w.i0;
    w.p1 = w.i1;
    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
    w.index = i;
  }
  // if frame type is 'range', adjust window for peer values
  function adjustRange(w, bisect) {
    const r0 = w.i0, r1 = w.i1 - 1, c = w.compare, d = w.data, n = d.length - 1;
    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
  }
  exports.aggregate = Aggregate;
  exports.bin = Bin;
  exports.collect = Collect;
  exports.compare = Compare;
  exports.countpattern = CountPattern;
  exports.cross = Cross;
  exports.density = Density;
  exports.dotbin = DotBin;
  exports.expression = Expression;
  exports.extent = Extent;
  exports.facet = Facet;
  exports.field = Field;
  exports.filter = Filter;
  exports.flatten = Flatten;
  exports.fold = Fold;
  exports.formula = Formula;
  exports.generate = Generate;
  exports.impute = Impute;
  exports.joinaggregate = JoinAggregate;
  exports.kde = KDE;
  exports.key = Key;
  exports.load = Load;
  exports.lookup = Lookup;
  exports.multiextent = MultiExtent;
  exports.multivalues = MultiValues;
  exports.params = Params;
  exports.pivot = Pivot;
  exports.prefacet = PreFacet;
  exports.project = Project;
  exports.proxy = Proxy;
  exports.quantile = Quantile;
  exports.relay = Relay;
  exports.sample = Sample;
  exports.sequence = Sequence;
  exports.sieve = Sieve;
  exports.subflow = Subflow;
  exports.timeunit = TimeUnit;
  exports.tupleindex = TupleIndex;
  exports.values = Values;
  exports.window = Window;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-dataflow":"1Owpt","vega-statistics":"5GzFx","d3-array":"7CLUA","vega-time":"2Sl4A"}],"5GzFx":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3));
})(this, function (exports, d3Array) {
  "use strict";
  function* numbers(values, valueof) {
    if (valueof == null) {
      for (let value of values) {
        if (value != null && value !== '' && (value = +value) >= value) {
          yield value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        value = valueof(value, ++index, values);
        if (value != null && value !== '' && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }
  function quantiles(array, p, f) {
    const values = Float64Array.from(numbers(array, f));
    // don't depend on return value from typed array sort call
    // protects against undefined sort results in Safari (vega/vega-lite#4964)
    values.sort(d3Array.ascending);
    return p.map(_ => d3Array.quantileSorted(values, _));
  }
  function quartiles(array, f) {
    return quantiles(array, [0.25, 0.50, 0.75], f);
  }
  // Theory, Practice, and Visualization. Wiley.
  function estimateBandwidth(array, f) {
    const n = array.length, d = d3Array.deviation(array, f), q = quartiles(array, f), h = (q[2] - q[0]) / 1.34, v = Math.min(d, h) || d || Math.abs(q[0]) || 1;
    return 1.06 * v * Math.pow(n, -0.2);
  }
  function bin(_) {
    // determine range
    const maxb = _.maxbins || 20, base = _.base || 10, logb = Math.log(base), div = _.divide || [5, 2];
    let min = _.extent[0], max = _.extent[1], step, level, minstep, v, i, n;
    const span = _.span || max - min || Math.abs(min) || 1;
    if (_.step) {
      // if step size is explicitly given, use that
      step = _.step;
    } else if (_.steps) {
      // if provided, limit choice to acceptable step sizes
      v = span / maxb;
      for ((i = 0, n = _.steps.length); i < n && _.steps[i] < v; ++i) ;
      step = _.steps[Math.max(0, i - 1)];
    } else {
      // else use span to determine step size
      level = Math.ceil(Math.log(maxb) / logb);
      minstep = _.minstep || 0;
      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level));
      // increase step size if too many bins
      while (Math.ceil(span / step) > maxb) {
        step *= base;
      }
      // decrease step size if allowed
      for ((i = 0, n = div.length); i < n; ++i) {
        v = step / div[i];
        if (v >= minstep && span / v <= maxb) step = v;
      }
    }
    // update precision, min and max
    v = Math.log(step);
    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1, eps = Math.pow(base, -precision - 1);
    if (_.nice || _.nice === undefined) {
      v = Math.floor(min / step + eps) * step;
      min = min < v ? v - step : v;
      max = Math.ceil(max / step) * step;
    }
    return {
      start: min,
      stop: max === min ? min + step : max,
      step: step
    };
  }
  exports.random = Math.random;
  function setRandom(r) {
    exports.random = r;
  }
  function bootstrapCI(array, samples, alpha, f) {
    if (!array.length) return [undefined, undefined];
    const values = Float64Array.from(numbers(array, f)), n = values.length, m = samples;
    let a, i, j, mu;
    for ((j = 0, mu = Array(m)); j < m; ++j) {
      for ((a = 0, i = 0); i < n; ++i) {
        a += values[~~(exports.random() * n)];
      }
      mu[j] = a / n;
    }
    mu.sort(d3Array.ascending);
    return [d3Array.quantile(mu, alpha / 2), d3Array.quantile(mu, 1 - alpha / 2)];
  }
  // Dot density binning for dot plot construction.
  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
  function dotbin(array, step, smooth, f) {
    f = f || (_ => _);
    const n = array.length, v = new Float64Array(n);
    let i = 0, j = 1, a = f(array[0]), b = a, w = a + step, x;
    for (; j < n; ++j) {
      x = f(array[j]);
      if (x >= w) {
        b = (a + b) / 2;
        for (; i < j; ++i) v[i] = b;
        w = x + step;
        a = x;
      }
      b = x;
    }
    b = (a + b) / 2;
    for (; i < j; ++i) v[i] = b;
    return smooth ? smoothing(v, step + step / 4) : v;
  }
  // perform smoothing to reduce variance
  // swap points between "adjacent" stacks
  // Wilkinson defines adjacent as within step/4 units
  function smoothing(v, thresh) {
    const n = v.length;
    let a = 0, b = 1, c, d;
    // get left stack
    while (v[a] === v[b]) ++b;
    while (b < n) {
      // get right stack
      c = b + 1;
      while (v[b] === v[c]) ++c;
      // are stacks adjacent?
      // if so, compare sizes and swap as needed
      if (v[b] - v[b - 1] < thresh) {
        d = b + (a + c - b - b >> 1);
        while (d < b) v[d++] = v[b];
        while (d > b) v[d--] = v[a];
      }
      // update left stack indices
      a = b;
      b = c;
    }
    return v;
  }
  function lcg(seed) {
    // Random numbers using a Linear Congruential Generator with seed value
    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
    return function () {
      seed = (1103515245 * seed + 12345) % 2147483647;
      return seed / 2147483647;
    };
  }
  function integer(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    let a, b, d;
    const dist = {
      min(_) {
        if (arguments.length) {
          a = _ || 0;
          d = b - a;
          return dist;
        } else {
          return a;
        }
      },
      max(_) {
        if (arguments.length) {
          b = _ || 0;
          d = b - a;
          return dist;
        } else {
          return b;
        }
      },
      sample() {
        return a + Math.floor(d * exports.random());
      },
      pdf(x) {
        return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
      },
      cdf(x) {
        const v = Math.floor(x);
        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
      },
      icdf(p) {
        return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
      }
    };
    return dist.min(min).max(max);
  }
  const SQRT2PI = Math.sqrt(2 * Math.PI);
  const SQRT2 = Math.SQRT2;
  let nextSample = NaN;
  function sampleNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    let x = 0, y = 0, rds, c;
    if (nextSample === nextSample) {
      x = nextSample;
      nextSample = NaN;
    } else {
      do {
        x = exports.random() * 2 - 1;
        y = exports.random() * 2 - 1;
        rds = x * x + y * y;
      } while (rds === 0 || rds > 1);
      c = Math.sqrt(-2 * Math.log(rds) / rds);
      // Box-Muller transform
      x *= c;
      nextSample = y * c;
    }
    return mean + x * stdev;
  }
  function densityNormal(value, mean, stdev) {
    stdev = stdev == null ? 1 : stdev;
    const z = (value - (mean || 0)) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
  }
  // Approximation from West (2009)
  // Better Approximations to Cumulative Normal Functions
  function cumulativeNormal(value, mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (value - mean) / stdev, Z = Math.abs(z);
    let cd;
    if (Z > 37) {
      cd = 0;
    } else {
      const exp = Math.exp(-Z * Z / 2);
      let sum;
      if (Z < 7.07106781186547) {
        sum = 3.52624965998911e-02 * Z + 0.700383064443688;
        sum = sum * Z + 6.37396220353165;
        sum = sum * Z + 33.912866078383;
        sum = sum * Z + 112.079291497871;
        sum = sum * Z + 221.213596169931;
        sum = sum * Z + 220.206867912376;
        cd = exp * sum;
        sum = 8.83883476483184e-02 * Z + 1.75566716318264;
        sum = sum * Z + 16.064177579207;
        sum = sum * Z + 86.7807322029461;
        sum = sum * Z + 296.564248779674;
        sum = sum * Z + 637.333633378831;
        sum = sum * Z + 793.826512519948;
        sum = sum * Z + 440.413735824752;
        cd = cd / sum;
      } else {
        sum = Z + 0.65;
        sum = Z + 4 / sum;
        sum = Z + 3 / sum;
        sum = Z + 2 / sum;
        sum = Z + 1 / sum;
        cd = exp / sum / 2.506628274631;
      }
    }
    return z > 0 ? 1 - cd : cd;
  }
  // Approximation of Probit function using inverse error function.
  function quantileNormal(p, mean, stdev) {
    if (p < 0 || p > 1) return NaN;
    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
  }
  // Approximate inverse error function. Implementation from "Approximating
  // the erfinv function" by Mike Giles, GPU Computing Gems, volume 2, 2010.
  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0
  function erfinv(x) {
    // beware that the logarithm argument must be
    // commputed as (1.0 - x) * (1.0 + x),
    // it must NOT be simplified as 1.0 - x * x as this
    // would induce rounding errors near the boundaries +/-1
    let w = -Math.log((1 - x) * (1 + x)), p;
    if (w < 6.25) {
      w -= 3.125;
      p = -3.6444120640178196996e-21;
      p = -1.685059138182016589e-19 + p * w;
      p = 1.2858480715256400167e-18 + p * w;
      p = 1.115787767802518096e-17 + p * w;
      p = -1.333171662854620906e-16 + p * w;
      p = 2.0972767875968561637e-17 + p * w;
      p = 6.6376381343583238325e-15 + p * w;
      p = -4.0545662729752068639e-14 + p * w;
      p = -8.1519341976054721522e-14 + p * w;
      p = 2.6335093153082322977e-12 + p * w;
      p = -1.2975133253453532498e-11 + p * w;
      p = -5.4154120542946279317e-11 + p * w;
      p = 1.051212273321532285e-09 + p * w;
      p = -4.1126339803469836976e-09 + p * w;
      p = -2.9070369957882005086e-08 + p * w;
      p = 4.2347877827932403518e-07 + p * w;
      p = -1.3654692000834678645e-06 + p * w;
      p = -1.3882523362786468719e-05 + p * w;
      p = 0.0001867342080340571352 + p * w;
      p = -0.00074070253416626697512 + p * w;
      p = -0.0060336708714301490533 + p * w;
      p = 0.24015818242558961693 + p * w;
      p = 1.6536545626831027356 + p * w;
    } else if (w < 16.0) {
      w = Math.sqrt(w) - 3.25;
      p = 2.2137376921775787049e-09;
      p = 9.0756561938885390979e-08 + p * w;
      p = -2.7517406297064545428e-07 + p * w;
      p = 1.8239629214389227755e-08 + p * w;
      p = 1.5027403968909827627e-06 + p * w;
      p = -4.013867526981545969e-06 + p * w;
      p = 2.9234449089955446044e-06 + p * w;
      p = 1.2475304481671778723e-05 + p * w;
      p = -4.7318229009055733981e-05 + p * w;
      p = 6.8284851459573175448e-05 + p * w;
      p = 2.4031110387097893999e-05 + p * w;
      p = -0.0003550375203628474796 + p * w;
      p = 0.00095328937973738049703 + p * w;
      p = -0.0016882755560235047313 + p * w;
      p = 0.0024914420961078508066 + p * w;
      p = -0.0037512085075692412107 + p * w;
      p = 0.005370914553590063617 + p * w;
      p = 1.0052589676941592334 + p * w;
      p = 3.0838856104922207635 + p * w;
    } else if (Number.isFinite(w)) {
      w = Math.sqrt(w) - 5.0;
      p = -2.7109920616438573243e-11;
      p = -2.5556418169965252055e-10 + p * w;
      p = 1.5076572693500548083e-09 + p * w;
      p = -3.7894654401267369937e-09 + p * w;
      p = 7.6157012080783393804e-09 + p * w;
      p = -1.4960026627149240478e-08 + p * w;
      p = 2.9147953450901080826e-08 + p * w;
      p = -6.7711997758452339498e-08 + p * w;
      p = 2.2900482228026654717e-07 + p * w;
      p = -9.9298272942317002539e-07 + p * w;
      p = 4.5260625972231537039e-06 + p * w;
      p = -1.9681778105531670567e-05 + p * w;
      p = 7.5995277030017761139e-05 + p * w;
      p = -0.00021503011930044477347 + p * w;
      p = -0.00013871931833623122026 + p * w;
      p = 1.0103004648645343977 + p * w;
      p = 4.8499064014085844221 + p * w;
    } else {
      p = Infinity;
    }
    return p * x;
  }
  function gaussian(mean, stdev) {
    let mu, sigma;
    const dist = {
      mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist;
        } else {
          return mu;
        }
      },
      stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist;
        } else {
          return sigma;
        }
      },
      sample: () => sampleNormal(mu, sigma),
      pdf: value => densityNormal(value, mu, sigma),
      cdf: value => cumulativeNormal(value, mu, sigma),
      icdf: p => quantileNormal(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
  }
  function kde(support, bandwidth) {
    const kernel = gaussian();
    let n = 0;
    const dist = {
      data(_) {
        if (arguments.length) {
          support = _;
          n = _ ? _.length : 0;
          return dist.bandwidth(bandwidth);
        } else {
          return support;
        }
      },
      bandwidth(_) {
        if (!arguments.length) return bandwidth;
        bandwidth = _;
        if (!bandwidth && support) bandwidth = estimateBandwidth(support);
        return dist;
      },
      sample() {
        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();
      },
      pdf(x) {
        let y = 0, i = 0;
        for (; i < n; ++i) {
          y += kernel.pdf((x - support[i]) / bandwidth);
        }
        return y / bandwidth / n;
      },
      cdf(x) {
        let y = 0, i = 0;
        for (; i < n; ++i) {
          y += kernel.cdf((x - support[i]) / bandwidth);
        }
        return y / n;
      },
      icdf() {
        throw Error('KDE icdf not supported.');
      }
    };
    return dist.data(support);
  }
  function sampleLogNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    return Math.exp(mean + sampleNormal() * stdev);
  }
  function densityLogNormal(value, mean, stdev) {
    if (value <= 0) return 0;
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (Math.log(value) - mean) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);
  }
  function cumulativeLogNormal(value, mean, stdev) {
    return cumulativeNormal(Math.log(value), mean, stdev);
  }
  function quantileLogNormal(p, mean, stdev) {
    return Math.exp(quantileNormal(p, mean, stdev));
  }
  function lognormal(mean, stdev) {
    let mu, sigma;
    const dist = {
      mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist;
        } else {
          return mu;
        }
      },
      stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist;
        } else {
          return sigma;
        }
      },
      sample: () => sampleLogNormal(mu, sigma),
      pdf: value => densityLogNormal(value, mu, sigma),
      cdf: value => cumulativeLogNormal(value, mu, sigma),
      icdf: p => quantileLogNormal(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
  }
  function mixture(dists, weights) {
    let m = 0, w;
    function normalize(x) {
      const w = [];
      let sum = 0, i;
      for (i = 0; i < m; ++i) {
        sum += w[i] = x[i] == null ? 1 : +x[i];
      }
      for (i = 0; i < m; ++i) {
        w[i] /= sum;
      }
      return w;
    }
    const dist = {
      weights(_) {
        if (arguments.length) {
          w = normalize(weights = _ || []);
          return dist;
        }
        return weights;
      },
      distributions(_) {
        if (arguments.length) {
          if (_) {
            m = _.length;
            dists = _;
          } else {
            m = 0;
            dists = [];
          }
          return dist.weights(weights);
        }
        return dists;
      },
      sample() {
        const r = exports.random();
        let d = dists[m - 1], v = w[0], i = 0;
        // first select distribution
        for (; i < m - 1; v += w[++i]) {
          if (r < v) {
            d = dists[i];
            break;
          }
        }
        // then sample from it
        return d.sample();
      },
      pdf(x) {
        let p = 0, i = 0;
        for (; i < m; ++i) {
          p += w[i] * dists[i].pdf(x);
        }
        return p;
      },
      cdf(x) {
        let p = 0, i = 0;
        for (; i < m; ++i) {
          p += w[i] * dists[i].cdf(x);
        }
        return p;
      },
      icdf() {
        throw Error('Mixture icdf not supported.');
      }
    };
    return dist.distributions(dists).weights(weights);
  }
  function sampleUniform(min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }
    return min + (max - min) * exports.random();
  }
  function densityUniform(value, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }
    return value >= min && value <= max ? 1 / (max - min) : 0;
  }
  function cumulativeUniform(value, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }
    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);
  }
  function quantileUniform(p, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }
    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;
  }
  function uniform(min, max) {
    let a, b;
    const dist = {
      min(_) {
        if (arguments.length) {
          a = _ || 0;
          return dist;
        } else {
          return a;
        }
      },
      max(_) {
        if (arguments.length) {
          b = _ == null ? 1 : _;
          return dist;
        } else {
          return b;
        }
      },
      sample: () => sampleUniform(a, b),
      pdf: value => densityUniform(value, a, b),
      cdf: value => cumulativeUniform(value, a, b),
      icdf: p => quantileUniform(p, a, b)
    };
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }
    return dist.min(min).max(max);
  }
  // Ordinary Least Squares
  function ols(uX, uY, uXY, uX2) {
    const delta = uX2 - uX * uX, slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta, intercept = uY - slope * uX;
    return [intercept, slope];
  }
  function points(data, x, y, sort) {
    data = data.filter(d => {
      let u = x(d), v = y(d);
      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
    });
    if (sort) {
      data.sort((a, b) => x(a) - x(b));
    }
    const n = data.length, X = new Float64Array(n), Y = new Float64Array(n);
    // extract values, calculate means
    let i = 0, ux = 0, uy = 0, xv, yv, d;
    for (d of data) {
      X[i] = xv = +x(d);
      Y[i] = yv = +y(d);
      ++i;
      ux += (xv - ux) / i;
      uy += (yv - uy) / i;
    }
    // mean center the data
    for (i = 0; i < n; ++i) {
      X[i] -= ux;
      Y[i] -= uy;
    }
    return [X, Y, ux, uy];
  }
  function visitPoints(data, x, y, callback) {
    let i = -1, u, v;
    for (const d of data) {
      u = x(d);
      v = y(d);
      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {
        callback(u, v, ++i);
      }
    }
  }
  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  function rSquared(data, x, y, uY, predict) {
    let SSE = 0, SST = 0;
    visitPoints(data, x, y, (dx, dy) => {
      const sse = dy - predict(dx), sst = dy - uY;
      SSE += sse * sse;
      SST += sst * sst;
    });
    return 1 - SSE / SST;
  }
  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  function linear(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    visitPoints(data, x, y, (dx, dy) => {
      ++n;
      X += (dx - X) / n;
      Y += (dy - Y) / n;
      XY += (dx * dy - XY) / n;
      X2 += (dx * dx - X2) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = x => coef[0] + coef[1] * x;
    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, Y, predict)
    };
  }
  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  function log(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    visitPoints(data, x, y, (dx, dy) => {
      ++n;
      dx = Math.log(dx);
      X += (dx - X) / n;
      Y += (dy - Y) / n;
      XY += (dx * dy - XY) / n;
      X2 += (dx * dx - X2) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = x => coef[0] + coef[1] * Math.log(x);
    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, Y, predict)
    };
  }
  function exp(data, x, y) {
    // eslint-disable-next-line no-unused-vars
    const [xv, yv, ux, uy] = points(data, x, y);
    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;
    visitPoints(data, x, y, (_, dy) => {
      dx = xv[n++];
      ly = Math.log(dy);
      xy = dx * dy;
      YL += (dy * ly - YL) / n;
      XY += (xy - XY) / n;
      XYL += (xy * ly - XYL) / n;
      X2Y += (dx * xy - X2Y) / n;
    });
    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy), predict = x => Math.exp(c0 + c1 * (x - ux));
    return {
      coef: [Math.exp(c0 - c1 * ux), c1],
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }
  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  function pow(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;
    visitPoints(data, x, y, (dx, dy) => {
      const lx = Math.log(dx), ly = Math.log(dy);
      ++n;
      X += (lx - X) / n;
      Y += (ly - Y) / n;
      XY += (lx * ly - XY) / n;
      X2 += (lx * lx - X2) / n;
      YS += (dy - YS) / n;
    });
    const coef = ols(X, Y, XY, X2), predict = x => coef[0] * Math.pow(x, coef[1]);
    coef[0] = Math.exp(coef[0]);
    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, YS, predict)
    };
  }
  function quad(data, x, y) {
    const [xv, yv, ux, uy] = points(data, x, y), n = xv.length;
    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0, i, dx, dy, x2;
    for (i = 0; i < n; ) {
      dx = xv[i];
      dy = yv[i++];
      x2 = dx * dx;
      X2 += (x2 - X2) / i;
      X3 += (x2 * dx - X3) / i;
      X4 += (x2 * x2 - X4) / i;
      XY += (dx * dy - XY) / i;
      X2Y += (x2 * dy - X2Y) / i;
    }
    const X2X2 = X4 - X2 * X2, d = X2 * X2X2 - X3 * X3, a = (X2Y * X2 - XY * X3) / d, b = (XY * X2X2 - X2Y * X3) / d, c = -a * X2, predict = x => {
      x = x - ux;
      return a * x * x + b * x + c + uy;
    };
    // transform coefficients back from mean-centered space
    return {
      coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }
  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  // ... which was adapted from regression-js by Tom Alexander
  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE
  function poly(data, x, y, order) {
    // use more efficient methods for lower orders
    if (order === 1) return linear(data, x, y);
    if (order === 2) return quad(data, x, y);
    const [xv, yv, ux, uy] = points(data, x, y), n = xv.length, lhs = [], rhs = [], k = order + 1;
    let i, j, l, v, c;
    for (i = 0; i < k; ++i) {
      for ((l = 0, v = 0); l < n; ++l) {
        v += Math.pow(xv[l], i) * yv[l];
      }
      lhs.push(v);
      c = new Float64Array(k);
      for (j = 0; j < k; ++j) {
        for ((l = 0, v = 0); l < n; ++l) {
          v += Math.pow(xv[l], i + j);
        }
        c[j] = v;
      }
      rhs.push(c);
    }
    rhs.push(lhs);
    const coef = gaussianElimination(rhs), predict = x => {
      x -= ux;
      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;
      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);
      return y;
    };
    return {
      coef: uncenter(k, coef, -ux, uy),
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }
  function uncenter(k, a, x, y) {
    const z = Array(k);
    let i, j, v, c;
    // initialize to zero
    for (i = 0; i < k; ++i) z[i] = 0;
    // polynomial expansion
    for (i = k - 1; i >= 0; --i) {
      v = a[i];
      c = 1;
      z[i] += v;
      for (j = 1; j <= i; ++j) {
        c *= (i + 1 - j) / j;
        // binomial coefficent
        z[i - j] += v * Math.pow(x, j) * c;
      }
    }
    // bias term
    z[0] += y;
    return z;
  }
  // Given an array for a two-dimensional matrix and the polynomial order,
  // solve A * x = b using Gaussian elimination.
  function gaussianElimination(matrix) {
    const n = matrix.length - 1, coef = [];
    let i, j, k, r, t;
    for (i = 0; i < n; ++i) {
      r = i;
      // max row
      for (j = i + 1; j < n; ++j) {
        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
          r = j;
        }
      }
      for (k = i; k < n + 1; ++k) {
        t = matrix[k][i];
        matrix[k][i] = matrix[k][r];
        matrix[k][r] = t;
      }
      for (j = i + 1; j < n; ++j) {
        for (k = n; k >= i; k--) {
          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
        }
      }
    }
    for (j = n - 1; j >= 0; --j) {
      t = 0;
      for (k = j + 1; k < n; ++k) {
        t += matrix[k][j] * coef[k];
      }
      coef[j] = (matrix[n][j] - t) / matrix[j][j];
    }
    return coef;
  }
  const maxiters = 2, epsilon = 1e-12;
  // Adapted from science.js by Jason Davies
  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE
  function loess(data, x, y, bandwidth) {
    const [xv, yv, ux, uy] = points(data, x, y, true), n = xv.length, bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors
    yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);
    for (let iter = -1; ++iter <= maxiters; ) {
      const interval = [0, bw - 1];
      for (let i = 0; i < n; ++i) {
        const dx = xv[i], i0 = interval[0], i1 = interval[1], edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;
        const denom = 1 / Math.abs(xv[edge] - dx || 1);
        // avoid singularity!
        for (let k = i0; k <= i1; ++k) {
          const xk = xv[k], yk = yv[k], w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k], xkw = xk * w;
          W += w;
          X += xkw;
          Y += yk * w;
          XY += yk * xkw;
          X2 += xk * xkw;
        }
        // linear regression fit
        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);
        yhat[i] = a + b * dx;
        residuals[i] = Math.abs(yv[i] - yhat[i]);
        updateInterval(xv, i + 1, interval);
      }
      if (iter === maxiters) {
        break;
      }
      const medianResidual = d3Array.median(residuals);
      if (Math.abs(medianResidual) < epsilon) break;
      for (let i = 0, arg, w; i < n; ++i) {
        arg = residuals[i] / (6 * medianResidual);
        // default to epsilon (rather than zero) for large deviations
        // keeping weights tiny but non-zero prevents singularites
        robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;
      }
    }
    return output(xv, yhat, ux, uy);
  }
  // weighting kernel for local regression
  function tricube(x) {
    return (x = 1 - x * x * x) * x * x;
  }
  // advance sliding window interval of nearest neighbors
  function updateInterval(xv, i, interval) {
    const val = xv[i];
    let left = interval[0], right = interval[1] + 1;
    if (right >= xv.length) return;
    // step right if distance to new right edge is <= distance to old left edge
    // step when distance is equal to ensure movement over duplicate x values
    while (i > left && xv[right] - val <= val - xv[left]) {
      interval[0] = ++left;
      interval[1] = right;
      ++right;
    }
  }
  // generate smoothed output points
  // average points with repeated x values
  function output(xv, yhat, ux, uy) {
    const n = xv.length, out = [];
    let i = 0, cnt = 0, prev = [], v;
    for (; i < n; ++i) {
      v = xv[i] + ux;
      if (prev[0] === v) {
        // average output values via online update
        prev[1] += (yhat[i] - prev[1]) / ++cnt;
      } else {
        // add new output point
        cnt = 0;
        prev[1] += uy;
        prev = [v, yhat[i]];
        out.push(prev);
      }
    }
    prev[1] += uy;
    return out;
  }
  // subdivide up to accuracy of 0.1 degrees
  const MIN_RADIANS = 0.1 * Math.PI / 180;
  // Adaptively sample an interpolated function over a domain extent
  function sampleCurve(f, extent, minSteps, maxSteps) {
    minSteps = minSteps || 25;
    maxSteps = Math.max(minSteps, maxSteps || 200);
    const point = x => [x, f(x)], minX = extent[0], maxX = extent[1], span = maxX - minX, stop = span / maxSteps, prev = [point(minX)], next = [];
    if (minSteps === maxSteps) {
      // no adaptation, sample uniform grid directly and return
      for (let i = 1; i < maxSteps; ++i) {
        prev.push(point(minX + i / minSteps * span));
      }
      prev.push(point(maxX));
      return prev;
    } else {
      // sample minimum points on uniform grid
      // then move on to perform adaptive refinement
      next.push(point(maxX));
      for (let i = minSteps; --i > 0; ) {
        next.push(point(minX + i / minSteps * span));
      }
    }
    let p0 = prev[0], p1 = next[next.length - 1];
    while (p1) {
      // midpoint for potential curve subdivision
      const pm = point((p0[0] + p1[0]) / 2);
      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {
        // maximum resolution has not yet been met, and
        // subdivision midpoint sufficiently different from endpoint
        // save subdivision, push midpoint onto the visitation stack
        next.push(pm);
      } else {
        // subdivision midpoint sufficiently similar to endpoint
        // skip subdivision, store endpoint, move to next point on the stack
        p0 = p1;
        prev.push(p1);
        next.pop();
      }
      p1 = next[next.length - 1];
    }
    return prev;
  }
  function angleDelta(p, q, r) {
    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]), a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);
    return Math.abs(a0 - a1);
  }
  exports.bandwidthNRD = estimateBandwidth;
  exports.bin = bin;
  exports.bootstrapCI = bootstrapCI;
  exports.cumulativeLogNormal = cumulativeLogNormal;
  exports.cumulativeNormal = cumulativeNormal;
  exports.cumulativeUniform = cumulativeUniform;
  exports.densityLogNormal = densityLogNormal;
  exports.densityNormal = densityNormal;
  exports.densityUniform = densityUniform;
  exports.dotbin = dotbin;
  exports.quantileLogNormal = quantileLogNormal;
  exports.quantileNormal = quantileNormal;
  exports.quantileUniform = quantileUniform;
  exports.quantiles = quantiles;
  exports.quartiles = quartiles;
  exports.randomInteger = integer;
  exports.randomKDE = kde;
  exports.randomLCG = lcg;
  exports.randomLogNormal = lognormal;
  exports.randomMixture = mixture;
  exports.randomNormal = gaussian;
  exports.randomUniform = uniform;
  exports.regressionExp = exp;
  exports.regressionLinear = linear;
  exports.regressionLoess = loess;
  exports.regressionLog = log;
  exports.regressionPoly = poly;
  exports.regressionPow = pow;
  exports.regressionQuad = quad;
  exports.sampleCurve = sampleCurve;
  exports.sampleLogNormal = sampleLogNormal;
  exports.sampleNormal = sampleNormal;
  exports.sampleUniform = sampleUniform;
  exports.setRandom = setRandom;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA"}],"4BrYl":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-scenegraph'), require('vega-util')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-scenegraph', 'vega-util'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.vega));
})(this, function (exports, vegaDataflow, vegaScenegraph, vegaUtil) {
  "use strict";
  const Top = 'top';
  const Left = 'left';
  const Right = 'right';
  const Bottom = 'bottom';
  const TopLeft = 'top-left';
  const TopRight = 'top-right';
  const BottomLeft = 'bottom-left';
  const BottomRight = 'bottom-right';
  const Start = 'start';
  const Middle = 'middle';
  const End = 'end';
  const X = 'x';
  const Y = 'y';
  const Group = 'group';
  const AxisRole = 'axis';
  const TitleRole = 'title';
  const FrameRole = 'frame';
  const ScopeRole = 'scope';
  const LegendRole = 'legend';
  const RowHeader = 'row-header';
  const RowFooter = 'row-footer';
  const RowTitle = 'row-title';
  const ColHeader = 'column-header';
  const ColFooter = 'column-footer';
  const ColTitle = 'column-title';
  const Padding = 'padding';
  const Symbols = 'symbol';
  const Fit = 'fit';
  const FitX = 'fit-x';
  const FitY = 'fit-y';
  const Pad = 'pad';
  const None = 'none';
  const All = 'all';
  const Each = 'each';
  const Flush = 'flush';
  const Column = 'column';
  const Row = 'row';
  /**
  * Calculate bounding boxes for scenegraph items.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {object} params.mark - The scenegraph mark instance to bound.
  */
  function Bound(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Bound, vegaDataflow.Transform, {
    transform(_, pulse) {
      const view = pulse.dataflow, mark = _.mark, type = mark.marktype, entry = vegaScenegraph.Marks[type], bound = entry.bound;
      let markBounds = mark.bounds, rebound;
      if (entry.nested) {
        // multi-item marks have a single bounds instance
        if (mark.items.length) view.dirty(mark.items[0]);
        markBounds = boundItem(mark, bound);
        mark.items.forEach(item => {
          item.bounds.clear().union(markBounds);
        });
      } else if (type === Group || _.modified()) {
        // operator parameters modified -> re-bound all items
        // updates group bounds in response to modified group content
        pulse.visit(pulse.MOD, item => view.dirty(item));
        markBounds.clear();
        mark.items.forEach(item => markBounds.union(boundItem(item, bound)));
        // force reflow for axes/legends/titles to propagate any layout changes
        switch (mark.role) {
          case AxisRole:
          case LegendRole:
          case TitleRole:
            pulse.reflow();
        }
      } else {
        // incrementally update bounds, re-bound mark as needed
        rebound = pulse.changed(pulse.REM);
        pulse.visit(pulse.ADD, item => {
          markBounds.union(boundItem(item, bound));
        });
        pulse.visit(pulse.MOD, item => {
          rebound = rebound || markBounds.alignsWith(item.bounds);
          view.dirty(item);
          markBounds.union(boundItem(item, bound));
        });
        if (rebound) {
          markBounds.clear();
          mark.items.forEach(item => markBounds.union(item.bounds));
        }
      }
      // ensure mark bounds do not exceed any clipping region
      vegaScenegraph.boundClip(mark);
      return pulse.modifies('bounds');
    }
  });
  function boundItem(item, bound, opt) {
    return bound(item.bounds.clear(), item, opt);
  }
  const COUNTER_NAME = ':vega_identifier:';
  /**
  * Adds a unique identifier to all added tuples.
  * This transform creates a new signal that serves as an id counter.
  * As a result, the id counter is shared across all instances of this
  * transform, generating unique ids across multiple data streams. In
  * addition, this signal value can be included in a snapshot of the
  * dataflow state, enabling correct resumption of id allocation.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {string} params.as - The field name for the generated identifier.
  */
  function Identifier(params) {
    vegaDataflow.Transform.call(this, 0, params);
  }
  Identifier.Definition = {
    'type': 'Identifier',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'as',
      'type': 'string',
      'required': true
    }]
  };
  vegaUtil.inherits(Identifier, vegaDataflow.Transform, {
    transform(_, pulse) {
      const counter = getCounter(pulse.dataflow), as = _.as;
      let id = counter.value;
      pulse.visit(pulse.ADD, t => t[as] = t[as] || ++id);
      counter.set(this.value = id);
      return pulse;
    }
  });
  function getCounter(view) {
    return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));
  }
  /**
  * Bind scenegraph items to a scenegraph mark instance.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {object} params.markdef - The mark definition for creating the mark.
  *   This is an object of legal scenegraph mark properties which *must* include
  *   the 'marktype' property.
  */
  function Mark(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Mark, vegaDataflow.Transform, {
    transform(_, pulse) {
      let mark = this.value;
      // acquire mark on first invocation, bind context and group
      if (!mark) {
        mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup(_), _.index);
        mark.group.context = _.context;
        if (!_.context.group) _.context.group = mark.group;
        mark.source = this.source;
        // point to upstream collector
        mark.clip = _.clip;
        mark.interactive = _.interactive;
        this.value = mark;
      }
      // initialize entering items
      const Init = mark.marktype === Group ? vegaScenegraph.GroupItem : vegaScenegraph.Item;
      pulse.visit(pulse.ADD, item => Init.call(item, mark));
      // update clipping and/or interactive status
      if (_.modified('clip') || _.modified('interactive')) {
        mark.clip = _.clip;
        mark.interactive = !!_.interactive;
        mark.zdirty = true;
        // force scenegraph re-eval
        pulse.reflow();
      }
      // bind items array to scenegraph mark
      mark.items = pulse.source;
      return pulse;
    }
  });
  function lookup(_) {
    const g = _.groups, p = _.parent;
    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
  }
  /**
  * Analyze items for overlap, changing opacity to hide items with
  * overlapping bounding boxes. This transform will preserve at least
  * two items (e.g., first and last) even if overlap persists.
  * @param {object} params - The parameters for this operator.
  * @param {function(*,*): number} [params.sort] - A comparator
  *   function for sorting items.
  * @param {object} [params.method] - The overlap removal method to apply.
  *   One of 'parity' (default, hide every other item until there is no
  *   more overlap) or 'greedy' (sequentially scan and hide and items that
  *   overlap with the last visible item).
  * @param {object} [params.boundScale] - A scale whose range should be used
  *   to bound the items. Items exceeding the bounds of the scale range
  *   will be treated as overlapping. If null or undefined, no bounds check
  *   will be applied.
  * @param {object} [params.boundOrient] - The orientation of the scale
  *   (top, bottom, left, or right) used to bound items. This parameter is
  *   ignored if boundScale is null or undefined.
  * @param {object} [params.boundTolerance] - The tolerance in pixels for
  *   bound inclusion testing (default 1). This specifies by how many pixels
  *   an item's bounds may exceed the scale range bounds and not be culled.
  * @constructor
  */
  function Overlap(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  const methods = {
    parity: items => items.filter((item, i) => i % 2 ? item.opacity = 0 : 1),
    greedy: (items, sep) => {
      let a;
      return items.filter((b, i) => !i || !intersect(a.bounds, b.bounds, sep) ? (a = b, 1) : b.opacity = 0);
    }
  };
  // compute bounding box intersection
  // including padding pixels of separation
  const intersect = (a, b, sep) => sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
  const hasOverlap = (items, pad) => {
    for (var i = 1, n = items.length, a = items[0].bounds, b; i < n; (a = b, ++i)) {
      if (intersect(a, b = items[i].bounds, pad)) return true;
    }
  };
  const hasBounds = item => {
    const b = item.bounds;
    return b.width() > 1 && b.height() > 1;
  };
  const boundTest = (scale, orient, tolerance) => {
    var range = scale.range(), b = new vegaScenegraph.Bounds();
    if (orient === Top || orient === Bottom) {
      b.set(range[0], -Infinity, range[1], +Infinity);
    } else {
      b.set(-Infinity, range[0], +Infinity, range[1]);
    }
    b.expand(tolerance || 1);
    return item => b.encloses(item.bounds);
  };
  // reset all items to be fully opaque
  const reset = source => {
    source.forEach(item => item.opacity = 1);
    return source;
  };
  // add all tuples to mod, fork pulse if parameters were modified
  // fork prevents cross-stream tuple pollution (e.g., pulse from scale)
  const reflow = (pulse, _) => pulse.reflow(_.modified()).modifies('opacity');
  vegaUtil.inherits(Overlap, vegaDataflow.Transform, {
    transform(_, pulse) {
      const reduce = methods[_.method] || methods.parity, sep = _.separation || 0;
      let source = pulse.materialize(pulse.SOURCE).source, items, test;
      if (!source || !source.length) return;
      if (!_.method) {
        // early exit if method is falsy
        if (_.modified('method')) {
          reset(source);
          pulse = reflow(pulse, _);
        }
        return pulse;
      }
      // skip labels with no content
      source = source.filter(hasBounds);
      // early exit, nothing to do
      if (!source.length) return;
      if (_.sort) {
        source = source.slice().sort(_.sort);
      }
      items = reset(source);
      pulse = reflow(pulse, _);
      if (items.length >= 3 && hasOverlap(items, sep)) {
        do {
          items = reduce(items, sep);
        } while (items.length >= 3 && hasOverlap(items, sep));
        if (items.length < 3 && !vegaUtil.peek(source).opacity) {
          if (items.length > 1) vegaUtil.peek(items).opacity = 0;
          vegaUtil.peek(source).opacity = 1;
        }
      }
      if (_.boundScale && _.boundTolerance >= 0) {
        test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
        source.forEach(item => {
          if (!test(item)) item.opacity = 0;
        });
      }
      // re-calculate mark bounds
      const bounds = items[0].mark.bounds.clear();
      source.forEach(item => {
        if (item.opacity) bounds.union(item.bounds);
      });
      return pulse;
    }
  });
  /**
  * Queue modified scenegraph items for rendering.
  * @constructor
  */
  function Render(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Render, vegaDataflow.Transform, {
    transform(_, pulse) {
      const view = pulse.dataflow;
      pulse.visit(pulse.ALL, item => view.dirty(item));
      // set z-index dirty flag as needed
      if (pulse.fields && pulse.fields['zindex']) {
        const item = pulse.source && pulse.source[0];
        if (item) item.mark.zdirty = true;
      }
    }
  });
  const tempBounds = new vegaScenegraph.Bounds();
  function set(item, property, value) {
    return item[property] === value ? 0 : (item[property] = value, 1);
  }
  function isYAxis(mark) {
    var orient = mark.items[0].orient;
    return orient === Left || orient === Right;
  }
  function axisIndices(datum) {
    let index = +datum.grid;
    return [datum.ticks ? index++ : -1, // ticks index
    datum.labels ? index++ : -1, // labels index
    index + +datum.domain];
  }
  function axisLayout(view, axis, width, height) {
    var item = axis.items[0], datum = item.datum, delta = item.translate != null ? item.translate : 0.5, orient = item.orient, indices = axisIndices(datum), range = item.range, offset = item.offset, position = item.position, minExtent = item.minExtent, maxExtent = item.maxExtent, title = datum.title && item.items[indices[2]].items[0], titlePadding = item.titlePadding, bounds = item.bounds, dl = title && vegaScenegraph.multiLineOffset(title), x = 0, y = 0, i, s;
    tempBounds.clear().union(bounds);
    bounds.clear();
    if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
    if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds);
    // position axis group and title
    switch (orient) {
      case Top:
        x = position || 0;
        y = -offset;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
        bounds.add(0, -s).add(range, 0);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);
        break;
      case Left:
        x = -offset;
        y = position || 0;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
        bounds.add(-s, 0).add(0, range);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);
        break;
      case Right:
        x = width + offset;
        y = position || 0;
        s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
        bounds.add(0, 0).add(s, range);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);
        break;
      case Bottom:
        x = position || 0;
        y = height + offset;
        s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
        bounds.add(0, 0).add(range, s);
        if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);
        break;
      default:
        x = item.x;
        y = item.y;
    }
    // update bounds
    vegaScenegraph.boundStroke(bounds.translate(x, y), item);
    if (set(item, 'x', x + delta) | set(item, 'y', y + delta)) {
      item.bounds = tempBounds;
      view.dirty(item);
      item.bounds = bounds;
      view.dirty(item);
    }
    return item.mark.bounds.clear().union(bounds);
  }
  function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {
    const b = title.bounds;
    if (title.auto) {
      const v = sign * (offset + dl + pad);
      let dx = 0, dy = 0;
      view.dirty(title);
      isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);
      title.mark.bounds.clear().union(b.translate(-dx, -dy));
      view.dirty(title);
    }
    bounds.union(b);
  }
  const min = (a, b) => Math.floor(Math.min(a, b));
  const max = (a, b) => Math.ceil(Math.max(a, b));
  function gridLayoutGroups(group) {
    var groups = group.items, n = groups.length, i = 0, mark, items;
    const views = {
      marks: [],
      rowheaders: [],
      rowfooters: [],
      colheaders: [],
      colfooters: [],
      rowtitle: null,
      coltitle: null
    };
    // layout axes, gather legends, collect bounds
    for (; i < n; ++i) {
      mark = groups[i];
      items = mark.items;
      if (mark.marktype === Group) {
        switch (mark.role) {
          case AxisRole:
          case LegendRole:
          case TitleRole:
            break;
          case RowHeader:
            views.rowheaders.push(...items);
            break;
          case RowFooter:
            views.rowfooters.push(...items);
            break;
          case ColHeader:
            views.colheaders.push(...items);
            break;
          case ColFooter:
            views.colfooters.push(...items);
            break;
          case RowTitle:
            views.rowtitle = items[0];
            break;
          case ColTitle:
            views.coltitle = items[0];
            break;
          default:
            views.marks.push(...items);
        }
      }
    }
    return views;
  }
  function bboxFlush(item) {
    return new vegaScenegraph.Bounds().set(0, 0, item.width || 0, item.height || 0);
  }
  function bboxFull(item) {
    const b = item.bounds.clone();
    return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
  }
  function get(opt, key, d) {
    const v = vegaUtil.isObject(opt) ? opt[key] : opt;
    return v != null ? v : d !== undefined ? d : 0;
  }
  function offsetValue(v) {
    return v < 0 ? Math.ceil(-v) : 0;
  }
  function gridLayout(view, groups, opt) {
    var dirty = !opt.nodirty, bbox = opt.bounds === Flush ? bboxFlush : bboxFull, bounds = tempBounds.set(0, 0, 0, 0), alignCol = get(opt.align, Column), alignRow = get(opt.align, Row), padCol = get(opt.padding, Column), padRow = get(opt.padding, Row), ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), n = groups.length, xOffset = Array(n), xExtent = Array(ncols), xMax = 0, yOffset = Array(n), yExtent = Array(nrows), yMax = 0, dx = Array(n), dy = Array(n), boxes = Array(n), m, i, c, r, b, g, px, py, x, y, offset;
    for (i = 0; i < ncols; ++i) xExtent[i] = 0;
    for (i = 0; i < nrows; ++i) yExtent[i] = 0;
    // determine offsets for each group
    for (i = 0; i < n; ++i) {
      g = groups[i];
      b = boxes[i] = bbox(g);
      g.x = g.x || 0;
      dx[i] = 0;
      g.y = g.y || 0;
      dy[i] = 0;
      c = i % ncols;
      r = ~~(i / ncols);
      xMax = Math.max(xMax, px = Math.ceil(b.x2));
      yMax = Math.max(yMax, py = Math.ceil(b.y2));
      xExtent[c] = Math.max(xExtent[c], px);
      yExtent[r] = Math.max(yExtent[r], py);
      xOffset[i] = padCol + offsetValue(b.x1);
      yOffset[i] = padRow + offsetValue(b.y1);
      if (dirty) view.dirty(groups[i]);
    }
    // set initial alignment offsets
    for (i = 0; i < n; ++i) {
      if (i % ncols === 0) xOffset[i] = 0;
      if (i < ncols) yOffset[i] = 0;
    }
    // enforce column alignment constraints
    if (alignCol === Each) {
      for (c = 1; c < ncols; ++c) {
        for ((offset = 0, i = c); i < n; i += ncols) {
          if (offset < xOffset[i]) offset = xOffset[i];
        }
        for (i = c; i < n; i += ncols) {
          xOffset[i] = offset + xExtent[c - 1];
        }
      }
    } else if (alignCol === All) {
      for ((offset = 0, i = 0); i < n; ++i) {
        if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
      }
      for (i = 0; i < n; ++i) {
        if (i % ncols) xOffset[i] = offset + xMax;
      }
    } else {
      for ((alignCol = false, c = 1); c < ncols; ++c) {
        for (i = c; i < n; i += ncols) {
          xOffset[i] += xExtent[c - 1];
        }
      }
    }
    // enforce row alignment constraints
    if (alignRow === Each) {
      for (r = 1; r < nrows; ++r) {
        for ((offset = 0, i = r * ncols, m = i + ncols); i < m; ++i) {
          if (offset < yOffset[i]) offset = yOffset[i];
        }
        for (i = r * ncols; i < m; ++i) {
          yOffset[i] = offset + yExtent[r - 1];
        }
      }
    } else if (alignRow === All) {
      for ((offset = 0, i = ncols); i < n; ++i) {
        if (offset < yOffset[i]) offset = yOffset[i];
      }
      for (i = ncols; i < n; ++i) {
        yOffset[i] = offset + yMax;
      }
    } else {
      for ((alignRow = false, r = 1); r < nrows; ++r) {
        for ((i = r * ncols, m = i + ncols); i < m; ++i) {
          yOffset[i] += yExtent[r - 1];
        }
      }
    }
    // perform horizontal grid layout
    for ((x = 0, i = 0); i < n; ++i) {
      x = xOffset[i] + (i % ncols ? x : 0);
      dx[i] += x - groups[i].x;
    }
    // perform vertical grid layout
    for (c = 0; c < ncols; ++c) {
      for ((y = 0, i = c); i < n; i += ncols) {
        y += yOffset[i];
        dy[i] += y - groups[i].y;
      }
    }
    // perform horizontal centering
    if (alignCol && get(opt.center, Column) && nrows > 1) {
      for (i = 0; i < n; ++i) {
        b = alignCol === All ? xMax : xExtent[i % ncols];
        x = b - boxes[i].x2 - groups[i].x - dx[i];
        if (x > 0) dx[i] += x / 2;
      }
    }
    // perform vertical centering
    if (alignRow && get(opt.center, Row) && ncols !== 1) {
      for (i = 0; i < n; ++i) {
        b = alignRow === All ? yMax : yExtent[~~(i / ncols)];
        y = b - boxes[i].y2 - groups[i].y - dy[i];
        if (y > 0) dy[i] += y / 2;
      }
    }
    // position grid relative to anchor
    for (i = 0; i < n; ++i) {
      bounds.union(boxes[i].translate(dx[i], dy[i]));
    }
    x = get(opt.anchor, X);
    y = get(opt.anchor, Y);
    switch (get(opt.anchor, Column)) {
      case End:
        x -= bounds.width();
        break;
      case Middle:
        x -= bounds.width() / 2;
    }
    switch (get(opt.anchor, Row)) {
      case End:
        y -= bounds.height();
        break;
      case Middle:
        y -= bounds.height() / 2;
    }
    x = Math.round(x);
    y = Math.round(y);
    // update mark positions, bounds, dirty
    bounds.clear();
    for (i = 0; i < n; ++i) {
      groups[i].mark.bounds.clear();
    }
    for (i = 0; i < n; ++i) {
      g = groups[i];
      g.x += dx[i] += x;
      g.y += dy[i] += y;
      bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
      if (dirty) view.dirty(g);
    }
    return bounds;
  }
  function trellisLayout(view, group, opt) {
    var views = gridLayoutGroups(group), groups = views.marks, bbox = opt.bounds === Flush ? boundFlush : boundFull, off = opt.offset, ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), cells = nrows * ncols, x, y, x2, y2, anchor, band, offset;
    // -- initial grid layout
    const bounds = gridLayout(view, groups, opt);
    if (bounds.empty()) bounds.set(0, 0, 0, 0);
    // empty grid
    // -- layout grid headers and footers --
    // perform row header layout
    if (views.rowheaders) {
      band = get(opt.headerBand, Row, null);
      x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get(off, 'rowHeader'), min, 0, bbox, 'x1', 0, ncols, 1, band);
    }
    // perform column header layout
    if (views.colheaders) {
      band = get(opt.headerBand, Column, null);
      y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get(off, 'columnHeader'), min, 1, bbox, 'y1', 0, 1, ncols, band);
    }
    // perform row footer layout
    if (views.rowfooters) {
      band = get(opt.footerBand, Row, null);
      x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get(off, 'rowFooter'), max, 0, bbox, 'x2', ncols - 1, ncols, 1, band);
    }
    // perform column footer layout
    if (views.colfooters) {
      band = get(opt.footerBand, Column, null);
      y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get(off, 'columnFooter'), max, 1, bbox, 'y2', cells - ncols, 1, ncols, band);
    }
    // perform row title layout
    if (views.rowtitle) {
      anchor = get(opt.titleAnchor, Row);
      offset = get(off, 'rowTitle');
      offset = anchor === End ? x2 + offset : x - offset;
      band = get(opt.titleBand, Row, 0.5);
      layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
    }
    // perform column title layout
    if (views.coltitle) {
      anchor = get(opt.titleAnchor, Column);
      offset = get(off, 'columnTitle');
      offset = anchor === End ? y2 + offset : y - offset;
      band = get(opt.titleBand, Column, 0.5);
      layoutTitle(view, views.coltitle, offset, 1, bounds, band);
    }
  }
  function boundFlush(item, field) {
    return field === 'x1' ? item.x || 0 : field === 'y1' ? item.y || 0 : field === 'x2' ? (item.x || 0) + (item.width || 0) : field === 'y2' ? (item.y || 0) + (item.height || 0) : undefined;
  }
  function boundFull(item, field) {
    return item.bounds[field];
  }
  function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
    var n = groups.length, init = 0, edge = 0, i, j, k, m, b, h, g, x, y;
    // if no groups, early exit and return 0
    if (!n) return init;
    // compute margin
    for (i = start; i < n; i += stride) {
      if (groups[i]) init = agg(init, bound(groups[i], bf));
    }
    // if no headers, return margin calculation
    if (!headers.length) return init;
    // check if number of headers exceeds number of rows or columns
    if (headers.length > limit) {
      view.warn('Grid headers exceed limit: ' + limit);
      headers = headers.slice(0, limit);
    }
    // apply offset
    init += offset;
    // clear mark bounds for all headers
    for ((j = 0, m = headers.length); j < m; ++j) {
      view.dirty(headers[j]);
      headers[j].mark.bounds.clear();
    }
    // layout each header
    for ((i = start, j = 0, m = headers.length); j < m; (++j, i += stride)) {
      h = headers[j];
      b = h.mark.bounds;
      // search for nearest group to align to
      // necessary if table has empty cells
      for (k = i; k >= 0 && (g = groups[k]) == null; k -= back) ;
      // assign coordinates and update bounds
      if (isX) {
        x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
        y = init;
      } else {
        x = init;
        y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
      }
      b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
      h.x = x;
      h.y = y;
      view.dirty(h);
      // update current edge of layout bounds
      edge = agg(edge, b[bf]);
    }
    return edge;
  }
  function layoutTitle(view, g, offset, isX, bounds, band) {
    if (!g) return;
    view.dirty(g);
    // compute title coordinates
    var x = offset, y = offset;
    isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height());
    // assign coordinates and update bounds
    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
    g.mark.bounds.clear().union(g.bounds);
    g.x = x;
    g.y = y;
    // queue title for redraw
    view.dirty(g);
  }
  function lookup$1(config, orient) {
    const opt = config[orient] || ({});
    return (key, d) => opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
  }
  // if legends specify offset directly, use the maximum specified value
  function offsets(legends, value) {
    let max = -Infinity;
    legends.forEach(item => {
      if (item.offset != null) max = Math.max(max, item.offset);
    });
    return max > -Infinity ? max : value;
  }
  function legendParams(g, orient, config, xb, yb, w, h) {
    const _ = lookup$1(config, orient), offset = offsets(g, _('offset', 0)), anchor = _('anchor', Start), mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;
    const p = {
      align: Each,
      bounds: _('bounds', Flush),
      columns: _('direction') === 'vertical' ? 1 : g.length,
      padding: _('margin', 8),
      center: _('center'),
      nodirty: true
    };
    switch (orient) {
      case Left:
        p.anchor = {
          x: Math.floor(xb.x1) - offset,
          column: End,
          y: mult * (h || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;
      case Right:
        p.anchor = {
          x: Math.ceil(xb.x2) + offset,
          y: mult * (h || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;
      case Top:
        p.anchor = {
          y: Math.floor(yb.y1) - offset,
          row: End,
          x: mult * (w || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;
      case Bottom:
        p.anchor = {
          y: Math.ceil(yb.y2) + offset,
          x: mult * (w || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;
      case TopLeft:
        p.anchor = {
          x: offset,
          y: offset
        };
        break;
      case TopRight:
        p.anchor = {
          x: w - offset,
          y: offset,
          column: End
        };
        break;
      case BottomLeft:
        p.anchor = {
          x: offset,
          y: h - offset,
          row: End
        };
        break;
      case BottomRight:
        p.anchor = {
          x: w - offset,
          y: h - offset,
          column: End,
          row: End
        };
        break;
    }
    return p;
  }
  function legendLayout(view, legend) {
    var item = legend.items[0], datum = item.datum, orient = item.orient, bounds = item.bounds, x = item.x, y = item.y, w, h;
    // cache current bounds for later comparison
    item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
    bounds.clear();
    // adjust legend to accommodate padding and title
    legendGroupLayout(view, item, item.items[0].items[0]);
    // aggregate bounds to determine size, and include origin
    bounds = legendBounds(item, bounds);
    w = 2 * item.padding;
    h = 2 * item.padding;
    if (!bounds.empty()) {
      w = Math.ceil(bounds.width() + w);
      h = Math.ceil(bounds.height() + h);
    }
    if (datum.type === Symbols) {
      legendEntryLayout(item.items[0].items[0].items[0].items);
    }
    if (orient !== None) {
      item.x = x = 0;
      item.y = y = 0;
    }
    item.width = w;
    item.height = h;
    vegaScenegraph.boundStroke(bounds.set(x, y, x + w, y + h), item);
    item.mark.bounds.clear().union(bounds);
    return item;
  }
  function legendBounds(item, b) {
    // aggregate item bounds
    item.items.forEach(_ => b.union(_.bounds));
    // anchor to legend origin
    b.x1 = item.padding;
    b.y1 = item.padding;
    return b;
  }
  function legendGroupLayout(view, item, entry) {
    var pad = item.padding, ex = pad - entry.x, ey = pad - entry.y;
    if (!item.datum.title) {
      if (ex || ey) translate(view, entry, ex, ey);
    } else {
      var title = item.items[1].items[0], anchor = title.anchor, tpad = item.titlePadding || 0, tx = pad - title.x, ty = pad - title.y;
      switch (title.orient) {
        case Left:
          ex += Math.ceil(title.bounds.width()) + tpad;
          break;
        case Right:
        case Bottom:
          break;
        default:
          ey += title.bounds.height() + tpad;
      }
      if (ex || ey) translate(view, entry, ex, ey);
      switch (title.orient) {
        case Left:
          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
          break;
        case Right:
          tx += legendTitleOffset(item, entry, title, End, 0, 0) + tpad;
          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
          break;
        case Bottom:
          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
          ty += legendTitleOffset(item, entry, title, End, -1, 0, 1) + tpad;
          break;
        default:
          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
      }
      if (tx || ty) translate(view, title, tx, ty);
      // translate legend if title pushes into negative coordinates
      if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
        translate(view, entry, -tx, 0);
        translate(view, title, -tx, 0);
      }
    }
  }
  function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {
    const grad = item.datum.type !== 'symbol', vgrad = title.datum.vgrad, e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry, s = e.bounds[y ? 'y2' : 'x2'] - item.padding, u = vgrad && lr ? s : 0, v = vgrad && lr ? 0 : s, o = y <= 0 ? 0 : vegaScenegraph.multiLineOffset(title);
    return Math.round(anchor === Start ? u : anchor === End ? v - o : 0.5 * (s - o));
  }
  function translate(view, item, dx, dy) {
    item.x += dx;
    item.y += dy;
    item.bounds.translate(dx, dy);
    item.mark.bounds.translate(dx, dy);
    view.dirty(item);
  }
  function legendEntryLayout(entries) {
    // get max widths for each column
    const widths = entries.reduce((w, g) => {
      w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
      return w;
    }, {});
    // set dimensions of legend entry groups
    entries.forEach(g => {
      g.width = widths[g.column];
      g.height = g.bounds.y2 - g.y;
    });
  }
  function titleLayout(view, mark, width, height, viewBounds) {
    var group = mark.items[0], frame = group.frame, orient = group.orient, anchor = group.anchor, offset = group.offset, padding = group.padding, title = group.items[0].items[0], subtitle = group.items[1] && group.items[1].items[0], end = orient === Left || orient === Right ? height : width, start = 0, x = 0, y = 0, sx = 0, sy = 0, pos;
    if (frame !== Group) {
      orient === Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
    } else if (orient === Left) {
      (start = height, end = 0);
    }
    pos = anchor === Start ? start : anchor === End ? end : (start + end) / 2;
    if (subtitle && subtitle.text) {
      // position subtitle
      switch (orient) {
        case Top:
        case Bottom:
          sy = title.bounds.height() + padding;
          break;
        case Left:
          sx = title.bounds.width() + padding;
          break;
        case Right:
          sx = -title.bounds.width() - padding;
          break;
      }
      tempBounds.clear().union(subtitle.bounds);
      tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));
      if (set(subtitle, 'x', sx) | set(subtitle, 'y', sy)) {
        view.dirty(subtitle);
        subtitle.bounds.clear().union(tempBounds);
        subtitle.mark.bounds.clear().union(tempBounds);
        view.dirty(subtitle);
      }
      tempBounds.clear().union(subtitle.bounds);
    } else {
      tempBounds.clear();
    }
    tempBounds.union(title.bounds);
    // position title group
    switch (orient) {
      case Top:
        x = pos;
        y = viewBounds.y1 - tempBounds.height() - offset;
        break;
      case Left:
        x = viewBounds.x1 - tempBounds.width() - offset;
        y = pos;
        break;
      case Right:
        x = viewBounds.x2 + tempBounds.width() + offset;
        y = pos;
        break;
      case Bottom:
        x = pos;
        y = viewBounds.y2 + offset;
        break;
      default:
        x = group.x;
        y = group.y;
    }
    if (set(group, 'x', x) | set(group, 'y', y)) {
      tempBounds.translate(x, y);
      view.dirty(group);
      group.bounds.clear().union(tempBounds);
      mark.bounds.clear().union(tempBounds);
      view.dirty(group);
    }
    return group.bounds;
  }
  /**
  * Layout view elements such as axes and legends.
  * Also performs size adjustments.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {object} params.mark - Scenegraph mark of groups to layout.
  */
  function ViewLayout(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(ViewLayout, vegaDataflow.Transform, {
    transform(_, pulse) {
      const view = pulse.dataflow;
      _.mark.items.forEach(group => {
        if (_.layout) trellisLayout(view, group, _.layout);
        layoutGroup(view, group, _);
      });
      return shouldReflow(_.mark.group) ? pulse.reflow() : pulse;
    }
  });
  function shouldReflow(group) {
    // We typically should reflow if layout is invoked (#2568), as child items
    // may have resized and reflow ensures group bounds are re-calculated.
    // However, legend entries have a special exception to avoid instability.
    // For example, if a selected legend symbol gains a stroke on hover,
    // we don't want to re-position subsequent elements in the legend.
    return group && group.mark.role !== 'legend-entry';
  }
  function layoutGroup(view, group, _) {
    var items = group.items, width = Math.max(0, group.width || 0), height = Math.max(0, group.height || 0), viewBounds = new vegaScenegraph.Bounds().set(0, 0, width, height), xBounds = viewBounds.clone(), yBounds = viewBounds.clone(), legends = [], title, mark, orient, b, i, n;
    // layout axes, gather legends, collect bounds
    for ((i = 0, n = items.length); i < n; ++i) {
      mark = items[i];
      switch (mark.role) {
        case AxisRole:
          b = isYAxis(mark) ? xBounds : yBounds;
          b.union(axisLayout(view, mark, width, height));
          break;
        case TitleRole:
          title = mark;
          break;
        case LegendRole:
          legends.push(legendLayout(view, mark));
          break;
        case FrameRole:
        case ScopeRole:
        case RowHeader:
        case RowFooter:
        case RowTitle:
        case ColHeader:
        case ColFooter:
        case ColTitle:
          xBounds.union(mark.bounds);
          yBounds.union(mark.bounds);
          break;
        default:
          viewBounds.union(mark.bounds);
      }
    }
    // layout legends, adjust viewBounds
    if (legends.length) {
      // group legends by orient
      const l = {};
      legends.forEach(item => {
        orient = item.orient || Right;
        if (orient !== None) (l[orient] || (l[orient] = [])).push(item);
      });
      // perform grid layout for each orient group
      for (const orient in l) {
        const g = l[orient];
        gridLayout(view, g, legendParams(g, orient, _.legends, xBounds, yBounds, width, height));
      }
      // update view bounds
      legends.forEach(item => {
        const b = item.bounds;
        if (!b.equals(item._bounds)) {
          item.bounds = item._bounds;
          view.dirty(item);
          // dirty previous location
          item.bounds = b;
          view.dirty(item);
        }
        if (_.autosize && _.autosize.type === Fit) {
          // For autosize fit, incorporate the orthogonal dimension only.
          // Legends that overrun the chart area will then be clipped;
          // otherwise the chart area gets reduced to nothing!
          switch (item.orient) {
            case Left:
            case Right:
              viewBounds.add(b.x1, 0).add(b.x2, 0);
              break;
            case Top:
            case Bottom:
              viewBounds.add(0, b.y1).add(0, b.y2);
          }
        } else {
          viewBounds.union(b);
        }
      });
    }
    // combine bounding boxes
    viewBounds.union(xBounds).union(yBounds);
    // layout title, adjust bounds
    if (title) {
      viewBounds.union(titleLayout(view, title, width, height, viewBounds));
    }
    // override aggregated view bounds if content is clipped
    if (group.clip) {
      viewBounds.set(0, 0, group.width || 0, group.height || 0);
    }
    // perform size adjustment
    viewSizeLayout(view, group, viewBounds, _);
  }
  function viewSizeLayout(view, group, viewBounds, _) {
    const auto = _.autosize || ({}), type = auto.type;
    if (view._autosize < 1 || !type) return;
    let viewWidth = view._width, viewHeight = view._height, width = Math.max(0, group.width || 0), left = Math.max(0, Math.ceil(-viewBounds.x1)), height = Math.max(0, group.height || 0), top = Math.max(0, Math.ceil(-viewBounds.y1));
    const right = Math.max(0, Math.ceil(viewBounds.x2 - width)), bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));
    if (auto.contains === Padding) {
      const padding = view.padding();
      viewWidth -= padding.left + padding.right;
      viewHeight -= padding.top + padding.bottom;
    }
    if (type === None) {
      left = 0;
      top = 0;
      width = viewWidth;
      height = viewHeight;
    } else if (type === Fit) {
      width = Math.max(0, viewWidth - left - right);
      height = Math.max(0, viewHeight - top - bottom);
    } else if (type === FitX) {
      width = Math.max(0, viewWidth - left - right);
      viewHeight = height + top + bottom;
    } else if (type === FitY) {
      viewWidth = width + left + right;
      height = Math.max(0, viewHeight - top - bottom);
    } else if (type === Pad) {
      viewWidth = width + left + right;
      viewHeight = height + top + bottom;
    }
    view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);
  }
  exports.bound = Bound;
  exports.identifier = Identifier;
  exports.mark = Mark;
  exports.overlap = Overlap;
  exports.render = Render;
  exports.viewlayout = ViewLayout;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-scenegraph":"6y4N1","vega-util":"4BD5d"}],"6y4N1":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('d3-shape'), require('d3-path'), require('vega-canvas'), require('vega-loader'), require('vega-scale')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'd3-shape', 'd3-path', 'vega-canvas', 'vega-loader', 'vega-scale'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.d3, global.d3, global.vega, global.vega, global.vega));
})(this, function (exports, vegaUtil, d3Shape, d3Path, vegaCanvas, vegaLoader, vegaScale) {
  "use strict";
  let gradient_id = 0;
  function resetSVGGradientId() {
    gradient_id = 0;
  }
  const patternPrefix = 'p_';
  function isGradient(value) {
    return value && value.gradient;
  }
  function gradientRef(g, defs, base) {
    const type = g.gradient;
    let id = g.id, prefix = type === 'radial' ? patternPrefix : '';
    // check id, assign default values as needed
    if (!id) {
      id = g.id = 'gradient_' + gradient_id++;
      if (type === 'radial') {
        g.x1 = get(g.x1, 0.5);
        g.y1 = get(g.y1, 0.5);
        g.r1 = get(g.r1, 0);
        g.x2 = get(g.x2, 0.5);
        g.y2 = get(g.y2, 0.5);
        g.r2 = get(g.r2, 0.5);
        prefix = patternPrefix;
      } else {
        g.x1 = get(g.x1, 0);
        g.y1 = get(g.y1, 0);
        g.x2 = get(g.x2, 1);
        g.y2 = get(g.y2, 0);
      }
    }
    // register definition
    defs[id] = g;
    // return url reference
    return 'url(' + (base || '') + '#' + prefix + id + ')';
  }
  function get(val, def) {
    return val != null ? val : def;
  }
  function Gradient(p0, p1) {
    var stops = [], gradient;
    return gradient = {
      gradient: 'linear',
      x1: p0 ? p0[0] : 0,
      y1: p0 ? p0[1] : 0,
      x2: p1 ? p1[0] : 1,
      y2: p1 ? p1[1] : 0,
      stops: stops,
      stop: function (offset, color) {
        stops.push({
          offset: offset,
          color: color
        });
        return gradient;
      }
    };
  }
  const lookup = {
    'basis': {
      curve: d3Shape.curveBasis
    },
    'basis-closed': {
      curve: d3Shape.curveBasisClosed
    },
    'basis-open': {
      curve: d3Shape.curveBasisOpen
    },
    'bundle': {
      curve: d3Shape.curveBundle,
      tension: 'beta',
      value: 0.85
    },
    'cardinal': {
      curve: d3Shape.curveCardinal,
      tension: 'tension',
      value: 0
    },
    'cardinal-open': {
      curve: d3Shape.curveCardinalOpen,
      tension: 'tension',
      value: 0
    },
    'cardinal-closed': {
      curve: d3Shape.curveCardinalClosed,
      tension: 'tension',
      value: 0
    },
    'catmull-rom': {
      curve: d3Shape.curveCatmullRom,
      tension: 'alpha',
      value: 0.5
    },
    'catmull-rom-closed': {
      curve: d3Shape.curveCatmullRomClosed,
      tension: 'alpha',
      value: 0.5
    },
    'catmull-rom-open': {
      curve: d3Shape.curveCatmullRomOpen,
      tension: 'alpha',
      value: 0.5
    },
    'linear': {
      curve: d3Shape.curveLinear
    },
    'linear-closed': {
      curve: d3Shape.curveLinearClosed
    },
    'monotone': {
      horizontal: d3Shape.curveMonotoneY,
      vertical: d3Shape.curveMonotoneX
    },
    'natural': {
      curve: d3Shape.curveNatural
    },
    'step': {
      curve: d3Shape.curveStep
    },
    'step-after': {
      curve: d3Shape.curveStepAfter
    },
    'step-before': {
      curve: d3Shape.curveStepBefore
    }
  };
  function curves(type, orientation, tension) {
    var entry = vegaUtil.hasOwnProperty(lookup, type) && lookup[type], curve = null;
    if (entry) {
      curve = entry.curve || entry[orientation || 'vertical'];
      if (entry.tension && tension != null) {
        curve = curve[entry.tension](tension);
      }
    }
    return curve;
  }
  // Path parsing and rendering code adapted from fabric.js -- Thanks!
  const cmdlen = {
    m: 2,
    l: 2,
    h: 1,
    v: 1,
    c: 6,
    s: 4,
    q: 4,
    t: 2,
    a: 7
  }, regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\.\d+)(\.\d)/g, /(\d)([-+])/g, /\s|,|###/];
  function pathParse(pathstr) {
    const result = [];
    let curr, chunks, parsed, param, cmd, len, i, j, n, m;
    // First, break path into command sequence
    const path = pathstr.slice().replace(regexp[0], '###$1').split(regexp[1]).slice(1);
    // Next, parse each command in turn
    for ((i = 0, n = path.length); i < n; ++i) {
      curr = path[i];
      chunks = curr.slice(1).trim().replace(regexp[2], '$1###$2').replace(regexp[3], '$1###$2').split(regexp[4]);
      cmd = curr.charAt(0);
      parsed = [cmd];
      for ((j = 0, m = chunks.length); j < m; ++j) {
        if ((param = +chunks[j]) === param) {
          // not NaN
          parsed.push(param);
        }
      }
      len = cmdlen[cmd.toLowerCase()];
      if (parsed.length - 1 > len) {
        const m = parsed.length;
        j = 1;
        result.push([cmd].concat(parsed.slice(j, j += len)));
        // handle implicit lineTo (#2803)
        cmd = cmd === 'M' ? 'L' : cmd === 'm' ? 'l' : cmd;
        for (; j < m; j += len) {
          result.push([cmd].concat(parsed.slice(j, j + len)));
        }
      } else {
        result.push(parsed);
      }
    }
    return result;
  }
  const DegToRad = Math.PI / 180;
  const Epsilon = 1e-14;
  const HalfPi = Math.PI / 2;
  const Tau = Math.PI * 2;
  const HalfSqrt3 = Math.sqrt(3) / 2;
  var segmentCache = {};
  var bezierCache = {};
  var join = [].join;
  // Copied from Inkscape svgtopdf, thanks!
  function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
    const key = join.call(arguments);
    if (segmentCache[key]) {
      return segmentCache[key];
    }
    const th = rotateX * DegToRad;
    const sin_th = Math.sin(th);
    const cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    const px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
    const py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
    let pl = px * px / (rx * rx) + py * py / (ry * ry);
    if (pl > 1) {
      pl = Math.sqrt(pl);
      rx *= pl;
      ry *= pl;
    }
    const a00 = cos_th / rx;
    const a01 = sin_th / rx;
    const a10 = -sin_th / ry;
    const a11 = cos_th / ry;
    const x0 = a00 * ox + a01 * oy;
    const y0 = a10 * ox + a11 * oy;
    const x1 = a00 * x + a01 * y;
    const y1 = a10 * x + a11 * y;
    const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
    let sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) sfactor_sq = 0;
    let sfactor = Math.sqrt(sfactor_sq);
    if (sweep == large) sfactor = -sfactor;
    const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
    const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
    const th0 = Math.atan2(y0 - yc, x0 - xc);
    const th1 = Math.atan2(y1 - yc, x1 - xc);
    let th_arc = th1 - th0;
    if (th_arc < 0 && sweep === 1) {
      th_arc += Tau;
    } else if (th_arc > 0 && sweep === 0) {
      th_arc -= Tau;
    }
    const segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));
    const result = [];
    for (let i = 0; i < segs; ++i) {
      const th2 = th0 + i * th_arc / segs;
      const th3 = th0 + (i + 1) * th_arc / segs;
      result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
    }
    return segmentCache[key] = result;
  }
  function bezier(params) {
    const key = join.call(params);
    if (bezierCache[key]) {
      return bezierCache[key];
    }
    var cx = params[0], cy = params[1], th0 = params[2], th1 = params[3], rx = params[4], ry = params[5], sin_th = params[6], cos_th = params[7];
    const a00 = cos_th * rx;
    const a01 = -sin_th * ry;
    const a10 = sin_th * rx;
    const a11 = cos_th * ry;
    const cos_th0 = Math.cos(th0);
    const sin_th0 = Math.sin(th0);
    const cos_th1 = Math.cos(th1);
    const sin_th1 = Math.sin(th1);
    const th_half = 0.5 * (th1 - th0);
    const sin_th_h2 = Math.sin(th_half * 0.5);
    const t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
    const x1 = cx + cos_th0 - t * sin_th0;
    const y1 = cy + sin_th0 + t * cos_th0;
    const x3 = cx + cos_th1;
    const y3 = cy + sin_th1;
    const x2 = x3 + t * sin_th1;
    const y2 = y3 - t * cos_th1;
    return bezierCache[key] = [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
  }
  const temp = ['l', 0, 0, 0, 0, 0, 0, 0];
  function scale$1(current, sX, sY) {
    const c = temp[0] = current[0];
    if (c === 'a' || c === 'A') {
      temp[1] = sX * current[1];
      temp[2] = sY * current[2];
      temp[3] = current[3];
      temp[4] = current[4];
      temp[5] = current[5];
      temp[6] = sX * current[6];
      temp[7] = sY * current[7];
    } else if (c === 'h' || c === 'H') {
      temp[1] = sX * current[1];
    } else if (c === 'v' || c === 'V') {
      temp[1] = sY * current[1];
    } else {
      for (var i = 1, n = current.length; i < n; ++i) {
        temp[i] = (i % 2 == 1 ? sX : sY) * current[i];
      }
    }
    return temp;
  }
  function pathRender(context, path, l, t, sX, sY) {
    var current, // current instruction
    previous = null, x = 0, // current x
    y = 0, // current y
    controlX = 0, // current control point x
    controlY = 0, // current control point y
    tempX, tempY, tempControlX, tempControlY;
    if (l == null) l = 0;
    if (t == null) t = 0;
    if (sX == null) sX = 1;
    if (sY == null) sY = sX;
    if (context.beginPath) context.beginPath();
    for (var i = 0, len = path.length; i < len; ++i) {
      current = path[i];
      if (sX !== 1 || sY !== 1) {
        current = scale$1(current, sX, sY);
      }
      switch (current[0]) {
        case 'l':
          // lineto, relative
          x += current[1];
          y += current[2];
          context.lineTo(x + l, y + t);
          break;
        case 'L':
          // lineto, absolute
          x = current[1];
          y = current[2];
          context.lineTo(x + l, y + t);
          break;
        case 'h':
          // horizontal lineto, relative
          x += current[1];
          context.lineTo(x + l, y + t);
          break;
        case 'H':
          // horizontal lineto, absolute
          x = current[1];
          context.lineTo(x + l, y + t);
          break;
        case 'v':
          // vertical lineto, relative
          y += current[1];
          context.lineTo(x + l, y + t);
          break;
        case 'V':
          // verical lineto, absolute
          y = current[1];
          context.lineTo(x + l, y + t);
          break;
        case 'm':
          // moveTo, relative
          x += current[1];
          y += current[2];
          context.moveTo(x + l, y + t);
          break;
        case 'M':
          // moveTo, absolute
          x = current[1];
          y = current[2];
          context.moveTo(x + l, y + t);
          break;
        case 'c':
          // bezierCurveTo, relative
          tempX = x + current[5];
          tempY = y + current[6];
          controlX = x + current[3];
          controlY = y + current[4];
          context.bezierCurveTo(x + current[1] + l, // x1
          y + current[2] + t, // y1
          controlX + l, // x2
          controlY + t, // y2
          tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;
        case 'C':
          // bezierCurveTo, absolute
          x = current[5];
          y = current[6];
          controlX = current[3];
          controlY = current[4];
          context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
          break;
        case 's':
          // shorthand cubic bezierCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[3];
          tempY = y + current[4];
          // calculate reflection of previous control points
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t);
          // set control point to 2nd one of this command
          // the first control point is assumed to be the reflection of
          // the second control point on the previous command relative
          // to the current point.
          controlX = x + current[1];
          controlY = y + current[2];
          x = tempX;
          y = tempY;
          break;
        case 'S':
          // shorthand cubic bezierCurveTo, absolute
          tempX = current[3];
          tempY = current[4];
          // calculate reflection of previous control points
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          // set control point to 2nd one of this command
          // the first control point is assumed to be the reflection of
          // the second control point on the previous command relative
          // to the current point.
          controlX = current[1];
          controlY = current[2];
          break;
        case 'q':
          // quadraticCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[3];
          tempY = y + current[4];
          controlX = x + current[1];
          controlY = y + current[2];
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;
        case 'Q':
          // quadraticCurveTo, absolute
          tempX = current[3];
          tempY = current[4];
          context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          controlX = current[1];
          controlY = current[2];
          break;
        case 't':
          // shorthand quadraticCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[1];
          tempY = y + current[2];
          if (previous[0].match(/[QqTt]/) === null) {
            // If there is no previous command or if the previous command was not a Q, q, T or t,
            // assume the control point is coincident with the current point
            controlX = x;
            controlY = y;
          } else if (previous[0] === 't') {
            // calculate reflection of previous control points for t
            controlX = 2 * x - tempControlX;
            controlY = 2 * y - tempControlY;
          } else if (previous[0] === 'q') {
            // calculate reflection of previous control points for q
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
          }
          tempControlX = controlX;
          tempControlY = controlY;
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          controlX = x + current[1];
          controlY = y + current[2];
          break;
        case 'T':
          tempX = current[1];
          tempY = current[2];
          // calculate reflection of previous control points
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;
        case 'a':
          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + x + l, current[7] + y + t]);
          x += current[6];
          y += current[7];
          break;
        case 'A':
          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + l, current[7] + t]);
          x = current[6];
          y = current[7];
          break;
        case 'z':
        case 'Z':
          context.closePath();
          break;
      }
      previous = current;
    }
  }
  function drawArc(context, x, y, coords) {
    const seg = segments(coords[5], // end x
    coords[6], // end y
    coords[0], // radius x
    coords[1], // radius y
    coords[3], // large flag
    coords[4], // sweep flag
    coords[2], // rotation
    x, y);
    for (let i = 0; i < seg.length; ++i) {
      const bez = bezier(seg[i]);
      context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
    }
  }
  const Tan30 = 0.5773502691896257;
  const builtins = {
    'circle': {
      draw: function (context, size) {
        const r = Math.sqrt(size) / 2;
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, Tau);
      }
    },
    'cross': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, s = r / 2.5;
        context.moveTo(-r, -s);
        context.lineTo(-r, s);
        context.lineTo(-s, s);
        context.lineTo(-s, r);
        context.lineTo(s, r);
        context.lineTo(s, s);
        context.lineTo(r, s);
        context.lineTo(r, -s);
        context.lineTo(s, -s);
        context.lineTo(s, -r);
        context.lineTo(-s, -r);
        context.lineTo(-s, -s);
        context.closePath();
      }
    },
    'diamond': {
      draw: function (context, size) {
        const r = Math.sqrt(size) / 2;
        context.moveTo(-r, 0);
        context.lineTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.closePath();
      }
    },
    'square': {
      draw: function (context, size) {
        var w = Math.sqrt(size), x = -w / 2;
        context.rect(x, x, w, w);
      }
    },
    'arrow': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, s = r / 7, t = r / 2.5, v = r / 8;
        context.moveTo(-s, r);
        context.lineTo(s, r);
        context.lineTo(s, -v);
        context.lineTo(t, -v);
        context.lineTo(0, -r);
        context.lineTo(-t, -v);
        context.lineTo(-s, -v);
        context.closePath();
      }
    },
    'wedge': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r, o = h - r * Tan30, b = r / 4;
        context.moveTo(0, -h - o);
        context.lineTo(-b, h - o);
        context.lineTo(b, h - o);
        context.closePath();
      }
    },
    'triangle': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r, o = h - r * Tan30;
        context.moveTo(0, -h - o);
        context.lineTo(-r, h - o);
        context.lineTo(r, h - o);
        context.closePath();
      }
    },
    'triangle-up': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
        context.moveTo(0, -h);
        context.lineTo(-r, h);
        context.lineTo(r, h);
        context.closePath();
      }
    },
    'triangle-down': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
        context.moveTo(0, h);
        context.lineTo(-r, -h);
        context.lineTo(r, -h);
        context.closePath();
      }
    },
    'triangle-right': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
        context.moveTo(h, 0);
        context.lineTo(-h, -r);
        context.lineTo(-h, r);
        context.closePath();
      }
    },
    'triangle-left': {
      draw: function (context, size) {
        var r = Math.sqrt(size) / 2, h = HalfSqrt3 * r;
        context.moveTo(-h, 0);
        context.lineTo(h, -r);
        context.lineTo(h, r);
        context.closePath();
      }
    },
    'stroke': {
      draw: function (context, size) {
        const r = Math.sqrt(size) / 2;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
      }
    }
  };
  function symbols(_) {
    return vegaUtil.hasOwnProperty(builtins, _) ? builtins[_] : customSymbol(_);
  }
  var custom = {};
  function customSymbol(path) {
    if (!vegaUtil.hasOwnProperty(custom, path)) {
      const parsed = pathParse(path);
      custom[path] = {
        draw: function (context, size) {
          pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
        }
      };
    }
    return custom[path];
  }
  const C = 0.448084975506;
  // C = 1 - c
  function rectangleX(d) {
    return d.x;
  }
  function rectangleY(d) {
    return d.y;
  }
  function rectangleWidth(d) {
    return d.width;
  }
  function rectangleHeight(d) {
    return d.height;
  }
  function number(_) {
    return typeof _ === 'function' ? _ : () => +_;
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(value, max));
  }
  function vg_rect() {
    var x = rectangleX, y = rectangleY, width = rectangleWidth, height = rectangleHeight, crTL = number(0), crTR = crTL, crBL = crTL, crBR = crTL, context = null;
    function rectangle(_, x0, y0) {
      var buffer, x1 = x0 != null ? x0 : +x.call(this, _), y1 = y0 != null ? y0 : +y.call(this, _), w = +width.call(this, _), h = +height.call(this, _), s = Math.min(w, h) / 2, tl = clamp(+crTL.call(this, _), 0, s), tr = clamp(+crTR.call(this, _), 0, s), bl = clamp(+crBL.call(this, _), 0, s), br = clamp(+crBR.call(this, _), 0, s);
      if (!context) context = buffer = d3Path.path();
      if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) {
        context.rect(x1, y1, w, h);
      } else {
        var x2 = x1 + w, y2 = y1 + h;
        context.moveTo(x1 + tl, y1);
        context.lineTo(x2 - tr, y1);
        context.bezierCurveTo(x2 - C * tr, y1, x2, y1 + C * tr, x2, y1 + tr);
        context.lineTo(x2, y2 - br);
        context.bezierCurveTo(x2, y2 - C * br, x2 - C * br, y2, x2 - br, y2);
        context.lineTo(x1 + bl, y2);
        context.bezierCurveTo(x1 + C * bl, y2, x1, y2 - C * bl, x1, y2 - bl);
        context.lineTo(x1, y1 + tl);
        context.bezierCurveTo(x1, y1 + C * tl, x1 + C * tl, y1, x1 + tl, y1);
        context.closePath();
      }
      if (buffer) {
        context = null;
        return buffer + '' || null;
      }
    }
    rectangle.x = function (_) {
      if (arguments.length) {
        x = number(_);
        return rectangle;
      } else {
        return x;
      }
    };
    rectangle.y = function (_) {
      if (arguments.length) {
        y = number(_);
        return rectangle;
      } else {
        return y;
      }
    };
    rectangle.width = function (_) {
      if (arguments.length) {
        width = number(_);
        return rectangle;
      } else {
        return width;
      }
    };
    rectangle.height = function (_) {
      if (arguments.length) {
        height = number(_);
        return rectangle;
      } else {
        return height;
      }
    };
    rectangle.cornerRadius = function (tl, tr, br, bl) {
      if (arguments.length) {
        crTL = number(tl);
        crTR = tr != null ? number(tr) : crTL;
        crBR = br != null ? number(br) : crTL;
        crBL = bl != null ? number(bl) : crTR;
        return rectangle;
      } else {
        return crTL;
      }
    };
    rectangle.context = function (_) {
      if (arguments.length) {
        context = _ == null ? null : _;
        return rectangle;
      } else {
        return context;
      }
    };
    return rectangle;
  }
  function vg_trail() {
    var x, y, size, defined, context = null, ready, x1, y1, r1;
    function point(x2, y2, w2) {
      const r2 = w2 / 2;
      if (ready) {
        var ux = y1 - y2, uy = x2 - x1;
        if (ux || uy) {
          // get normal vector
          var ud = Math.sqrt(ux * ux + uy * uy), rx = (ux /= ud) * r1, ry = (uy /= ud) * r1, t = Math.atan2(uy, ux);
          // draw segment
          context.moveTo(x1 - rx, y1 - ry);
          context.lineTo(x2 - ux * r2, y2 - uy * r2);
          context.arc(x2, y2, r2, t - Math.PI, t);
          context.lineTo(x1 + rx, y1 + ry);
          context.arc(x1, y1, r1, t, t + Math.PI);
        } else {
          context.arc(x2, y2, r2, 0, Tau);
        }
        context.closePath();
      } else {
        ready = 1;
      }
      x1 = x2;
      y1 = y2;
      r1 = r2;
    }
    function trail(data) {
      var i, n = data.length, d, defined0 = false, buffer;
      if (context == null) context = buffer = d3Path.path();
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) ready = 0;
        }
        if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
      }
      if (buffer) {
        context = null;
        return buffer + '' || null;
      }
    }
    trail.x = function (_) {
      if (arguments.length) {
        x = _;
        return trail;
      } else {
        return x;
      }
    };
    trail.y = function (_) {
      if (arguments.length) {
        y = _;
        return trail;
      } else {
        return y;
      }
    };
    trail.size = function (_) {
      if (arguments.length) {
        size = _;
        return trail;
      } else {
        return size;
      }
    };
    trail.defined = function (_) {
      if (arguments.length) {
        defined = _;
        return trail;
      } else {
        return defined;
      }
    };
    trail.context = function (_) {
      if (arguments.length) {
        if (_ == null) {
          context = null;
        } else {
          context = _;
        }
        return trail;
      } else {
        return context;
      }
    };
    return trail;
  }
  function value$1(a, b) {
    return a != null ? a : b;
  }
  const x = item => item.x || 0, y = item => item.y || 0, w = item => item.width || 0, h = item => item.height || 0, xw = item => (item.x || 0) + (item.width || 0), yh = item => (item.y || 0) + (item.height || 0), sa = item => item.startAngle || 0, ea = item => item.endAngle || 0, pa = item => item.padAngle || 0, ir = item => item.innerRadius || 0, or = item => item.outerRadius || 0, cr = item => item.cornerRadius || 0, tl = item => value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0, tr = item => value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0, br = item => value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0, bl = item => value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0, sz = item => value$1(item.size, 64), ts = item => item.size || 1, def = item => !(item.defined === false), type = item => symbols(item.shape || 'circle');
  const arcShape = d3Shape.arc().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr), areavShape = d3Shape.area().x(x).y1(y).y0(yh).defined(def), areahShape = d3Shape.area().y(y).x1(x).x0(xw).defined(def), lineShape = d3Shape.line().x(x).y(y).defined(def), rectShape = vg_rect().x(x).y(y).width(w).height(h).cornerRadius(tl, tr, br, bl), symbolShape = d3Shape.symbol().type(type).size(sz), trailShape = vg_trail().x(x).y(y).defined(def).size(ts);
  function hasCornerRadius(item) {
    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
  }
  function arc$1(context, item) {
    return arcShape.context(context)(item);
  }
  function area$1(context, items) {
    const item = items[0], interp = item.interpolate || 'linear';
    return (item.orient === 'horizontal' ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context)(items);
  }
  function line$1(context, items) {
    const item = items[0], interp = item.interpolate || 'linear';
    return lineShape.curve(curves(interp, item.orient, item.tension)).context(context)(items);
  }
  function rectangle(context, item, x, y) {
    return rectShape.context(context)(item, x, y);
  }
  function shape$1(context, item) {
    return (item.mark.shape || item.shape).context(context)(item);
  }
  function symbol$1(context, item) {
    return symbolShape.context(context)(item);
  }
  function trail$1(context, items) {
    return trailShape.context(context)(items);
  }
  var clip_id = 1;
  function resetSVGClipId() {
    clip_id = 1;
  }
  function clip$1(renderer, item, size) {
    var clip = item.clip, defs = renderer._defs, id = item.clip_id || (item.clip_id = 'clip' + clip_id++), c = defs.clipping[id] || (defs.clipping[id] = {
      id: id
    });
    if (vegaUtil.isFunction(clip)) {
      c.path = clip(null);
    } else if (hasCornerRadius(size)) {
      c.path = rectangle(null, size, 0, 0);
    } else {
      c.width = size.width || 0;
      c.height = size.height || 0;
    }
    return 'url(#' + id + ')';
  }
  function Bounds(b) {
    this.clear();
    if (b) this.union(b);
  }
  Bounds.prototype = {
    clone() {
      return new Bounds(this);
    },
    clear() {
      this.x1 = +Number.MAX_VALUE;
      this.y1 = +Number.MAX_VALUE;
      this.x2 = -Number.MAX_VALUE;
      this.y2 = -Number.MAX_VALUE;
      return this;
    },
    empty() {
      return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
    },
    equals(b) {
      return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
    },
    set(x1, y1, x2, y2) {
      if (x2 < x1) {
        this.x2 = x1;
        this.x1 = x2;
      } else {
        this.x1 = x1;
        this.x2 = x2;
      }
      if (y2 < y1) {
        this.y2 = y1;
        this.y1 = y2;
      } else {
        this.y1 = y1;
        this.y2 = y2;
      }
      return this;
    },
    add(x, y) {
      if (x < this.x1) this.x1 = x;
      if (y < this.y1) this.y1 = y;
      if (x > this.x2) this.x2 = x;
      if (y > this.y2) this.y2 = y;
      return this;
    },
    expand(d) {
      this.x1 -= d;
      this.y1 -= d;
      this.x2 += d;
      this.y2 += d;
      return this;
    },
    round() {
      this.x1 = Math.floor(this.x1);
      this.y1 = Math.floor(this.y1);
      this.x2 = Math.ceil(this.x2);
      this.y2 = Math.ceil(this.y2);
      return this;
    },
    scale(s) {
      this.x1 *= s;
      this.y1 *= s;
      this.x2 *= s;
      this.y2 *= s;
      return this;
    },
    translate(dx, dy) {
      this.x1 += dx;
      this.x2 += dx;
      this.y1 += dy;
      this.y2 += dy;
      return this;
    },
    rotate(angle, x, y) {
      const p = this.rotatedPoints(angle, x, y);
      return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
    },
    rotatedPoints(angle, x, y) {
      var {x1, y1, x2, y2} = this, cos = Math.cos(angle), sin = Math.sin(angle), cx = x - x * cos + y * sin, cy = y - x * sin - y * cos;
      return [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy, cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy, cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy, cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy];
    },
    union(b) {
      if (b.x1 < this.x1) this.x1 = b.x1;
      if (b.y1 < this.y1) this.y1 = b.y1;
      if (b.x2 > this.x2) this.x2 = b.x2;
      if (b.y2 > this.y2) this.y2 = b.y2;
      return this;
    },
    intersect(b) {
      if (b.x1 > this.x1) this.x1 = b.x1;
      if (b.y1 > this.y1) this.y1 = b.y1;
      if (b.x2 < this.x2) this.x2 = b.x2;
      if (b.y2 < this.y2) this.y2 = b.y2;
      return this;
    },
    encloses(b) {
      return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
    },
    alignsWith(b) {
      return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
    },
    intersects(b) {
      return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
    },
    contains(x, y) {
      return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
    },
    width() {
      return this.x2 - this.x1;
    },
    height() {
      return this.y2 - this.y1;
    }
  };
  function Item(mark) {
    this.mark = mark;
    this.bounds = this.bounds || new Bounds();
  }
  function GroupItem(mark) {
    Item.call(this, mark);
    this.items = this.items || [];
  }
  vegaUtil.inherits(GroupItem, Item);
  function ResourceLoader(customLoader) {
    this._pending = 0;
    this._loader = customLoader || vegaLoader.loader();
  }
  function increment(loader) {
    loader._pending += 1;
  }
  function decrement(loader) {
    loader._pending -= 1;
  }
  ResourceLoader.prototype = {
    pending() {
      return this._pending;
    },
    sanitizeURL(uri) {
      const loader = this;
      increment(loader);
      return loader._loader.sanitize(uri, {
        context: 'href'
      }).then(opt => {
        decrement(loader);
        return opt;
      }).catch(() => {
        decrement(loader);
        return null;
      });
    },
    loadImage(uri) {
      const loader = this, Image = vegaCanvas.image();
      increment(loader);
      return loader._loader.sanitize(uri, {
        context: 'image'
      }).then(opt => {
        const url = opt.href;
        if (!url || !Image) throw {
          url: url
        };
        const img = new Image();
        // set crossOrigin only if cors is defined; empty string sets anonymous mode
        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin
        const cors = vegaUtil.hasOwnProperty(opt, 'crossOrigin') ? opt.crossOrigin : 'anonymous';
        if (cors != null) img.crossOrigin = cors;
        // attempt to load image resource
        img.onload = () => decrement(loader);
        img.onerror = () => decrement(loader);
        img.src = url;
        return img;
      }).catch(e => {
        decrement(loader);
        return {
          complete: false,
          width: 0,
          height: 0,
          src: e && e.url || ''
        };
      });
    },
    ready() {
      const loader = this;
      return new Promise(accept => {
        function poll(value) {
          if (!loader.pending()) accept(value); else setTimeout(() => {
            poll(true);
          }, 10);
        }
        poll(false);
      });
    }
  };
  function boundStroke(bounds, item, miter) {
    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
      const sw = item.strokeWidth != null ? +item.strokeWidth : 1;
      bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
    }
    return bounds;
  }
  function miterAdjustment(item, strokeWidth) {
    // TODO: more sophisticated adjustment? Or miter support in boundContext?
    return item.strokeJoin && item.strokeJoin !== 'miter' ? 0 : strokeWidth;
  }
  const circleThreshold = Tau - 1e-8;
  let bounds, lx, ly, rot, ma, mb, mc, md;
  const add = (x, y) => bounds.add(x, y);
  const addL = (x, y) => add(lx = x, ly = y);
  const addX = x => add(x, bounds.y1);
  const addY = y => add(bounds.x1, y);
  const px = (x, y) => ma * x + mc * y;
  const py = (x, y) => mb * x + md * y;
  const addp = (x, y) => add(px(x, y), py(x, y));
  const addpL = (x, y) => addL(px(x, y), py(x, y));
  function boundContext(_, deg) {
    bounds = _;
    if (deg) {
      rot = deg * DegToRad;
      ma = md = Math.cos(rot);
      mb = Math.sin(rot);
      mc = -mb;
    } else {
      ma = md = 1;
      rot = mb = mc = 0;
    }
    return context$1;
  }
  const context$1 = {
    beginPath() {},
    closePath() {},
    moveTo: addpL,
    lineTo: addpL,
    rect(x, y, w, h) {
      if (rot) {
        addp(x + w, y);
        addp(x + w, y + h);
        addp(x, y + h);
        addpL(x, y);
      } else {
        add(x + w, y + h);
        addL(x, y);
      }
    },
    quadraticCurveTo(x1, y1, x2, y2) {
      const px1 = px(x1, y1), py1 = py(x1, y1), px2 = px(x2, y2), py2 = py(x2, y2);
      quadExtrema(lx, px1, px2, addX);
      quadExtrema(ly, py1, py2, addY);
      addL(px2, py2);
    },
    bezierCurveTo(x1, y1, x2, y2, x3, y3) {
      const px1 = px(x1, y1), py1 = py(x1, y1), px2 = px(x2, y2), py2 = py(x2, y2), px3 = px(x3, y3), py3 = py(x3, y3);
      cubicExtrema(lx, px1, px2, px3, addX);
      cubicExtrema(ly, py1, py2, py3, addY);
      addL(px3, py3);
    },
    arc(cx, cy, r, sa, ea, ccw) {
      sa += rot;
      ea += rot;
      // store last point on path
      lx = r * Math.cos(ea) + cx;
      ly = r * Math.sin(ea) + cy;
      if (Math.abs(ea - sa) > circleThreshold) {
        // treat as full circle
        add(cx - r, cy - r);
        add(cx + r, cy + r);
      } else {
        const update = a => add(r * Math.cos(a) + cx, r * Math.sin(a) + cy);
        let s, i;
        // sample end points
        update(sa);
        update(ea);
        // sample interior points aligned with 90 degrees
        if (ea !== sa) {
          sa = sa % Tau;
          if (sa < 0) sa += Tau;
          ea = ea % Tau;
          if (ea < 0) ea += Tau;
          if (ea < sa) {
            ccw = !ccw;
            // flip direction
            s = sa;
            sa = ea;
            ea = s;
          }
          if (ccw) {
            ea -= Tau;
            s = sa - sa % HalfPi;
            for (i = 0; i < 4 && s > ea; (++i, s -= HalfPi)) update(s);
          } else {
            s = sa - sa % HalfPi + HalfPi;
            for (i = 0; i < 4 && s < ea; (++i, s = s + HalfPi)) update(s);
          }
        }
      }
    }
  };
  function quadExtrema(x0, x1, x2, cb) {
    const t = (x0 - x1) / (x0 + x2 - 2 * x1);
    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);
  }
  function cubicExtrema(x0, x1, x2, x3, cb) {
    const a = x3 - x0 + 3 * x1 - 3 * x2, b = x0 + x2 - 2 * x1, c = x0 - x1;
    let t0 = 0, t1 = 0, r;
    // solve for parameter t
    if (Math.abs(a) > Epsilon) {
      // quadratic equation
      r = b * b + c * a;
      if (r >= 0) {
        r = Math.sqrt(r);
        t0 = (-b + r) / a;
        t1 = (-b - r) / a;
      }
    } else {
      // linear equation
      t0 = 0.5 * c / b;
    }
    // calculate position
    if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));
    if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));
  }
  function cubic(t, x0, x1, x2, x3) {
    const s = 1 - t, s2 = s * s, t2 = t * t;
    return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;
  }
  var context = (context = vegaCanvas.canvas(1, 1)) ? context.getContext('2d') : null;
  const b = new Bounds();
  function intersectPath(draw) {
    return function (item, brush) {
      // rely on (inaccurate) bounds intersection if no context
      if (!context) return true;
      // add path to offscreen graphics context
      draw(context, item);
      // get bounds intersection region
      b.clear().union(item.bounds).intersect(brush).round();
      const {x1, y1, x2, y2} = b;
      // iterate over intersection region
      // perform fine grained inclusion test
      for (let y = y1; y <= y2; ++y) {
        for (let x = x1; x <= x2; ++x) {
          if (context.isPointInPath(x, y)) {
            return true;
          }
        }
      }
      // false if no hits in intersection region
      return false;
    };
  }
  function intersectPoint(item, box) {
    return box.contains(item.x || 0, item.y || 0);
  }
  function intersectRect(item, box) {
    const x = item.x || 0, y = item.y || 0, w = item.width || 0, h = item.height || 0;
    return box.intersects(b.set(x, y, x + w, y + h));
  }
  function intersectRule(item, box) {
    const x = item.x || 0, y = item.y || 0, x2 = item.x2 != null ? item.x2 : x, y2 = item.y2 != null ? item.y2 : y;
    return intersectBoxLine(box, x, y, x2, y2);
  }
  function intersectBoxLine(box, x, y, u, v) {
    const {x1, y1, x2, y2} = box, dx = u - x, dy = v - y;
    let t0 = 0, t1 = 1, p, q, r, e;
    for (e = 0; e < 4; ++e) {
      if (e === 0) {
        p = -dx;
        q = -(x1 - x);
      }
      if (e === 1) {
        p = dx;
        q = x2 - x;
      }
      if (e === 2) {
        p = -dy;
        q = -(y1 - y);
      }
      if (e === 3) {
        p = dy;
        q = y2 - y;
      }
      if (Math.abs(p) < 1e-10 && q < 0) return false;
      r = q / p;
      if (p < 0) {
        if (r > t1) return false; else if (r > t0) t0 = r;
      } else if (p > 0) {
        if (r < t0) return false; else if (r < t1) t1 = r;
      }
    }
    return true;
  }
  function blend(context, item) {
    context.globalCompositeOperation = item.blend || 'source-over';
  }
  function value(value, dflt) {
    return value == null ? dflt : value;
  }
  function addStops(gradient, stops) {
    const n = stops.length;
    for (let i = 0; i < n; ++i) {
      gradient.addColorStop(stops[i].offset, stops[i].color);
    }
    return gradient;
  }
  function gradient(context, spec, bounds) {
    const w = bounds.width(), h = bounds.height();
    let gradient;
    if (spec.gradient === 'radial') {
      gradient = context.createRadialGradient(bounds.x1 + value(spec.x1, 0.5) * w, bounds.y1 + value(spec.y1, 0.5) * h, Math.max(w, h) * value(spec.r1, 0), bounds.x1 + value(spec.x2, 0.5) * w, bounds.y1 + value(spec.y2, 0.5) * h, Math.max(w, h) * value(spec.r2, 0.5));
    } else {
      // linear gradient
      const x1 = value(spec.x1, 0), y1 = value(spec.y1, 0), x2 = value(spec.x2, 1), y2 = value(spec.y2, 0);
      if (x1 === x2 || y1 === y2 || w === h) {
        // axis aligned: use normal gradient
        gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);
      } else {
        // not axis aligned: render gradient into a pattern (#2365)
        // this allows us to use normalized bounding box coordinates
        const image = vegaCanvas.canvas(Math.ceil(w), Math.ceil(h)), ictx = image.getContext('2d');
        ictx.scale(w, h);
        ictx.fillStyle = addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);
        ictx.fillRect(0, 0, w, h);
        return context.createPattern(image, 'no-repeat');
      }
    }
    return addStops(gradient, spec.stops);
  }
  function color(context, item, value) {
    return isGradient(value) ? gradient(context, value, item.bounds) : value;
  }
  function fill(context, item, opacity) {
    opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;
    if (opacity > 0) {
      context.globalAlpha = opacity;
      context.fillStyle = color(context, item, item.fill);
      return true;
    } else {
      return false;
    }
  }
  var Empty = [];
  function stroke(context, item, opacity) {
    var lw = (lw = item.strokeWidth) != null ? lw : 1;
    if (lw <= 0) return false;
    opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;
    if (opacity > 0) {
      context.globalAlpha = opacity;
      context.strokeStyle = color(context, item, item.stroke);
      context.lineWidth = lw;
      context.lineCap = item.strokeCap || 'butt';
      context.lineJoin = item.strokeJoin || 'miter';
      context.miterLimit = item.strokeMiterLimit || 10;
      if (context.setLineDash) {
        context.setLineDash(item.strokeDash || Empty);
        context.lineDashOffset = item.strokeDashOffset || 0;
      }
      return true;
    } else {
      return false;
    }
  }
  function compare(a, b) {
    return a.zindex - b.zindex || a.index - b.index;
  }
  function zorder(scene) {
    if (!scene.zdirty) return scene.zitems;
    var items = scene.items, output = [], item, i, n;
    for ((i = 0, n = items.length); i < n; ++i) {
      item = items[i];
      item.index = i;
      if (item.zindex) output.push(item);
    }
    scene.zdirty = false;
    return scene.zitems = output.sort(compare);
  }
  function visit(scene, visitor) {
    var items = scene.items, i, n;
    if (!items || !items.length) return;
    const zitems = zorder(scene);
    if (zitems && zitems.length) {
      for ((i = 0, n = items.length); i < n; ++i) {
        if (!items[i].zindex) visitor(items[i]);
      }
      items = zitems;
    }
    for ((i = 0, n = items.length); i < n; ++i) {
      visitor(items[i]);
    }
  }
  function pickVisit(scene, visitor) {
    var items = scene.items, hit, i;
    if (!items || !items.length) return null;
    const zitems = zorder(scene);
    if (zitems && zitems.length) items = zitems;
    for (i = items.length; --i >= 0; ) {
      if (hit = visitor(items[i])) return hit;
    }
    if (items === zitems) {
      for ((items = scene.items, i = items.length); --i >= 0; ) {
        if (!items[i].zindex) {
          if (hit = visitor(items[i])) return hit;
        }
      }
    }
    return null;
  }
  function drawAll(path) {
    return function (context, scene, bounds) {
      visit(scene, item => {
        if (!bounds || bounds.intersects(item.bounds)) {
          drawPath(path, context, item, item);
        }
      });
    };
  }
  function drawOne(path) {
    return function (context, scene, bounds) {
      if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
        drawPath(path, context, scene.items[0], scene.items);
      }
    };
  }
  function drawPath(path, context, item, items) {
    var opacity = item.opacity == null ? 1 : item.opacity;
    if (opacity === 0) return;
    if (path(context, items)) return;
    blend(context, item);
    if (item.fill && fill(context, item, opacity)) {
      context.fill();
    }
    if (item.stroke && stroke(context, item, opacity)) {
      context.stroke();
    }
  }
  function pick$1(test) {
    test = test || vegaUtil.truthy;
    return function (context, scene, x, y, gx, gy) {
      x *= context.pixelRatio;
      y *= context.pixelRatio;
      return pickVisit(scene, item => {
        const b = item.bounds;
        // first hit test against bounding box
        if (b && !b.contains(gx, gy) || !b) return;
        // if in bounding box, perform more careful test
        if (test(context, item, x, y, gx, gy)) return item;
      });
    };
  }
  function hitPath(path, filled) {
    return function (context, o, x, y) {
      var item = Array.isArray(o) ? o[0] : o, fill = filled == null ? item.fill : filled, stroke = item.stroke && context.isPointInStroke, lw, lc;
      if (stroke) {
        lw = item.strokeWidth;
        lc = item.strokeCap;
        context.lineWidth = lw != null ? lw : 1;
        context.lineCap = lc != null ? lc : 'butt';
      }
      return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
    };
  }
  function pickPath(path) {
    return pick$1(hitPath(path));
  }
  function translate(x, y) {
    return 'translate(' + x + ',' + y + ')';
  }
  function rotate(a) {
    return 'rotate(' + a + ')';
  }
  function scale(scaleX, scaleY) {
    return 'scale(' + scaleX + ',' + scaleY + ')';
  }
  function translateItem(item) {
    return translate(item.x || 0, item.y || 0);
  }
  function rotateItem(item) {
    return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '');
  }
  function transformItem(item) {
    return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '') + (item.scaleX || item.scaleY ? ' ' + scale(item.scaleX || 1, item.scaleY || 1) : '');
  }
  function markItemPath(type, shape, isect) {
    function attr(emit, item) {
      emit('transform', rotateItem(item));
      emit('d', shape(null, item));
    }
    function bound(bounds, item) {
      shape(boundContext(bounds, item.angle), item);
      return boundStroke(bounds, item).translate(item.x || 0, item.y || 0);
    }
    function draw(context, item) {
      var x = item.x || 0, y = item.y || 0, a = item.angle || 0;
      context.translate(x, y);
      if (a) context.rotate(a *= DegToRad);
      context.beginPath();
      shape(context, item);
      if (a) context.rotate(-a);
      context.translate(-x, -y);
    }
    return {
      type: type,
      tag: 'path',
      nested: false,
      attr: attr,
      bound: bound,
      draw: drawAll(draw),
      pick: pickPath(draw),
      isect: isect || intersectPath(draw)
    };
  }
  var arc = markItemPath('arc', arc$1);
  function pickArea(a, p) {
    var v = a[0].orient === 'horizontal' ? p[1] : p[0], z = a[0].orient === 'horizontal' ? 'y' : 'x', i = a.length, min = +Infinity, hit, d;
    while (--i >= 0) {
      if (a[i].defined === false) continue;
      d = Math.abs(a[i][z] - v);
      if (d < min) {
        min = d;
        hit = a[i];
      }
    }
    return hit;
  }
  function pickLine(a, p) {
    var t = Math.pow(a[0].strokeWidth || 1, 2), i = a.length, dx, dy, dd;
    while (--i >= 0) {
      if (a[i].defined === false) continue;
      dx = a[i].x - p[0];
      dy = a[i].y - p[1];
      dd = dx * dx + dy * dy;
      if (dd < t) return a[i];
    }
    return null;
  }
  function pickTrail(a, p) {
    var i = a.length, dx, dy, dd;
    while (--i >= 0) {
      if (a[i].defined === false) continue;
      dx = a[i].x - p[0];
      dy = a[i].y - p[1];
      dd = dx * dx + dy * dy;
      dx = a[i].size || 1;
      if (dd < dx * dx) return a[i];
    }
    return null;
  }
  function markMultiItemPath(type, shape, tip) {
    function attr(emit, item) {
      var items = item.mark.items;
      if (items.length) emit('d', shape(null, items));
    }
    function bound(bounds, mark) {
      var items = mark.items;
      if (items.length === 0) {
        return bounds;
      } else {
        shape(boundContext(bounds), items);
        return boundStroke(bounds, items[0]);
      }
    }
    function draw(context, items) {
      context.beginPath();
      shape(context, items);
    }
    const hit = hitPath(draw);
    function pick(context, scene, x, y, gx, gy) {
      var items = scene.items, b = scene.bounds;
      if (!items || !items.length || b && !b.contains(gx, gy)) {
        return null;
      }
      x *= context.pixelRatio;
      y *= context.pixelRatio;
      return hit(context, items, x, y) ? items[0] : null;
    }
    return {
      type: type,
      tag: 'path',
      nested: true,
      attr: attr,
      bound: bound,
      draw: drawOne(draw),
      pick: pick,
      isect: intersectPoint,
      tip: tip
    };
  }
  var area = markMultiItemPath('area', area$1, pickArea);
  function clip(context, scene) {
    var clip = scene.clip;
    context.save();
    if (vegaUtil.isFunction(clip)) {
      context.beginPath();
      clip(context);
      context.clip();
    } else {
      clipGroup(context, scene.group);
    }
  }
  function clipGroup(context, group) {
    context.beginPath();
    hasCornerRadius(group) ? rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);
    context.clip();
  }
  function offset$1(item) {
    const sw = value(item.strokeWidth, 1);
    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
  }
  function attr$5(emit, item) {
    emit('transform', translateItem(item));
  }
  function emitRectangle(emit, item) {
    const off = offset$1(item);
    emit('d', rectangle(null, item, off, off));
  }
  function background(emit, item) {
    emit('class', 'background');
    emit('aria-hidden', true);
    emitRectangle(emit, item);
  }
  function foreground(emit, item) {
    emit('class', 'foreground');
    emit('aria-hidden', true);
    if (item.strokeForeground) {
      emitRectangle(emit, item);
    } else {
      emit('d', '');
    }
  }
  function content(emit, item, renderer) {
    const url = item.clip ? clip$1(renderer, item, item) : null;
    emit('clip-path', url);
  }
  function bound$5(bounds, group) {
    if (!group.clip && group.items) {
      const items = group.items, m = items.length;
      for (let j = 0; j < m; ++j) {
        bounds.union(items[j].bounds);
      }
    }
    if ((group.clip || group.width || group.height) && !group.noBound) {
      bounds.add(0, 0).add(group.width || 0, group.height || 0);
    }
    boundStroke(bounds, group);
    return bounds.translate(group.x || 0, group.y || 0);
  }
  function rectanglePath(context, group, x, y) {
    const off = offset$1(group);
    context.beginPath();
    rectangle(context, group, (x || 0) + off, (y || 0) + off);
  }
  const hitBackground = hitPath(rectanglePath);
  const hitForeground = hitPath(rectanglePath, false);
  const hitCorner = hitPath(rectanglePath, true);
  function draw$4(context, scene, bounds) {
    visit(scene, group => {
      const gx = group.x || 0, gy = group.y || 0, fore = group.strokeForeground, opacity = group.opacity == null ? 1 : group.opacity;
      // draw group background
      if ((group.stroke || group.fill) && opacity) {
        rectanglePath(context, group, gx, gy);
        blend(context, group);
        if (group.fill && fill(context, group, opacity)) {
          context.fill();
        }
        if (group.stroke && !fore && stroke(context, group, opacity)) {
          context.stroke();
        }
      }
      // setup graphics context, set clip and bounds
      context.save();
      context.translate(gx, gy);
      if (group.clip) clipGroup(context, group);
      if (bounds) bounds.translate(-gx, -gy);
      // draw group contents
      visit(group, item => {
        this.draw(context, item, bounds);
      });
      // restore graphics context
      if (bounds) bounds.translate(gx, gy);
      context.restore();
      // draw group foreground
      if (fore && group.stroke && opacity) {
        rectanglePath(context, group, gx, gy);
        blend(context, group);
        if (stroke(context, group, opacity)) {
          context.stroke();
        }
      }
    });
  }
  function pick(context, scene, x, y, gx, gy) {
    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
      return null;
    }
    const cx = x * context.pixelRatio, cy = y * context.pixelRatio;
    return pickVisit(scene, group => {
      let hit, dx, dy;
      // first hit test bounding box
      const b = group.bounds;
      if (b && !b.contains(gx, gy)) return;
      // passed bounds check, test rectangular clip
      dx = group.x || 0;
      dy = group.y || 0;
      const dw = dx + (group.width || 0), dh = dy + (group.height || 0), c = group.clip;
      if (c && (gx < dx || gx > dw || gy < dy || gy > dh)) return;
      // adjust coordinate system
      context.save();
      context.translate(dx, dy);
      dx = gx - dx;
      dy = gy - dy;
      // test background for rounded corner clip
      if (c && hasCornerRadius(group) && !hitCorner(context, group, cx, cy)) {
        context.restore();
        return null;
      }
      const fore = group.strokeForeground, ix = scene.interactive !== false;
      // hit test against group foreground
      if (ix && fore && group.stroke && hitForeground(context, group, cx, cy)) {
        context.restore();
        return group;
      }
      // hit test against contained marks
      hit = pickVisit(group, mark => pickMark(mark, dx, dy) ? this.pick(mark, x, y, dx, dy) : null);
      // hit test against group background
      if (!hit && ix && (group.fill || !fore && group.stroke) && hitBackground(context, group, cx, cy)) {
        hit = group;
      }
      // restore state and return
      context.restore();
      return hit || null;
    });
  }
  function pickMark(mark, x, y) {
    return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);
  }
  var group = {
    type: 'group',
    tag: 'g',
    nested: false,
    attr: attr$5,
    bound: bound$5,
    draw: draw$4,
    pick: pick,
    isect: intersectRect,
    content: content,
    background: background,
    foreground: foreground
  };
  var metadata = {
    'xmlns': 'http://www.w3.org/2000/svg',
    'xmlns:xlink': 'http://www.w3.org/1999/xlink',
    'version': '1.1'
  };
  function getImage(item, renderer) {
    var image = item.image;
    if (!image || item.url && item.url !== image.url) {
      image = {
        complete: false,
        width: 0,
        height: 0
      };
      renderer.loadImage(item.url).then(image => {
        item.image = image;
        item.image.url = item.url;
      });
    }
    return image;
  }
  function imageWidth(item, image) {
    return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;
  }
  function imageHeight(item, image) {
    return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;
  }
  function imageXOffset(align, w) {
    return align === 'center' ? w / 2 : align === 'right' ? w : 0;
  }
  function imageYOffset(baseline, h) {
    return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
  }
  function attr$4(emit, item, renderer) {
    const img = getImage(item, renderer), w = imageWidth(item, img), h = imageHeight(item, img), x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h), i = !img.src && img.toDataURL ? img.toDataURL() : img.src || '';
    emit('href', i, metadata['xmlns:xlink'], 'xlink:href');
    emit('transform', translate(x, y));
    emit('width', w);
    emit('height', h);
    emit('preserveAspectRatio', item.aspect === false ? 'none' : 'xMidYMid');
  }
  function bound$4(bounds, item) {
    const img = item.image, w = imageWidth(item, img), h = imageHeight(item, img), x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h);
    return bounds.set(x, y, x + w, y + h);
  }
  function draw$3(context, scene, bounds) {
    visit(scene, item => {
      if (bounds && !bounds.intersects(item.bounds)) return;
      // bounds check
      const img = getImage(item, this);
      let w = imageWidth(item, img);
      let h = imageHeight(item, img);
      if (w === 0 || h === 0) return;
      // early exit
      let x = (item.x || 0) - imageXOffset(item.align, w), y = (item.y || 0) - imageYOffset(item.baseline, h), opacity, ar0, ar1, t;
      if (item.aspect !== false) {
        ar0 = img.width / img.height;
        ar1 = item.width / item.height;
        if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
          if (ar1 < ar0) {
            t = w / ar0;
            y += (h - t) / 2;
            h = t;
          } else {
            t = h * ar0;
            x += (w - t) / 2;
            w = t;
          }
        }
      }
      if (img.complete || img.toDataURL) {
        blend(context, item);
        context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
        context.imageSmoothingEnabled = item.smooth !== false;
        context.drawImage(img, x, y, w, h);
      }
    });
  }
  var image = {
    type: 'image',
    tag: 'image',
    nested: false,
    attr: attr$4,
    bound: bound$4,
    draw: draw$3,
    pick: pick$1(),
    isect: vegaUtil.truthy,
    // bounds check is sufficient
    get: getImage,
    xOffset: imageXOffset,
    yOffset: imageYOffset
  };
  var line = markMultiItemPath('line', line$1, pickLine);
  function attr$3(emit, item) {
    var sx = item.scaleX || 1, sy = item.scaleY || 1;
    if (sx !== 1 || sy !== 1) {
      emit('vector-effect', 'non-scaling-stroke');
    }
    emit('transform', transformItem(item));
    emit('d', item.path);
  }
  function path$1(context, item) {
    var path = item.path;
    if (path == null) return true;
    var x = item.x || 0, y = item.y || 0, sx = item.scaleX || 1, sy = item.scaleY || 1, a = (item.angle || 0) * DegToRad, cache = item.pathCache;
    if (!cache || cache.path !== path) {
      (item.pathCache = cache = pathParse(path)).path = path;
    }
    if (a && context.rotate && context.translate) {
      context.translate(x, y);
      context.rotate(a);
      pathRender(context, cache, 0, 0, sx, sy);
      context.rotate(-a);
      context.translate(-x, -y);
    } else {
      pathRender(context, cache, x, y, sx, sy);
    }
  }
  function bound$3(bounds, item) {
    return path$1(boundContext(bounds, item.angle), item) ? bounds.set(0, 0, 0, 0) : boundStroke(bounds, item, true);
  }
  var path$2 = {
    type: 'path',
    tag: 'path',
    nested: false,
    attr: attr$3,
    bound: bound$3,
    draw: drawAll(path$1),
    pick: pickPath(path$1),
    isect: intersectPath(path$1)
  };
  function attr$2(emit, item) {
    emit('d', rectangle(null, item));
  }
  function bound$2(bounds, item) {
    var x, y;
    return boundStroke(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
  }
  function draw$2(context, item) {
    context.beginPath();
    rectangle(context, item);
  }
  var rect = {
    type: 'rect',
    tag: 'path',
    nested: false,
    attr: attr$2,
    bound: bound$2,
    draw: drawAll(draw$2),
    pick: pickPath(draw$2),
    isect: intersectRect
  };
  function attr$1(emit, item) {
    emit('transform', translateItem(item));
    emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
    emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
  }
  function bound$1(bounds, item) {
    var x1, y1;
    return boundStroke(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
  }
  function path(context, item, opacity) {
    var x1, y1, x2, y2;
    if (item.stroke && stroke(context, item, opacity)) {
      x1 = item.x || 0;
      y1 = item.y || 0;
      x2 = item.x2 != null ? item.x2 : x1;
      y2 = item.y2 != null ? item.y2 : y1;
      context.beginPath();
      context.moveTo(x1, y1);
      context.lineTo(x2, y2);
      return true;
    }
    return false;
  }
  function draw$1(context, scene, bounds) {
    visit(scene, item => {
      if (bounds && !bounds.intersects(item.bounds)) return;
      // bounds check
      var opacity = item.opacity == null ? 1 : item.opacity;
      if (opacity && path(context, item, opacity)) {
        blend(context, item);
        context.stroke();
      }
    });
  }
  function hit$1(context, item, x, y) {
    if (!context.isPointInStroke) return false;
    return path(context, item, 1) && context.isPointInStroke(x, y);
  }
  var rule = {
    type: 'rule',
    tag: 'line',
    nested: false,
    attr: attr$1,
    bound: bound$1,
    draw: draw$1,
    pick: pick$1(hit$1),
    isect: intersectRule
  };
  var shape = markItemPath('shape', shape$1);
  var symbol = markItemPath('symbol', symbol$1, intersectPoint);
  const widthCache = vegaUtil.lruCache();
  var textMetrics = {
    height: fontSize,
    measureWidth: measureWidth,
    estimateWidth: estimateWidth,
    width: estimateWidth,
    canvas: useCanvas
  };
  useCanvas(true);
  function useCanvas(use) {
    textMetrics.width = use && context ? measureWidth : estimateWidth;
  }
  // make simple estimate if no canvas is available
  function estimateWidth(item, text) {
    return _estimateWidth(textValue(item, text), fontSize(item));
  }
  function _estimateWidth(text, currentFontHeight) {
    return ~~(0.8 * text.length * currentFontHeight);
  }
  // measure text width if canvas is available
  function measureWidth(item, text) {
    return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0 : _measureWidth(text, font(item));
  }
  function _measureWidth(text, currentFont) {
    const key = `(${currentFont}) ${text}`;
    let width = widthCache.get(key);
    if (width === undefined) {
      context.font = currentFont;
      width = context.measureText(text).width;
      widthCache.set(key, width);
    }
    return width;
  }
  function fontSize(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
  }
  function lineHeight(item) {
    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
  }
  function lineArray(_) {
    return vegaUtil.isArray(_) ? _.length > 1 ? _ : _[0] : _;
  }
  function textLines(item) {
    return lineArray(item.lineBreak && item.text && !vegaUtil.isArray(item.text) ? item.text.split(item.lineBreak) : item.text);
  }
  function multiLineOffset(item) {
    const tl = textLines(item);
    return (vegaUtil.isArray(tl) ? tl.length - 1 : 0) * lineHeight(item);
  }
  function textValue(item, line) {
    const text = line == null ? '' : (line + '').trim();
    return item.limit > 0 && text.length ? truncate(item, text) : text;
  }
  function widthGetter(item) {
    if (textMetrics.width === measureWidth) {
      // we are using canvas
      const currentFont = font(item);
      return text => _measureWidth(text, currentFont);
    } else {
      // we are relying on estimates
      const currentFontHeight = fontSize(item);
      return text => _estimateWidth(text, currentFontHeight);
    }
  }
  function truncate(item, text) {
    var limit = +item.limit, width = widthGetter(item);
    if (width(text) < limit) return text;
    var ellipsis = item.ellipsis || '\u2026', rtl = item.dir === 'rtl', lo = 0, hi = text.length, mid;
    limit -= width(ellipsis);
    if (rtl) {
      while (lo < hi) {
        mid = lo + hi >>> 1;
        if (width(text.slice(mid)) > limit) lo = mid + 1; else hi = mid;
      }
      return ellipsis + text.slice(lo);
    } else {
      while (lo < hi) {
        mid = 1 + (lo + hi >>> 1);
        if (width(text.slice(0, mid)) < limit) lo = mid; else hi = mid - 1;
      }
      return text.slice(0, lo) + ellipsis;
    }
  }
  function fontFamily(item, quote) {
    var font = item.font;
    return (quote && font ? String(font).replace(/"/g, '\'') : font) || 'sans-serif';
  }
  function font(item, quote) {
    return '' + (item.fontStyle ? item.fontStyle + ' ' : '') + (item.fontVariant ? item.fontVariant + ' ' : '') + (item.fontWeight ? item.fontWeight + ' ' : '') + fontSize(item) + 'px ' + fontFamily(item, quote);
  }
  function offset(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    // this also ensures consistent layout across renderers
    var baseline = item.baseline, h = fontSize(item);
    return Math.round(baseline === 'top' ? 0.79 * h : baseline === 'middle' ? 0.30 * h : baseline === 'bottom' ? -0.21 * h : baseline === 'line-top' ? 0.29 * h + 0.5 * lineHeight(item) : baseline === 'line-bottom' ? 0.29 * h - 0.5 * lineHeight(item) : 0);
  }
  const textAlign = {
    'left': 'start',
    'center': 'middle',
    'right': 'end'
  };
  const tempBounds = new Bounds();
  function anchorPoint(item) {
    var x = item.x || 0, y = item.y || 0, r = item.radius || 0, t;
    if (r) {
      t = (item.theta || 0) - HalfPi;
      x += r * Math.cos(t);
      y += r * Math.sin(t);
    }
    tempBounds.x1 = x;
    tempBounds.y1 = y;
    return tempBounds;
  }
  function attr(emit, item) {
    var dx = item.dx || 0, dy = (item.dy || 0) + offset(item), p = anchorPoint(item), x = p.x1, y = p.y1, a = item.angle || 0, t;
    emit('text-anchor', textAlign[item.align] || 'start');
    if (a) {
      t = translate(x, y) + ' ' + rotate(a);
      if (dx || dy) t += ' ' + translate(dx, dy);
    } else {
      t = translate(x + dx, y + dy);
    }
    emit('transform', t);
  }
  function bound(bounds, item, mode) {
    var h = textMetrics.height(item), a = item.align, p = anchorPoint(item), x = p.x1, y = p.y1, dx = item.dx || 0, dy = (item.dy || 0) + offset(item) - Math.round(0.8 * h), // use 4/5 offset
    tl = textLines(item), w;
    // get dimensions
    if (vegaUtil.isArray(tl)) {
      // multi-line text
      h += lineHeight(item) * (tl.length - 1);
      w = tl.reduce((w, t) => Math.max(w, textMetrics.width(item, t)), 0);
    } else {
      // single-line text
      w = textMetrics.width(item, tl);
    }
    // horizontal alignment
    if (a === 'center') {
      dx -= w / 2;
    } else if (a === 'right') {
      dx -= w;
    } else ;
    bounds.set(dx += x, dy += y, dx + w, dy + h);
    if (item.angle && !mode) {
      bounds.rotate(item.angle * DegToRad, x, y);
    } else if (mode === 2) {
      return bounds.rotatedPoints(item.angle * DegToRad, x, y);
    }
    return bounds;
  }
  function draw(context, scene, bounds) {
    visit(scene, item => {
      var opacity = item.opacity == null ? 1 : item.opacity, p, x, y, i, lh, tl, str;
      if (bounds && !bounds.intersects(item.bounds) || // bounds check
      opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
      context.font = font(item);
      context.textAlign = item.align || 'left';
      p = anchorPoint(item);
      (x = p.x1, y = p.y1);
      if (item.angle) {
        context.save();
        context.translate(x, y);
        context.rotate(item.angle * DegToRad);
        x = y = 0;
      }
      x += item.dx || 0;
      y += (item.dy || 0) + offset(item);
      tl = textLines(item);
      blend(context, item);
      if (vegaUtil.isArray(tl)) {
        lh = lineHeight(item);
        for (i = 0; i < tl.length; ++i) {
          str = textValue(item, tl[i]);
          if (item.fill && fill(context, item, opacity)) {
            context.fillText(str, x, y);
          }
          if (item.stroke && stroke(context, item, opacity)) {
            context.strokeText(str, x, y);
          }
          y += lh;
        }
      } else {
        str = textValue(item, tl);
        if (item.fill && fill(context, item, opacity)) {
          context.fillText(str, x, y);
        }
        if (item.stroke && stroke(context, item, opacity)) {
          context.strokeText(str, x, y);
        }
      }
      if (item.angle) context.restore();
    });
  }
  function hit(context, item, x, y, gx, gy) {
    if (item.fontSize <= 0) return false;
    if (!item.angle) return true;
    // bounds sufficient if no rotation
    // project point into space of unrotated bounds
    var p = anchorPoint(item), ax = p.x1, ay = p.y1, b = bound(tempBounds, item, 1), a = -item.angle * DegToRad, cos = Math.cos(a), sin = Math.sin(a), px = cos * gx - sin * gy + (ax - cos * ax + sin * ay), py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
    return b.contains(px, py);
  }
  function intersectText(item, box) {
    const p = bound(tempBounds, item, 2);
    return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
  }
  var text = {
    type: 'text',
    tag: 'text',
    nested: false,
    attr: attr,
    bound: bound,
    draw: draw,
    pick: pick$1(hit),
    isect: intersectText
  };
  var trail = markMultiItemPath('trail', trail$1, pickTrail);
  var Marks = {
    arc: arc,
    area: area,
    group: group,
    image: image,
    line: line,
    path: path$2,
    rect: rect,
    rule: rule,
    shape: shape,
    symbol: symbol,
    text: text,
    trail: trail
  };
  function boundItem(item, func, opt) {
    var type = Marks[item.mark.marktype], bound = func || type.bound;
    if (type.nested) item = item.mark;
    return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
  }
  var DUMMY = {
    mark: null
  };
  function boundMark(mark, bounds, opt) {
    var type = Marks[mark.marktype], bound = type.bound, items = mark.items, hasItems = items && items.length, i, n, item, b;
    if (type.nested) {
      if (hasItems) {
        item = items[0];
      } else {
        // no items, fake it
        DUMMY.mark = mark;
        item = DUMMY;
      }
      b = boundItem(item, bound, opt);
      bounds = bounds && bounds.union(b) || b;
      return bounds;
    }
    bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();
    if (hasItems) {
      for ((i = 0, n = items.length); i < n; ++i) {
        bounds.union(boundItem(items[i], bound, opt));
      }
    }
    return mark.bounds = bounds;
  }
  const keys = ['marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex', 'x', 'y', 'width', 'height', 'align', 'baseline', // layout
  'fill', 'fillOpacity', 'opacity', 'blend', // fill
  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap', // stroke
  'strokeDash', 'strokeDashOffset', // stroke dash
  'strokeForeground', 'strokeOffset', // group
  'startAngle', 'endAngle', 'innerRadius', 'outerRadius', // arc
  'cornerRadius', 'padAngle', // arc, rect
  'cornerRadiusTopLeft', 'cornerRadiusTopRight', // rect, group
  'cornerRadiusBottomLeft', 'cornerRadiusBottomRight', 'interpolate', 'tension', 'orient', 'defined', // area, line
  'url', 'aspect', 'smooth', // image
  'path', 'scaleX', 'scaleY', // path
  'x2', 'y2', // rule
  'size', 'shape', // symbol
  'text', 'angle', 'theta', 'radius', 'dir', 'dx', 'dy', // text
  'ellipsis', 'limit', 'lineBreak', 'lineHeight', 'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant', // font
  'description', 'aria', 'ariaRole', 'ariaRoleDescription'];
  function sceneToJSON(scene, indent) {
    return JSON.stringify(scene, keys, indent);
  }
  function sceneFromJSON(json) {
    const scene = typeof json === 'string' ? JSON.parse(json) : json;
    return initialize(scene);
  }
  function initialize(scene) {
    var type = scene.marktype, items = scene.items, parent, i, n;
    if (items) {
      for ((i = 0, n = items.length); i < n; ++i) {
        parent = type ? 'mark' : 'group';
        items[i][parent] = scene;
        if (items[i].zindex) items[i][parent].zdirty = true;
        if ('group' === (type || parent)) initialize(items[i]);
      }
    }
    if (type) boundMark(scene);
    return scene;
  }
  function Scenegraph(scene) {
    if (arguments.length) {
      this.root = sceneFromJSON(scene);
    } else {
      this.root = createMark({
        marktype: 'group',
        name: 'root',
        role: 'frame'
      });
      this.root.items = [new GroupItem(this.root)];
    }
  }
  Scenegraph.prototype = {
    toJSON(indent) {
      return sceneToJSON(this.root, indent || 0);
    },
    mark(markdef, group, index) {
      group = group || this.root.items[0];
      const mark = createMark(markdef, group);
      group.items[index] = mark;
      if (mark.zindex) mark.group.zdirty = true;
      return mark;
    }
  };
  function createMark(def, group) {
    const mark = {
      bounds: new Bounds(),
      clip: !!def.clip,
      group: group,
      interactive: def.interactive === false ? false : true,
      items: [],
      marktype: def.marktype,
      name: def.name || undefined,
      role: def.role || undefined,
      zindex: def.zindex || 0
    };
    // add accessibility properties if defined
    if (def.aria != null) {
      mark.aria = def.aria;
    }
    if (def.description) {
      mark.description = def.description;
    }
    return mark;
  }
  // create a new DOM element
  function domCreate(doc, tag, ns) {
    if (!doc && typeof document !== 'undefined' && document.createElement) {
      doc = document;
    }
    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
  }
  // find first child element with matching tag
  function domFind(el, tag) {
    tag = tag.toLowerCase();
    var nodes = el.childNodes, i = 0, n = nodes.length;
    for (; i < n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
      return nodes[i];
    }
  }
  // retrieve child element at given index
  // create & insert if doesn't exist or if tags do not match
  function domChild(el, index, tag, ns) {
    var a = el.childNodes[index], b;
    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
      b = a || null;
      a = domCreate(el.ownerDocument, tag, ns);
      el.insertBefore(a, b);
    }
    return a;
  }
  // remove all child elements at or above the given index
  function domClear(el, index) {
    var nodes = el.childNodes, curr = nodes.length;
    while (curr > index) el.removeChild(nodes[--curr]);
    return el;
  }
  // generate css class name for mark
  function cssClass(mark) {
    return 'mark-' + mark.marktype + (mark.role ? ' role-' + mark.role : '') + (mark.name ? ' ' + mark.name : '');
  }
  function point(event, el) {
    const rect = el.getBoundingClientRect();
    return [event.clientX - rect.left - (el.clientLeft || 0), event.clientY - rect.top - (el.clientTop || 0)];
  }
  function resolveItem(item, event, el, origin) {
    var mark = item && item.mark, mdef, p;
    if (mark && (mdef = Marks[mark.marktype]).tip) {
      p = point(event, el);
      p[0] -= origin[0];
      p[1] -= origin[1];
      while (item = item.mark.group) {
        p[0] -= item.x || 0;
        p[1] -= item.y || 0;
      }
      item = mdef.tip(mark.items, p);
    }
    return item;
  }
  /**
  * Create a new Handler instance.
  * @param {object} [customLoader] - Optional loader instance for
  *   href URL sanitization. If not specified, a standard loader
  *   instance will be generated.
  * @param {function} [customTooltip] - Optional tooltip handler
  *   function for custom tooltip display.
  * @constructor
  */
  function Handler(customLoader, customTooltip) {
    this._active = null;
    this._handlers = {};
    this._loader = customLoader || vegaLoader.loader();
    this._tooltip = customTooltip || defaultTooltip;
  }
  // The default tooltip display handler.
  // Sets the HTML title attribute on the visualization container.
  function defaultTooltip(handler, event, item, value) {
    handler.element().setAttribute('title', value || '');
  }
  Handler.prototype = {
    /**
    * Initialize a new Handler instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {object} [obj] - Optional context object that should serve as
    *   the "this" context for event callbacks.
    * @return {Handler} - This handler instance.
    */
    /**
    * Initialize a new Handler instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {object} [obj] - Optional context object that should serve as
    *   the "this" context for event callbacks.
    * @return {Handler} - This handler instance.
    */
    initialize(el, origin, obj) {
      this._el = el;
      this._obj = obj || null;
      return this.origin(origin);
    },
    /**
    * Returns the parent container element for a visualization.
    * @return {DOMElement} - The containing DOM element.
    */
    /**
    * Returns the parent container element for a visualization.
    * @return {DOMElement} - The containing DOM element.
    */
    element() {
      return this._el;
    },
    /**
    * Returns the scene element (e.g., canvas or SVG) of the visualization
    * Subclasses must override if the first child is not the scene element.
    * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
    */
    /**
    * Returns the scene element (e.g., canvas or SVG) of the visualization
    * Subclasses must override if the first child is not the scene element.
    * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
    */
    canvas() {
      return this._el && this._el.firstChild;
    },
    /**
    * Get / set the origin coordinates of the visualization.
    */
    /**
    * Get / set the origin coordinates of the visualization.
    */
    origin(origin) {
      if (arguments.length) {
        this._origin = origin || [0, 0];
        return this;
      } else {
        return this._origin.slice();
      }
    },
    /**
    * Get / set the scenegraph root.
    */
    /**
    * Get / set the scenegraph root.
    */
    scene(scene) {
      if (!arguments.length) return this._scene;
      this._scene = scene;
      return this;
    },
    /**
    * Add an event handler. Subclasses should override this method.
    */
    /**
    * Add an event handler. Subclasses should override this method.
    */
    on() /*type, handler*/
    {},
    /**
    * Remove an event handler. Subclasses should override this method.
    */
    /**
    * Remove an event handler. Subclasses should override this method.
    */
    off() /*type, handler*/
    {},
    /**
    * Utility method for finding the array index of an event handler.
    * @param {Array} h - An array of registered event handlers.
    * @param {string} type - The event type.
    * @param {function} handler - The event handler instance to find.
    * @return {number} - The handler's array index or -1 if not registered.
    */
    /**
    * Utility method for finding the array index of an event handler.
    * @param {Array} h - An array of registered event handlers.
    * @param {string} type - The event type.
    * @param {function} handler - The event handler instance to find.
    * @return {number} - The handler's array index or -1 if not registered.
    */
    _handlerIndex(h, type, handler) {
      for (let i = h ? h.length : 0; --i >= 0; ) {
        if (h[i].type === type && (!handler || h[i].handler === handler)) {
          return i;
        }
      }
      return -1;
    },
    /**
    * Returns an array with registered event handlers.
    * @param {string} [type] - The event type to query. Any annotations
    *   are ignored; for example, for the argument "click.foo", ".foo" will
    *   be ignored and the method returns all "click" handlers. If type is
    *   null or unspecified, this method returns handlers for all types.
    * @return {Array} - A new array containing all registered event handlers.
    */
    /**
    * Returns an array with registered event handlers.
    * @param {string} [type] - The event type to query. Any annotations
    *   are ignored; for example, for the argument "click.foo", ".foo" will
    *   be ignored and the method returns all "click" handlers. If type is
    *   null or unspecified, this method returns handlers for all types.
    * @return {Array} - A new array containing all registered event handlers.
    */
    handlers(type) {
      const h = this._handlers, a = [];
      if (type) {
        a.push(...h[this.eventName(type)]);
      } else {
        for (const k in h) {
          a.push(...h[k]);
        }
      }
      return a;
    },
    /**
    * Parses an event name string to return the specific event type.
    * For example, given "click.foo" returns "click"
    * @param {string} name - The input event type string.
    * @return {string} - A string with the event type only.
    */
    /**
    * Parses an event name string to return the specific event type.
    * For example, given "click.foo" returns "click"
    * @param {string} name - The input event type string.
    * @return {string} - A string with the event type only.
    */
    eventName(name) {
      const i = name.indexOf('.');
      return i < 0 ? name : name.slice(0, i);
    },
    /**
    * Handle hyperlink navigation in response to an item.href value.
    * @param {Event} event - The event triggering hyperlink navigation.
    * @param {Item} item - The scenegraph item.
    * @param {string} href - The URL to navigate to.
    */
    /**
    * Handle hyperlink navigation in response to an item.href value.
    * @param {Event} event - The event triggering hyperlink navigation.
    * @param {Item} item - The scenegraph item.
    * @param {string} href - The URL to navigate to.
    */
    handleHref(event, item, href) {
      this._loader.sanitize(href, {
        context: 'href'
      }).then(opt => {
        const e = new MouseEvent(event.type, event), a = domCreate(null, 'a');
        for (const name in opt) a.setAttribute(name, opt[name]);
        a.dispatchEvent(e);
      }).catch(() => {});
    },
    /**
    * Handle tooltip display in response to an item.tooltip value.
    * @param {Event} event - The event triggering tooltip display.
    * @param {Item} item - The scenegraph item.
    * @param {boolean} show - A boolean flag indicating whether
    *   to show or hide a tooltip for the given item.
    */
    /**
    * Handle tooltip display in response to an item.tooltip value.
    * @param {Event} event - The event triggering tooltip display.
    * @param {Item} item - The scenegraph item.
    * @param {boolean} show - A boolean flag indicating whether
    *   to show or hide a tooltip for the given item.
    */
    handleTooltip(event, item, show) {
      if (item && item.tooltip != null) {
        item = resolveItem(item, event, this.canvas(), this._origin);
        const value = show && item && item.tooltip || null;
        this._tooltip.call(this._obj, this, event, item, value);
      }
    },
    /**
    * Returns the size of a scenegraph item and its position relative
    * to the viewport.
    * @param {Item} item - The scenegraph item.
    * @return {object} - A bounding box object (compatible with the
    *   DOMRect type) consisting of x, y, width, heigh, top, left,
    *   right, and bottom properties.
    */
    /**
    * Returns the size of a scenegraph item and its position relative
    * to the viewport.
    * @param {Item} item - The scenegraph item.
    * @return {object} - A bounding box object (compatible with the
    *   DOMRect type) consisting of x, y, width, heigh, top, left,
    *   right, and bottom properties.
    */
    getItemBoundingClientRect(item) {
      const el = this.canvas();
      if (!el) return;
      const rect = el.getBoundingClientRect(), origin = this._origin, bounds = item.bounds, width = bounds.width(), height = bounds.height();
      let x = bounds.x1 + origin[0] + rect.left, y = bounds.y1 + origin[1] + rect.top;
      // translate coordinate for each parent group
      while (item.mark && (item = item.mark.group)) {
        x += item.x || 0;
        y += item.y || 0;
      }
      // return DOMRect-compatible bounding box
      return {
        x,
        y,
        width,
        height,
        left: x,
        top: y,
        right: x + width,
        bottom: y + height
      };
    }
  };
  /**
  * Create a new Renderer instance.
  * @param {object} [loader] - Optional loader instance for
  *   image and href URL sanitization. If not specified, a
  *   standard loader instance will be generated.
  * @constructor
  */
  function Renderer(loader) {
    this._el = null;
    this._bgcolor = null;
    this._loader = new ResourceLoader(loader);
  }
  Renderer.prototype = {
    /**
    * Initialize a new Renderer instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {number} width - The coordinate width of the display, in pixels.
    * @param {number} height - The coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {Renderer} - This renderer instance.
    */
    /**
    * Initialize a new Renderer instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {number} width - The coordinate width of the display, in pixels.
    * @param {number} height - The coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {Renderer} - This renderer instance.
    */
    initialize(el, width, height, origin, scaleFactor) {
      this._el = el;
      return this.resize(width, height, origin, scaleFactor);
    },
    /**
    * Returns the parent container element for a visualization.
    * @return {DOMElement} - The containing DOM element.
    */
    /**
    * Returns the parent container element for a visualization.
    * @return {DOMElement} - The containing DOM element.
    */
    element() {
      return this._el;
    },
    /**
    * Returns the scene element (e.g., canvas or SVG) of the visualization
    * Subclasses must override if the first child is not the scene element.
    * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
    */
    /**
    * Returns the scene element (e.g., canvas or SVG) of the visualization
    * Subclasses must override if the first child is not the scene element.
    * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
    */
    canvas() {
      return this._el && this._el.firstChild;
    },
    /**
    * Get / set the background color.
    */
    /**
    * Get / set the background color.
    */
    background(bgcolor) {
      if (arguments.length === 0) return this._bgcolor;
      this._bgcolor = bgcolor;
      return this;
    },
    /**
    * Resize the display.
    * @param {number} width - The new coordinate width of the display, in pixels.
    * @param {number} height - The new coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The new origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {Renderer} - This renderer instance;
    */
    /**
    * Resize the display.
    * @param {number} width - The new coordinate width of the display, in pixels.
    * @param {number} height - The new coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The new origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {Renderer} - This renderer instance;
    */
    resize(width, height, origin, scaleFactor) {
      this._width = width;
      this._height = height;
      this._origin = origin || [0, 0];
      this._scale = scaleFactor || 1;
      return this;
    },
    /**
    * Report a dirty item whose bounds should be redrawn.
    * This base class method does nothing. Subclasses that perform
    * incremental should implement this method.
    * @param {Item} item - The dirty item whose bounds should be redrawn.
    */
    /**
    * Report a dirty item whose bounds should be redrawn.
    * This base class method does nothing. Subclasses that perform
    * incremental should implement this method.
    * @param {Item} item - The dirty item whose bounds should be redrawn.
    */
    dirty() /*item*/
    {},
    /**
    * Render an input scenegraph, potentially with a set of dirty items.
    * This method will perform an immediate rendering with available resources.
    * The renderer may also need to perform image loading to perform a complete
    * render. This process can lead to asynchronous re-rendering of the scene
    * after this method returns. To receive notification when rendering is
    * complete, use the renderAsync method instead.
    * @param {object} scene - The root mark of a scenegraph to render.
    * @return {Renderer} - This renderer instance.
    */
    /**
    * Render an input scenegraph, potentially with a set of dirty items.
    * This method will perform an immediate rendering with available resources.
    * The renderer may also need to perform image loading to perform a complete
    * render. This process can lead to asynchronous re-rendering of the scene
    * after this method returns. To receive notification when rendering is
    * complete, use the renderAsync method instead.
    * @param {object} scene - The root mark of a scenegraph to render.
    * @return {Renderer} - This renderer instance.
    */
    render(scene) {
      const r = this;
      // bind arguments into a render call, and cache it
      // this function may be subsequently called for async redraw
      r._call = function () {
        r._render(scene);
      };
      // invoke the renderer
      r._call();
      // clear the cached call for garbage collection
      // async redraws will stash their own copy
      r._call = null;
      return r;
    },
    /**
    * Internal rendering method. Renderer subclasses should override this
    * method to actually perform rendering.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    /**
    * Internal rendering method. Renderer subclasses should override this
    * method to actually perform rendering.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    _render() /*scene*/
    {},
    /**
    * Asynchronous rendering method. Similar to render, but returns a Promise
    * that resolves when all rendering is completed. Sometimes a renderer must
    * perform image loading to get a complete rendering. The returned
    * Promise will not resolve until this process completes.
    * @param {object} scene - The root mark of a scenegraph to render.
    * @return {Promise} - A Promise that resolves when rendering is complete.
    */
    /**
    * Asynchronous rendering method. Similar to render, but returns a Promise
    * that resolves when all rendering is completed. Sometimes a renderer must
    * perform image loading to get a complete rendering. The returned
    * Promise will not resolve until this process completes.
    * @param {object} scene - The root mark of a scenegraph to render.
    * @return {Promise} - A Promise that resolves when rendering is complete.
    */
    renderAsync(scene) {
      const r = this.render(scene);
      return this._ready ? this._ready.then(() => r) : Promise.resolve(r);
    },
    /**
    * Internal method for asynchronous resource loading.
    * Proxies method calls to the ImageLoader, and tracks loading
    * progress to invoke a re-render once complete.
    * @param {string} method - The method name to invoke on the ImageLoader.
    * @param {string} uri - The URI for the requested resource.
    * @return {Promise} - A Promise that resolves to the requested resource.
    */
    /**
    * Internal method for asynchronous resource loading.
    * Proxies method calls to the ImageLoader, and tracks loading
    * progress to invoke a re-render once complete.
    * @param {string} method - The method name to invoke on the ImageLoader.
    * @param {string} uri - The URI for the requested resource.
    * @return {Promise} - A Promise that resolves to the requested resource.
    */
    _load(method, uri) {
      var r = this, p = r._loader[method](uri);
      if (!r._ready) {
        // re-render the scene when loading completes
        const call = r._call;
        r._ready = r._loader.ready().then(redraw => {
          if (redraw) call();
          r._ready = null;
        });
      }
      return p;
    },
    /**
    * Sanitize a URL to include as a hyperlink in the rendered scene.
    * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
    * image loading progress and invokes a re-render once complete.
    * @param {string} uri - The URI string to sanitize.
    * @return {Promise} - A Promise that resolves to the sanitized URL.
    */
    /**
    * Sanitize a URL to include as a hyperlink in the rendered scene.
    * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
    * image loading progress and invokes a re-render once complete.
    * @param {string} uri - The URI string to sanitize.
    * @return {Promise} - A Promise that resolves to the sanitized URL.
    */
    sanitizeURL(uri) {
      return this._load('sanitizeURL', uri);
    },
    /**
    * Requests an image to include in the rendered scene.
    * This method proxies a call to ImageLoader.loadImage, but also tracks
    * image loading progress and invokes a re-render once complete.
    * @param {string} uri - The URI string of the image.
    * @return {Promise} - A Promise that resolves to the loaded Image.
    */
    /**
    * Requests an image to include in the rendered scene.
    * This method proxies a call to ImageLoader.loadImage, but also tracks
    * image loading progress and invokes a re-render once complete.
    * @param {string} uri - The URI string of the image.
    * @return {Promise} - A Promise that resolves to the loaded Image.
    */
    loadImage(uri) {
      return this._load('loadImage', uri);
    }
  };
  const KeyDownEvent = 'keydown';
  const KeyPressEvent = 'keypress';
  const KeyUpEvent = 'keyup';
  const DragEnterEvent = 'dragenter';
  const DragLeaveEvent = 'dragleave';
  const DragOverEvent = 'dragover';
  const MouseDownEvent = 'mousedown';
  const MouseUpEvent = 'mouseup';
  const MouseMoveEvent = 'mousemove';
  const MouseOutEvent = 'mouseout';
  const MouseOverEvent = 'mouseover';
  const ClickEvent = 'click';
  const DoubleClickEvent = 'dblclick';
  const WheelEvent = 'wheel';
  const MouseWheelEvent = 'mousewheel';
  const TouchStartEvent = 'touchstart';
  const TouchMoveEvent = 'touchmove';
  const TouchEndEvent = 'touchend';
  const Events = [KeyDownEvent, KeyPressEvent, KeyUpEvent, DragEnterEvent, DragLeaveEvent, DragOverEvent, MouseDownEvent, MouseUpEvent, MouseMoveEvent, MouseOutEvent, MouseOverEvent, ClickEvent, DoubleClickEvent, WheelEvent, MouseWheelEvent, TouchStartEvent, TouchMoveEvent, TouchEndEvent];
  const TooltipShowEvent = MouseMoveEvent;
  const TooltipHideEvent = MouseOutEvent;
  const HrefEvent = ClickEvent;
  function CanvasHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    this._down = null;
    this._touch = null;
    this._first = true;
    this._events = {};
  }
  const eventBundle = type => type === TouchStartEvent || type === TouchMoveEvent || type === TouchEndEvent ? [TouchStartEvent, TouchMoveEvent, TouchEndEvent] : [type];
  // lazily add listeners to the canvas as needed
  function eventListenerCheck(handler, type) {
    eventBundle(type).forEach(_ => addEventListener(handler, _));
  }
  function addEventListener(handler, type) {
    const canvas = handler.canvas();
    if (canvas && !handler._events[type]) {
      handler._events[type] = 1;
      canvas.addEventListener(type, handler[type] ? evt => handler[type](evt) : evt => handler.fire(type, evt));
    }
  }
  function move(moveEvent, overEvent, outEvent) {
    return function (evt) {
      const a = this._active, p = this.pickEvent(evt);
      if (p === a) {
        // active item and picked item are the same
        this.fire(moveEvent, evt);
      } else {
        // active item and picked item are different
        if (!a || !a.exit) {
          // fire out for prior active item
          // suppress if active item was removed from scene
          this.fire(outEvent, evt);
        }
        this._active = p;
        // set new active item
        this.fire(overEvent, evt);
        // fire over for new active item
        this.fire(moveEvent, evt);
      }
    };
  }
  function inactive(type) {
    return function (evt) {
      this.fire(type, evt);
      this._active = null;
    };
  }
  vegaUtil.inherits(CanvasHandler, Handler, {
    initialize(el, origin, obj) {
      this._canvas = el && domFind(el, 'canvas');
      // add minimal events required for proper state management
      [ClickEvent, MouseDownEvent, MouseMoveEvent, MouseOutEvent, DragLeaveEvent].forEach(type => eventListenerCheck(this, type));
      return Handler.prototype.initialize.call(this, el, origin, obj);
    },
    // return the backing canvas instance
    // return the backing canvas instance
    canvas() {
      return this._canvas;
    },
    // retrieve the current canvas context
    // retrieve the current canvas context
    context() {
      return this._canvas.getContext('2d');
    },
    // supported events
    events: Events,
    // to keep old versions of firefox happy
    // to keep old versions of firefox happy
    DOMMouseScroll(evt) {
      this.fire(MouseWheelEvent, evt);
    },
    mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),
    dragover: move(DragOverEvent, DragEnterEvent, DragLeaveEvent),
    mouseout: inactive(MouseOutEvent),
    dragleave: inactive(DragLeaveEvent),
    mousedown(evt) {
      this._down = this._active;
      this.fire(MouseDownEvent, evt);
    },
    click(evt) {
      if (this._down === this._active) {
        this.fire(ClickEvent, evt);
        this._down = null;
      }
    },
    touchstart(evt) {
      this._touch = this.pickEvent(evt.changedTouches[0]);
      if (this._first) {
        this._active = this._touch;
        this._first = false;
      }
      this.fire(TouchStartEvent, evt, true);
    },
    touchmove(evt) {
      this.fire(TouchMoveEvent, evt, true);
    },
    touchend(evt) {
      this.fire(TouchEndEvent, evt, true);
      this._touch = null;
    },
    // fire an event
    // fire an event
    fire(type, evt, touch) {
      const a = touch ? this._touch : this._active, h = this._handlers[type];
      // set event type relative to scenegraph items
      evt.vegaType = type;
      // handle hyperlinks and tooltips first
      if (type === HrefEvent && a && a.href) {
        this.handleHref(evt, a, a.href);
      } else if (type === TooltipShowEvent || type === TooltipHideEvent) {
        this.handleTooltip(evt, a, type !== TooltipHideEvent);
      }
      // invoke all registered handlers
      if (h) {
        for (let i = 0, len = h.length; i < len; ++i) {
          h[i].handler.call(this._obj, evt, a);
        }
      }
    },
    // add an event handler
    // add an event handler
    on(type, handler) {
      const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
      if (i < 0) {
        eventListenerCheck(this, type);
        (h[name] || (h[name] = [])).push({
          type: type,
          handler: handler
        });
      }
      return this;
    },
    // remove an event handler
    // remove an event handler
    off(type, handler) {
      const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
      if (i >= 0) {
        h.splice(i, 1);
      }
      return this;
    },
    pickEvent(evt) {
      const p = point(evt, this._canvas), o = this._origin;
      return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    },
    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    pick(scene, x, y, gx, gy) {
      const g = this.context(), mark = Marks[scene.marktype];
      return mark.pick.call(this, g, scene, x, y, gx, gy);
    }
  });
  function devicePixelRatio() {
    return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
  }
  var pixelRatio = devicePixelRatio();
  function resize(canvas, width, height, origin, scaleFactor, opt) {
    const inDOM = typeof HTMLElement !== 'undefined' && canvas instanceof HTMLElement && canvas.parentNode != null, context = canvas.getContext('2d'), ratio = inDOM ? pixelRatio : scaleFactor;
    canvas.width = width * ratio;
    canvas.height = height * ratio;
    for (const key in opt) {
      context[key] = opt[key];
    }
    if (inDOM && ratio !== 1) {
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }
    context.pixelRatio = ratio;
    context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
    return canvas;
  }
  function CanvasRenderer(loader) {
    Renderer.call(this, loader);
    this._options = {};
    this._redraw = false;
    this._dirty = new Bounds();
    this._tempb = new Bounds();
  }
  const base$1 = Renderer.prototype;
  const viewBounds = (origin, width, height) => new Bounds().set(0, 0, width, height).translate(-origin[0], -origin[1]);
  function clipToBounds(g, b, origin) {
    // expand bounds by 1 pixel, then round to pixel boundaries
    b.expand(1).round();
    // align to base pixel grid in case of non-integer scaling (#2425)
    if (g.pixelRatio % 1) {
      b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
    }
    // to avoid artifacts translate if origin has fractional pixels
    b.translate(-(origin[0] % 1), -(origin[1] % 1));
    // set clip path
    g.beginPath();
    g.rect(b.x1, b.y1, b.width(), b.height());
    g.clip();
    return b;
  }
  vegaUtil.inherits(CanvasRenderer, Renderer, {
    initialize(el, width, height, origin, scaleFactor, options) {
      this._options = options || ({});
      this._canvas = this._options.externalContext ? null : vegaCanvas.canvas(1, 1, this._options.type);
      // instantiate a small canvas
      if (el && this._canvas) {
        domClear(el, 0).appendChild(this._canvas);
        this._canvas.setAttribute('class', 'marks');
      }
      // this method will invoke resize to size the canvas appropriately
      return base$1.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    resize(width, height, origin, scaleFactor) {
      base$1.resize.call(this, width, height, origin, scaleFactor);
      if (this._canvas) {
        // configure canvas size and transform
        resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
      } else {
        // external context needs to be scaled and positioned to origin
        const ctx = this._options.externalContext;
        if (!ctx) vegaUtil.error('CanvasRenderer is missing a valid canvas or context');
        ctx.scale(this._scale, this._scale);
        ctx.translate(this._origin[0], this._origin[1]);
      }
      this._redraw = true;
      return this;
    },
    canvas() {
      return this._canvas;
    },
    context() {
      return this._options.externalContext || (this._canvas ? this._canvas.getContext('2d') : null);
    },
    dirty(item) {
      const b = this._tempb.clear().union(item.bounds);
      let g = item.mark.group;
      while (g) {
        b.translate(g.x || 0, g.y || 0);
        g = g.mark.group;
      }
      this._dirty.union(b);
    },
    _render(scene) {
      const g = this.context(), o = this._origin, w = this._width, h = this._height, db = this._dirty, vb = viewBounds(o, w, h);
      // setup
      g.save();
      const b = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);
      this.clear(-o[0], -o[1], w, h);
      // render
      this.draw(g, scene, b);
      // takedown
      g.restore();
      db.clear();
      return this;
    },
    draw(ctx, scene, bounds) {
      const mark = Marks[scene.marktype];
      if (scene.clip) clip(ctx, scene);
      mark.draw.call(this, ctx, scene, bounds);
      if (scene.clip) ctx.restore();
    },
    clear(x, y, w, h) {
      const opt = this._options, g = this.context();
      if (opt.type !== 'pdf' && !opt.externalContext) {
        // calling clear rect voids vector output in pdf mode
        // and could remove external context content (#2615)
        g.clearRect(x, y, w, h);
      }
      if (this._bgcolor != null) {
        g.fillStyle = this._bgcolor;
        g.fillRect(x, y, w, h);
      }
    }
  });
  function SVGHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    const h = this;
    h._hrefHandler = listener(h, (evt, item) => {
      if (item && item.href) h.handleHref(evt, item, item.href);
    });
    h._tooltipHandler = listener(h, (evt, item) => {
      h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
    });
  }
  // wrap an event listener for the SVG DOM
  const listener = (context, handler) => evt => {
    let item = evt.target.__data__;
    item = Array.isArray(item) ? item[0] : item;
    evt.vegaType = evt.type;
    handler.call(context._obj, evt, item);
  };
  vegaUtil.inherits(SVGHandler, Handler, {
    initialize(el, origin, obj) {
      let svg = this._svg;
      if (svg) {
        svg.removeEventListener(HrefEvent, this._hrefHandler);
        svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      this._svg = svg = el && domFind(el, 'svg');
      if (svg) {
        svg.addEventListener(HrefEvent, this._hrefHandler);
        svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      return Handler.prototype.initialize.call(this, el, origin, obj);
    },
    canvas() {
      return this._svg;
    },
    // add an event handler
    // add an event handler
    on(type, handler) {
      const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
      if (i < 0) {
        const x = {
          type,
          handler,
          listener: listener(this, handler)
        };
        (h[name] || (h[name] = [])).push(x);
        if (this._svg) {
          this._svg.addEventListener(name, x.listener);
        }
      }
      return this;
    },
    // remove an event handler
    // remove an event handler
    off(type, handler) {
      const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
      if (i >= 0) {
        if (this._svg) {
          this._svg.removeEventListener(name, h[i].listener);
        }
        h.splice(i, 1);
      }
      return this;
    }
  });
  const ARIA_HIDDEN = 'aria-hidden';
  const ARIA_LABEL = 'aria-label';
  const ARIA_ROLE = 'role';
  const ARIA_ROLEDESCRIPTION = 'aria-roledescription';
  const GRAPHICS_OBJECT = 'graphics-object';
  const GRAPHICS_SYMBOL = 'graphics-symbol';
  const bundle = (role, roledesc, label) => ({
    [ARIA_ROLE]: role,
    [ARIA_ROLEDESCRIPTION]: roledesc,
    [ARIA_LABEL]: label || undefined
  });
  // these roles are covered by related roles
  // we can ignore them, no need to generate attributes
  const AriaIgnore = vegaUtil.toSet(['axis-domain', 'axis-grid', 'axis-label', 'axis-tick', 'axis-title', 'legend-band', 'legend-entry', 'legend-gradient', 'legend-label', 'legend-title', 'legend-symbol', 'title']);
  // aria attribute generators for guide roles
  const AriaGuides = {
    'axis': {
      desc: 'axis',
      caption: axisCaption
    },
    'legend': {
      desc: 'legend',
      caption: legendCaption
    },
    'title-text': {
      desc: 'title',
      caption: item => `Title text '${titleCaption(item)}'`
    },
    'title-subtitle': {
      desc: 'subtitle',
      caption: item => `Subtitle text '${titleCaption(item)}'`
    }
  };
  // aria properties generated for mark item encoding channels
  const AriaEncode = {
    ariaRole: ARIA_ROLE,
    ariaRoleDescription: ARIA_ROLEDESCRIPTION,
    description: ARIA_LABEL
  };
  function ariaItemAttributes(emit, item) {
    const hide = item.aria === false;
    emit(ARIA_HIDDEN, hide || undefined);
    if (hide || item.description == null) {
      for (const prop in AriaEncode) {
        emit(AriaEncode[prop], undefined);
      }
    } else {
      const type = item.mark.marktype;
      emit(ARIA_LABEL, item.description);
      emit(ARIA_ROLE, item.ariaRole || (type === 'group' ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));
      emit(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || `${type} mark`);
    }
  }
  function ariaMarkAttributes(mark) {
    return mark.aria === false ? {
      [ARIA_HIDDEN]: true
    } : AriaIgnore[mark.role] ? null : AriaGuides[mark.role] ? ariaGuide(mark, AriaGuides[mark.role]) : ariaMark(mark);
  }
  function ariaMark(mark) {
    const type = mark.marktype;
    const recurse = type === 'group' || type === 'text' || mark.items.some(_ => _.description != null && _.aria !== false);
    return bundle(recurse ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, `${type} mark container`, mark.description);
  }
  function ariaGuide(mark, opt) {
    try {
      const item = mark.items[0], caption = opt.caption || (() => '');
      return bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
    } catch (err) {
      return null;
    }
  }
  function titleCaption(item) {
    return vegaUtil.array(item.text).join(' ');
  }
  function axisCaption(item) {
    const datum = item.datum, orient = item.orient, title = datum.title ? extractTitle(item) : null, ctx = item.context, scale = ctx.scales[datum.scale].value, locale = ctx.dataflow.locale(), type = scale.type, xy = orient === 'left' || orient === 'right' ? 'Y' : 'X';
    return `${xy}-axis` + (title ? ` titled '${title}'` : '') + ` for a ${vegaScale.isDiscrete(type) ? 'discrete' : type} scale` + ` with ${vegaScale.domainCaption(locale, scale, item)}`;
  }
  function legendCaption(item) {
    const datum = item.datum, title = datum.title ? extractTitle(item) : null, type = `${datum.type || ''} legend`.trim(), scales = datum.scales, props = Object.keys(scales), ctx = item.context, scale = ctx.scales[scales[props[0]]].value, locale = ctx.dataflow.locale();
    return capitalize(type) + (title ? ` titled '${title}'` : '') + ` for ${channelCaption(props)}` + ` with ${vegaScale.domainCaption(locale, scale, item)}`;
  }
  function extractTitle(item) {
    try {
      return vegaUtil.array(vegaUtil.peek(item.items).items[0].text).join(' ');
    } catch (err) {
      return null;
    }
  }
  function channelCaption(props) {
    props = props.map(p => p + (p === 'fill' || p === 'stroke' ? ' color' : ''));
    return props.length < 2 ? props[0] : props.slice(0, -1).join(', ') + ' and ' + vegaUtil.peek(props);
  }
  function capitalize(s) {
    return s.length ? s[0].toUpperCase() + s.slice(1) : s;
  }
  const innerText = val => (val + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  const attrText = val => innerText(val).replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
  function markup() {
    let buf = '', outer = '', inner = '';
    const stack = [], clear = () => outer = inner = '', push = tag => {
      if (outer) {
        buf += `${outer}>${inner}`;
        clear();
      }
      stack.push(tag);
    }, attr = (name, value) => {
      if (value != null) outer += ` ${name}="${attrText(value)}"`;
      return m;
    }, m = {
      open(tag, ...attrs) {
        push(tag);
        outer = '<' + tag;
        for (const set of attrs) {
          for (const key in set) attr(key, set[key]);
        }
        return m;
      },
      close() {
        const tag = stack.pop();
        if (outer) {
          buf += outer + (inner ? `>${inner}</${tag}>` : '/>');
        } else {
          buf += `</${tag}>`;
        }
        clear();
        return m;
      },
      attr,
      text: t => (inner += innerText(t), m),
      toString: () => buf
    };
    return m;
  }
  const serializeXML = node => _serialize(markup(), node) + '';
  function _serialize(m, node) {
    m.open(node.tagName);
    if (node.hasAttributes()) {
      const attrs = node.attributes, n = attrs.length;
      for (let i = 0; i < n; ++i) {
        m.attr(attrs[i].name, attrs[i].value);
      }
    }
    if (node.hasChildNodes()) {
      const children = node.childNodes, n = children.length;
      for (let i = 0; i < n; i++) {
        const child = children[i];
        child.nodeType === 3 ? // text node
        m.text(child.nodeValue) : _serialize(m, child);
      }
    }
    return m.close();
  }
  const styles = {
    fill: 'fill',
    fillOpacity: 'fill-opacity',
    stroke: 'stroke',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    strokeCap: 'stroke-linecap',
    strokeJoin: 'stroke-linejoin',
    strokeDash: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeMiterLimit: 'stroke-miterlimit',
    opacity: 'opacity',
    blend: 'mix-blend-mode'
  };
  // ensure miter limit default is consistent with canvas (#2498)
  const rootAttributes = {
    'fill': 'none',
    'stroke-miterlimit': 10
  };
  const RootIndex = 0, xmlns = 'http://www.w3.org/2000/xmlns/', svgns = metadata.xmlns;
  function SVGRenderer(loader) {
    Renderer.call(this, loader);
    this._dirtyID = 0;
    this._dirty = [];
    this._svg = null;
    this._root = null;
    this._defs = null;
  }
  const base = Renderer.prototype;
  vegaUtil.inherits(SVGRenderer, Renderer, {
    /**
    * Initialize a new SVGRenderer instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {number} width - The coordinate width of the display, in pixels.
    * @param {number} height - The coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {SVGRenderer} - This renderer instance.
    */
    /**
    * Initialize a new SVGRenderer instance.
    * @param {DOMElement} el - The containing DOM element for the display.
    * @param {number} width - The coordinate width of the display, in pixels.
    * @param {number} height - The coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {SVGRenderer} - This renderer instance.
    */
    initialize(el, width, height, origin, scaleFactor) {
      // create the svg definitions cache
      this._defs = {};
      this._clearDefs();
      if (el) {
        this._svg = domChild(el, 0, 'svg', svgns);
        this._svg.setAttributeNS(xmlns, 'xmlns', svgns);
        this._svg.setAttributeNS(xmlns, 'xmlns:xlink', metadata['xmlns:xlink']);
        this._svg.setAttribute('version', metadata['version']);
        this._svg.setAttribute('class', 'marks');
        domClear(el, 1);
        // set the svg root group
        this._root = domChild(this._svg, RootIndex, 'g', svgns);
        setAttributes(this._root, rootAttributes);
        // ensure no additional child elements
        domClear(this._svg, RootIndex + 1);
      }
      // set background color if defined
      this.background(this._bgcolor);
      return base.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    /**
    * Get / set the background color.
    */
    /**
    * Get / set the background color.
    */
    background(bgcolor) {
      if (arguments.length && this._svg) {
        this._svg.style.setProperty('background-color', bgcolor);
      }
      return base.background.apply(this, arguments);
    },
    /**
    * Resize the display.
    * @param {number} width - The new coordinate width of the display, in pixels.
    * @param {number} height - The new coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The new origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {SVGRenderer} - This renderer instance;
    */
    /**
    * Resize the display.
    * @param {number} width - The new coordinate width of the display, in pixels.
    * @param {number} height - The new coordinate height of the display, in pixels.
    * @param {Array<number>} origin - The new origin of the display, in pixels.
    *   The coordinate system will be translated to this point.
    * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
    *   the width and height to determine the final pixel size.
    * @return {SVGRenderer} - This renderer instance;
    */
    resize(width, height, origin, scaleFactor) {
      base.resize.call(this, width, height, origin, scaleFactor);
      if (this._svg) {
        setAttributes(this._svg, {
          width: this._width * this._scale,
          height: this._height * this._scale,
          viewBox: `0 0 ${this._width} ${this._height}`
        });
        this._root.setAttribute('transform', `translate(${this._origin})`);
      }
      this._dirty = [];
      return this;
    },
    /**
    * Returns the SVG element of the visualization.
    * @return {DOMElement} - The SVG element.
    */
    /**
    * Returns the SVG element of the visualization.
    * @return {DOMElement} - The SVG element.
    */
    canvas() {
      return this._svg;
    },
    /**
    * Returns an SVG text string for the rendered content,
    * or null if this renderer is currently headless.
    */
    /**
    * Returns an SVG text string for the rendered content,
    * or null if this renderer is currently headless.
    */
    svg() {
      const svg = this._svg, bg = this._bgcolor;
      if (!svg) return null;
      let node;
      if (bg) {
        svg.removeAttribute('style');
        node = domChild(svg, RootIndex, 'rect', svgns);
        setAttributes(node, {
          width: this._width,
          height: this._height,
          fill: bg
        });
      }
      const text = serializeXML(svg);
      if (bg) {
        svg.removeChild(node);
        this._svg.style.setProperty('background-color', bg);
      }
      return text;
    },
    /**
    * Internal rendering method.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    /**
    * Internal rendering method.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    _render(scene) {
      // perform spot updates and re-render markup
      if (this._dirtyCheck()) {
        if (this._dirtyAll) this._clearDefs();
        this.mark(this._root, scene);
        domClear(this._root, 1);
      }
      this.defs();
      this._dirty = [];
      ++this._dirtyID;
      return this;
    },
    // -- Manage rendering of items marked as dirty --
    /**
    * Flag a mark item as dirty.
    * @param {Item} item - The mark item.
    */
    // -- Manage rendering of items marked as dirty --
    /**
    * Flag a mark item as dirty.
    * @param {Item} item - The mark item.
    */
    dirty(item) {
      if (item.dirty !== this._dirtyID) {
        item.dirty = this._dirtyID;
        this._dirty.push(item);
      }
    },
    /**
    * Check if a mark item is considered dirty.
    * @param {Item} item - The mark item.
    */
    /**
    * Check if a mark item is considered dirty.
    * @param {Item} item - The mark item.
    */
    isDirty(item) {
      return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;
    },
    /**
    * Internal method to check dirty status and, if possible,
    * make targetted updates without a full rendering pass.
    */
    /**
    * Internal method to check dirty status and, if possible,
    * make targetted updates without a full rendering pass.
    */
    _dirtyCheck() {
      this._dirtyAll = true;
      const items = this._dirty;
      if (!items.length || !this._dirtyID) return true;
      const id = ++this._dirtyID;
      let item, mark, type, mdef, i, n, o;
      for ((i = 0, n = items.length); i < n; ++i) {
        item = items[i];
        mark = item.mark;
        if (mark.marktype !== type) {
          // memoize mark instance lookup
          type = mark.marktype;
          mdef = Marks[type];
        }
        if (mark.zdirty && mark.dirty !== id) {
          this._dirtyAll = false;
          dirtyParents(item, id);
          mark.items.forEach(i => {
            i.dirty = id;
          });
        }
        if (mark.zdirty) continue;
        // handle in standard drawing pass
        if (item.exit) {
          // EXIT
          if (mdef.nested && mark.items.length) {
            // if nested mark with remaining points, update instead
            o = mark.items[0];
            if (o._svg) this._update(mdef, o._svg, o);
          } else if (item._svg) {
            // otherwise remove from DOM
            o = item._svg.parentNode;
            if (o) o.removeChild(item._svg);
          }
          item._svg = null;
          continue;
        }
        item = mdef.nested ? mark.items[0] : item;
        if (item._update === id) continue;
        // already visited
        if (!item._svg || !item._svg.ownerSVGElement) {
          // ENTER
          this._dirtyAll = false;
          dirtyParents(item, id);
        } else {
          // IN-PLACE UPDATE
          this._update(mdef, item._svg, item);
        }
        item._update = id;
      }
      return !this._dirtyAll;
    },
    // -- Construct & maintain scenegraph to SVG mapping ---
    /**
    * Render a set of mark items.
    * @param {SVGElement} el - The parent element in the SVG tree.
    * @param {object} scene - The mark parent to render.
    * @param {SVGElement} prev - The previous sibling in the SVG tree.
    */
    // -- Construct & maintain scenegraph to SVG mapping ---
    /**
    * Render a set of mark items.
    * @param {SVGElement} el - The parent element in the SVG tree.
    * @param {object} scene - The mark parent to render.
    * @param {SVGElement} prev - The previous sibling in the SVG tree.
    */
    mark(el, scene, prev) {
      if (!this.isDirty(scene)) return scene._svg;
      const svg = this._svg, mdef = Marks[scene.marktype], events = scene.interactive === false ? 'none' : null, isGroup = mdef.tag === 'g';
      let sibling = null, i = 0;
      const parent = bind(scene, el, prev, 'g', svg);
      parent.setAttribute('class', cssClass(scene));
      // apply aria attributes to parent container element
      const aria = ariaMarkAttributes(scene);
      for (const key in aria) setAttribute(parent, key, aria[key]);
      if (!isGroup) {
        setAttribute(parent, 'pointer-events', events);
      }
      setAttribute(parent, 'clip-path', scene.clip ? clip$1(this, scene, scene.group) : null);
      const process = item => {
        const dirty = this.isDirty(item), node = bind(item, parent, sibling, mdef.tag, svg);
        if (dirty) {
          this._update(mdef, node, item);
          if (isGroup) recurse(this, node, item);
        }
        sibling = node;
        ++i;
      };
      if (mdef.nested) {
        if (scene.items.length) process(scene.items[0]);
      } else {
        visit(scene, process);
      }
      domClear(parent, i);
      return parent;
    },
    /**
    * Update the attributes of an SVG element for a mark item.
    * @param {object} mdef - The mark definition object
    * @param {SVGElement} el - The SVG element.
    * @param {Item} item - The mark item.
    */
    /**
    * Update the attributes of an SVG element for a mark item.
    * @param {object} mdef - The mark definition object
    * @param {SVGElement} el - The SVG element.
    * @param {Item} item - The mark item.
    */
    _update(mdef, el, item) {
      // set dom element and values cache
      // provides access to emit method
      element = el;
      values = el.__values__;
      // apply aria-specific properties
      ariaItemAttributes(emit, item);
      // apply svg attributes
      mdef.attr(emit, item, this);
      // some marks need special treatment
      const extra = mark_extras[mdef.type];
      if (extra) extra.call(this, mdef, el, item);
      // apply svg style attributes
      // note: element state may have been modified by 'extra' method
      if (element) this.style(element, item);
    },
    /**
    * Update the presentation attributes of an SVG element for a mark item.
    * @param {SVGElement} el - The SVG element.
    * @param {Item} item - The mark item.
    */
    /**
    * Update the presentation attributes of an SVG element for a mark item.
    * @param {SVGElement} el - The SVG element.
    * @param {Item} item - The mark item.
    */
    style(el, item) {
      if (item == null) return;
      for (const prop in styles) {
        let value = prop === 'font' ? fontFamily(item) : item[prop];
        if (value === values[prop]) continue;
        const name = styles[prop];
        if (value == null) {
          el.removeAttribute(name);
        } else {
          if (isGradient(value)) {
            value = gradientRef(value, this._defs.gradient, href());
          }
          el.setAttribute(name, value + '');
        }
        values[prop] = value;
      }
    },
    /**
    * Render SVG defs, as needed.
    * Must be called *after* marks have been processed to ensure the
    * collected state is current and accurate.
    */
    /**
    * Render SVG defs, as needed.
    * Must be called *after* marks have been processed to ensure the
    * collected state is current and accurate.
    */
    defs() {
      const svg = this._svg, defs = this._defs;
      let el = defs.el, index = 0;
      for (const id in defs.gradient) {
        if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);
        index = updateGradient(el, defs.gradient[id], index);
      }
      for (const id in defs.clipping) {
        if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);
        index = updateClipping(el, defs.clipping[id], index);
      }
      // clean-up
      if (el) {
        index === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index);
      }
    },
    /**
    * Clear defs caches.
    */
    /**
    * Clear defs caches.
    */
    _clearDefs() {
      const def = this._defs;
      def.gradient = {};
      def.clipping = {};
    }
  });
  // mark ancestor chain with a dirty id
  function dirtyParents(item, id) {
    for (; item && item.dirty !== id; item = item.mark.group) {
      item.dirty = id;
      if (item.mark && item.mark.dirty !== id) {
        item.mark.dirty = id;
      } else return;
    }
  }
  // update gradient definitions
  function updateGradient(el, grad, index) {
    let i, n, stop;
    if (grad.gradient === 'radial') {
      // SVG radial gradients automatically transform to normalized bbox
      // coordinates, in a way that is cumbersome to replicate in canvas.
      // We wrap the radial gradient in a pattern element, allowing us to
      // maintain a circular gradient that matches what canvas provides.
      let pt = domChild(el, index++, 'pattern', svgns);
      setAttributes(pt, {
        id: patternPrefix + grad.id,
        viewBox: '0,0,1,1',
        width: '100%',
        height: '100%',
        preserveAspectRatio: 'xMidYMid slice'
      });
      pt = domChild(pt, 0, 'rect', svgns);
      setAttributes(pt, {
        width: 1,
        height: 1,
        fill: `url(${href()}#${grad.id})`
      });
      el = domChild(el, index++, 'radialGradient', svgns);
      setAttributes(el, {
        id: grad.id,
        fx: grad.x1,
        fy: grad.y1,
        fr: grad.r1,
        cx: grad.x2,
        cy: grad.y2,
        r: grad.r2
      });
    } else {
      el = domChild(el, index++, 'linearGradient', svgns);
      setAttributes(el, {
        id: grad.id,
        x1: grad.x1,
        x2: grad.x2,
        y1: grad.y1,
        y2: grad.y2
      });
    }
    for ((i = 0, n = grad.stops.length); i < n; ++i) {
      stop = domChild(el, i, 'stop', svgns);
      stop.setAttribute('offset', grad.stops[i].offset);
      stop.setAttribute('stop-color', grad.stops[i].color);
    }
    domClear(el, i);
    return index;
  }
  // update clipping path definitions
  function updateClipping(el, clip, index) {
    let mask;
    el = domChild(el, index, 'clipPath', svgns);
    el.setAttribute('id', clip.id);
    if (clip.path) {
      mask = domChild(el, 0, 'path', svgns);
      mask.setAttribute('d', clip.path);
    } else {
      mask = domChild(el, 0, 'rect', svgns);
      setAttributes(mask, {
        x: 0,
        y: 0,
        width: clip.width,
        height: clip.height
      });
    }
    domClear(el, 1);
    return index + 1;
  }
  // Recursively process group contents.
  function recurse(renderer, el, group) {
    el = el.lastChild.previousSibling;
    let prev, idx = 0;
    visit(group, item => {
      prev = renderer.mark(el, item, prev);
      ++idx;
    });
    // remove any extraneous DOM elements
    domClear(el, 1 + idx);
  }
  // Bind a scenegraph item to an SVG DOM element.
  // Create new SVG elements as needed.
  function bind(item, el, sibling, tag, svg) {
    let node = item._svg, doc;
    // create a new dom node if needed
    if (!node) {
      doc = el.ownerDocument;
      node = domCreate(doc, tag, svgns);
      item._svg = node;
      if (item.mark) {
        node.__data__ = item;
        node.__values__ = {
          fill: 'default'
        };
        // if group, create background, content, and foreground elements
        if (tag === 'g') {
          const bg = domCreate(doc, 'path', svgns);
          node.appendChild(bg);
          bg.__data__ = item;
          const cg = domCreate(doc, 'g', svgns);
          node.appendChild(cg);
          cg.__data__ = item;
          const fg = domCreate(doc, 'path', svgns);
          node.appendChild(fg);
          fg.__data__ = item;
          fg.__values__ = {
            fill: 'default'
          };
        }
      }
    }
    // (re-)insert if (a) not contained in SVG or (b) sibling order has changed
    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {
      el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
    }
    return node;
  }
  // check if two nodes are ordered siblings
  function siblingCheck(node, sibling) {
    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling;
  }
  // -- Set attributes & styles on SVG elements ---
  let element = null, // temp var for current SVG element
  values = null;
  // temp var for current values hash
  // Extra configuration for certain mark types
  const mark_extras = {
    group(mdef, el, item) {
      const fg = element = el.childNodes[2];
      values = fg.__values__;
      mdef.foreground(emit, item, this);
      values = el.__values__;
      // use parent's values hash
      element = el.childNodes[1];
      mdef.content(emit, item, this);
      const bg = element = el.childNodes[0];
      mdef.background(emit, item, this);
      const value = item.mark.interactive === false ? 'none' : null;
      if (value !== values.events) {
        setAttribute(fg, 'pointer-events', value);
        setAttribute(bg, 'pointer-events', value);
        values.events = value;
      }
      if (item.strokeForeground && item.stroke) {
        const fill = item.fill;
        setAttribute(fg, 'display', null);
        // set style of background
        this.style(bg, item);
        setAttribute(bg, 'stroke', null);
        // set style of foreground
        if (fill) item.fill = null;
        values = fg.__values__;
        this.style(fg, item);
        if (fill) item.fill = fill;
        // leave element null to prevent downstream styling
        element = null;
      } else {
        // ensure foreground is ignored
        setAttribute(fg, 'display', 'none');
      }
    },
    image(mdef, el, item) {
      if (item.smooth === false) {
        setStyle(el, 'image-rendering', 'optimizeSpeed');
        setStyle(el, 'image-rendering', 'pixelated');
      } else {
        setStyle(el, 'image-rendering', null);
      }
    },
    text(mdef, el, item) {
      const tl = textLines(item);
      let key, value, doc, lh;
      if (vegaUtil.isArray(tl)) {
        // multi-line text
        value = tl.map(_ => textValue(item, _));
        key = value.join('\n');
        // content cache key
        if (key !== values.text) {
          domClear(el, 0);
          doc = el.ownerDocument;
          lh = lineHeight(item);
          value.forEach((t, i) => {
            const ts = domCreate(doc, 'tspan', svgns);
            ts.__data__ = item;
            // data binding
            ts.textContent = t;
            if (i) {
              ts.setAttribute('x', 0);
              ts.setAttribute('dy', lh);
            }
            el.appendChild(ts);
          });
          values.text = key;
        }
      } else {
        // single-line text
        value = textValue(item, tl);
        if (value !== values.text) {
          el.textContent = value;
          values.text = value;
        }
      }
      setAttribute(el, 'font-family', fontFamily(item));
      setAttribute(el, 'font-size', fontSize(item) + 'px');
      setAttribute(el, 'font-style', item.fontStyle);
      setAttribute(el, 'font-variant', item.fontVariant);
      setAttribute(el, 'font-weight', item.fontWeight);
    }
  };
  function emit(name, value, ns) {
    // early exit if value is unchanged
    if (value === values[name]) return;
    // use appropriate method given namespace (ns)
    if (ns) {
      setAttributeNS(element, name, value, ns);
    } else {
      setAttribute(element, name, value);
    }
    // note current value for future comparison
    values[name] = value;
  }
  function setStyle(el, name, value) {
    if (value !== values[name]) {
      if (value == null) {
        el.style.removeProperty(name);
      } else {
        el.style.setProperty(name, value + '');
      }
      values[name] = value;
    }
  }
  function setAttributes(el, attrs) {
    for (const key in attrs) {
      setAttribute(el, key, attrs[key]);
    }
  }
  function setAttribute(el, name, value) {
    if (value != null) {
      // if value is provided, update DOM attribute
      el.setAttribute(name, value);
    } else {
      // else remove DOM attribute
      el.removeAttribute(name);
    }
  }
  function setAttributeNS(el, name, value, ns) {
    if (value != null) {
      // if value is provided, update DOM attribute
      el.setAttributeNS(ns, name, value);
    } else {
      // else remove DOM attribute
      el.removeAttributeNS(ns, name);
    }
  }
  function href() {
    let loc;
    return typeof window === 'undefined' ? '' : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
  }
  function SVGStringRenderer(loader) {
    Renderer.call(this, loader);
    this._text = null;
    this._defs = {
      gradient: {},
      clipping: {}
    };
  }
  vegaUtil.inherits(SVGStringRenderer, Renderer, {
    /**
    * Returns the rendered SVG text string,
    * or null if rendering has not yet occurred.
    */
    /**
    * Returns the rendered SVG text string,
    * or null if rendering has not yet occurred.
    */
    svg() {
      return this._text;
    },
    /**
    * Internal rendering method.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    /**
    * Internal rendering method.
    * @param {object} scene - The root mark of a scenegraph to render.
    */
    _render(scene) {
      const m = markup();
      // svg tag
      m.open('svg', vegaUtil.extend({}, metadata, {
        class: 'marks',
        width: this._width * this._scale,
        height: this._height * this._scale,
        viewBox: `0 0 ${this._width} ${this._height}`
      }));
      // background, if defined
      const bg = this._bgcolor;
      if (bg && bg !== 'transparent' && bg !== 'none') {
        m.open('rect', {
          width: this._width,
          height: this._height,
          fill: bg
        }).close();
      }
      // root content group
      m.open('g', rootAttributes, {
        transform: 'translate(' + this._origin + ')'
      });
      this.mark(m, scene);
      m.close();
      // </g>
      // defs
      this.defs(m);
      // get SVG text string
      this._text = m.close() + '';
      return this;
    },
    /**
    * Render a set of mark items.
    * @param {object} m - The markup context.
    * @param {object} scene - The mark parent to render.
    */
    /**
    * Render a set of mark items.
    * @param {object} m - The markup context.
    * @param {object} scene - The mark parent to render.
    */
    mark(m, scene) {
      const mdef = Marks[scene.marktype], tag = mdef.tag, attrList = [ariaItemAttributes, mdef.attr];
      // render opening group tag
      m.open('g', {
        'class': cssClass(scene),
        'clip-path': scene.clip ? clip$1(this, scene, scene.group) : null
      }, ariaMarkAttributes(scene), {
        'pointer-events': tag !== 'g' && scene.interactive === false ? 'none' : null
      });
      // render contained elements
      const process = item => {
        const href = this.href(item);
        if (href) m.open('a', href);
        m.open(tag, this.attr(scene, item, attrList, tag !== 'g' ? tag : null));
        if (tag === 'text') {
          const tl = textLines(item);
          if (vegaUtil.isArray(tl)) {
            // multi-line text
            const attrs = {
              x: 0,
              dy: lineHeight(item)
            };
            for (let i = 0; i < tl.length; ++i) {
              m.open('tspan', i ? attrs : null).text(textValue(item, tl[i])).close();
            }
          } else {
            // single-line text
            m.text(textValue(item, tl));
          }
        } else if (tag === 'g') {
          const fore = item.strokeForeground, fill = item.fill, stroke = item.stroke;
          if (fore && stroke) {
            item.stroke = null;
          }
          m.open('path', this.attr(scene, item, mdef.background, 'bgrect')).close();
          // recurse for group content
          m.open('g', this.attr(scene, item, mdef.content));
          visit(item, scene => this.mark(m, scene));
          m.close();
          if (fore && stroke) {
            if (fill) item.fill = null;
            item.stroke = stroke;
            m.open('path', this.attr(scene, item, mdef.foreground, 'bgrect')).close();
            if (fill) item.fill = fill;
          } else {
            m.open('path', this.attr(scene, item, mdef.foreground, 'bgfore')).close();
          }
        }
        m.close();
        // </tag>
        if (href) m.close();
      };
      if (mdef.nested) {
        if (scene.items && scene.items.length) process(scene.items[0]);
      } else {
        visit(scene, process);
      }
      // render closing group tag
      return m.close();
    },
    /**
    * Get href attributes for a hyperlinked mark item.
    * @param {Item} item - The mark item.
    */
    /**
    * Get href attributes for a hyperlinked mark item.
    * @param {Item} item - The mark item.
    */
    href(item) {
      const href = item.href;
      let attr;
      if (href) {
        if (attr = this._hrefs && this._hrefs[href]) {
          return attr;
        } else {
          this.sanitizeURL(href).then(attr => {
            // rewrite to use xlink namespace
            attr['xlink:href'] = attr.href;
            attr.href = null;
            (this._hrefs || (this._hrefs = {}))[href] = attr;
          });
        }
      }
      return null;
    },
    /**
    * Get an object of SVG attributes for a mark item.
    * @param {object} scene - The mark parent.
    * @param {Item} item - The mark item.
    * @param {array|function} attrs - One or more attribute emitters.
    * @param {string} tag - The tag being rendered.
    */
    /**
    * Get an object of SVG attributes for a mark item.
    * @param {object} scene - The mark parent.
    * @param {Item} item - The mark item.
    * @param {array|function} attrs - One or more attribute emitters.
    * @param {string} tag - The tag being rendered.
    */
    attr(scene, item, attrs, tag) {
      const object = {}, emit = (name, value, ns, prefixed) => {
        object[prefixed || name] = value;
      };
      // apply mark specific attributes
      if (Array.isArray(attrs)) {
        attrs.forEach(fn => fn(emit, item, this));
      } else {
        attrs(emit, item, this);
      }
      // apply style attributes
      if (tag) {
        style(object, item, scene, tag, this._defs);
      }
      return object;
    },
    /**
    * Render SVG defs, as needed.
    * Must be called *after* marks have been processed to ensure the
    * collected state is current and accurate.
    * @param {object} m - The markup context.
    */
    /**
    * Render SVG defs, as needed.
    * Must be called *after* marks have been processed to ensure the
    * collected state is current and accurate.
    * @param {object} m - The markup context.
    */
    defs(m) {
      const gradient = this._defs.gradient, clipping = this._defs.clipping, count = Object.keys(gradient).length + Object.keys(clipping).length;
      if (count === 0) return;
      // nothing to do
      m.open('defs');
      for (const id in gradient) {
        const def = gradient[id], stops = def.stops;
        if (def.gradient === 'radial') {
          // SVG radial gradients automatically transform to normalized bbox
          // coordinates, in a way that is cumbersome to replicate in canvas.
          // We wrap the radial gradient in a pattern element, allowing us to
          // maintain a circular gradient that matches what canvas provides.
          m.open('pattern', {
            id: patternPrefix + id,
            viewBox: '0,0,1,1',
            width: '100%',
            height: '100%',
            preserveAspectRatio: 'xMidYMid slice'
          });
          m.open('rect', {
            width: '1',
            height: '1',
            fill: 'url(#' + id + ')'
          }).close();
          m.close();
          // </pattern>
          m.open('radialGradient', {
            id: id,
            fx: def.x1,
            fy: def.y1,
            fr: def.r1,
            cx: def.x2,
            cy: def.y2,
            r: def.r2
          });
        } else {
          m.open('linearGradient', {
            id: id,
            x1: def.x1,
            x2: def.x2,
            y1: def.y1,
            y2: def.y2
          });
        }
        for (let i = 0; i < stops.length; ++i) {
          m.open('stop', {
            offset: stops[i].offset,
            'stop-color': stops[i].color
          }).close();
        }
        m.close();
      }
      for (const id in clipping) {
        const def = clipping[id];
        m.open('clipPath', {
          id: id
        });
        if (def.path) {
          m.open('path', {
            d: def.path
          }).close();
        } else {
          m.open('rect', {
            x: 0,
            y: 0,
            width: def.width,
            height: def.height
          }).close();
        }
        m.close();
      }
      m.close();
    }
  });
  // Helper function for attr for style presentation attributes
  function style(s, item, scene, tag, defs) {
    if (item == null) return s;
    if (tag === 'bgrect' && scene.interactive === false) {
      s['pointer-events'] = 'none';
    }
    if (tag === 'bgfore') {
      if (scene.interactive === false) {
        s['pointer-events'] = 'none';
      }
      s.display = 'none';
      if (item.fill !== null) return s;
    }
    if (tag === 'image' && item.smooth === false) {
      s.style = 'image-rendering: optimizeSpeed; image-rendering: pixelated;';
    }
    if (tag === 'text') {
      s['font-family'] = fontFamily(item);
      s['font-size'] = fontSize(item) + 'px';
      s['font-style'] = item.fontStyle;
      s['font-variant'] = item.fontVariant;
      s['font-weight'] = item.fontWeight;
    }
    for (const prop in styles) {
      let value = item[prop];
      const name = styles[prop];
      if (value === 'transparent' && (name === 'fill' || name === 'stroke')) ; else if (value != null) {
        if (isGradient(value)) {
          value = gradientRef(value, defs.gradient, '');
        }
        s[name] = value;
      }
    }
    return s;
  }
  const Canvas = 'canvas';
  const PNG = 'png';
  const SVG = 'svg';
  const None = 'none';
  const RenderType = {
    Canvas: Canvas,
    PNG: PNG,
    SVG: SVG,
    None: None
  };
  const modules = {};
  modules[Canvas] = modules[PNG] = {
    renderer: CanvasRenderer,
    headless: CanvasRenderer,
    handler: CanvasHandler
  };
  modules[SVG] = {
    renderer: SVGRenderer,
    headless: SVGStringRenderer,
    handler: SVGHandler
  };
  modules[None] = {};
  function renderModule(name, _) {
    name = String(name || '').toLowerCase();
    if (arguments.length > 1) {
      modules[name] = _;
      return this;
    } else {
      return modules[name];
    }
  }
  function intersect(scene, bounds, filter) {
    const hits = [], // intersection results
    box = new Bounds().union(bounds), // defensive copy
    type = scene.marktype;
    return type ? intersectMark(scene, box, filter, hits) : type === 'group' ? intersectGroup(scene, box, filter, hits) : vegaUtil.error('Intersect scene must be mark node or group item.');
  }
  function intersectMark(mark, box, filter, hits) {
    if (visitMark(mark, box, filter)) {
      const items = mark.items, type = mark.marktype, n = items.length;
      let i = 0;
      if (type === 'group') {
        for (; i < n; ++i) {
          intersectGroup(items[i], box, filter, hits);
        }
      } else {
        for (const test = Marks[type].isect; i < n; ++i) {
          const item = items[i];
          if (intersectItem(item, box, test)) hits.push(item);
        }
      }
    }
    return hits;
  }
  function visitMark(mark, box, filter) {
    // process if bounds intersect and if
    // (1) mark is a group mark (so we must recurse), or
    // (2) mark is interactive and passes filter
    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === 'group' || mark.interactive !== false && (!filter || filter(mark)));
  }
  function intersectGroup(group, box, filter, hits) {
    // test intersect against group
    // skip groups by default unless filter says otherwise
    if (filter && filter(group.mark) && intersectItem(group, box, Marks.group.isect)) {
      hits.push(group);
    }
    // recursively test children marks
    // translate box to group coordinate space
    const marks = group.items, n = marks && marks.length;
    if (n) {
      const x = group.x || 0, y = group.y || 0;
      box.translate(-x, -y);
      for (let i = 0; i < n; ++i) {
        intersectMark(marks[i], box, filter, hits);
      }
      box.translate(x, y);
    }
    return hits;
  }
  function intersectItem(item, box, test) {
    // test bounds enclosure, bounds intersection, then detailed test
    const bounds = item.bounds;
    return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
  }
  const clipBounds = new Bounds();
  function boundClip(mark) {
    const clip = mark.clip;
    if (vegaUtil.isFunction(clip)) {
      clip(boundContext(clipBounds.clear()));
    } else if (clip) {
      clipBounds.set(0, 0, mark.group.width, mark.group.height);
    } else return;
    mark.bounds.intersect(clipBounds);
  }
  const TOLERANCE = 1e-9;
  function sceneEqual(a, b, key) {
    return a === b ? true : key === 'path' ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : vegaUtil.isNumber(a) && vegaUtil.isNumber(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !vegaUtil.isObject(a) && !vegaUtil.isObject(b) ? a == b : objectEqual(a, b);
  }
  function pathEqual(a, b) {
    return sceneEqual(pathParse(a), pathParse(b));
  }
  function objectEqual(a, b) {
    var ka = Object.keys(a), kb = Object.keys(b), key, i;
    if (ka.length !== kb.length) return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) return false;
    }
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!sceneEqual(a[key], b[key], key)) return false;
    }
    return typeof a === typeof b;
  }
  function resetSVGDefIds() {
    resetSVGClipId();
    resetSVGGradientId();
  }
  exports.Bounds = Bounds;
  exports.CanvasHandler = CanvasHandler;
  exports.CanvasRenderer = CanvasRenderer;
  exports.Gradient = Gradient;
  exports.GroupItem = GroupItem;
  exports.Handler = Handler;
  exports.Item = Item;
  exports.Marks = Marks;
  exports.RenderType = RenderType;
  exports.Renderer = Renderer;
  exports.ResourceLoader = ResourceLoader;
  exports.SVGHandler = SVGHandler;
  exports.SVGRenderer = SVGRenderer;
  exports.SVGStringRenderer = SVGStringRenderer;
  exports.Scenegraph = Scenegraph;
  exports.boundClip = boundClip;
  exports.boundContext = boundContext;
  exports.boundItem = boundItem;
  exports.boundMark = boundMark;
  exports.boundStroke = boundStroke;
  exports.domChild = domChild;
  exports.domClear = domClear;
  exports.domCreate = domCreate;
  exports.domFind = domFind;
  exports.font = font;
  exports.fontFamily = fontFamily;
  exports.fontSize = fontSize;
  exports.intersect = intersect;
  exports.intersectBoxLine = intersectBoxLine;
  exports.intersectPath = intersectPath;
  exports.intersectPoint = intersectPoint;
  exports.intersectRule = intersectRule;
  exports.lineHeight = lineHeight;
  exports.markup = markup;
  exports.multiLineOffset = multiLineOffset;
  exports.pathCurves = curves;
  exports.pathEqual = pathEqual;
  exports.pathParse = pathParse;
  exports.pathRectangle = vg_rect;
  exports.pathRender = pathRender;
  exports.pathSymbols = symbols;
  exports.pathTrail = vg_trail;
  exports.point = point;
  exports.renderModule = renderModule;
  exports.resetSVGClipId = resetSVGClipId;
  exports.resetSVGDefIds = resetSVGDefIds;
  exports.sceneEqual = sceneEqual;
  exports.sceneFromJSON = sceneFromJSON;
  exports.scenePickVisit = pickVisit;
  exports.sceneToJSON = sceneToJSON;
  exports.sceneVisit = visit;
  exports.sceneZOrder = zorder;
  exports.serializeXML = serializeXML;
  exports.textMetrics = textMetrics;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","d3-shape":"fW1hY","d3-path":"m838t","vega-canvas":"4uDqM","vega-loader":"72pzQ","vega-scale":"13AnI"}],"fW1hY":[function(require,module,exports) {
var define;
// https://d3js.org/d3-shape/ v2.1.0 Copyright 2021 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Path) {
  "use strict";
  function constant(x) {
    return function constant() {
      return x;
    };
  }
  var abs = Math.abs;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var max = Math.max;
  var min = Math.min;
  var sin = Math.sin;
  var sqrt = Math.sqrt;
  var epsilon = 1e-12;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var tau = 2 * pi;
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
  }
  function asin(x) {
    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
  }
  function arcInnerRadius(d) {
    return d.innerRadius;
  }
  function arcOuterRadius(d) {
    return d.outerRadius;
  }
  function arcStartAngle(d) {
    return d.startAngle;
  }
  function arcEndAngle(d) {
    return d.endAngle;
  }
  function arcPadAngle(d) {
    return d && d.padAngle;
  }
  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < epsilon) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [x0 + t * x10, y0 + t * y10];
  }
  // Compute perpendicular offset line of length rc.
  // http://mathworld.wolfram.com/Circle-LineIntersection.html
  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) (cx0 = cx1, cy0 = cy1);
    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }
  function arc() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
      var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
      if (!context) context = buffer = d3Path.path();
      // Ensure that the outer radius is always larger than the inner radius.
      if (r1 < r0) (r = r1, r1 = r0, r0 = r);
      // Is it a point?
      if (!(r1 > epsilon)) context.moveTo(0, 0); else // Or is it a circle or annulus?
      if (da > tau - epsilon) {
        context.moveTo(r1 * cos(a0), r1 * sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);
        if (r0 > epsilon) {
          context.moveTo(r0 * cos(a1), r0 * sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
              // Or is it a circular or annular sector?
} else // Or is it a circular or annular sector?
      {
        var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
        if (rp > epsilon) {
          var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
          if ((da0 -= p0 * 2) > epsilon) (p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0); else (da0 = 0, a00 = a10 = (a0 + a1) / 2);
          if ((da1 -= p1 * 2) > epsilon) (p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1); else (da1 = 0, a01 = a11 = (a0 + a1) / 2);
        }
        var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
        // Apply rounded corners?
        if (rc > epsilon) {
          var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
          // Restrict the corner radius according to the sector angle.
          if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min(rc, (r0 - lc) / (kc - 1));
            rc1 = min(rc, (r1 - lc) / (kc + 1));
          }
        }
        // Is the sector collapsed to a line?
        if (!(da1 > epsilon)) context.moveTo(x01, y01); else // Does the sector’s outer ring have rounded corners?
        if (rc1 > epsilon) {
          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
          // Have the corners merged?
          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); else // Otherwise, draw the two corners and the ring.
          {
            context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
            context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
          }
                  // Or is the outer ring just a circular arc?
} else // Or is the outer ring just a circular arc?
        (context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw));
        // Is there no inner ring, and it’s a circular sector?
        // Or perhaps it’s an annular sector collapsed due to padding?
        if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10); else // Does the sector’s inner ring (or point) have rounded corners?
        if (rc0 > epsilon) {
          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
          // Have the corners merged?
          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); else // Otherwise, draw the two corners and the ring.
          {
            context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
            context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
          }
                  // Or is the inner ring just a circular arc?
} else // Or is the inner ring just a circular arc?
        context.arc(0, 0, r0, a10, a00, cw);
      }
      context.closePath();
      if (buffer) return (context = null, buffer + "" || null);
    }
    arc.centroid = function () {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
      return [cos(a) * r, sin(a) * r];
    };
    arc.innerRadius = function (_) {
      return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
    };
    arc.outerRadius = function (_) {
      return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function (_) {
      return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
    };
    arc.padRadius = function (_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
    };
    arc.startAngle = function (_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
    };
    arc.endAngle = function (_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
    };
    arc.padAngle = function (_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
    };
    arc.context = function (_) {
      return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
  }
  var slice = Array.prototype.slice;
  function array(x) {
    return typeof x === "object" && ("length" in x) ? x : // Array, TypedArray, NodeList, array-like
    Array.from(x);
  }
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._point = 0;
    },
    lineEnd: function () {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x, y);
          break;
      }
    }
  };
  function curveLinear(context) {
    return new Linear(context);
  }
  function x(p) {
    return p[0];
  }
  function y(p) {
    return p[1];
  }
  function line(x$1, y$1) {
    var defined = constant(true), context = null, curve = curveLinear, output = null;
    x$1 = typeof x$1 === "function" ? x$1 : x$1 === undefined ? x : constant(x$1);
    y$1 = typeof y$1 === "function" ? y$1 : y$1 === undefined ? y : constant(y$1);
    function line(data) {
      var i, n = (data = array(data)).length, d, defined0 = false, buffer;
      if (context == null) output = curve(buffer = d3Path.path());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart(); else output.lineEnd();
        }
        if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
      }
      if (buffer) return (output = null, buffer + "" || null);
    }
    line.x = function (_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
    };
    line.y = function (_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
    };
    line.defined = function (_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
    };
    line.curve = function (_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function (_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
  }
  function area(x0, y0, y1) {
    var x1 = null, defined = constant(true), context = null, curve = curveLinear, output = null;
    x0 = typeof x0 === "function" ? x0 : x0 === undefined ? x : constant(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === undefined ? constant(0) : constant(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === undefined ? y : constant(+y1);
    function area(data) {
      var i, j, k, n = (data = array(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
      if (context == null) output = curve(buffer = d3Path.path());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k = i - 1; k >= j; --k) {
              output.point(x0z[k], y0z[k]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          (x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data));
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
      }
      if (buffer) return (output = null, buffer + "" || null);
    }
    function arealine() {
      return line().defined(defined).curve(curve).context(context);
    }
    area.x = function (_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
    };
    area.x0 = function (_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
    };
    area.x1 = function (_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
    };
    area.y = function (_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
    };
    area.y0 = function (_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
    };
    area.y1 = function (_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function () {
      return arealine().x(x0).y(y0);
    };
    area.lineY1 = function () {
      return arealine().x(x0).y(y1);
    };
    area.lineX1 = function () {
      return arealine().x(x1).y(y0);
    };
    area.defined = function (_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
    };
    area.curve = function (_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function (_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
  }
  function descending$1(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  }
  function identity(d) {
    return d;
  }
  function pie() {
    var value = identity, sortValues = descending$1, sort = null, startAngle = constant(0), endAngle = constant(tau), padAngle = constant(0);
    function pie(data) {
      var i, n = (data = array(data)).length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
      for (i = 0; i < n; ++i) {
        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
          sum += v;
        }
      }
      // Optionally sort the arcs by previously-computed values or by data.
      if (sortValues != null) index.sort(function (i, j) {
        return sortValues(arcs[i], arcs[j]);
      }); else if (sort != null) index.sort(function (i, j) {
        return sort(data[i], data[j]);
      });
      // Compute the arcs! They are stored in the original data's order.
      for ((i = 0, k = sum ? (da - n * pa) / sum : 0); i < n; (++i, a0 = a1)) {
        (j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
          data: data[j],
          index: i,
          value: v,
          startAngle: a0,
          endAngle: a1,
          padAngle: p
        });
      }
      return arcs;
    }
    pie.value = function (_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
    };
    pie.sortValues = function (_) {
      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
    };
    pie.sort = function (_) {
      return arguments.length ? (sort = _, sortValues = null, pie) : sort;
    };
    pie.startAngle = function (_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
    };
    pie.endAngle = function (_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
    };
    pie.padAngle = function (_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
    };
    return pie;
  }
  var curveRadialLinear = curveRadial$1(curveLinear);
  function Radial(curve) {
    this._curve = curve;
  }
  Radial.prototype = {
    areaStart: function () {
      this._curve.areaStart();
    },
    areaEnd: function () {
      this._curve.areaEnd();
    },
    lineStart: function () {
      this._curve.lineStart();
    },
    lineEnd: function () {
      this._curve.lineEnd();
    },
    point: function (a, r) {
      this._curve.point(r * Math.sin(a), r * -Math.cos(a));
    }
  };
  function curveRadial$1(curve) {
    function radial(context) {
      return new Radial(curve(context));
    }
    radial._curve = curve;
    return radial;
  }
  function lineRadial(l) {
    var c = l.curve;
    (l.angle = l.x, delete l.x);
    (l.radius = l.y, delete l.y);
    l.curve = function (_) {
      return arguments.length ? c(curveRadial$1(_)) : c()._curve;
    };
    return l;
  }
  function lineRadial$1() {
    return lineRadial(line().curve(curveRadialLinear));
  }
  function areaRadial() {
    var a = area().curve(curveRadialLinear), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
    (a.angle = a.x, delete a.x);
    (a.startAngle = a.x0, delete a.x0);
    (a.endAngle = a.x1, delete a.x1);
    (a.radius = a.y, delete a.y);
    (a.innerRadius = a.y0, delete a.y0);
    (a.outerRadius = a.y1, delete a.y1);
    (a.lineStartAngle = function () {
      return lineRadial(x0());
    }, delete a.lineX0);
    (a.lineEndAngle = function () {
      return lineRadial(x1());
    }, delete a.lineX1);
    (a.lineInnerRadius = function () {
      return lineRadial(y0());
    }, delete a.lineY0);
    (a.lineOuterRadius = function () {
      return lineRadial(y1());
    }, delete a.lineY1);
    a.curve = function (_) {
      return arguments.length ? c(curveRadial$1(_)) : c()._curve;
    };
    return a;
  }
  function pointRadial(x, y) {
    return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
  }
  function linkSource(d) {
    return d.source;
  }
  function linkTarget(d) {
    return d.target;
  }
  function link(curve) {
    var source = linkSource, target = linkTarget, x$1 = x, y$1 = y, context = null;
    function link() {
      var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
      if (!context) context = buffer = d3Path.path();
      curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
      if (buffer) return (context = null, buffer + "" || null);
    }
    link.source = function (_) {
      return arguments.length ? (source = _, link) : source;
    };
    link.target = function (_) {
      return arguments.length ? (target = _, link) : target;
    };
    link.x = function (_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link) : x$1;
    };
    link.y = function (_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link) : y$1;
    };
    link.context = function (_) {
      return arguments.length ? (context = _ == null ? null : _, link) : context;
    };
    return link;
  }
  function curveHorizontal(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0);
    context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
  }
  function curveVertical(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0);
    context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
  }
  function curveRadial(context, x0, y0, x1, y1) {
    var p0 = pointRadial(x0, y0), p1 = pointRadial(x0, y0 = (y0 + y1) / 2), p2 = pointRadial(x1, y0), p3 = pointRadial(x1, y1);
    context.moveTo(p0[0], p0[1]);
    context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
  }
  function linkHorizontal() {
    return link(curveHorizontal);
  }
  function linkVertical() {
    return link(curveVertical);
  }
  function linkRadial() {
    var l = link(curveRadial);
    (l.angle = l.x, delete l.x);
    (l.radius = l.y, delete l.y);
    return l;
  }
  var circle = {
    draw: function (context, size) {
      var r = Math.sqrt(size / pi);
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, tau);
    }
  };
  var cross = {
    draw: function (context, size) {
      var r = Math.sqrt(size / 5) / 2;
      context.moveTo(-3 * r, -r);
      context.lineTo(-r, -r);
      context.lineTo(-r, -3 * r);
      context.lineTo(r, -3 * r);
      context.lineTo(r, -r);
      context.lineTo(3 * r, -r);
      context.lineTo(3 * r, r);
      context.lineTo(r, r);
      context.lineTo(r, 3 * r);
      context.lineTo(-r, 3 * r);
      context.lineTo(-r, r);
      context.lineTo(-3 * r, r);
      context.closePath();
    }
  };
  var tan30 = Math.sqrt(1 / 3), tan30_2 = tan30 * 2;
  var diamond = {
    draw: function (context, size) {
      var y = Math.sqrt(size / tan30_2), x = y * tan30;
      context.moveTo(0, -y);
      context.lineTo(x, 0);
      context.lineTo(0, y);
      context.lineTo(-x, 0);
      context.closePath();
    }
  };
  var ka = 0.89081309152928522810, kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10), kx = Math.sin(tau / 10) * kr, ky = -Math.cos(tau / 10) * kr;
  var star = {
    draw: function (context, size) {
      var r = Math.sqrt(size * ka), x = kx * r, y = ky * r;
      context.moveTo(0, -r);
      context.lineTo(x, y);
      for (var i = 1; i < 5; ++i) {
        var a = tau * i / 5, c = Math.cos(a), s = Math.sin(a);
        context.lineTo(s * r, -c * r);
        context.lineTo(c * x - s * y, s * x + c * y);
      }
      context.closePath();
    }
  };
  var square = {
    draw: function (context, size) {
      var w = Math.sqrt(size), x = -w / 2;
      context.rect(x, x, w, w);
    }
  };
  var sqrt3 = Math.sqrt(3);
  var triangle = {
    draw: function (context, size) {
      var y = -Math.sqrt(size / (sqrt3 * 3));
      context.moveTo(0, y * 2);
      context.lineTo(-sqrt3 * y, -y);
      context.lineTo(sqrt3 * y, -y);
      context.closePath();
    }
  };
  var c = -0.5, s = Math.sqrt(3) / 2, k = 1 / Math.sqrt(12), a = (k / 2 + 1) * 3;
  var wye = {
    draw: function (context, size) {
      var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.lineTo(x2, y2);
      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
      context.closePath();
    }
  };
  var symbols = [circle, cross, diamond, square, star, triangle, wye];
  function symbol(type, size) {
    var context = null;
    type = typeof type === "function" ? type : constant(type || circle);
    size = typeof size === "function" ? size : constant(size === undefined ? 64 : +size);
    function symbol() {
      var buffer;
      if (!context) context = buffer = d3Path.path();
      type.apply(this, arguments).draw(context, +size.apply(this, arguments));
      if (buffer) return (context = null, buffer + "" || null);
    }
    symbol.type = function (_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
    };
    symbol.size = function (_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
    };
    symbol.context = function (_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
  }
  function noop() {}
  function point$3(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 3:
          point$3(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point$3(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = x);
      (this._y0 = this._y1, this._y1 = y);
    }
  };
  function basis(context) {
    return new Basis(context);
  }
  function BasisClosed(context) {
    this._context = context;
  }
  BasisClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
        case 2:
          {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
        case 3:
          {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
      }
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          (this._x2 = x, this._y2 = y);
          break;
        case 1:
          this._point = 2;
          (this._x3 = x, this._y3 = y);
          break;
        case 2:
          this._point = 3;
          (this._x4 = x, this._y4 = y);
          this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
          break;
        default:
          point$3(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = x);
      (this._y0 = this._y1, this._y1 = y);
    }
  };
  function basisClosed(context) {
    return new BasisClosed(context);
  }
  function BasisOpen(context) {
    this._context = context;
  }
  BasisOpen.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        default:
          point$3(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = x);
      (this._y0 = this._y1, this._y1 = y);
    }
  };
  function basisOpen(context) {
    return new BasisOpen(context);
  }
  class Bump {
    constructor(context, x) {
      this._context = context;
      this._x = x;
    }
    areaStart() {
      this._line = 0;
    }
    areaEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    }
    point(x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          {
            this._point = 1;
            if (this._line) this._context.lineTo(x, y); else this._context.moveTo(x, y);
            break;
          }
        case 1:
          this._point = 2;
        default:
          {
            if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y); else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
            break;
          }
      }
      (this._x0 = x, this._y0 = y);
    }
  }
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }
  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }
  Bundle.prototype = {
    lineStart: function () {
      this._x = [];
      this._y = [];
      this._basis.lineStart();
    },
    lineEnd: function () {
      var x = this._x, y = this._y, j = x.length - 1;
      if (j > 0) {
        var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
        while (++i <= j) {
          t = i / j;
          this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
        }
      }
      this._x = this._y = null;
      this._basis.lineEnd();
    },
    point: function (x, y) {
      this._x.push(+x);
      this._y.push(+y);
    }
  };
  var bundle = (function custom(beta) {
    function bundle(context) {
      return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }
    bundle.beta = function (beta) {
      return custom(+beta);
    };
    return bundle;
  })(0.85);
  function point$2(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
  }
  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  Cardinal.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          point$2(this, this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
          (this._x1 = x, this._y1 = y);
          break;
        case 2:
          this._point = 3;
        default:
          point$2(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var cardinal = (function custom(tension) {
    function cardinal(context) {
      return new Cardinal(context, tension);
    }
    cardinal.tension = function (tension) {
      return custom(+tension);
    };
    return cardinal;
  })(0);
  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
        case 2:
          {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
        case 3:
          {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
      }
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          (this._x3 = x, this._y3 = y);
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x, this._y4 = y);
          break;
        case 2:
          this._point = 3;
          (this._x5 = x, this._y5 = y);
          break;
        default:
          point$2(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var cardinalClosed = (function custom(tension) {
    function cardinal(context) {
      return new CardinalClosed(context, tension);
    }
    cardinal.tension = function (tension) {
      return custom(+tension);
    };
    return cardinal;
  })(0);
  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalOpen.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point$2(this, x, y);
          break;
      }
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var cardinalOpen = (function custom(tension) {
    function cardinal(context) {
      return new CardinalOpen(context, tension);
    }
    cardinal.tension = function (tension) {
      return custom(+tension);
    };
    return cardinal;
  })(0);
  function point$1(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > epsilon) {
      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon) {
      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
  }
  function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRom.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          this.point(this._x2, this._y2);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      if (this._point) {
        var x23 = this._x2 - x, y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
        default:
          point$1(this, x, y);
          break;
      }
      (this._l01_a = this._l12_a, this._l12_a = this._l23_a);
      (this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a);
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var catmullRom = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
    }
    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };
    return catmullRom;
  })(0.5);
  function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRomClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
        case 2:
          {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
        case 3:
          {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
      }
    },
    point: function (x, y) {
      (x = +x, y = +y);
      if (this._point) {
        var x23 = this._x2 - x, y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          (this._x3 = x, this._y3 = y);
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x, this._y4 = y);
          break;
        case 2:
          this._point = 3;
          (this._x5 = x, this._y5 = y);
          break;
        default:
          point$1(this, x, y);
          break;
      }
      (this._l01_a = this._l12_a, this._l12_a = this._l23_a);
      (this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a);
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var catmullRomClosed = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
    }
    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };
    return catmullRom;
  })(0.5);
  function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRomOpen.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      (x = +x, y = +y);
      if (this._point) {
        var x23 = this._x2 - x, y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point$1(this, x, y);
          break;
      }
      (this._l01_a = this._l12_a, this._l12_a = this._l23_a);
      (this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a);
      (this._x0 = this._x1, this._x1 = this._x2, this._x2 = x);
      (this._y0 = this._y1, this._y1 = this._y2, this._y2 = y);
    }
  };
  var catmullRomOpen = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
    }
    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };
    return catmullRom;
  })(0.5);
  function LinearClosed(context) {
    this._context = context;
  }
  LinearClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
      this._point = 0;
    },
    lineEnd: function () {
      if (this._point) this._context.closePath();
    },
    point: function (x, y) {
      (x = +x, y = +y);
      if (this._point) this._context.lineTo(x, y); else (this._point = 1, this._context.moveTo(x, y));
    }
  };
  function linearClosed(context) {
    return new LinearClosed(context);
  }
  function sign(x) {
    return x < 0 ? -1 : 1;
  }
  // Calculate the slopes of the tangents (Hermite-type interpolation) based on
  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  // NOV(II), P. 443, 1990.
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }
  // Calculate a one-sided slope.
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }
  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
  function point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  MonotoneX.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function (x, y) {
      var t1 = NaN;
      (x = +x, y = +y);
      if (x === this._x1 && y === this._y1) return;
      // Ignore coincident points.
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point(this, slope2(this, t1 = slope3(this, x, y)), t1);
          break;
        default:
          point(this, this._t0, t1 = slope3(this, x, y));
          break;
      }
      (this._x0 = this._x1, this._x1 = x);
      (this._y0 = this._y1, this._y1 = y);
      this._t0 = t1;
    }
  };
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
    MonotoneX.prototype.point.call(this, y, x);
  };
  function ReflectContext(context) {
    this._context = context;
  }
  ReflectContext.prototype = {
    moveTo: function (x, y) {
      this._context.moveTo(y, x);
    },
    closePath: function () {
      this._context.closePath();
    },
    lineTo: function (x, y) {
      this._context.lineTo(y, x);
    },
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }
  function Natural(context) {
    this._context = context;
  }
  Natural.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x = [];
      this._y = [];
    },
    lineEnd: function () {
      var x = this._x, y = this._y, n = x.length;
      if (n) {
        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
        if (n === 2) {
          this._context.lineTo(x[1], y[1]);
        } else {
          var px = controlPoints(x), py = controlPoints(y);
          for (var i0 = 0, i1 = 1; i1 < n; (++i0, ++i1)) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n === 1) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function (x, y) {
      this._x.push(+x);
      this._y.push(+y);
    }
  };
  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
  function controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    (a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1]);
    for (i = 1; i < n - 1; ++i) (a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1]);
    (a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n]);
    for (i = 1; i < n; ++i) (m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1]);
    a[n - 1] = r[n - 1] / b[n - 1];
    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
    return [a, b];
  }
  function natural(context) {
    return new Natural(context);
  }
  function Step(context, t) {
    this._context = context;
    this._t = t;
  }
  Step.prototype = {
    areaStart: function () {
      this._line = 0;
    },
    areaEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function () {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      if (this._line >= 0) (this._t = 1 - this._t, this._line = 1 - this._line);
    },
    point: function (x, y) {
      (x = +x, y = +y);
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
        default:
          {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
      }
      (this._x = x, this._y = y);
    }
  };
  function step(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }
  function none$1(series, order) {
    if (!((n = series.length) > 1)) return;
    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
      (s0 = s1, s1 = series[order[i]]);
      for (j = 0; j < m; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
      }
    }
  }
  function none(series) {
    var n = series.length, o = new Array(n);
    while (--n >= 0) o[n] = n;
    return o;
  }
  function stackValue(d, key) {
    return d[key];
  }
  function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
  }
  function stack() {
    var keys = constant([]), order = none, offset = none$1, value = stackValue;
    function stack(data) {
      var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
      for (const d of data) {
        for ((i = 0, ++j); i < n; ++i) {
          (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
        }
      }
      for ((i = 0, oz = array(order(sz))); i < n; ++i) {
        sz[oz[i]].index = i;
      }
      offset(sz, oz);
      return sz;
    }
    stack.keys = function (_) {
      return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
    };
    stack.value = function (_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
    };
    stack.order = function (_) {
      return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
    };
    stack.offset = function (_) {
      return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
    };
    return stack;
  }
  function expand(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
    }
    none$1(series, order);
  }
  function diverging(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
      for ((yp = yn = 0, i = 0); i < n; ++i) {
        if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
          (d[0] = yp, d[1] = yp += dy);
        } else if (dy < 0) {
          (d[1] = yn, d[0] = yn += dy);
        } else {
          (d[0] = 0, d[1] = dy);
        }
      }
    }
  }
  function silhouette(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
      s0[j][1] += s0[j][0] = -y / 2;
    }
    none$1(series, order);
  }
  function wiggle(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k = 0; k < i; ++k) {
          var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        (s1 += sij0, s2 += s3 * sij0);
      }
      s0[j - 1][1] += s0[j - 1][0] = y;
      if (s1) y -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    none$1(series, order);
  }
  function appearance(series) {
    var peaks = series.map(peak);
    return none(series).sort(function (a, b) {
      return peaks[a] - peaks[b];
    });
  }
  function peak(series) {
    var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
    while (++i < n) if ((vi = +series[i][1]) > vj) (vj = vi, j = i);
    return j;
  }
  function ascending(series) {
    var sums = series.map(sum);
    return none(series).sort(function (a, b) {
      return sums[a] - sums[b];
    });
  }
  function sum(series) {
    var s = 0, i = -1, n = series.length, v;
    while (++i < n) if (v = +series[i][1]) s += v;
    return s;
  }
  function descending(series) {
    return ascending(series).reverse();
  }
  function insideOut(series) {
    var n = series.length, i, j, sums = series.map(sum), order = appearance(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for (i = 0; i < n; ++i) {
      j = order[i];
      if (top < bottom) {
        top += sums[j];
        tops.push(j);
      } else {
        bottom += sums[j];
        bottoms.push(j);
      }
    }
    return bottoms.reverse().concat(tops);
  }
  function reverse(series) {
    return none(series).reverse();
  }
  exports.arc = arc;
  exports.area = area;
  exports.areaRadial = areaRadial;
  exports.curveBasis = basis;
  exports.curveBasisClosed = basisClosed;
  exports.curveBasisOpen = basisOpen;
  exports.curveBumpX = bumpX;
  exports.curveBumpY = bumpY;
  exports.curveBundle = bundle;
  exports.curveCardinal = cardinal;
  exports.curveCardinalClosed = cardinalClosed;
  exports.curveCardinalOpen = cardinalOpen;
  exports.curveCatmullRom = catmullRom;
  exports.curveCatmullRomClosed = catmullRomClosed;
  exports.curveCatmullRomOpen = catmullRomOpen;
  exports.curveLinear = curveLinear;
  exports.curveLinearClosed = linearClosed;
  exports.curveMonotoneX = monotoneX;
  exports.curveMonotoneY = monotoneY;
  exports.curveNatural = natural;
  exports.curveStep = step;
  exports.curveStepAfter = stepAfter;
  exports.curveStepBefore = stepBefore;
  exports.line = line;
  exports.lineRadial = lineRadial$1;
  exports.linkHorizontal = linkHorizontal;
  exports.linkRadial = linkRadial;
  exports.linkVertical = linkVertical;
  exports.pie = pie;
  exports.pointRadial = pointRadial;
  exports.radialArea = areaRadial;
  exports.radialLine = lineRadial$1;
  exports.stack = stack;
  exports.stackOffsetDiverging = diverging;
  exports.stackOffsetExpand = expand;
  exports.stackOffsetNone = none$1;
  exports.stackOffsetSilhouette = silhouette;
  exports.stackOffsetWiggle = wiggle;
  exports.stackOrderAppearance = appearance;
  exports.stackOrderAscending = ascending;
  exports.stackOrderDescending = descending;
  exports.stackOrderInsideOut = insideOut;
  exports.stackOrderNone = none;
  exports.stackOrderReverse = reverse;
  exports.symbol = symbol;
  exports.symbolCircle = circle;
  exports.symbolCross = cross;
  exports.symbolDiamond = diamond;
  exports.symbolSquare = square;
  exports.symbolStar = star;
  exports.symbolTriangle = triangle;
  exports.symbolWye = wye;
  exports.symbols = symbols;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-path":"m838t"}],"m838t":[function(require,module,exports) {
var define;
// https://d3js.org/d3-path/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
  function Path() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    // end of current subpath
    this._ = "";
  }
  function path() {
    return new Path();
  }
  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function (x, y) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function () {
      if (this._x1 !== null) {
        (this._x1 = this._x0, this._y1 = this._y0);
        this._ += "Z";
      }
    },
    lineTo: function (x, y) {
      this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function (x1, y1, x, y) {
      this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
      this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function (x1, y1, x2, y2, r) {
      (x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r);
      var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);
      // Is this path empty? Move to (x1,y1).
      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
              // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
} else // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      if (!(l01_2 > epsilon)) ; else // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
        this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
              // Otherwise, draw an arc!
} else // Otherwise, draw an arc!
      {
        var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
        // If the start tangent is not coincident with (x0,y0), line to.
        if (Math.abs(t01 - 1) > epsilon) {
          this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
        }
        this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
      }
    },
    arc: function (x, y, r, a0, a1, ccw) {
      (x = +x, y = +y, r = +r, ccw = !!ccw);
      var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);
      // Is this path empty? Move to (x0,y0).
      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
              // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
} else // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      }
      // Is this arc empty? We’re done.
      if (!r) return;
      // Does the angle go the wrong way? Flip the direction.
      if (da < 0) da = da % tau + tau;
      // Is this a complete circle? Draw two arcs to complete the circle.
      if (da > tauEpsilon) {
        this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
              // Is this arc non-empty? Draw an arc!
} else // Is this arc non-empty? Draw an arc!
      if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
    },
    rect: function (x, y, w, h) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function () {
      return this._;
    }
  };
  exports.path = path;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"4uDqM":[function(require,module,exports) {
var define;
!(function (e, n) {
  "object" == typeof exports && "undefined" != typeof module ? n(exports) : "function" == typeof define && define.amd ? define(["exports"], n) : n((e = "undefined" != typeof globalThis ? globalThis : e || self).vega = {});
})(this, function (e) {
  "use strict";
  function n(e, n) {
    if ("undefined" != typeof document && document.createElement) {
      const t = document.createElement("canvas");
      if (t && t.getContext) return (t.width = e, t.height = n, t);
    }
    return null;
  }
  (e.canvas = n, e.domCanvas = n, e.image = () => "undefined" != typeof Image ? Image : null, Object.defineProperty(e, "__esModule", {
    value: !0
  }));
});

},{}],"13AnI":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('d3-array'), require('d3-scale'), require('d3-interpolate'), require('vega-time')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'd3-array', 'd3-scale', 'd3-interpolate', 'vega-time'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.d3, global.d3, global.d3, global.vega));
})(this, function (exports, vegaUtil, d3Array, $, $$1, vegaTime) {
  "use strict";
  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }
  var $__namespace = /*#__PURE__*/_interopNamespace($$1);
  function bandSpace(count, paddingInner, paddingOuter) {
    const space = count - paddingInner + paddingOuter * 2;
    return count ? space > 0 ? space : 1 : 0;
  }
  const Identity = 'identity';
  const Linear = 'linear';
  const Log = 'log';
  const Pow = 'pow';
  const Sqrt = 'sqrt';
  const Symlog = 'symlog';
  const Time = 'time';
  const UTC = 'utc';
  const Sequential = 'sequential';
  const Diverging = 'diverging';
  const Quantile = 'quantile';
  const Quantize = 'quantize';
  const Threshold = 'threshold';
  const Ordinal = 'ordinal';
  const Point = 'point';
  const Band = 'band';
  const BinOrdinal = 'bin-ordinal';
  // categories
  const Continuous = 'continuous';
  const Discrete = 'discrete';
  const Discretizing = 'discretizing';
  const Interpolating = 'interpolating';
  const Temporal = 'temporal';
  function invertRange(scale) {
    return function (_) {
      let lo = _[0], hi = _[1], t;
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      return [scale.invert(lo), scale.invert(hi)];
    };
  }
  function invertRangeExtent(scale) {
    return function (_) {
      const range = scale.range();
      let lo = _[0], hi = _[1], min = -1, max, t, i, n;
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      for ((i = 0, n = range.length); i < n; ++i) {
        if (range[i] >= lo && range[i] <= hi) {
          if (min < 0) min = i;
          max = i;
        }
      }
      if (min < 0) return undefined;
      lo = scale.invertExtent(range[min]);
      hi = scale.invertExtent(range[max]);
      return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];
    };
  }
  function band() {
    const scale = $.scaleOrdinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range;
    let range = [0, 1], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      const n = domain().length, reverse = range[1] < range[0], stop = range[1 - reverse], space = bandSpace(n, paddingInner, paddingOuter);
      let start = range[reverse - 0];
      step = (stop - start) / (space || 1);
      if (round) {
        step = Math.floor(step);
      }
      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round) {
        start = Math.round(start);
        bandwidth = Math.round(bandwidth);
      }
      const values = d3Array.range(n).map(i => start + step * i);
      return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function (_) {
      if (arguments.length) {
        domain(_);
        return rescale();
      } else {
        return domain();
      }
    };
    scale.range = function (_) {
      if (arguments.length) {
        range = [+_[0], +_[1]];
        return rescale();
      } else {
        return range.slice();
      }
    };
    scale.rangeRound = function (_) {
      range = [+_[0], +_[1]];
      round = true;
      return rescale();
    };
    scale.bandwidth = function () {
      return bandwidth;
    };
    scale.step = function () {
      return step;
    };
    scale.round = function (_) {
      if (arguments.length) {
        round = !!_;
        return rescale();
      } else {
        return round;
      }
    };
    scale.padding = function (_) {
      if (arguments.length) {
        paddingOuter = Math.max(0, Math.min(1, _));
        paddingInner = paddingOuter;
        return rescale();
      } else {
        return paddingInner;
      }
    };
    scale.paddingInner = function (_) {
      if (arguments.length) {
        paddingInner = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingInner;
      }
    };
    scale.paddingOuter = function (_) {
      if (arguments.length) {
        paddingOuter = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingOuter;
      }
    };
    scale.align = function (_) {
      if (arguments.length) {
        align = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return align;
      }
    };
    scale.invertRange = function (_) {
      // bail if range has null or undefined values
      if (_[0] == null || _[1] == null) return;
      const reverse = range[1] < range[0], values = reverse ? ordinalRange().reverse() : ordinalRange(), n = values.length - 1;
      let lo = +_[0], hi = +_[1], a, b, t;
      // bail if either range endpoint is invalid
      if (lo !== lo || hi !== hi) return;
      // order range inputs, bail if outside of scale range
      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }
      if (hi < values[0] || lo > range[1 - reverse]) return;
      // binary search to index into scale range
      a = Math.max(0, d3Array.bisectRight(values, lo) - 1);
      b = lo === hi ? a : d3Array.bisectRight(values, hi) - 1;
      // increment index a if lo is within padding gap
      if (lo - values[a] > bandwidth + 1e-10) ++a;
      if (reverse) {
        // map + swap
        t = a;
        a = n - b;
        b = n - t;
      }
      return a > b ? undefined : domain().slice(a, b + 1);
    };
    scale.invert = function (_) {
      const value = scale.invertRange([_, _]);
      return value ? value[0] : value;
    };
    scale.copy = function () {
      return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return rescale();
  }
  function pointish(scale) {
    const copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    scale.copy = function () {
      return pointish(copy());
    };
    return scale;
  }
  function point() {
    return pointish(band().paddingInner(1));
  }
  var map = Array.prototype.map;
  function numbers(_) {
    return map.call(_, vegaUtil.toNumber);
  }
  const slice = Array.prototype.slice;
  function scaleBinOrdinal() {
    let domain = [], range = [];
    function scale(x) {
      return x == null || x !== x ? undefined : range[(d3Array.bisect(domain, x) - 1) % range.length];
    }
    scale.domain = function (_) {
      if (arguments.length) {
        domain = numbers(_);
        return scale;
      } else {
        return domain.slice();
      }
    };
    scale.range = function (_) {
      if (arguments.length) {
        range = slice.call(_);
        return scale;
      } else {
        return range.slice();
      }
    };
    scale.tickFormat = function (count, specifier) {
      return $.tickFormat(domain[0], vegaUtil.peek(domain), count == null ? 10 : count, specifier);
    };
    scale.copy = function () {
      return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
    };
    return scale;
  }
  const scales = {};
  /**
  * Augment scales with their type and needed inverse methods.
  */
  function create(type, constructor, metadata) {
    const ctr = function scale() {
      const s = constructor();
      if (!s.invertRange) {
        s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;
      }
      s.type = type;
      return s;
    };
    ctr.metadata = vegaUtil.toSet(vegaUtil.array(metadata));
    return ctr;
  }
  function scale(type, scale, metadata) {
    if (arguments.length > 1) {
      scales[type] = create(type, scale, metadata);
      return this;
    } else {
      return isValidScaleType(type) ? scales[type] : undefined;
    }
  }
  // identity scale
  scale(Identity, $.scaleIdentity);
  // continuous scales
  scale(Linear, $.scaleLinear, Continuous);
  scale(Log, $.scaleLog, [Continuous, Log]);
  scale(Pow, $.scalePow, Continuous);
  scale(Sqrt, $.scaleSqrt, Continuous);
  scale(Symlog, $.scaleSymlog, Continuous);
  scale(Time, $.scaleTime, [Continuous, Temporal]);
  scale(UTC, $.scaleUtc, [Continuous, Temporal]);
  // sequential scales
  scale(Sequential, $.scaleSequential, [Continuous, Interpolating]);
  // backwards compat
  scale(`${Sequential}-${Linear}`, $.scaleSequential, [Continuous, Interpolating]);
  scale(`${Sequential}-${Log}`, $.scaleSequentialLog, [Continuous, Interpolating, Log]);
  scale(`${Sequential}-${Pow}`, $.scaleSequentialPow, [Continuous, Interpolating]);
  scale(`${Sequential}-${Sqrt}`, $.scaleSequentialSqrt, [Continuous, Interpolating]);
  scale(`${Sequential}-${Symlog}`, $.scaleSequentialSymlog, [Continuous, Interpolating]);
  // diverging scales
  scale(`${Diverging}-${Linear}`, $.scaleDiverging, [Continuous, Interpolating]);
  scale(`${Diverging}-${Log}`, $.scaleDivergingLog, [Continuous, Interpolating, Log]);
  scale(`${Diverging}-${Pow}`, $.scaleDivergingPow, [Continuous, Interpolating]);
  scale(`${Diverging}-${Sqrt}`, $.scaleDivergingSqrt, [Continuous, Interpolating]);
  scale(`${Diverging}-${Symlog}`, $.scaleDivergingSymlog, [Continuous, Interpolating]);
  // discretizing scales
  scale(Quantile, $.scaleQuantile, [Discretizing, Quantile]);
  scale(Quantize, $.scaleQuantize, Discretizing);
  scale(Threshold, $.scaleThreshold, Discretizing);
  // discrete scales
  scale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);
  scale(Ordinal, $.scaleOrdinal, Discrete);
  scale(Band, band, Discrete);
  scale(Point, point, Discrete);
  function isValidScaleType(type) {
    return vegaUtil.hasOwnProperty(scales, type);
  }
  function hasType(key, type) {
    const s = scales[key];
    return s && s.metadata[type];
  }
  function isContinuous(key) {
    return hasType(key, Continuous);
  }
  function isDiscrete(key) {
    return hasType(key, Discrete);
  }
  function isDiscretizing(key) {
    return hasType(key, Discretizing);
  }
  function isLogarithmic(key) {
    return hasType(key, Log);
  }
  function isTemporal(key) {
    return hasType(key, Temporal);
  }
  function isInterpolating(key) {
    return hasType(key, Interpolating);
  }
  function isQuantile(key) {
    return hasType(key, Quantile);
  }
  const scaleProps = ['clamp', 'base', 'constant', 'exponent'];
  function interpolateRange(interpolator, range) {
    const start = range[0], span = vegaUtil.peek(range) - start;
    return function (i) {
      return interpolator(start + i * span);
    };
  }
  function interpolateColors(colors, type, gamma) {
    return $$1.piecewise(interpolate(type || 'rgb', gamma), colors);
  }
  function quantizeInterpolator(interpolator, count) {
    const samples = new Array(count), n = count + 1;
    for (let i = 0; i < count; ) samples[i] = interpolator(++i / n);
    return samples;
  }
  function scaleCopy(scale) {
    const t = scale.type, s = scale.copy();
    s.type = t;
    return s;
  }
  function scaleFraction(scale$1, min, max) {
    const delta = max - min;
    let i, t, s;
    if (!delta || !Number.isFinite(delta)) {
      return vegaUtil.constant(0.5);
    } else {
      i = (t = scale$1.type).indexOf('-');
      t = i < 0 ? t : t.slice(i + 1);
      s = scale(t)().domain([min, max]).range([0, 1]);
      scaleProps.forEach(m => scale$1[m] ? s[m](scale$1[m]()) : 0);
      return s;
    }
  }
  function interpolate(type, gamma) {
    const interp = $__namespace[method(type)];
    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
  }
  function method(type) {
    return 'interpolate' + type.toLowerCase().split('-').map(s => s[0].toUpperCase() + s.slice(1)).join('');
  }
  const continuous = {
    blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',
    greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',
    greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',
    oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',
    purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',
    reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',
    blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',
    bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',
    greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',
    orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',
    purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',
    purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',
    purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',
    redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',
    yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',
    yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',
    yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',
    blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',
    brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',
    purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',
    purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',
    redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',
    redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',
    yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',
    redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',
    redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',
    pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',
    spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',
    viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',
    magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',
    inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',
    plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',
    cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',
    rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',
    sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',
    turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',
    browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',
    tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',
    teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',
    warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',
    goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',
    goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',
    goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',
    lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',
    lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',
    lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',
    lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',
    lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',
    darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',
    darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',
    darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',
    darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',
    darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'
  };
  const discrete = {
    category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',
    category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',
    category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',
    category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',
    tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',
    tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',
    accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',
    dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',
    paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',
    pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',
    pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',
    set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',
    set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',
    set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'
  };
  function colors(palette) {
    const n = palette.length / 6 | 0, c = new Array(n);
    for (let i = 0; i < n; ) {
      c[i] = '#' + palette.slice(i * 6, ++i * 6);
    }
    return c;
  }
  function apply(_, f) {
    for (const k in _) scheme(k, f(_[k]));
  }
  const schemes = {};
  apply(discrete, colors);
  apply(continuous, _ => interpolateColors(colors(_)));
  function scheme(name, scheme) {
    name = name && name.toLowerCase();
    if (arguments.length > 1) {
      schemes[name] = scheme;
      return this;
    } else {
      return schemes[name];
    }
  }
  const SymbolLegend = 'symbol';
  const DiscreteLegend = 'discrete';
  const GradientLegend = 'gradient';
  const defaultFormatter = value => vegaUtil.isArray(value) ? value.map(v => String(v)) : String(value);
  const ascending = (a, b) => a[1] - b[1];
  const descending = (a, b) => b[1] - a[1];
  /**
  * Determine the tick count or interval function.
  * @param {Scale} scale - The scale for which to generate tick values.
  * @param {*} count - The desired tick count or interval specifier.
  * @param {number} minStep - The desired minimum step between tick values.
  * @return {*} - The tick count or interval function.
  */
  function tickCount(scale, count, minStep) {
    let step;
    if (vegaUtil.isNumber(count)) {
      if (scale.bins) {
        count = Math.max(count, scale.bins.length);
      }
      if (minStep != null) {
        count = Math.min(count, Math.floor(vegaUtil.span(scale.domain()) / minStep || 1));
      }
    }
    if (vegaUtil.isObject(count)) {
      step = count.step;
      count = count.interval;
    }
    if (vegaUtil.isString(count)) {
      count = scale.type === Time ? vegaTime.timeInterval(count) : scale.type == UTC ? vegaTime.utcInterval(count) : vegaUtil.error('Only time and utc scales accept interval strings.');
      if (step) count = count.every(step);
    }
    return count;
  }
  /**
  * Filter a set of candidate tick values, ensuring that only tick values
  * that lie within the scale range are included.
  * @param {Scale} scale - The scale for which to generate tick values.
  * @param {Array<*>} ticks - The candidate tick values.
  * @param {*} count - The tick count or interval function.
  * @return {Array<*>} - The filtered tick values.
  */
  function validTicks(scale, ticks, count) {
    let range = scale.range(), lo = range[0], hi = vegaUtil.peek(range), cmp = ascending;
    if (lo > hi) {
      range = hi;
      hi = lo;
      lo = range;
      cmp = descending;
    }
    lo = Math.floor(lo);
    hi = Math.ceil(hi);
    // filter ticks to valid values within the range
    // additionally sort ticks in range order (#2579)
    ticks = ticks.map(v => [v, scale(v)]).filter(_ => lo <= _[1] && _[1] <= hi).sort(cmp).map(_ => _[0]);
    if (count > 0 && ticks.length > 1) {
      const endpoints = [ticks[0], vegaUtil.peek(ticks)];
      while (ticks.length > count && ticks.length >= 3) {
        ticks = ticks.filter((_, i) => !(i % 2));
      }
      if (ticks.length < 3) {
        ticks = endpoints;
      }
    }
    return ticks;
  }
  /**
  * Generate tick values for the given scale and approximate tick count or
  * interval value. If the scale has a 'ticks' method, it will be used to
  * generate the ticks, with the count argument passed as a parameter. If the
  * scale lacks a 'ticks' method, the full scale domain will be returned.
  * @param {Scale} scale - The scale for which to generate tick values.
  * @param {*} [count] - The approximate number of desired ticks.
  * @return {Array<*>} - The generated tick values.
  */
  function tickValues(scale, count) {
    return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
  }
  /**
  * Generate a label format function for a scale. If the scale has a
  * 'tickFormat' method, it will be used to generate the formatter, with the
  * count and specifier arguments passed as parameters. If the scale lacks a
  * 'tickFormat' method, the returned formatter performs simple string coercion.
  * If the input scale is a logarithmic scale and the format specifier does not
  * indicate a desired decimal precision, a special variable precision formatter
  * that automatically trims trailing zeroes will be generated.
  * @param {Scale} scale - The scale for which to generate the label formatter.
  * @param {*} [count] - The approximate number of desired ticks.
  * @param {string} [specifier] - The format specifier. Must be a legal d3
  *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or
  *   time multi-format specifier object.
  * @return {function(*):string} - The generated label formatter.
  */
  function tickFormat(locale, scale, count, specifier, formatType, noSkip) {
    const type = scale.type;
    let format = defaultFormatter;
    if (type === Time || formatType === Time) {
      format = locale.timeFormat(specifier);
    } else if (type === UTC || formatType === UTC) {
      format = locale.utcFormat(specifier);
    } else if (isLogarithmic(type)) {
      const varfmt = locale.formatFloat(specifier);
      if (noSkip || scale.bins) {
        format = varfmt;
      } else {
        const test = tickLog(scale, count, false);
        format = _ => test(_) ? varfmt(_) : '';
      }
    } else if (scale.tickFormat) {
      // if d3 scale has tickFormat, it must be continuous
      const d = scale.domain();
      format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);
    } else if (specifier) {
      format = locale.format(specifier);
    }
    return format;
  }
  function tickLog(scale, count, values) {
    const ticks = tickValues(scale, count), base = scale.base(), logb = Math.log(base), k = Math.max(1, base * count / ticks.length);
    // apply d3-scale's log format filter criteria
    const test = d => {
      let i = d / Math.pow(base, Math.round(Math.log(d) / logb));
      if (i * base < base - 0.5) i *= base;
      return i <= k;
    };
    return values ? ticks.filter(test) : test;
  }
  const symbols = {
    [Quantile]: 'quantiles',
    [Quantize]: 'thresholds',
    [Threshold]: 'domain'
  };
  const formats = {
    [Quantile]: 'quantiles',
    [Quantize]: 'domain'
  };
  function labelValues(scale, count) {
    return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);
  }
  function thresholdFormat(locale, scale, specifier) {
    const _ = scale[formats[scale.type]](), n = _.length;
    let d = n > 1 ? _[1] - _[0] : _[0], i;
    for (i = 1; i < n; ++i) {
      d = Math.min(d, _[i] - _[i - 1]);
    }
    // tickCount = 3 ticks times 10 for increased resolution
    return locale.formatSpan(0, d, 3 * 10, specifier);
  }
  function thresholdValues(thresholds) {
    const values = [-Infinity].concat(thresholds);
    values.max = +Infinity;
    return values;
  }
  function binValues(bins) {
    const values = bins.slice(0, -1);
    values.max = vegaUtil.peek(bins);
    return values;
  }
  const isDiscreteRange = scale => symbols[scale.type] || scale.bins;
  function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {
    const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);
    return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);
  }
  const formatRange = format => (value, index, array) => {
    const limit = get(array[index + 1], get(array.max, +Infinity)), lo = formatValue(value, format), hi = formatValue(limit, format);
    return lo && hi ? lo + ' \u2013 ' + hi : hi ? '< ' + hi : '\u2265 ' + lo;
  };
  const get = (value, dflt) => value != null ? value : dflt;
  const formatDiscrete = format => (value, index) => index ? format(value) : null;
  const formatPoint = format => value => format(value);
  const formatValue = (value, format) => Number.isFinite(value) ? format(value) : null;
  function labelFraction(scale) {
    const domain = scale.domain(), count = domain.length - 1;
    let lo = +domain[0], hi = +vegaUtil.peek(domain), span = hi - lo;
    if (scale.type === Threshold) {
      const adjust = count ? span / count : 0.1;
      lo -= adjust;
      hi += adjust;
      span = hi - lo;
    }
    return value => (value - lo) / span;
  }
  function format(locale, scale, specifier, formatType) {
    const type = formatType || scale.type;
    // replace abbreviated time specifiers to improve screen reader experience
    if (vegaUtil.isString(specifier) && isTemporal(type)) {
      specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');
    }
    return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);
  }
  function domainCaption(locale, scale, opt) {
    opt = opt || ({});
    const max = Math.max(3, opt.maxlen || 7), fmt = format(locale, scale, opt.format, opt.formatType);
    // if scale breaks domain into bins, describe boundaries
    if (isDiscretizing(scale.type)) {
      const v = labelValues(scale).slice(1).map(fmt), n = v.length;
      return `${n} boundar${n === 1 ? 'y' : 'ies'}: ${v.join(', ')}`;
          // if scale domain is discrete, list values
} else // if scale domain is discrete, list values
    if (isDiscrete(scale.type)) {
      const d = scale.domain(), n = d.length, v = n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');
      return `${n} value${n === 1 ? '' : 's'}: ${v}`;
          // if scale domain is continuous, describe value range
} else // if scale domain is continuous, describe value range
    {
      const d = scale.domain();
      return `values from ${fmt(d[0])} to ${fmt(vegaUtil.peek(d))}`;
    }
  }
  Object.defineProperty(exports, 'scaleImplicit', {
    enumerable: true,
    get: function () {
      return $.scaleImplicit;
    }
  });
  exports.Band = Band;
  exports.BinOrdinal = BinOrdinal;
  exports.DiscreteLegend = DiscreteLegend;
  exports.Diverging = Diverging;
  exports.GradientLegend = GradientLegend;
  exports.Identity = Identity;
  exports.Linear = Linear;
  exports.Log = Log;
  exports.Ordinal = Ordinal;
  exports.Point = Point;
  exports.Pow = Pow;
  exports.Quantile = Quantile;
  exports.Quantize = Quantize;
  exports.Sequential = Sequential;
  exports.Sqrt = Sqrt;
  exports.SymbolLegend = SymbolLegend;
  exports.Symlog = Symlog;
  exports.Threshold = Threshold;
  exports.Time = Time;
  exports.UTC = UTC;
  exports.bandSpace = bandSpace;
  exports.domainCaption = domainCaption;
  exports.interpolate = interpolate;
  exports.interpolateColors = interpolateColors;
  exports.interpolateRange = interpolateRange;
  exports.isContinuous = isContinuous;
  exports.isDiscrete = isDiscrete;
  exports.isDiscretizing = isDiscretizing;
  exports.isInterpolating = isInterpolating;
  exports.isLogarithmic = isLogarithmic;
  exports.isQuantile = isQuantile;
  exports.isTemporal = isTemporal;
  exports.isValidScaleType = isValidScaleType;
  exports.labelFormat = labelFormat;
  exports.labelFraction = labelFraction;
  exports.labelValues = labelValues;
  exports.quantizeInterpolator = quantizeInterpolator;
  exports.scale = scale;
  exports.scaleCopy = scaleCopy;
  exports.scaleFraction = scaleFraction;
  exports.scheme = scheme;
  exports.tickCount = tickCount;
  exports.tickFormat = tickFormat;
  exports.tickValues = tickValues;
  exports.validTicks = validTicks;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","d3-array":"7CLUA","d3-scale":"2UZ4X","d3-interpolate":"6eByj","vega-time":"2Sl4A"}],"4RLpd":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-scale'), require('vega-util'), require('d3-array'), require('d3-interpolate')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-scale', 'vega-util', 'd3-array', 'd3-interpolate'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.d3, global.d3));
})(this, function (exports, vegaDataflow, vegaScale, vegaUtil, d3Array, d3Interpolate) {
  "use strict";
  /**
  * Generates axis ticks for visualizing a spatial scale.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Scale} params.scale - The scale to generate ticks for.
  * @param {*} [params.count=10] - The approximate number of ticks, or
  *   desired tick interval, to use.
  * @param {Array<*>} [params.values] - The exact tick values to use.
  *   These must be legal domain values for the provided scale.
  *   If provided, the count argument is ignored.
  * @param {function(*):string} [params.formatSpecifier] - A format specifier
  *   to use in conjunction with scale.tickFormat. Legal values are
  *   any valid d3 4.0 format specifier.
  * @param {function(*):string} [params.format] - The format function to use.
  *   If provided, the formatSpecifier argument is ignored.
  */
  function AxisTicks(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(AxisTicks, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !_.modified()) {
        return pulse.StopPropagation;
      }
      var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), ticks = this.value, scale = _.scale, tally = _.count == null ? _.values ? _.values.length : 10 : _.count, count = vegaScale.tickCount(scale, tally, _.minstep), format = _.format || vegaScale.tickFormat(locale, scale, count, _.formatSpecifier, _.formatType, !!_.values), values = _.values ? vegaScale.validTicks(scale, _.values, count) : vegaScale.tickValues(scale, count);
      if (ticks) out.rem = ticks;
      ticks = values.map((value, i) => vegaDataflow.ingest({
        index: i / (values.length - 1 || 1),
        value: value,
        label: format(value)
      }));
      if (_.extra && ticks.length) {
        // add an extra tick pegged to the initial domain value
        // this is used to generate axes with 'binned' domains
        ticks.push(vegaDataflow.ingest({
          index: -1,
          extra: {
            value: ticks[0].value
          },
          label: ''
        }));
      }
      out.source = ticks;
      out.add = ticks;
      this.value = ticks;
      return out;
    }
  });
  /**
  * Joins a set of data elements against a set of visual items.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): object} [params.item] - An item generator function.
  * @param {function(object): *} [params.key] - The key field associating data and visual items.
  */
  function DataJoin(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  function defaultItemCreate() {
    return vegaDataflow.ingest({});
  }
  function newMap(key) {
    const map = vegaUtil.fastmap().test(t => t.exit);
    map.lookup = t => map.get(key(t));
    return map;
  }
  vegaUtil.inherits(DataJoin, vegaDataflow.Transform, {
    transform(_, pulse) {
      var df = pulse.dataflow, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), item = _.item || defaultItemCreate, key = _.key || vegaDataflow.tupleid, map = this.value;
      // prevent transient (e.g., hover) requests from
      // cascading across marks derived from marks
      if (vegaUtil.isArray(out.encode)) {
        out.encode = null;
      }
      if (map && (_.modified('key') || pulse.modified(key))) {
        vegaUtil.error('DataJoin does not support modified key function or fields.');
      }
      if (!map) {
        pulse = pulse.addAll();
        this.value = map = newMap(key);
      }
      pulse.visit(pulse.ADD, t => {
        const k = key(t);
        let x = map.get(k);
        if (x) {
          if (x.exit) {
            map.empty--;
            out.add.push(x);
          } else {
            out.mod.push(x);
          }
        } else {
          x = item(t);
          map.set(k, x);
          out.add.push(x);
        }
        x.datum = t;
        x.exit = false;
      });
      pulse.visit(pulse.MOD, t => {
        const k = key(t), x = map.get(k);
        if (x) {
          x.datum = t;
          out.mod.push(x);
        }
      });
      pulse.visit(pulse.REM, t => {
        const k = key(t), x = map.get(k);
        if (t === x.datum && !x.exit) {
          out.rem.push(x);
          x.exit = true;
          ++map.empty;
        }
      });
      if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');
      if (pulse.clean() || _.clean && map.empty > df.cleanThreshold) {
        df.runAfter(map.clean);
      }
      return out;
    }
  });
  /**
  * Invokes encoding functions for visual items.
  * @constructor
  * @param {object} params - The parameters to the encoding functions. This
  *   parameter object will be passed through to all invoked encoding functions.
  * @param {object} [params.mod=false] - Flag indicating if tuples in the input
  *   mod set that are unmodified by encoders should be included in the output.
  * @param {object} param.encoders - The encoding functions
  * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
  * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
  * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
  */
  function Encode(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(Encode, vegaDataflow.Transform, {
    transform(_, pulse) {
      var out = pulse.fork(pulse.ADD_REM), fmod = _.mod || false, encoders = _.encoders, encode = pulse.encode;
      // if an array, the encode directive includes additional sets
      // that must be defined in order for the primary set to be invoked
      // e.g., only run the update set if the hover set is defined
      if (vegaUtil.isArray(encode)) {
        if (out.changed() || encode.every(e => encoders[e])) {
          encode = encode[0];
          out.encode = null;
        } else {
          return pulse.StopPropagation;
        }
      }
      // marshall encoder functions
      var reenter = encode === 'enter', update = encoders.update || vegaUtil.falsy, enter = encoders.enter || vegaUtil.falsy, exit = encoders.exit || vegaUtil.falsy, set = (encode && !reenter ? encoders[encode] : update) || vegaUtil.falsy;
      if (pulse.changed(pulse.ADD)) {
        pulse.visit(pulse.ADD, t => {
          enter(t, _);
          update(t, _);
        });
        out.modifies(enter.output);
        out.modifies(update.output);
        if (set !== vegaUtil.falsy && set !== update) {
          pulse.visit(pulse.ADD, t => {
            set(t, _);
          });
          out.modifies(set.output);
        }
      }
      if (pulse.changed(pulse.REM) && exit !== vegaUtil.falsy) {
        pulse.visit(pulse.REM, t => {
          exit(t, _);
        });
        out.modifies(exit.output);
      }
      if (reenter || set !== vegaUtil.falsy) {
        const flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);
        if (reenter) {
          pulse.visit(flag, t => {
            const mod = enter(t, _) || fmod;
            if (set(t, _) || mod) out.mod.push(t);
          });
          if (out.mod.length) out.modifies(enter.output);
        } else {
          pulse.visit(flag, t => {
            if (set(t, _) || fmod) out.mod.push(t);
          });
        }
        if (out.mod.length) out.modifies(set.output);
      }
      return out.changed() ? out : pulse.StopPropagation;
    }
  });
  /**
  * Generates legend entries for visualizing a scale.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Scale} params.scale - The scale to generate items for.
  * @param {*} [params.count=5] - The approximate number of items, or
  *   desired tick interval, to use.
  * @param {*} [params.limit] - The maximum number of entries to
  *   include in a symbol legend.
  * @param {Array<*>} [params.values] - The exact tick values to use.
  *   These must be legal domain values for the provided scale.
  *   If provided, the count argument is ignored.
  * @param {string} [params.formatSpecifier] - A format specifier
  *   to use in conjunction with scale.tickFormat. Legal values are
  *   any valid D3 format specifier string.
  * @param {function(*):string} [params.format] - The format function to use.
  *   If provided, the formatSpecifier argument is ignored.
  */
  function LegendEntries(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  vegaUtil.inherits(LegendEntries, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value != null && !_.modified()) {
        return pulse.StopPropagation;
      }
      var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), items = this.value, type = _.type || vegaScale.SymbolLegend, scale = _.scale, limit = +_.limit, count = vegaScale.tickCount(scale, _.count == null ? 5 : _.count, _.minstep), lskip = !!_.values || type === vegaScale.SymbolLegend, format = _.format || vegaScale.labelFormat(locale, scale, count, type, _.formatSpecifier, _.formatType, lskip), values = _.values || vegaScale.labelValues(scale, count), domain, fraction, size, offset, ellipsis;
      if (items) out.rem = items;
      if (type === vegaScale.SymbolLegend) {
        if (limit && values.length > limit) {
          pulse.dataflow.warn('Symbol legend count exceeds limit, filtering items.');
          items = values.slice(0, limit - 1);
          ellipsis = true;
        } else {
          items = values;
        }
        if (vegaUtil.isFunction(size = _.size)) {
          // if first value maps to size zero, remove from list (vega#717)
          if (!_.values && scale(items[0]) === 0) {
            items = items.slice(1);
          }
          // compute size offset for legend entries
          offset = items.reduce((max, value) => Math.max(max, size(value, _)), 0);
        } else {
          size = vegaUtil.constant(offset = size || 8);
        }
        items = items.map((value, index) => vegaDataflow.ingest({
          index: index,
          label: format(value, index, items),
          value: value,
          offset: offset,
          size: size(value, _)
        }));
        if (ellipsis) {
          ellipsis = values[items.length];
          items.push(vegaDataflow.ingest({
            index: items.length,
            label: `\u2026${values.length - items.length} entries`,
            value: ellipsis,
            offset: offset,
            size: size(ellipsis, _)
          }));
        }
      } else if (type === vegaScale.GradientLegend) {
        (domain = scale.domain(), fraction = vegaScale.scaleFraction(scale, domain[0], vegaUtil.peek(domain)));
        // if automatic label generation produces 2 or fewer values,
        // use the domain end points instead (fixes vega/vega#1364)
        if (values.length < 3 && !_.values && domain[0] !== vegaUtil.peek(domain)) {
          values = [domain[0], vegaUtil.peek(domain)];
        }
        items = values.map((value, index) => vegaDataflow.ingest({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: fraction(value)
        }));
      } else {
        size = values.length - 1;
        fraction = vegaScale.labelFraction(scale);
        items = values.map((value, index) => vegaDataflow.ingest({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: index ? fraction(value) : 0,
          perc2: index === size ? 1 : fraction(values[index + 1])
        }));
      }
      out.source = items;
      out.add = items;
      this.value = items;
      return out;
    }
  });
  const sourceX = t => t.source.x;
  const sourceY = t => t.source.y;
  const targetX = t => t.target.x;
  const targetY = t => t.target.y;
  /**
  * Layout paths linking source and target elements.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function LinkPath(params) {
    vegaDataflow.Transform.call(this, {}, params);
  }
  LinkPath.Definition = {
    'type': 'LinkPath',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'sourceX',
      'type': 'field',
      'default': 'source.x'
    }, {
      'name': 'sourceY',
      'type': 'field',
      'default': 'source.y'
    }, {
      'name': 'targetX',
      'type': 'field',
      'default': 'target.x'
    }, {
      'name': 'targetY',
      'type': 'field',
      'default': 'target.y'
    }, {
      'name': 'orient',
      'type': 'enum',
      'default': 'vertical',
      'values': ['horizontal', 'vertical', 'radial']
    }, {
      'name': 'shape',
      'type': 'enum',
      'default': 'line',
      'values': ['line', 'arc', 'curve', 'diagonal', 'orthogonal']
    }, {
      'name': 'require',
      'type': 'signal'
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'path'
    }]
  };
  vegaUtil.inherits(LinkPath, vegaDataflow.Transform, {
    transform(_, pulse) {
      var sx = _.sourceX || sourceX, sy = _.sourceY || sourceY, tx = _.targetX || targetX, ty = _.targetY || targetY, as = _.as || 'path', orient = _.orient || 'vertical', shape = _.shape || 'line', path = Paths.get(shape + '-' + orient) || Paths.get(shape);
      if (!path) {
        vegaUtil.error('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));
      }
      pulse.visit(pulse.SOURCE, t => {
        t[as] = path(sx(t), sy(t), tx(t), ty(t));
      });
      return pulse.reflow(_.modified()).modifies(as);
    }
  });
  const line = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;
  const lineR = (sa, sr, ta, tr) => line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  const arc = (sx, sy, tx, ty) => {
    var dx = tx - sx, dy = ty - sy, rr = Math.sqrt(dx * dx + dy * dy) / 2, ra = 180 * Math.atan2(dy, dx) / Math.PI;
    return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;
  };
  const arcR = (sa, sr, ta, tr) => arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  const curve = (sx, sy, tx, ty) => {
    const dx = tx - sx, dy = ty - sy, ix = 0.2 * (dx + dy), iy = 0.2 * (dy - dx);
    return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;
  };
  const curveR = (sa, sr, ta, tr) => curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  const orthoX = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;
  const orthoY = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;
  const orthoR = (sa, sr, ta, tr) => {
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
    return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;
  };
  const diagonalX = (sx, sy, tx, ty) => {
    const m = (sx + tx) / 2;
    return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;
  };
  const diagonalY = (sx, sy, tx, ty) => {
    const m = (sy + ty) / 2;
    return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;
  };
  const diagonalR = (sa, sr, ta, tr) => {
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), mr = (sr + tr) / 2;
    return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;
  };
  const Paths = vegaUtil.fastmap({
    'line': line,
    'line-radial': lineR,
    'arc': arc,
    'arc-radial': arcR,
    'curve': curve,
    'curve-radial': curveR,
    'orthogonal-horizontal': orthoX,
    'orthogonal-vertical': orthoY,
    'orthogonal-radial': orthoR,
    'diagonal-horizontal': diagonalX,
    'diagonal-vertical': diagonalY,
    'diagonal-radial': diagonalR
  });
  /**
  * Pie and donut chart layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to size pie segments.
  * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
  * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
  * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
  */
  function Pie(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Pie.Definition = {
    'type': 'Pie',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'startAngle',
      'type': 'number',
      'default': 0
    }, {
      'name': 'endAngle',
      'type': 'number',
      'default': 6.283185307179586
    }, {
      'name': 'sort',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['startAngle', 'endAngle']
    }]
  };
  vegaUtil.inherits(Pie, vegaDataflow.Transform, {
    transform(_, pulse) {
      var as = _.as || ['startAngle', 'endAngle'], startAngle = as[0], endAngle = as[1], field = _.field || vegaUtil.one, start = _.startAngle || 0, stop = _.endAngle != null ? _.endAngle : 2 * Math.PI, data = pulse.source, values = data.map(field), n = values.length, a = start, k = (stop - start) / d3Array.sum(values), index = d3Array.range(n), i, t, v;
      if (_.sort) {
        index.sort((a, b) => values[a] - values[b]);
      }
      for (i = 0; i < n; ++i) {
        v = values[index[i]];
        t = data[index[i]];
        t[startAngle] = a;
        t[endAngle] = a += v * k;
      }
      this.value = values;
      return pulse.reflow(_.modified()).modifies(as);
    }
  });
  const DEFAULT_COUNT = 5;
  function includeZero(scale) {
    const type = scale.type;
    return !scale.bins && (type === vegaScale.Linear || type === vegaScale.Pow || type === vegaScale.Sqrt);
  }
  function includePad(type) {
    return vegaScale.isContinuous(type) && type !== vegaScale.Sequential;
  }
  const SKIP = vegaUtil.toSet(['set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount', 'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins', 'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma']);
  /**
  * Maintains a scale function mapping data values to visual channels.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function Scale(params) {
    vegaDataflow.Transform.call(this, null, params);
    this.modified(true);
  }
  vegaUtil.inherits(Scale, vegaDataflow.Transform, {
    transform(_, pulse) {
      var df = pulse.dataflow, scale = this.value, key = scaleKey(_);
      if (!scale || key !== scale.type) {
        this.value = scale = vegaScale.scale(key)();
      }
      for (key in _) if (!SKIP[key]) {
        // padding is a scale property for band/point but not others
        if (key === 'padding' && includePad(scale.type)) continue;
        // invoke scale property setter, raise warning if not found
        vegaUtil.isFunction(scale[key]) ? scale[key](_[key]) : df.warn('Unsupported scale property: ' + key);
      }
      configureRange(scale, _, configureBins(scale, _, configureDomain(scale, _, df)));
      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
  });
  function scaleKey(_) {
    var t = _.type, d = '', n;
    // backwards compatibility pre Vega 5.
    if (t === vegaScale.Sequential) return vegaScale.Sequential + '-' + vegaScale.Linear;
    if (isContinuousColor(_)) {
      n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
      d = n === 2 ? vegaScale.Sequential + '-' : n === 3 ? vegaScale.Diverging + '-' : '';
    }
    return (d + t || vegaScale.Linear).toLowerCase();
  }
  function isContinuousColor(_) {
    const t = _.type;
    return vegaScale.isContinuous(t) && t !== vegaScale.Time && t !== vegaScale.UTC && (_.scheme || _.range && _.range.length && _.range.every(vegaUtil.isString));
  }
  function configureDomain(scale, _, df) {
    // check raw domain, if provided use that and exit early
    const raw = rawDomain(scale, _.domainRaw, df);
    if (raw > -1) return raw;
    var domain = _.domain, type = scale.type, zero = _.zero || _.zero === undefined && includeZero(scale), n, mid;
    if (!domain) return 0;
    // adjust continuous domain for minimum pixel padding
    if (includePad(type) && _.padding && domain[0] !== vegaUtil.peek(domain)) {
      domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
    }
    // adjust domain based on zero, min, max settings
    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
      n = (domain = domain.slice()).length - 1 || 1;
      if (zero) {
        if (domain[0] > 0) domain[0] = 0;
        if (domain[n] < 0) domain[n] = 0;
      }
      if (_.domainMin != null) domain[0] = _.domainMin;
      if (_.domainMax != null) domain[n] = _.domainMax;
      if (_.domainMid != null) {
        mid = _.domainMid;
        const i = mid > domain[n] ? n + 1 : mid < domain[0] ? 0 : n;
        if (i !== n) df.warn('Scale domainMid exceeds domain min or max.', mid);
        domain.splice(i, 0, mid);
      }
    }
    // set the scale domain
    scale.domain(domainCheck(type, domain, df));
    // if ordinal scale domain is defined, prevent implicit
    // domain construction as side-effect of scale lookup
    if (type === vegaScale.Ordinal) {
      scale.unknown(_.domainImplicit ? vegaScale.scaleImplicit : undefined);
    }
    // perform 'nice' adjustment as requested
    if (_.nice && scale.nice) {
      scale.nice(_.nice !== true && vegaScale.tickCount(scale, _.nice) || null);
    }
    // return the cardinality of the domain
    return domain.length;
  }
  function rawDomain(scale, raw, df) {
    if (raw) {
      scale.domain(domainCheck(scale.type, raw, df));
      return raw.length;
    } else {
      return -1;
    }
  }
  function padDomain(type, domain, range, pad, exponent, constant) {
    var span = Math.abs(vegaUtil.peek(range) - range[0]), frac = span / (span - 2 * pad), d = type === vegaScale.Log ? vegaUtil.zoomLog(domain, null, frac) : type === vegaScale.Sqrt ? vegaUtil.zoomPow(domain, null, frac, 0.5) : type === vegaScale.Pow ? vegaUtil.zoomPow(domain, null, frac, exponent || 1) : type === vegaScale.Symlog ? vegaUtil.zoomSymlog(domain, null, frac, constant || 1) : vegaUtil.zoomLinear(domain, null, frac);
    domain = domain.slice();
    domain[0] = d[0];
    domain[domain.length - 1] = d[1];
    return domain;
  }
  function domainCheck(type, domain, df) {
    if (vegaScale.isLogarithmic(type)) {
      // sum signs of domain values
      // if all pos or all neg, abs(sum) === domain.length
      var s = Math.abs(domain.reduce((s, v) => s + (v < 0 ? -1 : v > 0 ? 1 : 0), 0));
      if (s !== domain.length) {
        df.warn('Log scale domain includes zero: ' + vegaUtil.stringValue(domain));
      }
    }
    return domain;
  }
  function configureBins(scale, _, count) {
    let bins = _.bins;
    if (bins && !vegaUtil.isArray(bins)) {
      // generate bin boundary array
      const domain = scale.domain(), lo = domain[0], hi = vegaUtil.peek(domain), step = bins.step;
      let start = bins.start == null ? lo : bins.start, stop = bins.stop == null ? hi : bins.stop;
      if (!step) vegaUtil.error('Scale bins parameter missing step property.');
      if (start < lo) start = step * Math.ceil(lo / step);
      if (stop > hi) stop = step * Math.floor(hi / step);
      bins = d3Array.range(start, stop + step / 2, step);
    }
    if (bins) {
      // assign bin boundaries to scale instance
      scale.bins = bins;
    } else if (scale.bins) {
      // no current bins, remove bins if previously set
      delete scale.bins;
    }
    // special handling for bin-ordinal scales
    if (scale.type === vegaScale.BinOrdinal) {
      if (!bins) {
        // the domain specifies the bins
        scale.bins = scale.domain();
      } else if (!_.domain && !_.domainRaw) {
        // the bins specify the domain
        scale.domain(bins);
        count = bins.length;
      }
    }
    // return domain cardinality
    return count;
  }
  function configureRange(scale, _, count) {
    var type = scale.type, round = _.round || false, range = _.range;
    // if range step specified, calculate full range extent
    if (_.rangeStep != null) {
      range = configureRangeStep(type, _, count);
          // else if a range scheme is defined, use that
} else // else if a range scheme is defined, use that
    if (_.scheme) {
      range = configureScheme(type, _, count);
      if (vegaUtil.isFunction(range)) {
        if (scale.interpolator) {
          return scale.interpolator(range);
        } else {
          vegaUtil.error(`Scale type ${type} does not support interpolating color schemes.`);
        }
      }
    }
    // given a range array for an interpolating scale, convert to interpolator
    if (range && vegaScale.isInterpolating(type)) {
      return scale.interpolator(vegaScale.interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma));
    }
    // configure rounding / interpolation
    if (range && _.interpolate && scale.interpolate) {
      scale.interpolate(vegaScale.interpolate(_.interpolate, _.interpolateGamma));
    } else if (vegaUtil.isFunction(scale.round)) {
      scale.round(round);
    } else if (vegaUtil.isFunction(scale.rangeRound)) {
      scale.interpolate(round ? d3Interpolate.interpolateRound : d3Interpolate.interpolate);
    }
    if (range) scale.range(flip(range, _.reverse));
  }
  function configureRangeStep(type, _, count) {
    if (type !== vegaScale.Band && type !== vegaScale.Point) {
      vegaUtil.error('Only band and point scales support rangeStep.');
    }
    // calculate full range based on requested step size and padding
    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0, inner = type === vegaScale.Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
    return [0, _.rangeStep * vegaScale.bandSpace(count, inner, outer)];
  }
  function configureScheme(type, _, count) {
    var extent = _.schemeExtent, name, scheme;
    if (vegaUtil.isArray(_.scheme)) {
      scheme = vegaScale.interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
    } else {
      name = _.scheme.toLowerCase();
      scheme = vegaScale.scheme(name);
      if (!scheme) vegaUtil.error(`Unrecognized scheme name: ${_.scheme}`);
    }
    // determine size for potential discrete range
    count = type === vegaScale.Threshold ? count + 1 : type === vegaScale.BinOrdinal ? count - 1 : type === vegaScale.Quantile || type === vegaScale.Quantize ? +_.schemeCount || DEFAULT_COUNT : count;
    // adjust and/or quantize scheme as appropriate
    return vegaScale.isInterpolating(type) ? adjustScheme(scheme, extent, _.reverse) : vegaUtil.isFunction(scheme) ? vegaScale.quantizeInterpolator(adjustScheme(scheme, extent), count) : type === vegaScale.Ordinal ? scheme : scheme.slice(0, count);
  }
  function adjustScheme(scheme, extent, reverse) {
    return vegaUtil.isFunction(scheme) && (extent || reverse) ? vegaScale.interpolateRange(scheme, flip(extent || [0, 1], reverse)) : scheme;
  }
  function flip(array, reverse) {
    return reverse ? array.slice().reverse() : array;
  }
  /**
  * Sorts scenegraph items in the pulse source array.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(*,*): number} [params.sort] - A comparator
  *   function for sorting tuples.
  */
  function SortItems(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  vegaUtil.inherits(SortItems, vegaDataflow.Transform, {
    transform(_, pulse) {
      const mod = _.modified('sort') || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified('datum');
      if (mod) pulse.source.sort(vegaDataflow.stableCompare(_.sort));
      this.modified(mod);
      return pulse;
    }
  });
  const Zero = 'zero', Center = 'center', Normalize = 'normalize', DefOutput = ['y0', 'y1'];
  /**
  * Stack layout for visualization elements.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to stack.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
  * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
  * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.
  */
  function Stack(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Stack.Definition = {
    'type': 'Stack',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'offset',
      'type': 'enum',
      'default': Zero,
      'values': [Zero, Center, Normalize]
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': DefOutput
    }]
  };
  vegaUtil.inherits(Stack, vegaDataflow.Transform, {
    transform(_, pulse) {
      var as = _.as || DefOutput, y0 = as[0], y1 = as[1], sort = vegaDataflow.stableCompare(_.sort), field = _.field || vegaUtil.one, stack = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero, groups, i, n, max;
      // partition, sum, and sort the stack groups
      groups = partition(pulse.source, _.groupby, sort, field);
      // compute stack layouts per group
      for ((i = 0, n = groups.length, max = groups.max); i < n; ++i) {
        stack(groups[i], max, field, y0, y1);
      }
      return pulse.reflow(_.modified()).modifies(as);
    }
  });
  function stackCenter(group, max, field, y0, y1) {
    var last = (max - group.sum) / 2, m = group.length, j = 0, t;
    for (; j < m; ++j) {
      t = group[j];
      t[y0] = last;
      t[y1] = last += Math.abs(field(t));
    }
  }
  function stackNormalize(group, max, field, y0, y1) {
    var scale = 1 / group.sum, last = 0, m = group.length, j = 0, v = 0, t;
    for (; j < m; ++j) {
      t = group[j];
      t[y0] = last;
      t[y1] = last = scale * (v += Math.abs(field(t)));
    }
  }
  function stackZero(group, max, field, y0, y1) {
    var lastPos = 0, lastNeg = 0, m = group.length, j = 0, v, t;
    for (; j < m; ++j) {
      t = group[j];
      v = +field(t);
      if (v < 0) {
        t[y0] = lastNeg;
        t[y1] = lastNeg += v;
      } else {
        t[y0] = lastPos;
        t[y1] = lastPos += v;
      }
    }
  }
  function partition(data, groupby, sort, field) {
    var groups = [], get = f => f(t), map, i, n, m, t, k, g, s, max;
    // partition data points into stack groups
    if (groupby == null) {
      groups.push(data.slice());
    } else {
      for ((map = {}, i = 0, n = data.length); i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
          map[k] = g = [];
          groups.push(g);
        }
        g.push(t);
      }
    }
    // compute sums of groups, sort groups as needed
    for ((k = 0, max = 0, m = groups.length); k < m; ++k) {
      g = groups[k];
      for ((i = 0, s = 0, n = g.length); i < n; ++i) {
        s += Math.abs(field(g[i]));
      }
      g.sum = s;
      if (s > max) max = s;
      if (sort) g.sort(sort);
    }
    groups.max = max;
    return groups;
  }
  exports.axisticks = AxisTicks;
  exports.datajoin = DataJoin;
  exports.encode = Encode;
  exports.legendentries = LegendEntries;
  exports.linkpath = LinkPath;
  exports.pie = Pie;
  exports.scale = Scale;
  exports.sortitems = SortItems;
  exports.stack = Stack;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-scale":"13AnI","vega-util":"4BD5d","d3-array":"7CLUA","d3-interpolate":"6eByj"}],"537KK":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-array'), require('vega-statistics'), require('vega-projection'), require('d3-geo'), require('d3-color'), require('vega-canvas')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-array', 'vega-statistics', 'vega-projection', 'd3-geo', 'd3-color', 'vega-canvas'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.d3, global.vega, global.vega, global.d3, global.d3, global.vega));
})(this, function (exports, vegaDataflow, vegaUtil, d3Array, vegaStatistics, vegaProjection, d3Geo, d3Color, vegaCanvas) {
  "use strict";
  function noop() {}
  const cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];
  // Implementation adapted from d3/d3-contour. Thanks!
  function contours() {
    var dx = 1, dy = 1, smooth = smoothLinear;
    function contours(values, tz) {
      return tz.map(value => contour(values, value));
    }
    // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
    function contour(values, value) {
      var polygons = [], holes = [];
      isorings(values, value, ring => {
        smooth(ring, values, value);
        if (area(ring) > 0) polygons.push([ring]); else holes.push(ring);
      });
      holes.forEach(hole => {
        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
          if (contains((polygon = polygons[i])[0], hole) !== -1) {
            polygon.push(hole);
            return;
          }
        }
      });
      return {
        type: 'MultiPolygon',
        value: value,
        coordinates: polygons
      };
    }
    // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
    function isorings(values, value, callback) {
      var fragmentByStart = new Array(), fragmentByEnd = new Array(), x, y, t0, t1, t2, t3;
      // Special case for the first row (y = -1, t2 = t3 = 0).
      x = y = -1;
      t1 = values[0] >= value;
      cases[t1 << 1].forEach(stitch);
      while (++x < dx - 1) {
        (t0 = t1, t1 = values[x + 1] >= value);
        cases[t0 | t1 << 1].forEach(stitch);
      }
      cases[t1 << 0].forEach(stitch);
      // General case for the intermediate rows.
      while (++y < dy - 1) {
        x = -1;
        t1 = values[y * dx + dx] >= value;
        t2 = values[y * dx] >= value;
        cases[t1 << 1 | t2 << 2].forEach(stitch);
        while (++x < dx - 1) {
          (t0 = t1, t1 = values[y * dx + dx + x + 1] >= value);
          (t3 = t2, t2 = values[y * dx + x + 1] >= value);
          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t1 | t2 << 3].forEach(stitch);
      }
      // Special case for the last row (y = dy - 1, t0 = t1 = 0).
      x = -1;
      t2 = values[y * dx] >= value;
      cases[t2 << 2].forEach(stitch);
      while (++x < dx - 1) {
        (t3 = t2, t2 = values[y * dx + x + 1] >= value);
        cases[t2 << 2 | t3 << 3].forEach(stitch);
      }
      cases[t2 << 3].forEach(stitch);
      function stitch(line) {
        var start = [line[0][0] + x, line[0][1] + y], end = [line[1][0] + x, line[1][1] + y], startIndex = index(start), endIndex = index(end), f, g;
        if (f = fragmentByEnd[startIndex]) {
          if (g = fragmentByStart[endIndex]) {
            delete fragmentByEnd[f.end];
            delete fragmentByStart[g.start];
            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                start: f.start,
                end: g.end,
                ring: f.ring.concat(g.ring)
              };
            }
          } else {
            delete fragmentByEnd[f.end];
            f.ring.push(end);
            fragmentByEnd[f.end = endIndex] = f;
          }
        } else if (f = fragmentByStart[endIndex]) {
          if (g = fragmentByEnd[startIndex]) {
            delete fragmentByStart[f.start];
            delete fragmentByEnd[g.end];
            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                start: g.start,
                end: f.end,
                ring: g.ring.concat(f.ring)
              };
            }
          } else {
            delete fragmentByStart[f.start];
            f.ring.unshift(start);
            fragmentByStart[f.start = startIndex] = f;
          }
        } else {
          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
            start: startIndex,
            end: endIndex,
            ring: [start, end]
          };
        }
      }
    }
    function index(point) {
      return point[0] * 2 + point[1] * (dx + 1) * 4;
    }
    function smoothLinear(ring, values, value) {
      ring.forEach(point => {
        var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];
        if (x > 0 && x < dx && xt === x) {
          v0 = values[yt * dx + xt - 1];
          point[0] = x + (value - v0) / (v1 - v0) - 0.5;
        }
        if (y > 0 && y < dy && yt === y) {
          v0 = values[(yt - 1) * dx + xt];
          point[1] = y + (value - v0) / (v1 - v0) - 0.5;
        }
      });
    }
    contours.contour = contour;
    contours.size = function (_) {
      if (!arguments.length) return [dx, dy];
      var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
      if (!(_0 >= 0 && _1 >= 0)) vegaUtil.error('invalid size');
      return (dx = _0, dy = _1, contours);
    };
    contours.smooth = function (_) {
      return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
    };
    return contours;
  }
  function area(ring) {
    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area;
  }
  function contains(ring, hole) {
    var i = -1, n = hole.length, c;
    while (++i < n) if (c = ringContains(ring, hole[i])) return c;
    return 0;
  }
  function ringContains(ring, point) {
    var x = point[0], y = point[1], contains = -1;
    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
      if (segmentContains(pi, pj, point)) return 0;
      if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }
    return contains;
  }
  function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
  }
  function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
  }
  function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
  }
  function quantize(k, nice, zero) {
    return function (values) {
      var ex = vegaUtil.extent(values), start = zero ? Math.min(ex[0], 0) : ex[0], stop = ex[1], span = stop - start, step = nice ? d3Array.tickStep(start, stop, k) : span / (k + 1);
      return d3Array.range(start + step, stop, step);
    };
  }
  /**
  * Generate isocontours (level sets) based on input raster grid data.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} [params.field] - The field with raster grid
  *   data. If unspecified, the tuple itself is interpreted as a raster grid.
  * @param {Array<number>} [params.thresholds] - Contour threshold array. If
  *   specified, the levels, nice, resolve, and zero parameters are ignored.
  * @param {number} [params.levels] - The desired number of contour levels.
  * @param {boolean} [params.nice] - Boolean flag indicating if the contour
  *   threshold values should be automatically aligned to "nice"
  *   human-friendly values. Setting this flag may cause the number of
  *   thresholds to deviate from the specified levels.
  * @param {string} [params.resolve] - The method for resolving thresholds
  *   across multiple input grids. If 'independent' (the default), threshold
  *   calculation will be performed separately for each grid. If 'shared', a
  *   single set of threshold values will be used for all input grids.
  * @param {boolean} [params.zero] - Boolean flag indicating if the contour
  *   threshold values should include zero.
  * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
  *   polygons should be smoothed using linear interpolation. The default is
  *   true. The parameter is ignored when using density estimation.
  * @param {boolean} [params.scale] - Optional numerical value by which to
  *   scale the output isocontour coordinates. This parameter can be useful
  *   to scale the contours to match a desired output resolution.
  * @param {string} [params.as='contour'] - The output field in which to store
  *   the generated isocontour data (default 'contour').
  */
  function Isocontour(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Isocontour.Definition = {
    'type': 'Isocontour',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'thresholds',
      'type': 'number',
      'array': true
    }, {
      'name': 'levels',
      'type': 'number'
    }, {
      'name': 'nice',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'resolve',
      'type': 'enum',
      'values': ['shared', 'independent'],
      'default': 'independent'
    }, {
      'name': 'zero',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'smooth',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'scale',
      'type': 'number',
      'expr': true
    }, {
      'name': 'translate',
      'type': 'number',
      'array': true,
      'expr': true
    }, {
      'name': 'as',
      'type': 'string',
      'null': true,
      'default': 'contour'
    }]
  };
  vegaUtil.inherits(Isocontour, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !pulse.changed() && !_.modified()) {
        return pulse.StopPropagation;
      }
      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, field = _.field || vegaUtil.identity, contour = contours().smooth(_.smooth !== false), tz = _.thresholds || levels(source, field, _), as = _.as === null ? null : _.as || 'contour', values = [];
      source.forEach(t => {
        const grid = field(t);
        // generate contour paths in GeoJSON format
        const paths = contour.size([grid.width, grid.height])(grid.values, vegaUtil.isArray(tz) ? tz : tz(grid.values));
        // adjust contour path coordinates as needed
        transformPaths(paths, grid, t, _);
        // ingest; copy source data properties to output
        paths.forEach(p => {
          values.push(vegaDataflow.rederive(t, vegaDataflow.ingest(as != null ? {
            [as]: p
          } : p)));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = values;
      return out;
    }
  });
  function levels(values, f, _) {
    const q = quantize(_.levels || 10, _.nice, _.zero !== false);
    return _.resolve !== 'shared' ? q : q(values.map(t => d3Array.max(f(t).values)));
  }
  function transformPaths(paths, grid, datum, _) {
    let s = _.scale || grid.scale, t = _.translate || grid.translate;
    if (vegaUtil.isFunction(s)) s = s(datum, _);
    if (vegaUtil.isFunction(t)) t = t(datum, _);
    if ((s === 1 || s == null) && !t) return;
    const sx = (vegaUtil.isNumber(s) ? s : s[0]) || 1, sy = (vegaUtil.isNumber(s) ? s : s[1]) || 1, tx = t && t[0] || 0, ty = t && t[1] || 0;
    paths.forEach(transform(grid, sx, sy, tx, ty));
  }
  function transform(grid, sx, sy, tx, ty) {
    const x1 = grid.x1 || 0, y1 = grid.y1 || 0, flip = sx * sy < 0;
    function transformPolygon(coordinates) {
      coordinates.forEach(transformRing);
    }
    function transformRing(coordinates) {
      if (flip) coordinates.reverse();
      // maintain winding order
      coordinates.forEach(transformPoint);
    }
    function transformPoint(coordinates) {
      coordinates[0] = (coordinates[0] - x1) * sx + tx;
      coordinates[1] = (coordinates[1] - y1) * sy + ty;
    }
    return function (geometry) {
      geometry.coordinates.forEach(transformPolygon);
      return geometry;
    };
  }
  function radius(bw, data, f) {
    const v = bw >= 0 ? bw : vegaStatistics.bandwidthNRD(data, f);
    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
  }
  function number(_) {
    return vegaUtil.isFunction(_) ? _ : vegaUtil.constant(+_);
  }
  // Implementation adapted from d3/d3-contour. Thanks!
  function density2D() {
    var x = d => d[0], y = d => d[1], weight = vegaUtil.one, bandwidth = [-1, -1], dx = 960, dy = 500, k = 2;
    // log2(cellSize)
    function density(data, counts) {
      const rx = radius(bandwidth[0], data, x) >> k, // blur x-radius
      ry = radius(bandwidth[1], data, y) >> k, // blur y-radius
      ox = rx ? rx + 2 : 0, // x-offset padding for blur
      oy = ry ? ry + 2 : 0, // y-offset padding for blur
      n = 2 * ox + (dx >> k), // grid width
      m = 2 * oy + (dy >> k), // grid height
      values0 = new Float32Array(n * m), values1 = new Float32Array(n * m);
      let values = values0;
      data.forEach(d => {
        const xi = ox + (+x(d) >> k), yi = oy + (+y(d) >> k);
        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
          values0[xi + yi * n] += +weight(d);
        }
      });
      if (rx > 0 && ry > 0) {
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
      } else if (rx > 0) {
        blurX(n, m, values0, values1, rx);
        blurX(n, m, values1, values0, rx);
        blurX(n, m, values0, values1, rx);
        values = values1;
      } else if (ry > 0) {
        blurY(n, m, values0, values1, ry);
        blurY(n, m, values1, values0, ry);
        blurY(n, m, values0, values1, ry);
        values = values1;
      }
      // scale density estimates
      // density in points per square pixel or probability density
      const s = counts ? Math.pow(2, -2 * k) : 1 / d3Array.sum(values);
      for (let i = 0, sz = n * m; i < sz; ++i) values[i] *= s;
      return {
        values: values,
        scale: 1 << k,
        width: n,
        height: m,
        x1: ox,
        y1: oy,
        x2: ox + (dx >> k),
        y2: oy + (dy >> k)
      };
    }
    density.x = function (_) {
      return arguments.length ? (x = number(_), density) : x;
    };
    density.y = function (_) {
      return arguments.length ? (y = number(_), density) : y;
    };
    density.weight = function (_) {
      return arguments.length ? (weight = number(_), density) : weight;
    };
    density.size = function (_) {
      if (!arguments.length) return [dx, dy];
      var _0 = +_[0], _1 = +_[1];
      if (!(_0 >= 0 && _1 >= 0)) vegaUtil.error('invalid size');
      return (dx = _0, dy = _1, density);
    };
    density.cellSize = function (_) {
      if (!arguments.length) return 1 << k;
      if (!((_ = +_) >= 1)) vegaUtil.error('invalid cell size');
      k = Math.floor(Math.log(_) / Math.LN2);
      return density;
    };
    density.bandwidth = function (_) {
      if (!arguments.length) return bandwidth;
      _ = vegaUtil.array(_);
      if (_.length === 1) _ = [+_[0], +_[0]];
      if (_.length !== 2) vegaUtil.error('invalid bandwidth');
      return (bandwidth = _, density);
    };
    return density;
  }
  function blurX(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for (let j = 0; j < m; ++j) {
      for (let i = 0, sr = 0; i < n + r; ++i) {
        if (i < n) {
          sr += source[i + j * n];
        }
        if (i >= r) {
          if (i >= w) {
            sr -= source[i - w + j * n];
          }
          target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
        }
      }
    }
  }
  function blurY(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for (let i = 0; i < n; ++i) {
      for (let j = 0, sr = 0; j < m + r; ++j) {
        if (j < m) {
          sr += source[i + j * n];
        }
        if (j >= r) {
          if (j >= w) {
            sr -= source[i + (j - w) * n];
          }
          target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
        }
      }
    }
  }
  /**
  * Perform 2D kernel-density estimation of point data.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<number>} params.size - The [width, height] extent (in
  *   units of input pixels) over which to perform density estimation.
  * @param {function(object): number} params.x - The x-coordinate accessor.
  * @param {function(object): number} params.y - The y-coordinate accessor.
  * @param {function(object): number} [params.weight] - The weight accessor.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors
  *   to groupby.
  * @param {number} [params.cellSize] - Contour density calculation cell size.
  *   This parameter determines the level of spatial approximation. For example,
  *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.
  *   A value of 1 will result in an output raster grid whose dimensions exactly
  *   matches the size parameter.
  * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,
  *   in pixels. The input can be a two-element array specifying separate
  *   x and y bandwidths, or a single-element array specifying both. If the
  *   bandwidth is unspecified or less than zero, the bandwidth will be
  *   automatically determined.
  * @param {boolean} [params.counts=false] - A boolean flag indicating if the
  *   output values should be probability estimates (false, default) or
  *   smoothed counts (true).
  * @param {string} [params.as='grid'] - The output field in which to store
  *   the generated raster grid (default 'grid').
  */
  function KDE2D(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  KDE2D.Definition = {
    'type': 'KDE2D',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2,
      'required': true
    }, {
      'name': 'x',
      'type': 'field',
      'required': true
    }, {
      'name': 'y',
      'type': 'field',
      'required': true
    }, {
      'name': 'weight',
      'type': 'field'
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'cellSize',
      'type': 'number'
    }, {
      'name': 'bandwidth',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'counts',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'grid'
    }]
  };
  const PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];
  function params(obj, _) {
    PARAMS.forEach(param => _[param] != null ? obj[param](_[param]) : 0);
    return obj;
  }
  vegaUtil.inherits(KDE2D, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map(vegaUtil.accessorName), kde = params(density2D(), _), as = _.as || 'grid', values = [];
      function set(t, vals) {
        for (let i = 0; i < names.length; ++i) t[names[i]] = vals[i];
        return t;
      }
      // generate density raster grids
      values = groups.map(g => vegaDataflow.ingest(set({
        [as]: kde(g, _.counts)
      }, g.dims)));
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = values;
      return out;
    }
  });
  function partition(data, groupby) {
    var groups = [], get = f => f(t), map, i, n, t, k, g;
    // partition data points into groups
    if (groupby == null) {
      groups.push(data);
    } else {
      for ((map = {}, i = 0, n = data.length); i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(t);
      }
    }
    return groups;
  }
  /**
  * Generate contours based on kernel-density estimation of point data.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
  *  If the values parameter is provided, this must be the dimensions of the input data.
  *  If density estimation is performed, this is the output view dimensions in pixels.
  * @param {Array<number>} [params.values] - An array of numeric values representing an
  *  width x height grid of values over which to compute contours. If unspecified, this
  *  transform will instead attempt to compute contours for the kernel density estimate
  *  using values drawn from data tuples in the input pulse.
  * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
  * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
  * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
  * @param {number} [params.cellSize] - Contour density calculation cell size.
  * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
  * @param {Array<number>} [params.thresholds] - Contour threshold array. If
  *   this parameter is set, the count and nice parameters will be ignored.
  * @param {number} [params.count] - The desired number of contours.
  * @param {boolean} [params.nice] - Boolean flag indicating if the contour
  *   threshold values should be automatically aligned to "nice"
  *   human-friendly values. Setting this flag may cause the number of
  *   thresholds to deviate from the specified count.
  * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
  *   polygons should be smoothed using linear interpolation. The default is
  *   true. The parameter is ignored when using density estimation.
  */
  function Contour(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Contour.Definition = {
    'type': 'Contour',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2,
      'required': true
    }, {
      'name': 'values',
      'type': 'number',
      'array': true
    }, {
      'name': 'x',
      'type': 'field'
    }, {
      'name': 'y',
      'type': 'field'
    }, {
      'name': 'weight',
      'type': 'field'
    }, {
      'name': 'cellSize',
      'type': 'number'
    }, {
      'name': 'bandwidth',
      'type': 'number'
    }, {
      'name': 'count',
      'type': 'number'
    }, {
      'name': 'nice',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'thresholds',
      'type': 'number',
      'array': true
    }, {
      'name': 'smooth',
      'type': 'boolean',
      'default': true
    }]
  };
  vegaUtil.inherits(Contour, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (this.value && !pulse.changed() && !_.modified()) {
        return pulse.StopPropagation;
      }
      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), contour = contours().smooth(_.smooth !== false), values = _.values, thresh = _.thresholds || quantize(_.count || 10, _.nice, !!values), size = _.size, grid, post;
      if (!values) {
        values = pulse.materialize(pulse.SOURCE).source;
        grid = params(density2D(), _)(values, true);
        post = transform(grid, grid.scale || 1, grid.scale || 1, 0, 0);
        size = [grid.width, grid.height];
        values = grid.values;
      }
      thresh = vegaUtil.isArray(thresh) ? thresh : thresh(values);
      values = contour.size(size)(values, thresh);
      if (post) values.forEach(post);
      if (this.value) out.rem = this.value;
      this.value = out.source = out.add = (values || []).map(vegaDataflow.ingest);
      return out;
    }
  });
  const Feature = 'Feature';
  const FeatureCollection = 'FeatureCollection';
  const MultiPoint = 'MultiPoint';
  /**
  * Consolidate an array of [longitude, latitude] points or GeoJSON features
  * into a combined GeoJSON object. This transform is particularly useful for
  * combining geo data for a Projection's fit argument. The resulting GeoJSON
  * data is available as this transform's value. Input pulses are unchanged.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} [params.fields] - A two-element array
  *   of field accessors for the longitude and latitude values.
  * @param {function(object): *} params.geojson - A field accessor for
  *   retrieving GeoJSON feature data.
  */
  function GeoJSON(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  GeoJSON.Definition = {
    'type': 'GeoJSON',
    'metadata': {},
    'params': [{
      'name': 'fields',
      'type': 'field',
      'array': true,
      'length': 2
    }, {
      'name': 'geojson',
      'type': 'field'
    }]
  };
  vegaUtil.inherits(GeoJSON, vegaDataflow.Transform, {
    transform(_, pulse) {
      var features = this._features, points = this._points, fields = _.fields, lon = fields && fields[0], lat = fields && fields[1], geojson = _.geojson || !fields && vegaUtil.identity, flag = pulse.ADD, mod;
      mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified(vegaUtil.accessorFields(geojson)) || lon && pulse.modified(vegaUtil.accessorFields(lon)) || lat && pulse.modified(vegaUtil.accessorFields(lat));
      if (!this.value || mod) {
        flag = pulse.SOURCE;
        this._features = features = [];
        this._points = points = [];
      }
      if (geojson) {
        pulse.visit(flag, t => features.push(geojson(t)));
      }
      if (lon && lat) {
        pulse.visit(flag, t => {
          var x = lon(t), y = lat(t);
          if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
            points.push([x, y]);
          }
        });
        features = features.concat({
          type: Feature,
          geometry: {
            type: MultiPoint,
            coordinates: points
          }
        });
      }
      this.value = {
        type: FeatureCollection,
        features: features
      };
    }
  });
  /**
  * Map GeoJSON data to an SVG path string.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(number, number): *} params.projection - The cartographic
  *   projection to apply.
  * @param {function(object): *} [params.field] - The field with GeoJSON data,
  *   or null if the tuple itself is a GeoJSON feature.
  * @param {string} [params.as='path'] - The output field in which to store
  *   the generated path data (default 'path').
  */
  function GeoPath(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  GeoPath.Definition = {
    'type': 'GeoPath',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'projection',
      'type': 'projection'
    }, {
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'pointRadius',
      'type': 'number',
      'expr': true
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'path'
    }]
  };
  vegaUtil.inherits(GeoPath, vegaDataflow.Transform, {
    transform(_, pulse) {
      var out = pulse.fork(pulse.ALL), path = this.value, field = _.field || vegaUtil.identity, as = _.as || 'path', flag = out.SOURCE;
      if (!path || _.modified()) {
        // parameters updated, reset and reflow
        this.value = path = vegaProjection.getProjectionPath(_.projection);
        out.materialize().reflow();
      } else {
        flag = field === vegaUtil.identity || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
      }
      const prev = initPath(path, _.pointRadius);
      out.visit(flag, t => t[as] = path(field(t)));
      path.pointRadius(prev);
      return out.modifies(as);
    }
  });
  function initPath(path, pointRadius) {
    const prev = path.pointRadius();
    path.context(null);
    if (pointRadius != null) {
      path.pointRadius(pointRadius);
    }
    return prev;
  }
  /**
  * Geo-code a longitude/latitude point to an x/y coordinate.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(number, number): *} params.projection - The cartographic
  *   projection to apply.
  * @param {Array<function(object): *>} params.fields - A two-element array of
  *   field accessors for the longitude and latitude values.
  * @param {Array<string>} [params.as] - A two-element array of field names
  *   under which to store the result. Defaults to ['x','y'].
  */
  function GeoPoint(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  GeoPoint.Definition = {
    'type': 'GeoPoint',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'projection',
      'type': 'projection',
      'required': true
    }, {
      'name': 'fields',
      'type': 'field',
      'array': true,
      'required': true,
      'length': 2
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 2,
      'default': ['x', 'y']
    }]
  };
  vegaUtil.inherits(GeoPoint, vegaDataflow.Transform, {
    transform(_, pulse) {
      var proj = _.projection, lon = _.fields[0], lat = _.fields[1], as = _.as || ['x', 'y'], x = as[0], y = as[1], mod;
      function set(t) {
        const xy = proj([lon(t), lat(t)]);
        if (xy) {
          t[x] = xy[0];
          t[y] = xy[1];
        } else {
          t[x] = undefined;
          t[y] = undefined;
        }
      }
      if (_.modified()) {
        // parameters updated, reflow
        pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
      } else {
        mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
        pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
      }
      return pulse.modifies(as);
    }
  });
  /**
  * Annotate items with a geopath shape generator.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(number, number): *} params.projection - The cartographic
  *   projection to apply.
  * @param {function(object): *} [params.field] - The field with GeoJSON data,
  *   or null if the tuple itself is a GeoJSON feature.
  * @param {string} [params.as='shape'] - The output field in which to store
  *   the generated path data (default 'shape').
  */
  function GeoShape(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  GeoShape.Definition = {
    'type': 'GeoShape',
    'metadata': {
      'modifies': true,
      'nomod': true
    },
    'params': [{
      'name': 'projection',
      'type': 'projection'
    }, {
      'name': 'field',
      'type': 'field',
      'default': 'datum'
    }, {
      'name': 'pointRadius',
      'type': 'number',
      'expr': true
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'shape'
    }]
  };
  vegaUtil.inherits(GeoShape, vegaDataflow.Transform, {
    transform(_, pulse) {
      var out = pulse.fork(pulse.ALL), shape = this.value, as = _.as || 'shape', flag = out.ADD;
      if (!shape || _.modified()) {
        // parameters updated, reset and reflow
        this.value = shape = shapeGenerator(vegaProjection.getProjectionPath(_.projection), _.field || vegaUtil.field('datum'), _.pointRadius);
        out.materialize().reflow();
        flag = out.SOURCE;
      }
      out.visit(flag, t => t[as] = shape);
      return out.modifies(as);
    }
  });
  function shapeGenerator(path, field, pointRadius) {
    const shape = pointRadius == null ? _ => path(field(_)) : _ => {
      var prev = path.pointRadius(), value = path.pointRadius(pointRadius)(field(_));
      path.pointRadius(prev);
      return value;
    };
    shape.context = _ => {
      path.context(_);
      return shape;
    };
    return shape;
  }
  /**
  * GeoJSON feature generator for creating graticules.
  * @constructor
  */
  function Graticule(params) {
    vegaDataflow.Transform.call(this, [], params);
    this.generator = d3Geo.geoGraticule();
  }
  Graticule.Definition = {
    'type': 'Graticule',
    'metadata': {
      'changes': true,
      'generates': true
    },
    'params': [{
      'name': 'extent',
      'type': 'array',
      'array': true,
      'length': 2,
      'content': {
        'type': 'number',
        'array': true,
        'length': 2
      }
    }, {
      'name': 'extentMajor',
      'type': 'array',
      'array': true,
      'length': 2,
      'content': {
        'type': 'number',
        'array': true,
        'length': 2
      }
    }, {
      'name': 'extentMinor',
      'type': 'array',
      'array': true,
      'length': 2,
      'content': {
        'type': 'number',
        'array': true,
        'length': 2
      }
    }, {
      'name': 'step',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'stepMajor',
      'type': 'number',
      'array': true,
      'length': 2,
      'default': [90, 360]
    }, {
      'name': 'stepMinor',
      'type': 'number',
      'array': true,
      'length': 2,
      'default': [10, 10]
    }, {
      'name': 'precision',
      'type': 'number',
      'default': 2.5
    }]
  };
  vegaUtil.inherits(Graticule, vegaDataflow.Transform, {
    transform(_, pulse) {
      var src = this.value, gen = this.generator, t;
      if (!src.length || _.modified()) {
        for (const prop in _) {
          if (vegaUtil.isFunction(gen[prop])) {
            gen[prop](_[prop]);
          }
        }
      }
      t = gen();
      if (src.length) {
        pulse.mod.push(vegaDataflow.replace(src[0], t));
      } else {
        pulse.add.push(vegaDataflow.ingest(t));
      }
      src[0] = t;
      return pulse;
    }
  });
  /**
  * Render a heatmap image for input raster grid data.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} [params.field] - The field with raster grid
  *   data. If unspecified, the tuple itself is interpreted as a raster grid.
  * @param {string} [params.color] - A constant color value or function for
  *   individual pixel color. If a function, it will be invoked with an input
  *   object that includes $x, $y, $value, and $max fields for the grid.
  * @param {number} [params.opacity] - A constant opacity value or function for
  *   individual pixel opacity. If a function, it will be invoked with an input
  *   object that includes $x, $y, $value, and $max fields for the grid.
  * @param {string} [params.resolve] - The method for resolving maximum values
  *   across multiple input grids. If 'independent' (the default), maximum
  *   calculation will be performed separately for each grid. If 'shared',
  *   a single global maximum will be used for all input grids.
  * @param {string} [params.as='image'] - The output field in which to store
  *   the generated bitmap canvas images (default 'image').
  */
  function Heatmap(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Heatmap.Definition = {
    'type': 'heatmap',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'color',
      'type': 'string',
      'expr': true
    }, {
      'name': 'opacity',
      'type': 'number',
      'expr': true
    }, {
      'name': 'resolve',
      'type': 'enum',
      'values': ['shared', 'independent'],
      'default': 'independent'
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'image'
    }]
  };
  vegaUtil.inherits(Heatmap, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (!pulse.changed() && !_.modified()) {
        return pulse.StopPropagation;
      }
      var source = pulse.materialize(pulse.SOURCE).source, shared = _.resolve === 'shared', field = _.field || vegaUtil.identity, opacity = opacity_(_.opacity, _), color = color_(_.color, _), as = _.as || 'image', obj = {
        $x: 0,
        $y: 0,
        $value: 0,
        $max: shared ? d3Array.max(source.map(t => d3Array.max(field(t).values))) : 0
      };
      source.forEach(t => {
        const v = field(t);
        // build proxy data object
        const o = vegaUtil.extend({}, t, obj);
        // set maximum value if not globally shared
        if (!shared) o.$max = d3Array.max(v.values || []);
        // generate canvas image
        // optimize color/opacity if not pixel-dependent
        t[as] = toCanvas(v, o, color.dep ? color : vegaUtil.constant(color(o)), opacity.dep ? opacity : vegaUtil.constant(opacity(o)));
      });
      return pulse.reflow(true).modifies(as);
    }
  });
  // get image color function
  function color_(color, _) {
    let f;
    if (vegaUtil.isFunction(color)) {
      f = obj => d3Color.rgb(color(obj, _));
      f.dep = dependency(color);
    } else {
      // default to mid-grey
      f = vegaUtil.constant(d3Color.rgb(color || '#888'));
    }
    return f;
  }
  // get image opacity function
  function opacity_(opacity, _) {
    let f;
    if (vegaUtil.isFunction(opacity)) {
      f = obj => opacity(obj, _);
      f.dep = dependency(opacity);
    } else if (opacity) {
      f = vegaUtil.constant(opacity);
    } else {
      // default to [0, max] opacity gradient
      f = obj => obj.$value / obj.$max || 0;
      f.dep = true;
    }
    return f;
  }
  // check if function depends on individual pixel data
  function dependency(f) {
    if (!vegaUtil.isFunction(f)) return false;
    const set = vegaUtil.toSet(vegaUtil.accessorFields(f));
    return set.$x || set.$y || set.$value || set.$max;
  }
  // render raster grid to canvas
  function toCanvas(grid, obj, color, opacity) {
    const n = grid.width, m = grid.height, x1 = grid.x1 || 0, y1 = grid.y1 || 0, x2 = grid.x2 || n, y2 = grid.y2 || m, val = grid.values, value = val ? i => val[i] : vegaUtil.zero, can = vegaCanvas.canvas(x2 - x1, y2 - y1), ctx = can.getContext('2d'), img = ctx.getImageData(0, 0, x2 - x1, y2 - y1), pix = img.data;
    for (let j = y1, k = 0; j < y2; ++j) {
      obj.$y = j - y1;
      for (let i = x1, r = j * n; i < x2; (++i, k += 4)) {
        obj.$x = i - x1;
        obj.$value = value(i + r);
        const v = color(obj);
        pix[k + 0] = v.r;
        pix[k + 1] = v.g;
        pix[k + 2] = v.b;
        pix[k + 3] = ~~(255 * opacity(obj));
      }
    }
    ctx.putImageData(img, 0, 0);
    return can;
  }
  /**
  * Maintains a cartographic projection.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function Projection(params) {
    vegaDataflow.Transform.call(this, null, params);
    this.modified(true);
  }
  vegaUtil.inherits(Projection, vegaDataflow.Transform, {
    transform(_, pulse) {
      let proj = this.value;
      if (!proj || _.modified('type')) {
        this.value = proj = create(_.type);
        vegaProjection.projectionProperties.forEach(prop => {
          if (_[prop] != null) set(proj, prop, _[prop]);
        });
      } else {
        vegaProjection.projectionProperties.forEach(prop => {
          if (_.modified(prop)) set(proj, prop, _[prop]);
        });
      }
      if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
      if (_.fit) fit(proj, _);
      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
  });
  function fit(proj, _) {
    const data = collectGeoJSON(_.fit);
    _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;
  }
  function create(type) {
    const constructor = vegaProjection.projection((type || 'mercator').toLowerCase());
    if (!constructor) vegaUtil.error('Unrecognized projection type: ' + type);
    return constructor();
  }
  function set(proj, key, value) {
    if (vegaUtil.isFunction(proj[key])) proj[key](value);
  }
  function collectGeoJSON(data) {
    data = vegaUtil.array(data);
    return data.length === 1 ? data[0] : {
      type: FeatureCollection,
      features: data.reduce((a, f) => a.concat(featurize(f)), [])
    };
  }
  function featurize(f) {
    return f.type === FeatureCollection ? f.features : vegaUtil.array(f).filter(d => d != null).map(d => d.type === Feature ? d : {
      type: Feature,
      geometry: d
    });
  }
  exports.contour = Contour;
  exports.geojson = GeoJSON;
  exports.geopath = GeoPath;
  exports.geopoint = GeoPoint;
  exports.geoshape = GeoShape;
  exports.graticule = Graticule;
  exports.heatmap = Heatmap;
  exports.isocontour = Isocontour;
  exports.kde2d = KDE2D;
  exports.projection = Projection;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-util":"4BD5d","d3-array":"7CLUA","vega-statistics":"5GzFx","vega-projection":"4uxzO","d3-geo":"3nbkI","d3-color":"3mmqs","vega-canvas":"4uDqM"}],"4uxzO":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-geo'), require('d3-geo-projection')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-geo-projection'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3, global.d3));
})(this, function (exports, d3Geo, d3GeoProjection) {
  "use strict";
  const defaultPath = d3Geo.geoPath();
  const projectionProperties = [// standard properties in d3-geo
  'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections
  'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
  /**
  * Augment projections with their type and a copy method.
  */
  function create(type, constructor) {
    return function projection() {
      const p = constructor();
      p.type = type;
      p.path = d3Geo.geoPath().projection(p);
      p.copy = p.copy || (function () {
        const c = projection();
        projectionProperties.forEach(prop => {
          if (p[prop]) c[prop](p[prop]());
        });
        c.path.pointRadius(p.path.pointRadius());
        return c;
      });
      return p;
    };
  }
  function projection(type, proj) {
    if (!type || typeof type !== 'string') {
      throw new Error('Projection type must be a name string.');
    }
    type = type.toLowerCase();
    if (arguments.length > 1) {
      projections[type] = create(type, proj);
      return this;
    } else {
      return projections[type] || null;
    }
  }
  function getProjectionPath(proj) {
    return proj && proj.path || defaultPath;
  }
  const projections = {
    // base d3-geo projection types
    albers: d3Geo.geoAlbers,
    albersusa: d3Geo.geoAlbersUsa,
    azimuthalequalarea: d3Geo.geoAzimuthalEqualArea,
    azimuthalequidistant: d3Geo.geoAzimuthalEquidistant,
    conicconformal: d3Geo.geoConicConformal,
    conicequalarea: d3Geo.geoConicEqualArea,
    conicequidistant: d3Geo.geoConicEquidistant,
    equalEarth: d3Geo.geoEqualEarth,
    equirectangular: d3Geo.geoEquirectangular,
    gnomonic: d3Geo.geoGnomonic,
    identity: d3Geo.geoIdentity,
    mercator: d3Geo.geoMercator,
    mollweide: d3GeoProjection.geoMollweide,
    naturalEarth1: d3Geo.geoNaturalEarth1,
    orthographic: d3Geo.geoOrthographic,
    stereographic: d3Geo.geoStereographic,
    transversemercator: d3Geo.geoTransverseMercator
  };
  for (const key in projections) {
    projection(key, projections[key]);
  }
  exports.getProjectionPath = getProjectionPath;
  exports.projection = projection;
  exports.projectionProperties = projectionProperties;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-geo":"3nbkI","d3-geo-projection":"6IvNw"}],"3nbkI":[function(require,module,exports) {
var define;
// https://d3js.org/d3-geo/ v2.0.1 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({}), global.d3));
})(this, function (exports, d3Array) {
  "use strict";
  var epsilon = 1e-6;
  var epsilon2 = 1e-12;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var quarterPi = pi / 4;
  var tau = pi * 2;
  var degrees = 180 / pi;
  var radians = pi / 180;
  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var ceil = Math.ceil;
  var exp = Math.exp;
  var hypot = Math.hypot;
  var log = Math.log;
  var pow = Math.pow;
  var sin = Math.sin;
  var sign = Math.sign || (function (x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  });
  var sqrt = Math.sqrt;
  var tan = Math.tan;
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
  }
  function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
  }
  function haversin(x) {
    return (x = sin(x / 2)) * x;
  }
  function noop() {}
  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }
  var streamObjectType = {
    Feature: function (object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function (object, stream) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream);
    }
  };
  var streamGeometryType = {
    Sphere: function (object, stream) {
      stream.sphere();
    },
    Point: function (object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function (object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) (object = coordinates[i], stream.point(object[0], object[1], object[2]));
    },
    LineString: function (object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function (object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream, 0);
    },
    Polygon: function (object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function (object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function (object, stream) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream);
    }
  };
  function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n) (coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]));
    stream.lineEnd();
  }
  function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
  }
  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }
  var areaRingSum = new d3Array.Adder();
  // hello?
  var areaSum = new d3Array.Adder(), lambda00, phi00, lambda0, cosPhi0, sinPhi0;
  var areaStream = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function () {
      areaRingSum = new d3Array.Adder();
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function () {
      var areaRing = +areaRingSum;
      areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
      this.lineStart = this.lineEnd = this.point = noop;
    },
    sphere: function () {
      areaSum.add(tau);
    }
  };
  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }
  function areaRingEnd() {
    areaPoint(lambda00, phi00);
  }
  function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    (lambda00 = lambda, phi00 = phi);
    (lambda *= radians, phi *= radians);
    (lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi));
  }
  function areaPoint(lambda, phi) {
    (lambda *= radians, phi *= radians);
    phi = phi / 2 + quarterPi;
    // half the angular distance from south pole
    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos(adLambda), v = k * sdLambda * sin(adLambda);
    areaRingSum.add(atan2(v, u));
    // Advance the previous points.
    (lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi);
  }
  function area(object) {
    areaSum = new d3Array.Adder();
    geoStream(object, areaStream);
    return areaSum * 2;
  }
  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
  }
  function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
  }
  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  }
  // TODO return a
  function cartesianAddInPlace(a, b) {
    (a[0] += b[0], a[1] += b[1], a[2] += b[2]);
  }
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }
  // TODO return d
  function cartesianNormalizeInPlace(d) {
    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    (d[0] /= l, d[1] /= l, d[2] /= l);
  }
  var lambda0$1, phi0, lambda1, phi1, // bounds
  lambda2, // previous lambda-coordinate
  lambda00$1, phi00$1, // first point
  p0, // previous 3D point
  deltaSum, ranges, range;
  var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function () {
      boundsStream.point = boundsRingPoint;
      boundsStream.lineStart = boundsRingStart;
      boundsStream.lineEnd = boundsRingEnd;
      deltaSum = new d3Array.Adder();
      areaStream.polygonStart();
    },
    polygonEnd: function () {
      areaStream.polygonEnd();
      boundsStream.point = boundsPoint;
      boundsStream.lineStart = boundsLineStart;
      boundsStream.lineEnd = boundsLineEnd;
      if (areaRingSum < 0) (lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90)); else if (deltaSum > epsilon) phi1 = 90; else if (deltaSum < -epsilon) phi0 = -90;
      (range[0] = lambda0$1, range[1] = lambda1);
    },
    sphere: function () {
      (lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90));
    }
  };
  function boundsPoint(lambda, phi) {
    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
  }
  function linePoint(lambda, phi) {
    var p = cartesian([lambda * radians, phi * radians]);
    if (p0) {
      var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
      cartesianNormalizeInPlace(inflection);
      inflection = spherical(inflection);
      var delta = lambda - lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign, phii, antimeridian = abs(delta) > 180;
      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = inflection[1] * degrees;
        if (phii > phi1) phi1 = phii;
      } else if ((lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda))) {
        phii = -inflection[1] * degrees;
        if (phii < phi0) phi0 = phii;
      } else {
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
      }
      if (antimeridian) {
        if (lambda < lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      } else {
        if (lambda1 >= lambda0$1) {
          if (lambda < lambda0$1) lambda0$1 = lambda;
          if (lambda > lambda1) lambda1 = lambda;
        } else {
          if (lambda > lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        }
      }
    } else {
      ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
    }
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
    (p0 = p, lambda2 = lambda);
  }
  function boundsLineStart() {
    boundsStream.point = linePoint;
  }
  function boundsLineEnd() {
    (range[0] = lambda0$1, range[1] = lambda1);
    boundsStream.point = boundsPoint;
    p0 = null;
  }
  function boundsRingPoint(lambda, phi) {
    if (p0) {
      var delta = lambda - lambda2;
      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
      (lambda00$1 = lambda, phi00$1 = phi);
    }
    areaStream.point(lambda, phi);
    linePoint(lambda, phi);
  }
  function boundsRingStart() {
    areaStream.lineStart();
  }
  function boundsRingEnd() {
    boundsRingPoint(lambda00$1, phi00$1);
    areaStream.lineEnd();
    if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
    (range[0] = lambda0$1, range[1] = lambda1);
    p0 = null;
  }
  // Finds the left-right distance between two longitudes.
  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
  // the distance between ±180° to be 360°.
  function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
  }
  function rangeCompare(a, b) {
    return a[0] - b[0];
  }
  function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
  }
  function bounds(feature) {
    var i, n, a, b, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
    ranges = [];
    geoStream(feature, boundsStream);
    // First, sort ranges by their minimum longitudes.
    if (n = ranges.length) {
      ranges.sort(rangeCompare);
      // Then, merge any ranges that overlap.
      for ((i = 1, a = ranges[0], merged = [a]); i < n; ++i) {
        b = ranges[i];
        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
        } else {
          merged.push(a = b);
        }
      }
      // Finally, find the largest gap between the merged ranges.
      // The final bounding box will be the inverse of this gap.
      for ((deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]); i <= n; (a = b, ++i)) {
        b = merged[i];
        if ((delta = angle(a[1], b[0])) > deltaMax) (deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1]);
      }
    }
    ranges = range = null;
    return lambda0$1 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0$1, phi0], [lambda1, phi1]];
  }
  var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00$2, phi00$2, // first point
  x0, y0, z0;
  // previous point
  var centroidStream = {
    sphere: noop,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function () {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function () {
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    }
  };
  // Arithmetic mean of Cartesian vectors.
  function centroidPoint(lambda, phi) {
    (lambda *= radians, phi *= radians);
    var cosPhi = cos(phi);
    centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
  }
  function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
  }
  function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
  }
  function centroidLinePointFirst(lambda, phi) {
    (lambda *= radians, phi *= radians);
    var cosPhi = cos(phi);
    x0 = cosPhi * cos(lambda);
    y0 = cosPhi * sin(lambda);
    z0 = sin(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
  }
  function centroidLinePoint(lambda, phi) {
    (lambda *= radians, phi *= radians);
    var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }
  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }
  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
  // J. Applied Mechanics 42, 239 (1975).
  function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
  }
  function centroidRingEnd() {
    centroidRingPoint(lambda00$2, phi00$2);
    centroidStream.point = centroidPoint;
  }
  function centroidRingPointFirst(lambda, phi) {
    (lambda00$2 = lambda, phi00$2 = phi);
    (lambda *= radians, phi *= radians);
    centroidStream.point = centroidRingPoint;
    var cosPhi = cos(phi);
    x0 = cosPhi * cos(lambda);
    y0 = cosPhi * sin(lambda);
    z0 = sin(phi);
    centroidPointCartesian(x0, y0, z0);
  }
  function centroidRingPoint(lambda, phi) {
    (lambda *= radians, phi *= radians);
    var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = hypot(cx, cy, cz), w = asin(m), // line weight = angle
    v = m && -w / m;
    // area weight multiplier
    X2.add(v * cx);
    Y2.add(v * cy);
    Z2.add(v * cz);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }
  function centroid(object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
    X2 = new d3Array.Adder();
    Y2 = new d3Array.Adder();
    Z2 = new d3Array.Adder();
    geoStream(object, centroidStream);
    var x = +X2, y = +Y2, z = +Z2, m = hypot(x, y, z);
    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < epsilon2) {
      (x = X1, y = Y1, z = Z1);
      // If the feature has zero length, fall back to arithmetic mean of point vectors.
      if (W1 < epsilon) (x = X0, y = Y0, z = Z0);
      m = hypot(x, y, z);
      // If the feature still has an undefined ccentroid, then return.
      if (m < epsilon2) return [NaN, NaN];
    }
    return [atan2(y, x) * degrees, asin(z / m) * degrees];
  }
  function constant(x) {
    return function () {
      return x;
    };
  }
  function compose(a, b) {
    function compose(x, y) {
      return (x = a(x, y), b(x[0], x[1]));
    }
    if (a.invert && b.invert) compose.invert = function (x, y) {
      return (x = b.invert(x, y), x && a.invert(x[0], x[1]));
    };
    return compose;
  }
  function rotationIdentity(lambda, phi) {
    return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
  }
  rotationIdentity.invert = rotationIdentity;
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
  }
  function forwardRotationLambda(deltaLambda) {
    return function (lambda, phi) {
      return (lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi]);
    };
  }
  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }
  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
    function rotation(lambda, phi) {
      var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
      return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
    }
    rotation.invert = function (lambda, phi) {
      var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];
    };
    return rotation;
  }
  function rotation(rotate) {
    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
      return (coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates);
    }
    forward.invert = function (coordinates) {
      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
      return (coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates);
    };
    return forward;
  }
  // Generates a circle centered at [0°, 0°], with a given radius and precision.
  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
    if (t0 == null) {
      t0 = radius + direction * tau;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
    }
    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
      stream.point(point[0], point[1]);
    }
  }
  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
  function circleRadius(cosRadius, point) {
    (point = cartesian(point), point[0] -= cosRadius);
    cartesianNormalizeInPlace(point);
    var radius = acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
  }
  function circle() {
    var center = constant([0, 0]), radius = constant(90), precision = constant(6), ring, rotate, stream = {
      point: point
    };
    function point(x, y) {
      ring.push(x = rotate(x, y));
      (x[0] *= degrees, x[1] *= degrees);
    }
    function circle() {
      var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
      ring = [];
      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
      circleStream(stream, r, p, 1);
      c = {
        type: "Polygon",
        coordinates: [ring]
      };
      ring = rotate = null;
      return c;
    }
    circle.center = function (_) {
      return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
    };
    circle.radius = function (_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
    };
    circle.precision = function (_) {
      return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
    };
    return circle;
  }
  function clipBuffer() {
    var lines = [], line;
    return {
      point: function (x, y, m) {
        line.push([x, y, m]);
      },
      lineStart: function () {
        lines.push(line = []);
      },
      lineEnd: noop,
      rejoin: function () {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function () {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }
  function pointEqual(a, b) {
    return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
  }
  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    // another intersection
    this.e = entry;
    // is an entry?
    this.v = false;
    // visited
    this.n = this.p = null;
  }
  // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.
  function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [], clip = [], i, n;
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n], x;
      if (pointEqual(p0, p1)) {
        if (!p0[2] && !p1[2]) {
          stream.lineStart();
          for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
          stream.lineEnd();
          return;
        }
        // handle degenerate cases by moving the point
        p1[0] += 2 * epsilon;
      }
      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);
    for ((i = 0, n = clip.length); i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }
    var start = subject[0], points, point;
    while (1) {
      // Find first unvisited intersection.
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      stream.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for ((i = 0, n = points.length); i < n; ++i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      stream.lineEnd();
    }
  }
  function link(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function longitude(point) {
    if (abs(point[0]) <= pi) return point[0]; else return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);
  }
  function polygonContains(polygon, point) {
    var lambda = longitude(point), phi = point[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle = 0, winding = 0;
    var sum = new d3Array.Adder();
    if (sinPhi === 1) phi = halfPi + epsilon; else if (sinPhi === -1) phi = -halfPi - epsilon;
    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue;
      var ring, m, point0 = ring[m - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin(phi0), cosPhi0 = cos(phi0);
      for (var j = 0; j < m; (++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1)) {
        var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi1), cosPhi1 = cos(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > pi, k = sinPhi0 * sinPhi1;
        sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
        angle += antimeridian ? delta + sign * tau : delta;
        // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?
        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    }
    // First, determine whether the South pole is inside or outside:
    // 
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    // (counter-clockwise) area.
    // 
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.
    return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ winding & 1;
  }
  function clip(pointVisible, clipLine, interpolate, start) {
    return function (sink) {
      var line = clipLine(sink), ringBuffer = clipBuffer(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function () {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3Array.merge(segments);
          var startInside = polygonContains(polygon, start);
          if (segments.length) {
            if (!polygonStarted) (sink.polygonStart(), polygonStarted = true);
            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted) (sink.polygonStart(), polygonStarted = true);
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }
          if (polygonStarted) (sink.polygonEnd(), polygonStarted = false);
          segments = polygon = null;
        },
        sphere: function () {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };
      function point(lambda, phi) {
        if (pointVisible(lambda, phi)) sink.point(lambda, phi);
      }
      function pointLine(lambda, phi) {
        line.point(lambda, phi);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        ringSink.point(lambda, phi);
      }
      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        // No intersections.
        if (clean & 1) {
          segment = ringSegments[0];
          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) (sink.polygonStart(), polygonStarted = true);
            sink.lineStart();
            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
            sink.lineEnd();
          }
          return;
        }
        // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(validSegment));
      }
      return clip;
    };
  }
  function validSegment(segment) {
    return segment.length > 1;
  }
  // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.
  function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
  }
  var clipAntimeridian = clip(function () {
    return true;
  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);
  // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.
  function clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean;
    // no intersections
    return {
      lineStart: function () {
        stream.lineStart();
        clean = 1;
      },
      point: function (lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi : -pi, delta = abs(lambda1 - lambda0);
        if (abs(delta - pi) < epsilon) {
          // line crosses a pole
          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          stream.point(lambda1, phi0);
          clean = 0;
        } else if (sign0 !== sign1 && delta >= pi) {
          // line crosses antimeridian
          if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon;
          // handle degeneracies
          if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          clean = 0;
        }
        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
      },
      lineEnd: function () {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
      },
      clean: function () {
        return 2 - clean;
      }
    };
  }
  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin(lambda0 - lambda1);
    return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
  }
  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
      phi = direction * halfPi;
      stream.point(-pi, phi);
      stream.point(0, phi);
      stream.point(pi, phi);
      stream.point(pi, 0);
      stream.point(pi, -phi);
      stream.point(0, -phi);
      stream.point(-pi, -phi);
      stream.point(-pi, 0);
      stream.point(-pi, phi);
    } else if (abs(from[0] - to[0]) > epsilon) {
      var lambda = from[0] < to[0] ? pi : -pi;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function clipCircle(radius) {
    var cr = cos(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
    // TODO optimise for this common case
    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }
    function visible(lambda, phi) {
      return cos(lambda) * cos(phi) > cr;
    }
    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
      var point0, // previous point
      c0, // code for previous point
      v0, // visibility of previous point
      v00, // visibility of first point
      clean;
      // no intersections
      return {
        lineStart: function () {
          v00 = v0 = false;
          clean = 1;
        },
        point: function (lambda, phi) {
          var point1 = [lambda, phi], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
          if (!point0 && (v00 = v0 = v)) stream.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              // outside going in
              stream.lineStart();
              point2 = intersect(point1, point0);
              stream.point(point2[0], point2[1]);
            } else {
              // inside going out
              point2 = intersect(point0, point1);
              stream.point(point2[0], point2[1], 2);
              stream.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1], 3);
              }
            }
          }
          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }
          (point0 = point1, v0 = v, c0 = c);
        },
        lineEnd: function () {
          if (v0) stream.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function () {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
      var pa = cartesian(a), pb = cartesian(b);
      // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
      var n1 = [1, 0, 0], // normal
      n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], // cartesianDot(n1, n2),
      determinant = n2n2 - n1n2 * n1n2;
      // Two polar points.
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B);
      // Solve |p(t)|^2 = 1.
      var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = sqrt(t2), q = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q, A);
      q = spherical(q);
      if (!two) return q;
      // Two intersection points.
      var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
      if (lambda1 < lambda0) (z = lambda0, lambda0 = lambda1, lambda1 = z);
      var delta = lambda1 - lambda0, polar = abs(delta - pi) < epsilon, meridian = polar || delta < epsilon;
      if (!polar && phi1 < phi0) (z = phi0, phi0 = phi1, phi1 = z);
      // Check that the first point is between a and b.
      if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q, spherical(q1)];
      }
    }
    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code(lambda, phi) {
      var r = smallRadius ? radius : pi - radius, code = 0;
      if (lambda < -r) code |= 1; else // left
      if (lambda > r) code |= 2;
      // right
      if (phi < -r) code |= 4; else // below
      if (phi > r) code |= 8;
      // above
      return code;
    }
    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
  }
  function clipLine(a, b, x0, y0, x1, y1) {
    var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }
    if (t0 > 0) (a[0] = ax + t0 * dx, a[1] = ay + t0 * dy);
    if (t1 < 1) (b[0] = ax + t1 * dx, b[1] = ay + t1 * dy);
    return true;
  }
  var clipMax = 1e9, clipMin = -clipMax;
  // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
  function clipRectangle(x0, y0, x1, y1) {
    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
      var a = 0, a1 = 0;
      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }
    function corner(p, direction) {
      return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function (stream) {
      var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, // first point
      x_, y_, v_, // previous point
      first, clean;
      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };
      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }
      function polygonInside() {
        var winding = 0;
        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            (a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1]);
            if (a1 <= y1) {
              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
            } else {
              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
          }
        }
        return winding;
      }
      // Buffer geometry within a polygon and then clip it en masse.
      function polygonStart() {
        (activeStream = bufferStream, segments = [], polygon = [], clean = true);
      }
      function polygonEnd() {
        var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = d3Array.merge(segments)).length;
        if (cleanInside || visible) {
          stream.polygonStart();
          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }
          if (visible) {
            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
          }
          stream.polygonEnd();
        }
        (activeStream = stream, segments = polygon = ring = null);
      }
      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }
        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }
      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);
        if (first) {
          (x__ = x, y__ = y, v__ = v);
          first = false;
          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y); else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }
              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }
        (x_ = x, y_ = y, v_ = v);
      }
      return clipStream;
    };
  }
  function extent() {
    var x0 = 0, y0 = 0, x1 = 960, y1 = 500, cache, cacheStream, clip;
    return clip = {
      stream: function (stream) {
        return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
      },
      extent: function (_) {
        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
      }
    };
  }
  var lengthSum, lambda0$2, sinPhi0$1, cosPhi0$1;
  var lengthStream = {
    sphere: noop,
    point: noop,
    lineStart: lengthLineStart,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop
  };
  function lengthLineStart() {
    lengthStream.point = lengthPointFirst;
    lengthStream.lineEnd = lengthLineEnd;
  }
  function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = noop;
  }
  function lengthPointFirst(lambda, phi) {
    (lambda *= radians, phi *= radians);
    (lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi));
    lengthStream.point = lengthPoint;
  }
  function lengthPoint(lambda, phi) {
    (lambda *= radians, phi *= radians);
    var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda0$2), cosDelta = cos(delta), sinDelta = sin(delta), x = cosPhi * sinDelta, y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta, z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
    lengthSum.add(atan2(sqrt(x * x + y * y), z));
    (lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi);
  }
  function length(object) {
    lengthSum = new d3Array.Adder();
    geoStream(object, lengthStream);
    return +lengthSum;
  }
  var coordinates = [null, null], object = {
    type: "LineString",
    coordinates: coordinates
  };
  function distance(a, b) {
    coordinates[0] = a;
    coordinates[1] = b;
    return length(object);
  }
  var containsObjectType = {
    Feature: function (object, point) {
      return containsGeometry(object.geometry, point);
    },
    FeatureCollection: function (object, point) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
      return false;
    }
  };
  var containsGeometryType = {
    Sphere: function () {
      return true;
    },
    Point: function (object, point) {
      return containsPoint(object.coordinates, point);
    },
    MultiPoint: function (object, point) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) if (containsPoint(coordinates[i], point)) return true;
      return false;
    },
    LineString: function (object, point) {
      return containsLine(object.coordinates, point);
    },
    MultiLineString: function (object, point) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) if (containsLine(coordinates[i], point)) return true;
      return false;
    },
    Polygon: function (object, point) {
      return containsPolygon(object.coordinates, point);
    },
    MultiPolygon: function (object, point) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
      return false;
    },
    GeometryCollection: function (object, point) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) if (containsGeometry(geometries[i], point)) return true;
      return false;
    }
  };
  function containsGeometry(geometry, point) {
    return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
  }
  function containsPoint(coordinates, point) {
    return distance(coordinates, point) === 0;
  }
  function containsLine(coordinates, point) {
    var ao, bo, ab;
    for (var i = 0, n = coordinates.length; i < n; i++) {
      bo = distance(coordinates[i], point);
      if (bo === 0) return true;
      if (i > 0) {
        ab = distance(coordinates[i], coordinates[i - 1]);
        if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab) return true;
      }
      ao = bo;
    }
    return false;
  }
  function containsPolygon(coordinates, point) {
    return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
  }
  function ringRadians(ring) {
    return (ring = ring.map(pointRadians), ring.pop(), ring);
  }
  function pointRadians(point) {
    return [point[0] * radians, point[1] * radians];
  }
  function contains(object, point) {
    return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
  }
  function graticuleX(y0, y1, dy) {
    var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
    return function (x) {
      return y.map(function (y) {
        return [x, y];
      });
    };
  }
  function graticuleY(x0, x1, dx) {
    var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
    return function (y) {
      return x.map(function (x) {
        return [x, y];
      });
    };
  }
  function graticule() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
        return abs(x % DX) > epsilon;
      }).map(x)).concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
        return abs(y % DY) > epsilon;
      }).map(y));
    }
    graticule.lines = function () {
      return lines().map(function (coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function () {
      return {
        type: "Polygon",
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
      };
    };
    graticule.extent = function (_) {
      if (!arguments.length) return graticule.extentMinor();
      return graticule.extentMajor(_).extentMinor(_);
    };
    graticule.extentMajor = function (_) {
      if (!arguments.length) return [[X0, Y0], [X1, Y1]];
      (X0 = +_[0][0], X1 = +_[1][0]);
      (Y0 = +_[0][1], Y1 = +_[1][1]);
      if (X0 > X1) (_ = X0, X0 = X1, X1 = _);
      if (Y0 > Y1) (_ = Y0, Y0 = Y1, Y1 = _);
      return graticule.precision(precision);
    };
    graticule.extentMinor = function (_) {
      if (!arguments.length) return [[x0, y0], [x1, y1]];
      (x0 = +_[0][0], x1 = +_[1][0]);
      (y0 = +_[0][1], y1 = +_[1][1]);
      if (x0 > x1) (_ = x0, x0 = x1, x1 = _);
      if (y0 > y1) (_ = y0, y0 = y1, y1 = _);
      return graticule.precision(precision);
    };
    graticule.step = function (_) {
      if (!arguments.length) return graticule.stepMinor();
      return graticule.stepMajor(_).stepMinor(_);
    };
    graticule.stepMajor = function (_) {
      if (!arguments.length) return [DX, DY];
      (DX = +_[0], DY = +_[1]);
      return graticule;
    };
    graticule.stepMinor = function (_) {
      if (!arguments.length) return [dx, dy];
      (dx = +_[0], dy = +_[1]);
      return graticule;
    };
    graticule.precision = function (_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = graticuleX(y0, y1, 90);
      y = graticuleY(x0, x1, precision);
      X = graticuleX(Y0, Y1, 90);
      Y = graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
  }
  function graticule10() {
    return graticule()();
  }
  function interpolate(a, b) {
    var x0 = a[0] * radians, y0 = a[1] * radians, x1 = b[0] * radians, y1 = b[1] * radians, cy0 = cos(y0), sy0 = sin(y0), cy1 = cos(y1), sy1 = sin(y1), kx0 = cy0 * cos(x0), ky0 = cy0 * sin(x0), kx1 = cy1 * cos(x1), ky1 = cy1 * sin(x1), d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))), k = sin(d);
    var interpolate = d ? function (t) {
      var B = sin(t *= d) / k, A = sin(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];
    } : function () {
      return [x0 * degrees, y0 * degrees];
    };
    interpolate.distance = d;
    return interpolate;
  }
  var identity = x => x;
  var areaSum$1 = new d3Array.Adder(), areaRingSum$1 = new d3Array.Adder(), x00, y00, x0$1, y0$1;
  var areaStream$1 = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function () {
      areaStream$1.lineStart = areaRingStart$1;
      areaStream$1.lineEnd = areaRingEnd$1;
    },
    polygonEnd: function () {
      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
      areaSum$1.add(abs(areaRingSum$1));
      areaRingSum$1 = new d3Array.Adder();
    },
    result: function () {
      var area = areaSum$1 / 2;
      areaSum$1 = new d3Array.Adder();
      return area;
    }
  };
  function areaRingStart$1() {
    areaStream$1.point = areaPointFirst$1;
  }
  function areaPointFirst$1(x, y) {
    areaStream$1.point = areaPoint$1;
    (x00 = x0$1 = x, y00 = y0$1 = y);
  }
  function areaPoint$1(x, y) {
    areaRingSum$1.add(y0$1 * x - x0$1 * y);
    (x0$1 = x, y0$1 = y);
  }
  function areaRingEnd$1() {
    areaPoint$1(x00, y00);
  }
  var x0$2 = Infinity, y0$2 = x0$2, x1 = -x0$2, y1 = x1;
  var boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function () {
      var bounds = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds;
    }
  };
  function boundsPoint$1(x, y) {
    if (x < x0$2) x0$2 = x;
    if (x > x1) x1 = x;
    if (y < y0$2) y0$2 = y;
    if (y > y1) y1 = y;
  }
  // TODO Enforce positive area for exterior, negative area for interior?
  var X0$1 = 0, Y0$1 = 0, Z0$1 = 0, X1$1 = 0, Y1$1 = 0, Z1$1 = 0, X2$1 = 0, Y2$1 = 0, Z2$1 = 0, x00$1, y00$1, x0$3, y0$3;
  var centroidStream$1 = {
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function () {
      centroidStream$1.lineStart = centroidRingStart$1;
      centroidStream$1.lineEnd = centroidRingEnd$1;
    },
    polygonEnd: function () {
      centroidStream$1.point = centroidPoint$1;
      centroidStream$1.lineStart = centroidLineStart$1;
      centroidStream$1.lineEnd = centroidLineEnd$1;
    },
    result: function () {
      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];
      X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
      return centroid;
    }
  };
  function centroidPoint$1(x, y) {
    X0$1 += x;
    Y0$1 += y;
    ++Z0$1;
  }
  function centroidLineStart$1() {
    centroidStream$1.point = centroidPointFirstLine;
  }
  function centroidPointFirstLine(x, y) {
    centroidStream$1.point = centroidPointLine;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }
  function centroidPointLine(x, y) {
    var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }
  function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1;
  }
  function centroidRingStart$1() {
    centroidStream$1.point = centroidPointFirstRing;
  }
  function centroidRingEnd$1() {
    centroidPointRing(x00$1, y00$1);
  }
  function centroidPointFirstRing(x, y) {
    centroidStream$1.point = centroidPointRing;
    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
  }
  function centroidPointRing(x, y) {
    var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    z = y0$3 * x - x0$3 * y;
    X2$1 += z * (x0$3 + x);
    Y2$1 += z * (y0$3 + y);
    Z2$1 += z * 3;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }
  function PathContext(context) {
    this._context = context;
  }
  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function (_) {
      return (this._radius = _, this);
    },
    polygonStart: function () {
      this._line = 0;
    },
    polygonEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._point = 0;
    },
    lineEnd: function () {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function (x, y) {
      switch (this._point) {
        case 0:
          {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
        case 1:
          {
            this._context.lineTo(x, y);
            break;
          }
        default:
          {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau);
            break;
          }
      }
    },
    result: noop
  };
  var lengthSum$1 = new d3Array.Adder(), lengthRing, x00$2, y00$2, x0$4, y0$4;
  var lengthStream$1 = {
    point: noop,
    lineStart: function () {
      lengthStream$1.point = lengthPointFirst$1;
    },
    lineEnd: function () {
      if (lengthRing) lengthPoint$1(x00$2, y00$2);
      lengthStream$1.point = noop;
    },
    polygonStart: function () {
      lengthRing = true;
    },
    polygonEnd: function () {
      lengthRing = null;
    },
    result: function () {
      var length = +lengthSum$1;
      lengthSum$1 = new d3Array.Adder();
      return length;
    }
  };
  function lengthPointFirst$1(x, y) {
    lengthStream$1.point = lengthPoint$1;
    (x00$2 = x0$4 = x, y00$2 = y0$4 = y);
  }
  function lengthPoint$1(x, y) {
    (x0$4 -= x, y0$4 -= y);
    lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
    (x0$4 = x, y0$4 = y);
  }
  function PathString() {
    this._string = [];
  }
  PathString.prototype = {
    _radius: 4.5,
    _circle: circle$1(4.5),
    pointRadius: function (_) {
      if ((_ = +_) !== this._radius) (this._radius = _, this._circle = null);
      return this;
    },
    polygonStart: function () {
      this._line = 0;
    },
    polygonEnd: function () {
      this._line = NaN;
    },
    lineStart: function () {
      this._point = 0;
    },
    lineEnd: function () {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function (x, y) {
      switch (this._point) {
        case 0:
          {
            this._string.push("M", x, ",", y);
            this._point = 1;
            break;
          }
        case 1:
          {
            this._string.push("L", x, ",", y);
            break;
          }
        default:
          {
            if (this._circle == null) this._circle = circle$1(this._radius);
            this._string.push("M", x, ",", y, this._circle);
            break;
          }
      }
    },
    result: function () {
      if (this._string.length) {
        var result = this._string.join("");
        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };
  function circle$1(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  function index(projection, context) {
    var pointRadius = 4.5, projectionStream, contextStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }
    path.area = function (object) {
      geoStream(object, projectionStream(areaStream$1));
      return areaStream$1.result();
    };
    path.measure = function (object) {
      geoStream(object, projectionStream(lengthStream$1));
      return lengthStream$1.result();
    };
    path.bounds = function (object) {
      geoStream(object, projectionStream(boundsStream$1));
      return boundsStream$1.result();
    };
    path.centroid = function (object) {
      geoStream(object, projectionStream(centroidStream$1));
      return centroidStream$1.result();
    };
    path.projection = function (_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
    };
    path.context = function (_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };
    path.pointRadius = function (_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    return path.projection(projection).context(context);
  }
  function transform(methods) {
    return {
      stream: transformer(methods)
    };
  }
  function transformer(methods) {
    return function (stream) {
      var s = new TransformStream();
      for (var key in methods) s[key] = methods[key];
      s.stream = stream;
      return s;
    };
  }
  function TransformStream() {}
  TransformStream.prototype = {
    constructor: TransformStream,
    point: function (x, y) {
      this.stream.point(x, y);
    },
    sphere: function () {
      this.stream.sphere();
    },
    lineStart: function () {
      this.stream.lineStart();
    },
    lineEnd: function () {
      this.stream.lineEnd();
    },
    polygonStart: function () {
      this.stream.polygonStart();
    },
    polygonEnd: function () {
      this.stream.polygonEnd();
    }
  };
  function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([0, 0]);
    if (clip != null) projection.clipExtent(null);
    geoStream(object, projection.stream(boundsStream$1));
    fitBounds(boundsStream$1.result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
  }
  function fitExtent(projection, extent, object) {
    return fit(projection, function (b) {
      var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }
  function fitWidth(projection, width, object) {
    return fit(projection, function (b) {
      var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitHeight(projection, height, object) {
    return fit(projection, function (b) {
      var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  var maxDepth = 16, // maximum depth of subdivision
  cosMinDistance = cos(30 * radians);
  // cos(minimum angular distance)
  function resample(project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
  }
  function resampleNone(project) {
    return transformer({
      point: function (x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
      }
    });
  }
  function resample$1(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt(a * a + b * b + c * c), phi2 = asin(c /= m), lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 || // perpendicular projected distance
        abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || // midpoint close to an end
        a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
      }
    }
    return function (stream) {
      var lambda00, x00, y00, a00, b00, c00, // first point
      lambda0, x0, y0, a0, b0, c0;
      // previous point
      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          stream.polygonStart();
          resampleStream.lineStart = ringStart;
        },
        polygonEnd: function () {
          stream.polygonEnd();
          resampleStream.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
      }
      function linePoint(lambda, phi) {
        var c = cartesian([lambda, phi]), p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }
      function ringPoint(lambda, phi) {
        (linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0);
        resampleStream.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }
      return resampleStream;
    };
  }
  var transformRadians = transformer({
    point: function (x, y) {
      this.stream.point(x * radians, y * radians);
    }
  });
  function transformRotate(rotate) {
    return transformer({
      point: function (x, y) {
        var r = rotate(x, y);
        return this.stream.point(r[0], r[1]);
      }
    });
  }
  function scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
      x *= sx;
      y *= sy;
      return [dx + k * x, dy - k * y];
    }
    transform.invert = function (x, y) {
      return [(x - dx) / k * sx, (dy - y) / k * sy];
    };
    return transform;
  }
  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
      x *= sx;
      y *= sy;
      return [a * x - b * y + dx, dy - b * x - a * y];
    }
    transform.invert = function (x, y) {
      return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
    };
    return transform;
  }
  function projection(project) {
    return projectionMutator(function () {
      return project;
    })();
  }
  function projectionMutator(projectAt) {
    var project, k = 150, // scale
    x = 480, y = 250, // translate
    lambda = 0, phi = 0, // center
    deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
    alpha = 0, // post-rotate angle
    sx = 1, // reflectX
    sy = 1, // reflectX
    theta = null, preclip = clipAntimeridian, // pre-clip angle
    x0 = null, y0, x1, y1, postclip = identity, // post-clip extent
    delta2 = 0.5, // precision
    projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
    function projection(point) {
      return projectRotateTransform(point[0] * radians, point[1] * radians);
    }
    function invert(point) {
      point = projectRotateTransform.invert(point[0], point[1]);
      return point && [point[0] * degrees, point[1] * degrees];
    }
    projection.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection.preclip = function (_) {
      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };
    projection.postclip = function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipAngle = function (_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
    };
    projection.clipExtent = function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };
    projection.scale = function (_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };
    projection.translate = function (_) {
      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
    };
    projection.center = function (_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
    };
    projection.rotate = function (_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
    };
    projection.angle = function (_) {
      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
    };
    projection.reflectX = function (_) {
      return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection.reflectY = function (_) {
      return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection.precision = function (_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
    };
    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object);
    };
    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object);
    };
    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object);
    };
    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object);
    };
    function recenter() {
      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
      projectTransform = compose(project, transform);
      projectRotateTransform = compose(rotate, projectTransform);
      projectResample = resample(projectTransform, delta2);
      return reset();
    }
    function reset() {
      cache = cacheStream = null;
      return projection;
    }
    return function () {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return recenter();
    };
  }
  function conicProjection(projectAt) {
    var phi0 = 0, phi1 = pi / 3, m = projectionMutator(projectAt), p = m(phi0, phi1);
    p.parallels = function (_) {
      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
    };
    return p;
  }
  function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = cos(phi0);
    function forward(lambda, phi) {
      return [lambda * cosPhi0, sin(phi) / cosPhi0];
    }
    forward.invert = function (x, y) {
      return [x / cosPhi0, asin(y * cosPhi0)];
    };
    return forward;
  }
  function conicEqualAreaRaw(y0, y1) {
    var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;
    // Are the parallels symmetrical around the Equator?
    if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);
    var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;
    function project(x, y) {
      var r = sqrt(c - 2 * n * sin(y)) / n;
      return [r * sin(x *= n), r0 - r * cos(x)];
    }
    project.invert = function (x, y) {
      var r0y = r0 - y, l = atan2(x, abs(r0y)) * sign(r0y);
      if (r0y * n < 0) l -= pi * sign(x) * sign(r0y);
      return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
    };
    return project;
  }
  function conicEqualArea() {
    return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
  }
  function albers() {
    return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
  }
  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex(streams) {
    var n = streams.length;
    return {
      point: function (x, y) {
        var i = -1;
        while (++i < n) streams[i].point(x, y);
      },
      sphere: function () {
        var i = -1;
        while (++i < n) streams[i].sphere();
      },
      lineStart: function () {
        var i = -1;
        while (++i < n) streams[i].lineStart();
      },
      lineEnd: function () {
        var i = -1;
        while (++i < n) streams[i].lineEnd();
      },
      polygonStart: function () {
        var i = -1;
        while (++i < n) streams[i].polygonStart();
      },
      polygonEnd: function () {
        var i = -1;
        while (++i < n) streams[i].polygonEnd();
      }
    };
  }
  // A composite projection for the United States, configured by default for
  // 960×500. The projection also works quite well at 960×600 if you change the
  // scale to 1285 and adjust the translate accordingly. The set of standard
  // parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
  function albersUsa() {
    var cache, cacheStream, lower48 = albers(), lower48Point, alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
    hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
    point, pointStream = {
      point: function (x, y) {
        point = [x, y];
      }
    };
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      return (point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point));
    }
    albersUsa.invert = function (coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
    };
    albersUsa.precision = function (_) {
      if (!arguments.length) return lower48.precision();
      (lower48.precision(_), alaska.precision(_), hawaii.precision(_));
      return reset();
    };
    albersUsa.scale = function (_) {
      if (!arguments.length) return lower48.scale();
      (lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_));
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function (_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);
      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);
      return reset();
    };
    albersUsa.fitExtent = function (extent, object) {
      return fitExtent(albersUsa, extent, object);
    };
    albersUsa.fitSize = function (size, object) {
      return fitSize(albersUsa, size, object);
    };
    albersUsa.fitWidth = function (width, object) {
      return fitWidth(albersUsa, width, object);
    };
    albersUsa.fitHeight = function (height, object) {
      return fitHeight(albersUsa, height, object);
    };
    function reset() {
      cache = cacheStream = null;
      return albersUsa;
    }
    return albersUsa.scale(1070);
  }
  function azimuthalRaw(scale) {
    return function (x, y) {
      var cx = cos(x), cy = cos(y), k = scale(cx * cy);
      if (k === Infinity) return [2, 0];
      return [k * cy * sin(x), k * sin(y)];
    };
  }
  function azimuthalInvert(angle) {
    return function (x, y) {
      var z = sqrt(x * x + y * y), c = angle(z), sc = sin(c), cc = cos(c);
      return [atan2(x * sc, z * cc), asin(z && y * sc / z)];
    };
  }
  var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
    return sqrt(2 / (1 + cxcy));
  });
  azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
    return 2 * asin(z / 2);
  });
  function azimuthalEqualArea() {
    return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
  }
  var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
    return (c = acos(c)) && c / sin(c);
  });
  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
    return z;
  });
  function azimuthalEquidistant() {
    return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
  }
  function mercatorRaw(lambda, phi) {
    return [lambda, log(tan((halfPi + phi) / 2))];
  }
  mercatorRaw.invert = function (x, y) {
    return [x, 2 * atan(exp(y)) - halfPi];
  };
  function mercator() {
    return mercatorProjection(mercatorRaw).scale(961 / tau);
  }
  function mercatorProjection(project) {
    var m = projection(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x0 = null, y0, x1, y1;
    // clip extent
    m.scale = function (_) {
      return arguments.length ? (scale(_), reclip()) : scale();
    };
    m.translate = function (_) {
      return arguments.length ? (translate(_), reclip()) : translate();
    };
    m.center = function (_) {
      return arguments.length ? (center(_), reclip()) : center();
    };
    m.clipExtent = function (_) {
      return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };
    function reclip() {
      var k = pi * scale(), t = m(rotation(m.rotate()).invert([0, 0]));
      return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
    }
    return reclip();
  }
  function tany(y) {
    return tan((halfPi + y) / 2);
  }
  function conicConformalRaw(y0, y1) {
    var cy0 = cos(y0), n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)), f = cy0 * pow(tany(y0), n) / n;
    if (!n) return mercatorRaw;
    function project(x, y) {
      if (f > 0) {
        if (y < -halfPi + epsilon) y = -halfPi + epsilon;
      } else {
        if (y > halfPi - epsilon) y = halfPi - epsilon;
      }
      var r = f / pow(tany(y), n);
      return [r * sin(n * x), f - r * cos(n * x)];
    }
    project.invert = function (x, y) {
      var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy), l = atan2(x, abs(fy)) * sign(fy);
      if (fy * n < 0) l -= pi * sign(x) * sign(fy);
      return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];
    };
    return project;
  }
  function conicConformal() {
    return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
  }
  function equirectangularRaw(lambda, phi) {
    return [lambda, phi];
  }
  equirectangularRaw.invert = equirectangularRaw;
  function equirectangular() {
    return projection(equirectangularRaw).scale(152.63);
  }
  function conicEquidistantRaw(y0, y1) {
    var cy0 = cos(y0), n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0), g = cy0 / n + y0;
    if (abs(n) < epsilon) return equirectangularRaw;
    function project(x, y) {
      var gy = g - y, nx = n * x;
      return [gy * sin(nx), g - gy * cos(nx)];
    }
    project.invert = function (x, y) {
      var gy = g - y, l = atan2(x, abs(gy)) * sign(gy);
      if (gy * n < 0) l -= pi * sign(x) * sign(gy);
      return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];
    };
    return project;
  }
  function conicEquidistant() {
    return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
  }
  var A1 = 1.340264, A2 = -0.081106, A3 = 0.000893, A4 = 0.003796, M = sqrt(3) / 2, iterations = 12;
  function equalEarthRaw(lambda, phi) {
    var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
    return [lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
  }
  equalEarthRaw.invert = function (x, y) {
    var l = y, l2 = l * l, l6 = l2 * l2 * l2;
    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
      (l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2);
      if (abs(delta) < epsilon2) break;
    }
    return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l), asin(sin(l) / M)];
  };
  function equalEarth() {
    return projection(equalEarthRaw).scale(177.158);
  }
  function gnomonicRaw(x, y) {
    var cy = cos(y), k = cos(x) * cy;
    return [cy * sin(x) / k, sin(y) / k];
  }
  gnomonicRaw.invert = azimuthalInvert(atan);
  function gnomonic() {
    return projection(gnomonicRaw).scale(144.049).clipAngle(60);
  }
  function identity$1() {
    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
    alpha = 0, ca, sa, // angle
    x0 = null, y0, x1, y1, // clip extent
    kx = 1, ky = 1, transform = transformer({
      point: function (x, y) {
        var p = projection([x, y]);
        this.stream.point(p[0], p[1]);
      }
    }), postclip = identity, cache, cacheStream;
    function reset() {
      kx = k * sx;
      ky = k * sy;
      cache = cacheStream = null;
      return projection;
    }
    function projection(p) {
      var x = p[0] * kx, y = p[1] * ky;
      if (alpha) {
        var t = y * ca - x * sa;
        x = x * ca + y * sa;
        y = t;
      }
      return [x + tx, y + ty];
    }
    projection.invert = function (p) {
      var x = p[0] - tx, y = p[1] - ty;
      if (alpha) {
        var t = y * ca + x * sa;
        x = x * ca - y * sa;
        y = t;
      }
      return [x / kx, y / ky];
    };
    projection.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    };
    projection.postclip = function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipExtent = function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };
    projection.scale = function (_) {
      return arguments.length ? (k = +_, reset()) : k;
    };
    projection.translate = function (_) {
      return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
    };
    projection.angle = function (_) {
      return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;
    };
    projection.reflectX = function (_) {
      return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
    };
    projection.reflectY = function (_) {
      return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
    };
    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object);
    };
    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object);
    };
    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object);
    };
    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object);
    };
    return projection;
  }
  function naturalEarth1Raw(lambda, phi) {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
  }
  naturalEarth1Raw.invert = function (x, y) {
    var phi = y, i = 25, delta;
    do {
      var phi2 = phi * phi, phi4 = phi2 * phi2;
      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
    } while (abs(delta) > epsilon && --i > 0);
    return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
  };
  function naturalEarth1() {
    return projection(naturalEarth1Raw).scale(175.295);
  }
  function orthographicRaw(x, y) {
    return [cos(y) * sin(x), sin(y)];
  }
  orthographicRaw.invert = azimuthalInvert(asin);
  function orthographic() {
    return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);
  }
  function stereographicRaw(x, y) {
    var cy = cos(y), k = 1 + cos(x) * cy;
    return [cy * sin(x) / k, sin(y) / k];
  }
  stereographicRaw.invert = azimuthalInvert(function (z) {
    return 2 * atan(z);
  });
  function stereographic() {
    return projection(stereographicRaw).scale(250).clipAngle(142);
  }
  function transverseMercatorRaw(lambda, phi) {
    return [log(tan((halfPi + phi) / 2)), -lambda];
  }
  transverseMercatorRaw.invert = function (x, y) {
    return [-y, 2 * atan(exp(x)) - halfPi];
  };
  function transverseMercator() {
    var m = mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
    m.center = function (_) {
      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
    };
    m.rotate = function (_) {
      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
    };
    return rotate([0, 0, 90]).scale(159.155);
  }
  exports.geoAlbers = albers;
  exports.geoAlbersUsa = albersUsa;
  exports.geoArea = area;
  exports.geoAzimuthalEqualArea = azimuthalEqualArea;
  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
  exports.geoAzimuthalEquidistant = azimuthalEquidistant;
  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
  exports.geoBounds = bounds;
  exports.geoCentroid = centroid;
  exports.geoCircle = circle;
  exports.geoClipAntimeridian = clipAntimeridian;
  exports.geoClipCircle = clipCircle;
  exports.geoClipExtent = extent;
  exports.geoClipRectangle = clipRectangle;
  exports.geoConicConformal = conicConformal;
  exports.geoConicConformalRaw = conicConformalRaw;
  exports.geoConicEqualArea = conicEqualArea;
  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
  exports.geoConicEquidistant = conicEquidistant;
  exports.geoConicEquidistantRaw = conicEquidistantRaw;
  exports.geoContains = contains;
  exports.geoDistance = distance;
  exports.geoEqualEarth = equalEarth;
  exports.geoEqualEarthRaw = equalEarthRaw;
  exports.geoEquirectangular = equirectangular;
  exports.geoEquirectangularRaw = equirectangularRaw;
  exports.geoGnomonic = gnomonic;
  exports.geoGnomonicRaw = gnomonicRaw;
  exports.geoGraticule = graticule;
  exports.geoGraticule10 = graticule10;
  exports.geoIdentity = identity$1;
  exports.geoInterpolate = interpolate;
  exports.geoLength = length;
  exports.geoMercator = mercator;
  exports.geoMercatorRaw = mercatorRaw;
  exports.geoNaturalEarth1 = naturalEarth1;
  exports.geoNaturalEarth1Raw = naturalEarth1Raw;
  exports.geoOrthographic = orthographic;
  exports.geoOrthographicRaw = orthographicRaw;
  exports.geoPath = index;
  exports.geoProjection = projection;
  exports.geoProjectionMutator = projectionMutator;
  exports.geoRotation = rotation;
  exports.geoStereographic = stereographic;
  exports.geoStereographicRaw = stereographicRaw;
  exports.geoStream = geoStream;
  exports.geoTransform = transform;
  exports.geoTransverseMercator = transverseMercator;
  exports.geoTransverseMercatorRaw = transverseMercatorRaw;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA"}],"6IvNw":[function(require,module,exports) {
var define;
// https://d3js.org/d3-geo-projection/ v3.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-geo'), require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-array'], factory) : factory(global.d3 = global.d3 || ({}), global.d3, global.d3);
})(this, function (exports, d3Geo, d3Array) {
  "use strict";
  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var exp = Math.exp;
  var floor = Math.floor;
  var log = Math.log;
  var max = Math.max;
  var min = Math.min;
  var pow = Math.pow;
  var round = Math.round;
  var sign = Math.sign || (function (x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  });
  var sin = Math.sin;
  var tan = Math.tan;
  var epsilon = 1e-6;
  var epsilon2 = 1e-12;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var quarterPi = pi / 4;
  var sqrt1_2 = Math.SQRT1_2;
  var sqrt2 = sqrt(2);
  var sqrtPi = sqrt(pi);
  var tau = pi * 2;
  var degrees = 180 / pi;
  var radians = pi / 180;
  function sinci(x) {
    return x ? x / Math.sin(x) : 1;
  }
  function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
  }
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
  }
  function sqrt(x) {
    return x > 0 ? Math.sqrt(x) : 0;
  }
  function tanh(x) {
    x = exp(2 * x);
    return (x - 1) / (x + 1);
  }
  function sinh(x) {
    return (exp(x) - exp(-x)) / 2;
  }
  function cosh(x) {
    return (exp(x) + exp(-x)) / 2;
  }
  function arsinh(x) {
    return log(x + sqrt(x * x + 1));
  }
  function arcosh(x) {
    return log(x + sqrt(x * x - 1));
  }
  function airyRaw(beta) {
    var tanBeta_2 = tan(beta / 2), b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);
    function forward(x, y) {
      var cosx = cos(x), cosy = cos(y), siny = sin(y), cosz = cosy * cosx, k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));
      return [k * cosy * sin(x), k * siny];
    }
    forward.invert = function (x, y) {
      var r = sqrt(x * x + y * y), z = -beta / 2, i = 50, delta;
      if (!r) return [0, 0];
      do {
        var z_2 = z / 2, cosz_2 = cos(z_2), sinz_2 = sin(z_2), tanz_2 = sinz_2 / cosz_2, lnsecz_2 = -log(abs(cosz_2));
        z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);
      } while (abs(delta) > epsilon && --i > 0);
      var sinz = sin(z);
      return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];
    };
    return forward;
  }
  function airy() {
    var beta = halfPi, m = d3Geo.geoProjectionMutator(airyRaw), p = m(beta);
    p.radius = function (_) {
      return arguments.length ? m(beta = _ * radians) : beta * degrees;
    };
    return p.scale(179.976).clipAngle(147);
  }
  function aitoffRaw(x, y) {
    var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));
    return [2 * cosy * sin(x) * sincia, sin(y) * sincia];
  }
  // Abort if [x, y] is not within an ellipse centered at [0, 0] with
  // semi-major axis pi and semi-minor axis pi/2.
  aitoffRaw.invert = function (x, y) {
    if (x * x + 4 * y * y > pi * pi + epsilon) return;
    var x1 = x, y1 = y, i = 25;
    do {
      var sinx = sin(x1), sinx_2 = sin(x1 / 2), cosx_2 = cos(x1 / 2), siny = sin(y1), cosy = cos(y1), sin_2y = sin(2 * y1), sin2y = siny * siny, cos2y = cosy * cosy, sin2x_2 = sinx_2 * sinx_2, c = 1 - cos2y * cosx_2 * cosx_2, e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0, f, fx = 2 * e * cosy * sinx_2 - x, fy = e * siny - y, dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y), dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2), dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx), dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy), z = dxdy * dydx - dydy * dxdx;
      if (!z) break;
      var dx = (fy * dxdy - fx * dydy) / z, dy = (fx * dydx - fy * dxdx) / z;
      (x1 -= dx, y1 -= dy);
    } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);
    return [x1, y1];
  };
  function aitoff() {
    return d3Geo.geoProjection(aitoffRaw).scale(152.63);
  }
  function armadilloRaw(phi0) {
    var sinPhi0 = sin(phi0), cosPhi0 = cos(phi0), sPhi0 = phi0 >= 0 ? 1 : -1, tanPhi0 = tan(sPhi0 * phi0), k = (1 + sinPhi0 - cosPhi0) / 2;
    function forward(lambda, phi) {
      var cosPhi = cos(phi), cosLambda = cos(lambda /= 2);
      return [(1 + cosPhi) * sin(lambda), (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda];
    }
    forward.invert = function (x, y) {
      var lambda = 0, phi = 0, i = 50;
      do {
        var cosLambda = cos(lambda), sinLambda = sin(lambda), cosPhi = cos(phi), sinPhi = sin(phi), A = 1 + cosPhi, fx = A * sinLambda - x, fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y, dxdLambda = A * cosLambda / 2, dxdPhi = -sinLambda * sinPhi, dydLambda = sinPhi0 * A * sinLambda / 2, dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi, denominator = dxdPhi * dydLambda - dydPhi * dxdLambda, dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2, dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;
        if (abs(dPhi) > 2) dPhi /= 2;
        (lambda -= dLambda, phi -= dPhi);
      } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);
      return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;
    };
    return forward;
  }
  function armadillo() {
    var phi0 = 20 * radians, sPhi0 = phi0 >= 0 ? 1 : -1, tanPhi0 = tan(sPhi0 * phi0), m = d3Geo.geoProjectionMutator(armadilloRaw), p = m(phi0), stream_ = p.stream;
    p.parallel = function (_) {
      if (!arguments.length) return phi0 * degrees;
      tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);
      return m(phi0);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream)), precision = p.precision();
      p.rotate(rotate);
      rotateStream.sphere = function () {
        (sphereStream.polygonStart(), sphereStream.lineStart());
        for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);
        if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {
          sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);
        }
        (sphereStream.lineEnd(), sphereStream.polygonEnd());
      };
      return rotateStream;
    };
    return p.scale(218.695).center([0, 28.0974]);
  }
  function augustRaw(lambda, phi) {
    var tanPhi = tan(phi / 2), k = sqrt(1 - tanPhi * tanPhi), c = 1 + k * cos(lambda /= 2), x = sin(lambda) * k / c, y = tanPhi / c, x2 = x * x, y2 = y * y;
    return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];
  }
  augustRaw.invert = function (x, y) {
    (x *= 3 / 8, y *= 3 / 8);
    if (!x && abs(y) > 1) return null;
    var x2 = x * x, y2 = y * y, s = 1 + x2 + y2, sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2), eta = asin(sin3Eta) / 3, xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3, cosEta = cos(eta), coshXi = cosh(xi), d = coshXi * coshXi - cosEta * cosEta;
    return [sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d), sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)];
  };
  function august() {
    return d3Geo.geoProjection(augustRaw).scale(66.1603);
  }
  var sqrt8 = sqrt(8), phi0 = log(1 + sqrt2);
  function bakerRaw(lambda, phi) {
    var phi0 = abs(phi);
    return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];
  }
  bakerRaw.invert = function (x, y) {
    if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];
    var phi = quarterPi, i = 25, delta, y0;
    do {
      var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);
      phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));
    } while (abs(delta) > epsilon2 && --i > 0);
    return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];
  };
  function baker() {
    return d3Geo.geoProjection(bakerRaw).scale(112.314);
  }
  function berghausRaw(lobes) {
    var k = 2 * pi / lobes;
    function forward(lambda, phi) {
      var p = d3Geo.geoAzimuthalEquidistantRaw(lambda, phi);
      if (abs(lambda) > halfPi) {
        // back hemisphere
        var theta = atan2(p[1], p[0]), r = sqrt(p[0] * p[0] + p[1] * p[1]), theta0 = k * round((theta - halfPi) / k) + halfPi, alpha = atan2(sin(theta -= theta0), 2 - cos(theta));
        // angle relative to lobe end
        theta = theta0 + asin(pi / r * sin(alpha)) - alpha;
        p[0] = r * cos(theta);
        p[1] = r * sin(theta);
      }
      return p;
    }
    forward.invert = function (x, y) {
      var r = sqrt(x * x + y * y);
      if (r > halfPi) {
        var theta = atan2(y, x), theta0 = k * round((theta - halfPi) / k) + halfPi, s = theta > theta0 ? -1 : 1, A = r * cos(theta0 - theta), cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));
        theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);
        (x = r * cos(theta), y = r * sin(theta));
      }
      return d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
    };
    return forward;
  }
  function berghaus() {
    var lobes = 5, m = d3Geo.geoProjectionMutator(berghausRaw), p = m(lobes), projectionStream = p.stream, epsilon$$1 = 1e-2, cr = -cos(epsilon$$1 * radians), sr = sin(epsilon$$1 * radians);
    p.lobes = function (_) {
      return arguments.length ? m(lobes = +_) : lobes;
    };
    p.stream = function (stream) {
      var rotate = p.rotate(), rotateStream = projectionStream(stream), sphereStream = (p.rotate([0, 0]), projectionStream(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        (sphereStream.polygonStart(), sphereStream.lineStart());
        for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; (++i, phi -= delta, phi0 -= delta0)) {
          sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);
          if (phi < -90) {
            sphereStream.point(-90, -180 - phi - epsilon$$1);
            sphereStream.point(-90, -180 - phi + epsilon$$1);
          } else {
            sphereStream.point(90, phi + epsilon$$1);
            sphereStream.point(90, phi - epsilon$$1);
          }
        }
        (sphereStream.lineEnd(), sphereStream.polygonEnd());
      };
      return rotateStream;
    };
    return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);
  }
  function hammerRaw(A, B) {
    if (arguments.length < 2) B = A;
    if (B === 1) return d3Geo.geoAzimuthalEqualAreaRaw;
    if (B === Infinity) return hammerQuarticAuthalicRaw;
    function forward(lambda, phi) {
      var coordinates = d3Geo.geoAzimuthalEqualAreaRaw(lambda / B, phi);
      coordinates[0] *= A;
      return coordinates;
    }
    forward.invert = function (x, y) {
      var coordinates = d3Geo.geoAzimuthalEqualAreaRaw.invert(x / A, y);
      coordinates[0] *= B;
      return coordinates;
    };
    return forward;
  }
  function hammerQuarticAuthalicRaw(lambda, phi) {
    return [lambda * cos(phi) / cos(phi /= 2), 2 * sin(phi)];
  }
  hammerQuarticAuthalicRaw.invert = function (x, y) {
    var phi = 2 * asin(y / 2);
    return [x * cos(phi / 2) / cos(phi), phi];
  };
  function hammer() {
    var B = 2, m = d3Geo.geoProjectionMutator(hammerRaw), p = m(B);
    p.coefficient = function (_) {
      if (!arguments.length) return B;
      return m(B = +_);
    };
    return p.scale(169.529);
  }
  // Approximate Newton-Raphson
  // Solve f(x) = y, start from x
  function solve(f, y, x) {
    var steps = 100, delta, f0, f1;
    x = x === undefined ? 0 : +x;
    y = +y;
    do {
      f0 = f(x);
      f1 = f(x + epsilon);
      if (f0 === f1) f1 = f0 + epsilon;
      x -= delta = -1 * epsilon * (f0 - y) / (f0 - f1);
    } while (steps-- > 0 && abs(delta) > epsilon);
    return steps < 0 ? NaN : x;
  }
  // Approximate Newton-Raphson in 2D
  // Solve f(a,b) = [x,y]
  function solve2d(f, MAX_ITERATIONS, eps) {
    if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;
    if (eps === undefined) eps = epsilon2;
    return function (x, y, a, b) {
      var err2, da, db;
      a = a === undefined ? 0 : +a;
      b = b === undefined ? 0 : +b;
      for (var i = 0; i < MAX_ITERATIONS; i++) {
        var p = f(a, b), // diffs
        tx = p[0] - x, ty = p[1] - y;
        if (abs(tx) < eps && abs(ty) < eps) break;
        // we're there!
        // backtrack if we overshot
        var h = tx * tx + ty * ty;
        if (h > err2) {
          a -= da /= 2;
          b -= db /= 2;
          continue;
        }
        err2 = h;
        // partial derivatives
        var ea = (a > 0 ? -1 : 1) * eps, eb = (b > 0 ? -1 : 1) * eps, pa = f(a + ea, b), pb = f(a, b + eb), dxa = (pa[0] - p[0]) / ea, dya = (pa[1] - p[1]) / ea, dxb = (pb[0] - p[0]) / eb, dyb = (pb[1] - p[1]) / eb, // determinant
        D = dyb * dxa - dya * dxb, // newton step — or half-step for small D
        l = (abs(D) < 0.5 ? 0.5 : 1) / D;
        da = (ty * dxb - tx * dyb) * l;
        db = (tx * dya - ty * dxa) * l;
        a += da;
        b += db;
        if (abs(da) < eps && abs(db) < eps) break;
      }
      return [a, b];
    };
  }
  // Bertin 1953 as a modified Briesemeister
  // https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642
  function bertin1953Raw() {
    var hammer$$1 = hammerRaw(1.68, 2), fu = 1.4, k = 12;
    function forward(lambda, phi) {
      if (lambda + phi < -fu) {
        var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;
        lambda += u;
        phi -= 0.8 * u * sin(phi + pi / 2);
      }
      var r = hammer$$1(lambda, phi);
      var d = (1 - cos(lambda * phi)) / k;
      if (r[1] < 0) {
        r[0] *= 1 + d;
      }
      if (r[1] > 0) {
        r[1] *= 1 + d / 1.5 * r[0] * r[0];
      }
      return r;
    }
    forward.invert = solve2d(forward);
    return forward;
  }
  function bertin() {
    // this projection should not be rotated
    return d3Geo.geoProjection(bertin1953Raw()).rotate([-16.5, -42]).scale(176.57).center([7.93, 0.09]);
  }
  function mollweideBromleyTheta(cp, phi) {
    var cpsinPhi = cp * sin(phi), i = 30, delta;
    do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi)); while (abs(delta) > epsilon && --i > 0);
    return phi / 2;
  }
  function mollweideBromleyRaw(cx, cy, cp) {
    function forward(lambda, phi) {
      return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];
    }
    forward.invert = function (x, y) {
      return (y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)]);
    };
    return forward;
  }
  var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);
  function mollweide() {
    return d3Geo.geoProjection(mollweideRaw).scale(169.529);
  }
  var k = 2.00276, w = 1.11072;
  function boggsRaw(lambda, phi) {
    var theta = mollweideBromleyTheta(pi, phi);
    return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];
  }
  boggsRaw.invert = function (x, y) {
    var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;
    do {
      phi = ky - sqrt2 * sin(theta);
      theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));
    } while (abs(delta) > epsilon && --i > 0);
    phi = ky - sqrt2 * sin(theta);
    return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];
  };
  function boggs() {
    return d3Geo.geoProjection(boggsRaw).scale(160.857);
  }
  function parallel1(projectAt) {
    var phi0 = 0, m = d3Geo.geoProjectionMutator(projectAt), p = m(phi0);
    p.parallel = function (_) {
      return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;
    };
    return p;
  }
  function sinusoidalRaw(lambda, phi) {
    return [lambda * cos(phi), phi];
  }
  sinusoidalRaw.invert = function (x, y) {
    return [x / cos(y), y];
  };
  function sinusoidal() {
    return d3Geo.geoProjection(sinusoidalRaw).scale(152.63);
  }
  function bonneRaw(phi0) {
    if (!phi0) return sinusoidalRaw;
    var cotPhi0 = 1 / tan(phi0);
    function forward(lambda, phi) {
      var rho = cotPhi0 + phi0 - phi, e = rho ? lambda * cos(phi) / rho : rho;
      return [rho * sin(e), cotPhi0 - rho * cos(e)];
    }
    forward.invert = function (x, y) {
      var rho = sqrt(x * x + (y = cotPhi0 - y) * y), phi = cotPhi0 + phi0 - rho;
      return [rho / cos(phi) * atan2(x, y), phi];
    };
    return forward;
  }
  function bonne() {
    return parallel1(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);
  }
  function bottomleyRaw(sinPsi) {
    function forward(lambda, phi) {
      var rho = halfPi - phi, eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;
      return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];
    }
    forward.invert = function (x, y) {
      var x1 = x * sinPsi, y1 = halfPi - y, rho = sqrt(x1 * x1 + y1 * y1), eta = atan2(x1, y1);
      return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];
    };
    return forward;
  }
  function bottomley() {
    var sinPsi = 0.5, m = d3Geo.geoProjectionMutator(bottomleyRaw), p = m(sinPsi);
    p.fraction = function (_) {
      return arguments.length ? m(sinPsi = +_) : sinPsi;
    };
    return p.scale(158.837);
  }
  var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);
  function bromley() {
    return d3Geo.geoProjection(bromleyRaw).scale(152.63);
  }
  // Azimuthal distance.
  function distance(dPhi, c1, s1, c2, s2, dLambda) {
    var cosdLambda = cos(dLambda), r;
    if (abs(dPhi) > 1 || abs(dLambda) > 1) {
      r = acos(s1 * s2 + c1 * c2 * cosdLambda);
    } else {
      var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);
      r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));
    }
    return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];
  }
  // Angle opposite a, and contained between sides of lengths b and c.
  function angle(b, c, a) {
    return acos((b * b + c * c - a * a) / (2 * b * c));
  }
  // Normalize longitude.
  function longitude(lambda) {
    return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));
  }
  function chamberlinRaw(p0, p1, p2) {
    var points = [[p0[0], p0[1], sin(p0[1]), cos(p0[1])], [p1[0], p1[1], sin(p1[1]), cos(p1[1])], [p2[0], p2[1], sin(p2[1]), cos(p2[1])]];
    for (var a = points[2], b, i = 0; i < 3; (++i, a = b)) {
      b = points[i];
      a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
      a.point = [0, 0];
    }
    var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]), beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]), beta2 = pi - beta0;
    points[2].point[1] = 0;
    points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);
    var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))];
    function forward(lambda, phi) {
      var sinPhi = sin(phi), cosPhi = cos(phi), v = new Array(3), i;
      // Compute distance and azimuth from control points.
      for (i = 0; i < 3; ++i) {
        var p = points[i];
        v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);
        if (!v[i][0]) return p.point;
        v[i][1] = longitude(v[i][1] - p.v[1]);
      }
      // Arithmetic mean of interception points.
      var point = mean.slice();
      for (i = 0; i < 3; ++i) {
        var j = i == 2 ? 0 : i + 1;
        var a = angle(points[i].v[0], v[i][0], v[j][0]);
        if (v[i][1] < 0) a = -a;
        if (!i) {
          point[0] += v[i][0] * cos(a);
          point[1] -= v[i][0] * sin(a);
        } else if (i == 1) {
          a = beta1 - a;
          point[0] -= v[i][0] * cos(a);
          point[1] -= v[i][0] * sin(a);
        } else {
          a = beta2 - a;
          point[0] += v[i][0] * cos(a);
          point[1] += v[i][0] * sin(a);
        }
      }
      (point[0] /= 3, point[1] /= 3);
      return point;
    }
    return forward;
  }
  function pointRadians(p) {
    return (p[0] *= radians, p[1] *= radians, p);
  }
  function chamberlinAfrica() {
    return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);
  }
  function chamberlin(p0, p1, p2) {
    // TODO order matters!
    var c = d3Geo.geoCentroid({
      type: "MultiPoint",
      coordinates: [p0, p1, p2]
    }), R = [-c[0], -c[1]], r = d3Geo.geoRotation(R), f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));
    f.invert = solve2d(f);
    var p = d3Geo.geoProjection(f).rotate(R), center = p.center;
    delete p.rotate;
    p.center = function (_) {
      return arguments.length ? center(r(_)) : r.invert(center());
    };
    return p.clipAngle(90);
  }
  function collignonRaw(lambda, phi) {
    var alpha = sqrt(1 - sin(phi));
    return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];
  }
  collignonRaw.invert = function (x, y) {
    var lambda = (lambda = y / sqrtPi - 1) * lambda;
    return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];
  };
  function collignon() {
    return d3Geo.geoProjection(collignonRaw).scale(95.6464).center([0, 30]);
  }
  function craigRaw(phi0) {
    var tanPhi0 = tan(phi0);
    function forward(lambda, phi) {
      return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];
    }
    forward.invert = tanPhi0 ? function (x, y) {
      if (x) y *= sin(x) / x;
      var cosLambda = cos(x);
      return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];
    } : function (x, y) {
      return [x, asin(x ? y * tan(x) / x : y)];
    };
    return forward;
  }
  function craig() {
    return parallel1(craigRaw).scale(249.828).clipAngle(90);
  }
  var sqrt3 = sqrt(3);
  function crasterRaw(lambda, phi) {
    return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];
  }
  crasterRaw.invert = function (x, y) {
    var phi = 3 * asin(y / (sqrt3 * sqrtPi));
    return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];
  };
  function craster() {
    return d3Geo.geoProjection(crasterRaw).scale(156.19);
  }
  function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = cos(phi0);
    function forward(lambda, phi) {
      return [lambda * cosPhi0, sin(phi) / cosPhi0];
    }
    forward.invert = function (x, y) {
      return [x / cosPhi0, asin(y * cosPhi0)];
    };
    return forward;
  }
  function cylindricalEqualArea() {
    return parallel1(cylindricalEqualAreaRaw).parallel(38.58).// acos(sqrt(width / height / pi)) * radians
    scale(195.044);
  }
  function cylindricalStereographicRaw(phi0) {
    var cosPhi0 = cos(phi0);
    function forward(lambda, phi) {
      return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];
    }
    forward.invert = function (x, y) {
      return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];
    };
    return forward;
  }
  function cylindricalStereographic() {
    return parallel1(cylindricalStereographicRaw).scale(124.75);
  }
  function eckert1Raw(lambda, phi) {
    var alpha = sqrt(8 / (3 * pi));
    return [alpha * lambda * (1 - abs(phi) / pi), alpha * phi];
  }
  eckert1Raw.invert = function (x, y) {
    var alpha = sqrt(8 / (3 * pi)), phi = y / alpha;
    return [x / (alpha * (1 - abs(phi) / pi)), phi];
  };
  function eckert1() {
    return d3Geo.geoProjection(eckert1Raw).scale(165.664);
  }
  function eckert2Raw(lambda, phi) {
    var alpha = sqrt(4 - 3 * sin(abs(phi)));
    return [2 / sqrt(6 * pi) * lambda * alpha, sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)];
  }
  eckert2Raw.invert = function (x, y) {
    var alpha = 2 - abs(y) / sqrt(2 * pi / 3);
    return [x * sqrt(6 * pi) / (2 * alpha), sign(y) * asin((4 - alpha * alpha) / 3)];
  };
  function eckert2() {
    return d3Geo.geoProjection(eckert2Raw).scale(165.664);
  }
  function eckert3Raw(lambda, phi) {
    var k = sqrt(pi * (4 + pi));
    return [2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))), 4 / k * phi];
  }
  eckert3Raw.invert = function (x, y) {
    var k = sqrt(pi * (4 + pi)) / 2;
    return [x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))), y * k / 2];
  };
  function eckert3() {
    return d3Geo.geoProjection(eckert3Raw).scale(180.739);
  }
  function eckert4Raw(lambda, phi) {
    var k = (2 + halfPi) * sin(phi);
    phi /= 2;
    for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {
      var cosPhi = cos(phi);
      phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));
    }
    return [2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)), 2 * sqrt(pi / (4 + pi)) * sin(phi)];
  }
  eckert4Raw.invert = function (x, y) {
    var A = y * sqrt((4 + pi) / pi) / 2, k = asin(A), c = cos(k);
    return [x / (2 / sqrt(pi * (4 + pi)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfPi))];
  };
  function eckert4() {
    return d3Geo.geoProjection(eckert4Raw).scale(180.739);
  }
  function eckert5Raw(lambda, phi) {
    return [lambda * (1 + cos(phi)) / sqrt(2 + pi), 2 * phi / sqrt(2 + pi)];
  }
  eckert5Raw.invert = function (x, y) {
    var k = sqrt(2 + pi), phi = y * k / 2;
    return [k * x / (1 + cos(phi)), phi];
  };
  function eckert5() {
    return d3Geo.geoProjection(eckert5Raw).scale(173.044);
  }
  function eckert6Raw(lambda, phi) {
    var k = (1 + halfPi) * sin(phi);
    for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {
      phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));
    }
    k = sqrt(2 + pi);
    return [lambda * (1 + cos(phi)) / k, 2 * phi / k];
  }
  eckert6Raw.invert = function (x, y) {
    var j = 1 + halfPi, k = sqrt(j / 2);
    return [x * 2 * k / (1 + cos(y *= k)), asin((y + sin(y)) / j)];
  };
  function eckert6() {
    return d3Geo.geoProjection(eckert6Raw).scale(173.044);
  }
  var eisenlohrK = 3 + 2 * sqrt2;
  function eisenlohrRaw(lambda, phi) {
    var s0 = sin(lambda /= 2), c0 = cos(lambda), k = sqrt(cos(phi)), c1 = cos(phi /= 2), t = sin(phi) / (c1 + sqrt2 * c0 * k), c = sqrt(2 / (1 + t * t)), v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));
    return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];
  }
  eisenlohrRaw.invert = function (x, y) {
    if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;
    var lambda = p[0], phi = p[1], i = 20, p;
    (x /= eisenlohrK, y /= eisenlohrK);
    do {
      var _0 = lambda / 2, _1 = phi / 2, s0 = sin(_0), c0 = cos(_0), s1 = sin(_1), c1 = cos(_1), cos1 = cos(phi), k = sqrt(cos1), t = s1 / (c1 + sqrt2 * c0 * k), t2 = t * t, c = sqrt(2 / (1 + t2)), v0 = sqrt2 * c1 + (c0 + s0) * k, v1 = sqrt2 * c1 + (c0 - s0) * k, v2 = v0 / v1, v = sqrt(v2), vm1v = v - 1 / v, vp1v = v + 1 / v, fx = c * vm1v - 2 * log(v) - x, fy = c * t * vp1v - 2 * atan(t) - y, deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1, deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k), deltacDeltat = -0.5 * t * c * c * c, deltacDeltaLambda = deltacDeltat * deltatDeltaLambda, deltacDeltaPhi = deltacDeltat * deltatDeltaPhi, A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v, deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A, deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A), deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2), deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2), deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2), deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2), denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
      if (!denominator) break;
      var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator, deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
      lambda -= deltaLambda;
      phi = max(-halfPi, min(halfPi, phi - deltaPhi));
    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
    return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];
  };
  function eisenlohr() {
    return d3Geo.geoProjection(eisenlohrRaw).scale(62.5271);
  }
  var faheyK = cos(35 * radians);
  function faheyRaw(lambda, phi) {
    var t = tan(phi / 2);
    return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];
  }
  faheyRaw.invert = function (x, y) {
    var t = y / (1 + faheyK);
    return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];
  };
  function fahey() {
    return d3Geo.geoProjection(faheyRaw).scale(137.152);
  }
  function foucautRaw(lambda, phi) {
    var k = phi / 2, cosk = cos(k);
    return [2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];
  }
  foucautRaw.invert = function (x, y) {
    var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;
    return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];
  };
  function foucaut() {
    return d3Geo.geoProjection(foucautRaw).scale(135.264);
  }
  function foucautSinusoidalRaw(alpha) {
    var beta = 1 - alpha, equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0], polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1], ratio = sqrt(2 * polar / equatorial);
    function raw(lambda, phi) {
      var cosphi = cos(phi), sinphi = sin(phi);
      return [cosphi / (beta + alpha * cosphi) * lambda, beta * phi + alpha * sinphi];
    }
    function forward(lambda, phi) {
      var p = raw(lambda, phi);
      return [p[0] * ratio, p[1] / ratio];
    }
    function forwardMeridian(phi) {
      return forward(0, phi)[1];
    }
    forward.invert = function (x, y) {
      var phi = solve(forwardMeridian, y), lambda = x / ratio * (alpha + beta / cos(phi));
      return [lambda, phi];
    };
    return forward;
  }
  function foucautSinusoidal() {
    var alpha = 0.5, m = d3Geo.geoProjectionMutator(foucautSinusoidalRaw), p = m(alpha);
    p.alpha = function (_) {
      return arguments.length ? m(alpha = +_) : alpha;
    };
    return p.scale(168.725);
  }
  function gilbertForward(point) {
    return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];
  }
  function gilbertInvert(point) {
    return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];
  }
  function gilbert(projectionType) {
    if (projectionType == null) projectionType = d3Geo.geoOrthographic;
    var projection = projectionType(), equirectangular = d3Geo.geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]);
    // antimeridian cutting
    function gilbert(point) {
      return projection(gilbertForward(point));
    }
    if (projection.invert) gilbert.invert = function (point) {
      return gilbertInvert(projection.invert(point));
    };
    gilbert.stream = function (stream) {
      var s1 = projection.stream(stream), s0 = equirectangular.stream({
        point: function (lambda, phi) {
          s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees);
        },
        lineStart: function () {
          s1.lineStart();
        },
        lineEnd: function () {
          s1.lineEnd();
        },
        polygonStart: function () {
          s1.polygonStart();
        },
        polygonEnd: function () {
          s1.polygonEnd();
        }
      });
      s0.sphere = s1.sphere;
      return s0;
    };
    function property(name) {
      gilbert[name] = function () {
        return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();
      };
    }
    gilbert.rotate = function (_) {
      return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();
    };
    gilbert.center = function (_) {
      return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());
    };
    property("angle");
    property("clipAngle");
    property("clipExtent");
    property("fitExtent");
    property("fitHeight");
    property("fitSize");
    property("fitWidth");
    property("scale");
    property("translate");
    property("precision");
    return gilbert.scale(249.5);
  }
  function gingeryRaw(rho, n) {
    var k = 2 * pi / n, rho2 = rho * rho;
    function forward(lambda, phi) {
      var p = d3Geo.geoAzimuthalEquidistantRaw(lambda, phi), x = p[0], y = p[1], r2 = x * x + y * y;
      if (r2 > rho2) {
        var r = sqrt(r2), theta = atan2(y, x), theta0 = k * round(theta / k), alpha = theta - theta0, rhoCosAlpha = rho * cos(alpha), k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha), s_ = gingeryLength(alpha, k_), e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);
        x = r;
        var i = 50, delta;
        do {
          x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);
        } while (abs(delta) > epsilon && --i > 0);
        y = alpha * sin(x);
        if (x < halfPi) y -= k_ * (x - halfPi);
        var s = sin(theta0), c = cos(theta0);
        p[0] = x * c - y * s;
        p[1] = x * s + y * c;
      }
      return p;
    }
    forward.invert = function (x, y) {
      var r2 = x * x + y * y;
      if (r2 > rho2) {
        var r = sqrt(r2), theta = atan2(y, x), theta0 = k * round(theta / k), dTheta = theta - theta0;
        x = r * cos(dTheta);
        y = r * sin(dTheta);
        var x_halfPi = x - halfPi, sinx = sin(x), alpha = y / sinx, delta = x < halfPi ? Infinity : 0, i = 10;
        while (true) {
          var rhosinAlpha = rho * sin(alpha), rhoCosAlpha = rho * cos(alpha), sinRhoCosAlpha = sin(rhoCosAlpha), halfPi_RhoCosAlpha = halfPi - rhoCosAlpha, k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha, s_ = gingeryLength(alpha, k_);
          if (abs(delta) < epsilon2 || !--i) break;
          alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));
        }
        r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);
        theta = theta0 + alpha;
        x = r * cos(theta);
        y = r * sin(theta);
      }
      return d3Geo.geoAzimuthalEquidistantRaw.invert(x, y);
    };
    return forward;
  }
  function gingeryLength(alpha, k) {
    return function (x) {
      var y_ = alpha * cos(x);
      if (x < halfPi) y_ -= k;
      return sqrt(1 + y_ * y_);
    };
  }
  // Numerical integration: trapezoidal rule.
  function gingeryIntegrate(f, a, b) {
    var n = 50, h = (b - a) / n, s = f(a) + f(b);
    for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);
    return s * 0.5 * h;
  }
  function gingery() {
    var n = 6, rho = 30 * radians, cRho = cos(rho), sRho = sin(rho), m = d3Geo.geoProjectionMutator(gingeryRaw), p = m(rho, n), stream_ = p.stream, epsilon$$1 = 1e-2, cr = -cos(epsilon$$1 * radians), sr = sin(epsilon$$1 * radians);
    p.radius = function (_) {
      if (!arguments.length) return rho * degrees;
      cRho = cos(rho = _ * radians);
      sRho = sin(rho);
      return m(rho, n);
    };
    p.lobes = function (_) {
      if (!arguments.length) return n;
      return m(rho, n = +_);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        (sphereStream.polygonStart(), sphereStream.lineStart());
        for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; (++i, phi -= delta)) {
          sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);
          sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);
        }
        (sphereStream.lineEnd(), sphereStream.polygonEnd());
      };
      return rotateStream;
    };
    return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);
  }
  function ginzburgPolyconicRaw(a, b, c, d, e, f, g, h) {
    if (arguments.length < 8) h = 0;
    function forward(lambda, phi) {
      if (!phi) return [a * lambda / pi, 0];
      var phi2 = phi * phi, xB = a + phi2 * (b + phi2 * (c + phi2 * d)), yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)), m = (xB * xB + yB * yB) / (2 * yB), alpha = lambda * asin(xB / m) / pi;
      return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];
    }
    forward.invert = function (x, y) {
      var lambda = pi * x / a, phi = y, deltaLambda, deltaPhi, i = 50;
      do {
        var phi2 = phi * phi, xB = a + phi2 * (b + phi2 * (c + phi2 * d)), yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)), p = xB * xB + yB * yB, q = 2 * yB, m = p / q, m2 = m * m, dAlphadLambda = asin(xB / m) / pi, alpha = lambda * dAlphadLambda, xB2 = xB * xB, dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi, dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g), dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)), dqdPhi = 2 * (dyBdPhi - 1), dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q), cosAlpha = cos(alpha), sinAlpha = sin(alpha), mcosAlpha = m * cosAlpha, msinAlpha = m * sinAlpha, dAlphadPhi = lambda / pi * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2, fx = msinAlpha - x, fy = phi * (1 + phi2 * h) + m - mcosAlpha - y, deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi, deltaxDeltaLambda = mcosAlpha * dAlphadLambda, deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi), deltayDeltaLambda = msinAlpha * dAlphadLambda, denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
        if (!denominator) break;
        lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;
        phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
      } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
      return [lambda, phi];
    };
    return forward;
  }
  var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);
  function ginzburg4() {
    return d3Geo.geoProjection(ginzburg4Raw).scale(149.995);
  }
  var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);
  function ginzburg5() {
    return d3Geo.geoProjection(ginzburg5Raw).scale(153.93);
  }
  var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);
  function ginzburg6() {
    return d3Geo.geoProjection(ginzburg6Raw).scale(130.945);
  }
  function ginzburg8Raw(lambda, phi) {
    var lambda2 = lambda * lambda, phi2 = phi * phi;
    return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];
  }
  ginzburg8Raw.invert = function (x, y) {
    var lambda = x, phi = y, i = 50, delta;
    do {
      var phi2 = phi * phi;
      phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);
    } while (abs(delta) > epsilon && --i > 0);
    i = 50;
    x /= 1 - 0.162388 * phi2;
    do {
      var lambda4 = (lambda4 = lambda * lambda) * lambda4;
      lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);
    } while (abs(delta) > epsilon && --i > 0);
    return [lambda, phi];
  };
  function ginzburg8() {
    return d3Geo.geoProjection(ginzburg8Raw).scale(131.747);
  }
  var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);
  function ginzburg9() {
    return d3Geo.geoProjection(ginzburg9Raw).scale(131.087);
  }
  function squareRaw(project) {
    var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];
    function projectSquare(lambda, phi) {
      var s = lambda > 0 ? -0.5 : 0.5, point = project(lambda + s * pi, phi);
      point[0] -= s * dx;
      return point;
    }
    if (project.invert) projectSquare.invert = function (x, y) {
      var s = x > 0 ? -0.5 : 0.5, location = project.invert(x + s * dx, y), lambda = location[0] - s * pi;
      if (lambda < -pi) lambda += 2 * pi; else if (lambda > pi) lambda -= 2 * pi;
      location[0] = lambda;
      return location;
    };
    return projectSquare;
  }
  function gringortenRaw(lambda, phi) {
    var sLambda = sign(lambda), sPhi = sign(phi), cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(sPhi * phi);
    lambda = abs(atan2(y, z));
    phi = asin(x);
    if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;
    var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);
    if (lambda > pi / 4) (z = point[0], point[0] = -point[1], point[1] = -z);
    return (point[0] *= sLambda, point[1] *= -sPhi, point);
  }
  gringortenRaw.invert = function (x, y) {
    if (abs(x) > 1) x = sign(x) * 2 - x;
    if (abs(y) > 1) y = sign(y) * 2 - y;
    var sx = sign(x), sy = sign(y), x0 = -sx * x, y0 = -sy * y, t = y0 / x0 < 1, p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0), lambda = p[0], phi = p[1], cosPhi = cos(phi);
    if (t) lambda = -halfPi - lambda;
    return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];
  };
  function gringortenHexadecant(lambda, phi) {
    if (phi === halfPi) return [0, 0];
    var sinPhi = sin(phi), r = sinPhi * sinPhi, r2 = r * r, j = 1 + r2, k = 1 + 3 * r2, q = 1 - r2, z = asin(1 / sqrt(j)), v = q + r * j * z, p2 = (1 - sinPhi) / v, p = sqrt(p2), a2 = p2 * j, a = sqrt(a2), h = p * q, x, i;
    if (lambda === 0) return [0, -(h + r * a)];
    var cosPhi = cos(phi), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * k) * drdPhi, dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v), dpdPhi = 0.5 * dp2dPhi / p, dhdPhi = q * dpdPhi - 2 * r * p * drdPhi, dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi, mu = -secPhi * drdPhi, nu = -secPhi * dra2dPhi, zeta = -2 * secPhi * dhdPhi, lambda1 = 4 * lambda / pi, delta;
    // Slower but accurate bisection method.
    if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {
      x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);
      if (lambda > pi / 4) return [x, x];
      var x1 = x, x0 = 0.5 * x;
      (x = 0.5 * (x0 + x1), i = 50);
      do {
        var g = sqrt(a2 - x * x), f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;
        if (!f) break;
        if (f < 0) x0 = x; else x1 = x;
        x = 0.5 * (x0 + x1);
      } while (abs(x1 - x0) > epsilon && --i > 0);
          // Newton-Raphson.
} else // Newton-Raphson.
    {
      (x = epsilon, i = 25);
      do {
        var x2 = x * x, g2 = sqrt(a2 - x2), zetaMug = zeta + mu * g2, f2 = x * zetaMug + nu * asin(x / a) - lambda1, df = zetaMug + (nu - mu * x2) / g2;
        x -= delta = g2 ? f2 / df : 0;
      } while (abs(delta) > epsilon && --i > 0);
    }
    return [x, -h - r * sqrt(a2 - x * x)];
  }
  function gringortenHexadecantInvert(x, y) {
    var x0 = 0, x1 = 1, r = 0.5, i = 50;
    while (true) {
      var r2 = r * r, sinPhi = sqrt(r), z = asin(1 / sqrt(1 + r2)), v = 1 - r2 + r * (1 + r2) * z, p2 = (1 - sinPhi) / v, p = sqrt(p2), a2 = p2 * (1 + r2), h = p * (1 - r2), g2 = a2 - x * x, g = sqrt(g2), y0 = y + h + r * g;
      if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;
      if (y0 > 0) x0 = r; else x1 = r;
      r = 0.5 * (x0 + x1);
    }
    if (!i) return null;
    var phi = asin(sinPhi), cosPhi = cos(phi), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi, dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v), dpdPhi = 0.5 * dp2dPhi / p, dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi, zeta = -2 * secPhi * dhdPhi, mu = -secPhi * drdPhi, nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);
    return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];
  }
  function gringorten() {
    return d3Geo.geoProjection(squareRaw(gringortenRaw)).scale(239.75);
  }
  // Returns [sn, cn, dn](u + iv|m).
  function ellipticJi(u, v, m) {
    var a, b, c;
    if (!u) {
      b = ellipticJ(v, 1 - m);
      return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];
    }
    a = ellipticJ(u, m);
    if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];
    b = ellipticJ(v, 1 - m);
    c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
    return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];
  }
  // Returns [sn, cn, dn, ph](u|m).
  function ellipticJ(u, m) {
    var ai, b, phi, t, twon;
    if (m < epsilon) {
      t = sin(u);
      b = cos(u);
      ai = m * (u - t * b) / 4;
      return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];
    }
    if (m >= 1 - epsilon) {
      ai = (1 - m) / 4;
      b = cosh(u);
      t = tanh(u);
      phi = 1 / b;
      twon = b * sinh(u);
      return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * atan(exp(u)) - halfPi + ai * (twon - u) / b];
    }
    var a = [1, 0, 0, 0, 0, 0, 0, 0, 0], c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0], i = 0;
    b = sqrt(1 - m);
    twon = 1;
    while (abs(c[i] / a[i]) > epsilon && i < 8) {
      ai = a[i++];
      c[i] = (ai - b) / 2;
      a[i] = (ai + b) / 2;
      b = sqrt(ai * b);
      twon *= 2;
    }
    phi = twon * a[i] * u;
    do {
      t = c[i] * sin(b = phi) / a[i];
      phi = (asin(t) + phi) / 2;
    } while (--i);
    return [sin(phi), t = cos(phi), t / cos(phi - b), phi];
  }
  // Calculate F(phi+iPsi|m).
  // See Abramowitz and Stegun, 17.4.11.
  function ellipticFi(phi, psi, m) {
    var r = abs(phi), i = abs(psi), sinhPsi = sinh(i);
    if (r) {
      var cscPhi = 1 / sin(r), cotPhi2 = 1 / (tan(r) * tan(r)), b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m), c = (m - 1) * cotPhi2, cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;
      return [ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi), ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)];
    }
    return [0, ellipticF(atan(sinhPsi), 1 - m) * sign(psi)];
  }
  // Calculate F(phi|m) where m = k² = sin²α.
  // See Abramowitz and Stegun, 17.6.7.
  function ellipticF(phi, m) {
    if (!m) return phi;
    if (m === 1) return log(tan(phi / 2 + quarterPi));
    var a = 1, b = sqrt(1 - m), c = sqrt(m);
    for (var i = 0; abs(c) > epsilon; i++) {
      if (phi % pi) {
        var dPhi = atan(b * tan(phi) / a);
        if (dPhi < 0) dPhi += pi;
        phi += dPhi + ~~(phi / pi) * pi;
      } else phi += phi;
      c = (a + b) / 2;
      b = sqrt(a * b);
      c = ((a = c) - b) / 2;
    }
    return phi / (pow(2, i) * a);
  }
  function guyouRaw(lambda, phi) {
    var k_ = (sqrt2 - 1) / (sqrt2 + 1), k = sqrt(1 - k_ * k_), K = ellipticF(halfPi, k * k), f = -1, psi = log(tan(pi / 4 + abs(phi) / 2)), r = exp(f * psi) / sqrt(k_), at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)), t = ellipticFi(at[0], at[1], k * k);
    return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];
  }
  function guyouComplexAtan(x, y) {
    var x2 = x * x, y_1 = y + 1, t = 1 - x2 - y * y;
    return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];
  }
  function guyouComplexDivide(a, b) {
    var denominator = b[0] * b[0] + b[1] * b[1];
    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
  }
  guyouRaw.invert = function (x, y) {
    var k_ = (sqrt2 - 1) / (sqrt2 + 1), k = sqrt(1 - k_ * k_), K = ellipticF(halfPi, k * k), f = -1, j = ellipticJi(0.5 * K - y, -x, k * k), tn = guyouComplexDivide(j[0], j[1]), lambda = atan2(tn[1], tn[0]) / f;
    return [lambda, 2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi];
  };
  function guyou() {
    return d3Geo.geoProjection(squareRaw(guyouRaw)).scale(151.496);
  }
  function hammerRetroazimuthalRaw(phi0) {
    var sinPhi0 = sin(phi0), cosPhi0 = cos(phi0), rotate = hammerRetroazimuthalRotation(phi0);
    rotate.invert = hammerRetroazimuthalRotation(-phi0);
    function forward(lambda, phi) {
      var p = rotate(lambda, phi);
      (lambda = p[0], phi = p[1]);
      var sinPhi = sin(phi), cosPhi = cos(phi), cosLambda = cos(lambda), z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda), sinz = sin(z), K = abs(sinz) > epsilon ? z / sinz : 1;
      return [K * cosPhi0 * sin(lambda), (abs(lambda) > halfPi ? K : -K) * (// rotate for back hemisphere
      sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)];
    }
    forward.invert = function (x, y) {
      var rho = sqrt(x * x + y * y), sinz = -sin(rho), cosz = cos(rho), a = rho * cosz, b = -y * sinz, c = rho * sinPhi0, d = sqrt(a * a + b * b - c * c), phi = atan2(a * c + b * d, b * c - a * d), lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);
      return rotate.invert(lambda, phi);
    };
    return forward;
  }
  // Latitudinal rotation by phi0.
  // Temporary hack until D3 supports arbitrary small-circle clipping origins.
  function hammerRetroazimuthalRotation(phi0) {
    var sinPhi0 = sin(phi0), cosPhi0 = cos(phi0);
    return function (lambda, phi) {
      var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi);
      return [atan2(y, x * cosPhi0 - z * sinPhi0), asin(z * cosPhi0 + x * sinPhi0)];
    };
  }
  function hammerRetroazimuthal() {
    var phi0 = 0, m = d3Geo.geoProjectionMutator(hammerRetroazimuthalRaw), p = m(phi0), rotate_ = p.rotate, stream_ = p.stream, circle = d3Geo.geoCircle();
    p.parallel = function (_) {
      if (!arguments.length) return phi0 * degrees;
      var r = p.rotate();
      return m(phi0 = _ * radians).rotate(r);
    };
    // Temporary hack; see hammerRetroazimuthalRotation.
    p.rotate = function (_) {
      if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);
      rotate_.call(p, [_[0], _[1] - phi0 * degrees]);
      circle.center([-_[0], -_[1]]);
      return p;
    };
    p.stream = function (stream) {
      stream = stream_(stream);
      stream.sphere = function () {
        stream.polygonStart();
        var epsilon$$1 = 1e-2, ring = circle.radius(90 - epsilon$$1)().coordinates[0], n = ring.length - 1, i = -1, p;
        stream.lineStart();
        while (++i < n) stream.point((p = ring[i])[0], p[1]);
        stream.lineEnd();
        ring = circle.radius(90 + epsilon$$1)().coordinates[0];
        n = ring.length - 1;
        stream.lineStart();
        while (--i >= 0) stream.point((p = ring[i])[0], p[1]);
        stream.lineEnd();
        stream.polygonEnd();
      };
      return stream;
    };
    return p.scale(79.4187).parallel(45).clipAngle(180 - 1e-3);
  }
  var K = 3, healpixParallel = asin(1 - 1 / K) * degrees, healpixLambert = cylindricalEqualAreaRaw(0);
  function healpixRaw(H) {
    var phi0 = healpixParallel * radians, dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0], y0 = healpixLambert(0, phi0)[1], y1 = collignonRaw(0, phi0)[1], dy1 = sqrtPi - y1, k = tau / H, w = 4 / tau, h = y0 + dy1 * dy1 * 4 / tau;
    function forward(lambda, phi) {
      var point, phi2 = abs(phi);
      if (phi2 > phi0) {
        var i = min(H - 1, max(0, floor((lambda + pi) / k)));
        lambda += pi * (H - 1) / H - i * k;
        point = collignonRaw(lambda, phi2);
        point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;
        point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;
        if (phi < 0) point[1] = -point[1];
      } else {
        point = healpixLambert(lambda, phi);
      }
      (point[0] *= w, point[1] /= h);
      return point;
    }
    forward.invert = function (x, y) {
      (x /= w, y *= h);
      var y2 = abs(y);
      if (y2 > y0) {
        var i = min(H - 1, max(0, floor((x + pi) / k)));
        x = (x + pi * (H - 1) / H - i * k) * dx / tau;
        var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);
        point[0] -= pi * (H - 1) / H - i * k;
        if (y < 0) point[1] = -point[1];
        return point;
      }
      return healpixLambert.invert(x, y);
    };
    return forward;
  }
  function sphereTop(x, i) {
    return [x, i & 1 ? 90 - epsilon : healpixParallel];
  }
  function sphereBottom(x, i) {
    return [x, i & 1 ? -90 + epsilon : -healpixParallel];
  }
  function sphereNudge(d) {
    return [d[0] * (1 - epsilon), d[1]];
  }
  function sphere(step) {
    var c = [].concat(d3Array.range(-180, 180 + step / 2, step).map(sphereTop), d3Array.range(180, -180 - step / 2, -step).map(sphereBottom));
    return {
      type: "Polygon",
      coordinates: [step === 180 ? c.map(sphereNudge) : c]
    };
  }
  function healpix() {
    var H = 4, m = d3Geo.geoProjectionMutator(healpixRaw), p = m(H), stream_ = p.stream;
    p.lobes = function (_) {
      return arguments.length ? m(H = +_) : H;
    };
    p.stream = function (stream) {
      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        d3Geo.geoStream(sphere(180 / H), sphereStream);
      };
      return rotateStream;
    };
    return p.scale(239.75);
  }
  function hillRaw(K) {
    var L = 1 + K, sinBt = sin(1 / L), Bt = asin(sinBt), A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)), B, rho0 = 0.5 * A * (L + sqrt(K * (2 + K))), K2 = K * K, L2 = L * L;
    function forward(lambda, phi) {
      var t = 1 - sin(phi), rho, omega;
      if (t && t < 2) {
        var theta = halfPi - phi, i = 25, delta;
        do {
          var sinTheta = sin(theta), cosTheta = cos(theta), Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta), C = 1 + L2 - 2 * L * cosTheta;
          theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);
        } while (abs(delta) > epsilon2 && --i > 0);
        rho = A * sqrt(C);
        omega = lambda * Bt_Bt1 / pi;
      } else {
        rho = A * (K + t);
        omega = lambda * Bt / pi;
      }
      return [rho * sin(omega), rho0 - rho * cos(omega)];
    }
    forward.invert = function (x, y) {
      var rho2 = x * x + (y -= rho0) * y, cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L), theta = acos(cosTheta), sinTheta = sin(theta), Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);
      return [asin(x / sqrt(rho2)) * pi / Bt_Bt1, asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];
    };
    return forward;
  }
  function hill() {
    var K = 1, m = d3Geo.geoProjectionMutator(hillRaw), p = m(K);
    p.ratio = function (_) {
      return arguments.length ? m(K = +_) : K;
    };
    return p.scale(167.774).center([0, 18.67]);
  }
  var sinuMollweidePhi = 0.7109889596207567;
  var sinuMollweideY = 0.0528035274542;
  function sinuMollweideRaw(lambda, phi) {
    return phi > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);
  }
  sinuMollweideRaw.invert = function (x, y) {
    return y > -sinuMollweidePhi ? mollweideRaw.invert(x, y - sinuMollweideY) : sinusoidalRaw.invert(x, y);
  };
  function sinuMollweide() {
    return d3Geo.geoProjection(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
  }
  function homolosineRaw(lambda, phi) {
    return abs(phi) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);
  }
  homolosineRaw.invert = function (x, y) {
    return abs(y) > sinuMollweidePhi ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x, y);
  };
  function homolosine() {
    return d3Geo.geoProjection(homolosineRaw).scale(152.63);
  }
  function hufnagelRaw(a, b, psiMax, ratio) {
    var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))), c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))), M = psiMax * mapping(1);
    function radius(psi) {
      return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));
    }
    function mapping(t) {
      var psi = t * psiMax;
      return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;
    }
    function inversemapping(psi) {
      return radius(psi) * sin(psi);
    }
    var forward = function (lambda, phi) {
      var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);
      if (isNaN(psi)) psi = psiMax * sign(phi);
      var kr = k * radius(psi);
      return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];
    };
    forward.invert = function (x, y) {
      var psi = solve(inversemapping, y * c / k);
      return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];
    };
    if (psiMax === 0) {
      k = sqrt(ratio / pi);
      forward = function (lambda, phi) {
        return [lambda * k, sin(phi) / k];
      };
      forward.invert = function (x, y) {
        return [x / k, asin(y * k)];
      };
    }
    return forward;
  }
  function hufnagel() {
    var a = 1, b = 0, psiMax = 45 * radians, ratio = 2, mutate = d3Geo.geoProjectionMutator(hufnagelRaw), projection = mutate(a, b, psiMax, ratio);
    projection.a = function (_) {
      return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;
    };
    projection.b = function (_) {
      return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;
    };
    projection.psiMax = function (_) {
      return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;
    };
    projection.ratio = function (_) {
      return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;
    };
    return projection.scale(180.739);
  }
  // https://github.com/scijs/integrate-adaptive-simpson
  // This algorithm adapted from pseudocode in:
  // http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf
  function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {
    if (state.nanEncountered) {
      return NaN;
    }
    var h, f1, f2, sl, sr, s2, m, V1, V2, err;
    h = b - a;
    f1 = f(a + h * 0.25);
    f2 = f(b - h * 0.25);
    // Simple check for NaN:
    if (isNaN(f1)) {
      state.nanEncountered = true;
      return;
    }
    // Simple check for NaN:
    if (isNaN(f2)) {
      state.nanEncountered = true;
      return;
    }
    sl = h * (fa + 4 * f1 + fm) / 12;
    sr = h * (fm + 4 * f2 + fb) / 12;
    s2 = sl + sr;
    err = (s2 - V0) / 15;
    if (depth > maxdepth) {
      state.maxDepthCount++;
      return s2 + err;
    } else if (Math.abs(err) < tol) {
      return s2 + err;
    } else {
      m = a + h * 0.5;
      V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);
      if (isNaN(V1)) {
        state.nanEncountered = true;
        return NaN;
      }
      V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);
      if (isNaN(V2)) {
        state.nanEncountered = true;
        return NaN;
      }
      return V1 + V2;
    }
  }
  function integrate(f, a, b, tol, maxdepth) {
    var state = {
      maxDepthCount: 0,
      nanEncountered: false
    };
    if (tol === undefined) {
      tol = 1e-8;
    }
    if (maxdepth === undefined) {
      maxdepth = 20;
    }
    var fa = f(a);
    var fm = f(0.5 * (a + b));
    var fb = f(b);
    var V0 = (fa + 4 * fm + fb) * (b - a) / 6;
    var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);
    /*
    if (state.maxDepthCount > 0 && console && console.warn) {
    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');
    }
    
    if (state.nanEncountered && console && console.warn) {
    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');
    }
    */
    return result;
  }
  function hyperellipticalRaw(alpha, k, gamma) {
    function elliptic(f) {
      return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);
    }
    function z(f) {
      return integrate(elliptic, 0, f, 1e-4);
    }
    var G = 1 / z(1), n = 1000, m = (1 + 1e-8) * G, approx = [];
    for (var i = 0; i <= n; i++) approx.push(z(i / n) * m);
    function Y(sinphi) {
      var rmin = 0, rmax = n, r = n >> 1;
      do {
        if (approx[r] > sinphi) rmax = r; else rmin = r;
        r = rmin + rmax >> 1;
      } while (r > rmin);
      var u = approx[r + 1] - approx[r];
      if (u) u = (sinphi - approx[r + 1]) / u;
      return (r + 1 + u) / n;
    }
    var ratio = 2 * Y(1) / pi * G / gamma;
    var forward = function (lambda, phi) {
      var y = Y(abs(sin(phi))), x = elliptic(y) * lambda;
      y /= ratio;
      return [x, phi >= 0 ? y : -y];
    };
    forward.invert = function (x, y) {
      var phi;
      y *= ratio;
      if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);
      return [x / elliptic(abs(y)), phi];
    };
    return forward;
  }
  function hyperelliptical() {
    var alpha = 0, k = 2.5, gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679
    m = d3Geo.geoProjectionMutator(hyperellipticalRaw), p = m(alpha, k, gamma);
    p.alpha = function (_) {
      return arguments.length ? m(alpha = +_, k, gamma) : alpha;
    };
    p.k = function (_) {
      return arguments.length ? m(alpha, k = +_, gamma) : k;
    };
    p.gamma = function (_) {
      return arguments.length ? m(alpha, k, gamma = +_) : gamma;
    };
    return p.scale(152.63);
  }
  function pointEqual(a, b) {
    return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
  }
  function interpolateLine(coordinates, m) {
    var i = -1, n = coordinates.length, p0 = coordinates[0], p1, dx, dy, resampled = [];
    while (++i < n) {
      p1 = coordinates[i];
      dx = (p1[0] - p0[0]) / m;
      dy = (p1[1] - p0[1]) / m;
      for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);
      p0 = p1;
    }
    resampled.push(p1);
    return resampled;
  }
  function interpolateSphere(lobes) {
    var coordinates = [], lobe, lambda0, phi0, phi1, lambda2, phi2, i, n = lobes[0].length;
    // Northern Hemisphere
    for (i = 0; i < n; ++i) {
      lobe = lobes[0][i];
      (lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1]);
      (lambda2 = lobe[2][0], phi2 = lobe[2][1]);
      coordinates.push(interpolateLine([[lambda0 + epsilon, phi0 + epsilon], [lambda0 + epsilon, phi1 - epsilon], [lambda2 - epsilon, phi1 - epsilon], [lambda2 - epsilon, phi2 + epsilon]], 30));
    }
    // Southern Hemisphere
    for (i = lobes[1].length - 1; i >= 0; --i) {
      lobe = lobes[1][i];
      (lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1]);
      (lambda2 = lobe[2][0], phi2 = lobe[2][1]);
      coordinates.push(interpolateLine([[lambda2 - epsilon, phi2 - epsilon], [lambda2 - epsilon, phi1 + epsilon], [lambda0 + epsilon, phi1 + epsilon], [lambda0 + epsilon, phi0 - epsilon]], 30));
    }
    return {
      type: "Polygon",
      coordinates: [d3Array.merge(coordinates)]
    };
  }
  function interrupt(project, lobes, inverse) {
    var sphere, bounds;
    function forward(lambda, phi) {
      var sign$$1 = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];
      for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i) ;
      var p = project(lambda - lobe[i][1][0], phi);
      p[0] += project(lobe[i][1][0], sign$$1 * phi > sign$$1 * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];
      return p;
    }
    if (inverse) {
      forward.invert = inverse(forward);
    } else if (project.invert) {
      forward.invert = function (x, y) {
        var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];
        for (var i = 0, n = bound.length; i < n; ++i) {
          var b = bound[i];
          if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
            var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);
            p[0] += lobe[i][1][0];
            return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;
          }
        }
      };
    }
    var p = d3Geo.geoProjection(forward), stream_ = p.stream;
    p.stream = function (stream) {
      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        d3Geo.geoStream(sphere, sphereStream);
      };
      return rotateStream;
    };
    p.lobes = function (_) {
      if (!arguments.length) return lobes.map(function (lobe) {
        return lobe.map(function (l) {
          return [[l[0][0] * degrees, l[0][1] * degrees], [l[1][0] * degrees, l[1][1] * degrees], [l[2][0] * degrees, l[2][1] * degrees]];
        });
      });
      sphere = interpolateSphere(_);
      lobes = _.map(function (lobe) {
        return lobe.map(function (l) {
          return [[l[0][0] * radians, l[0][1] * radians], [l[1][0] * radians, l[1][1] * radians], [l[2][0] * radians, l[2][1] * radians]];
        });
      });
      bounds = lobes.map(function (lobe) {
        return lobe.map(function (l) {
          var x0 = project(l[0][0], l[0][1])[0], x1 = project(l[2][0], l[2][1])[0], y0 = project(l[1][0], l[0][1])[1], y1 = project(l[1][0], l[1][1])[1], t;
          if (y0 > y1) (t = y0, y0 = y1, y1 = t);
          return [[x0, y0], [x1, y1]];
        });
      });
      return p;
    };
    if (lobes != null) p.lobes(lobes);
    return p;
  }
  var lobes = [[// northern hemisphere
  [[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];
  function boggs$1() {
    return interrupt(boggsRaw, lobes).scale(160.857);
  }
  var lobes$1 = [[// northern hemisphere
  [[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];
  function homolosine$1() {
    return interrupt(homolosineRaw, lobes$1).scale(152.63);
  }
  var lobes$2 = [[// northern hemisphere
  [[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];
  function mollweide$1() {
    return interrupt(mollweideRaw, lobes$2).scale(169.529);
  }
  var lobes$3 = [[// northern hemisphere
  [[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];
  function mollweideHemispheres() {
    return interrupt(mollweideRaw, lobes$3).scale(169.529).rotate([20, 0]);
  }
  var lobes$4 = [[// northern hemisphere
  [[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [// southern hemisphere
  [[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];
  function sinuMollweide$1() {
    return interrupt(sinuMollweideRaw, lobes$4, solve2d).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);
  }
  var lobes$5 = [[// northern hemisphere
  [[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];
  function sinusoidal$1() {
    return interrupt(sinusoidalRaw, lobes$5).scale(152.63).rotate([-20, 0]);
  }
  function kavrayskiy7Raw(lambda, phi) {
    return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];
  }
  kavrayskiy7Raw.invert = function (x, y) {
    return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];
  };
  function kavrayskiy7() {
    return d3Geo.geoProjection(kavrayskiy7Raw).scale(158.837);
  }
  function lagrangeRaw(n) {
    function forward(lambda, phi) {
      if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];
      var sinPhi = sin(phi), v = pow((1 + sinPhi) / (1 - sinPhi), n / 2), c = 0.5 * (v + 1 / v) + cos(lambda *= n);
      return [2 * sin(lambda) / c, (v - 1 / v) / c];
    }
    forward.invert = function (x, y) {
      var y0 = abs(y);
      if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];
      if (y0 > 2) return null;
      (x /= 2, y /= 2);
      var x2 = x * x, y2 = y * y, t = 2 * y / (1 + x2 + y2);
      // tanh(nPhi)
      t = pow((1 + t) / (1 - t), 1 / n);
      return [atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1))];
    };
    return forward;
  }
  function lagrange() {
    var n = 0.5, m = d3Geo.geoProjectionMutator(lagrangeRaw), p = m(n);
    p.spacing = function (_) {
      return arguments.length ? m(n = +_) : n;
    };
    return p.scale(124.75);
  }
  var pi_sqrt2 = pi / sqrt2;
  function larriveeRaw(lambda, phi) {
    return [lambda * (1 + sqrt(cos(phi))) / 2, phi / (cos(phi / 2) * cos(lambda / 6))];
  }
  larriveeRaw.invert = function (x, y) {
    var x0 = abs(x), y0 = abs(y), lambda = epsilon, phi = halfPi;
    if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2; else lambda += 6 * acos(pi_sqrt2 / y0);
    for (var i = 0; i < 25; i++) {
      var sinPhi = sin(phi), sqrtcosPhi = sqrt(cos(phi)), sinPhi_2 = sin(phi / 2), cosPhi_2 = cos(phi / 2), sinLambda_6 = sin(lambda / 6), cosLambda_6 = cos(lambda / 6), f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0, f1 = phi / (cosPhi_2 * cosLambda_6) - y0, df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0, df0dLambda = 0.5 * (1 + sqrtcosPhi), df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6), df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6), denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda, dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom, dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;
      phi -= dPhi;
      lambda -= dLambda;
      if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;
    }
    return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];
  };
  function larrivee() {
    return d3Geo.geoProjection(larriveeRaw).scale(97.2672);
  }
  function laskowskiRaw(lambda, phi) {
    var lambda2 = lambda * lambda, phi2 = phi * phi;
    return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];
  }
  laskowskiRaw.invert = function (x, y) {
    var lambda = sign(x) * pi, phi = y / 2, i = 50;
    do {
      var lambda2 = lambda * lambda, phi2 = phi * phi, lambdaPhi = lambda * phi, fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x, fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y, deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009), deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2), deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2), deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2), denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda, deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator, deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
      (lambda -= deltaLambda, phi -= deltaPhi);
    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);
    return i && [lambda, phi];
  };
  function laskowski() {
    return d3Geo.geoProjection(laskowskiRaw).scale(139.98);
  }
  function littrowRaw(lambda, phi) {
    return [sin(lambda) / cos(phi), tan(phi) * cos(lambda)];
  }
  littrowRaw.invert = function (x, y) {
    var x2 = x * x, y2 = y * y, y2_1 = y2 + 1, x2_y2_1 = x2 + y2_1, cosPhi = x ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2) : 1 / sqrt(y2_1);
    return [asin(x * cosPhi), sign(y) * acos(cosPhi)];
  };
  function littrow() {
    return d3Geo.geoProjection(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);
  }
  function loximuthalRaw(phi0) {
    var cosPhi0 = cos(phi0), tanPhi0 = tan(quarterPi + phi0 / 2);
    function forward(lambda, phi) {
      var y = phi - phi0, x = abs(y) < epsilon ? lambda * cosPhi0 : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon ? 0 : lambda * y / log(tan(x) / tanPhi0);
      return [x, y];
    }
    forward.invert = function (x, y) {
      var lambda, phi = y + phi0;
      return [abs(y) < epsilon ? x / cosPhi0 : abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon ? 0 : x * log(tan(lambda) / tanPhi0) / y, phi];
    };
    return forward;
  }
  function loximuthal() {
    return parallel1(loximuthalRaw).parallel(40).scale(158.837);
  }
  function millerRaw(lambda, phi) {
    return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];
  }
  millerRaw.invert = function (x, y) {
    return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];
  };
  function miller() {
    return d3Geo.geoProjection(millerRaw).scale(108.318);
  }
  function modifiedStereographicRaw(C) {
    var m = C.length - 1;
    function forward(lambda, phi) {
      var cosPhi = cos(phi), k = 2 / (1 + cosPhi * cos(lambda)), zr = k * cosPhi * sin(lambda), zi = k * sin(phi), i = m, w = C[i], ar = w[0], ai = w[1], t;
      while (--i >= 0) {
        w = C[i];
        ar = w[0] + zr * (t = ar) - zi * ai;
        ai = w[1] + zr * ai + zi * t;
      }
      ar = zr * (t = ar) - zi * ai;
      ai = zr * ai + zi * t;
      return [ar, ai];
    }
    forward.invert = function (x, y) {
      var i = 20, zr = x, zi = y;
      do {
        var j = m, w = C[j], ar = w[0], ai = w[1], br = 0, bi = 0, t;
        while (--j >= 0) {
          w = C[j];
          br = ar + zr * (t = br) - zi * bi;
          bi = ai + zr * bi + zi * t;
          ar = w[0] + zr * (t = ar) - zi * ai;
          ai = w[1] + zr * ai + zi * t;
        }
        br = ar + zr * (t = br) - zi * bi;
        bi = ai + zr * bi + zi * t;
        ar = zr * (t = ar) - zi * ai - x;
        ai = zr * ai + zi * t - y;
        var denominator = br * br + bi * bi, deltar, deltai;
        zr -= deltar = (ar * br + ai * bi) / denominator;
        zi -= deltai = (ai * br - ar * bi) / denominator;
      } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);
      if (i) {
        var rho = sqrt(zr * zr + zi * zi), c = 2 * atan(rho * 0.5), sinc = sin(c);
        return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];
      }
    };
    return forward;
  }
  var alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]], gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]], gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]], miller$1 = [[0.9245, 0], [0, 0], [0.01943, 0]], lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];
  function modifiedStereographicAlaska() {
    return modifiedStereographic(alaska, [152, -64]).scale(1400).center([-160.908, 62.4864]).clipAngle(30).angle(7.8);
  }
  function modifiedStereographicGs48() {
    return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);
  }
  function modifiedStereographicGs50() {
    return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);
  }
  function modifiedStereographicMiller() {
    return modifiedStereographic(miller$1, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);
  }
  function modifiedStereographicLee() {
    return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);
  }
  function modifiedStereographic(coefficients, rotate) {
    var p = d3Geo.geoProjection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90), r = d3Geo.geoRotation(rotate), center = p.center;
    delete p.rotate;
    p.center = function (_) {
      return arguments.length ? center(r(_)) : r.invert(center());
    };
    return p;
  }
  var sqrt6 = sqrt(6), sqrt7 = sqrt(7);
  function mtFlatPolarParabolicRaw(lambda, phi) {
    var theta = asin(7 * sin(phi) / (3 * sqrt6));
    return [sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7, 9 * sin(theta / 3) / sqrt7];
  }
  mtFlatPolarParabolicRaw.invert = function (x, y) {
    var theta = 3 * asin(y * sqrt7 / 9);
    return [x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)), asin(sin(theta) * 3 * sqrt6 / 7)];
  };
  function mtFlatPolarParabolic() {
    return d3Geo.geoProjection(mtFlatPolarParabolicRaw).scale(164.859);
  }
  function mtFlatPolarQuarticRaw(lambda, phi) {
    var k = (1 + sqrt1_2) * sin(phi), theta = phi;
    for (var i = 0, delta; i < 25; i++) {
      theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));
      if (abs(delta) < epsilon) break;
    }
    return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];
  }
  mtFlatPolarQuarticRaw.invert = function (x, y) {
    var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)), theta = 2 * asin(sinTheta_2);
    return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];
  };
  function mtFlatPolarQuartic() {
    return d3Geo.geoProjection(mtFlatPolarQuarticRaw).scale(188.209);
  }
  function mtFlatPolarSinusoidalRaw(lambda, phi) {
    var A = sqrt(6 / (4 + pi)), k = (1 + pi / 4) * sin(phi), theta = phi / 2;
    for (var i = 0, delta; i < 25; i++) {
      theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));
      if (abs(delta) < epsilon) break;
    }
    return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];
  }
  mtFlatPolarSinusoidalRaw.invert = function (x, y) {
    var A = sqrt(6 / (4 + pi)), theta = y / A;
    if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;
    return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];
  };
  function mtFlatPolarSinusoidal() {
    return d3Geo.geoProjection(mtFlatPolarSinusoidalRaw).scale(166.518);
  }
  function naturalEarth2Raw(lambda, phi) {
    var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;
    return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];
  }
  naturalEarth2Raw.invert = function (x, y) {
    var phi = y, i = 25, delta, phi2, phi4, phi6;
    do {
      phi2 = phi * phi;
      phi4 = phi2 * phi2;
      phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));
    } while (abs(delta) > epsilon2 && --i > 0);
    phi2 = phi * phi;
    phi4 = phi2 * phi2;
    phi6 = phi2 * phi4;
    return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];
  };
  function naturalEarth2() {
    return d3Geo.geoProjection(naturalEarth2Raw).scale(175.295);
  }
  function nellHammerRaw(lambda, phi) {
    return [lambda * (1 + cos(phi)) / 2, 2 * (phi - tan(phi / 2))];
  }
  nellHammerRaw.invert = function (x, y) {
    var p = y / 2;
    for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {
      var c = cos(y / 2);
      y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));
    }
    return [2 * x / (1 + cos(y)), y];
  };
  function nellHammer() {
    return d3Geo.geoProjection(nellHammerRaw).scale(152.63);
  }
  var lobes$6 = [[// northern hemisphere
  [[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere
  [[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];
  function quarticAuthalic() {
    return interrupt(hammerRaw(Infinity), lobes$6).rotate([20, 0]).scale(152.63);
  }
  // Based on Torben Jansen's implementation
  // https://beta.observablehq.com/@toja/nicolosi-globular-projection
  // https://beta.observablehq.com/@toja/nicolosi-globular-inverse
  function nicolosiRaw(lambda, phi) {
    var sinPhi = sin(phi), q = cos(phi), s = sign(lambda);
    if (lambda === 0 || abs(phi) === halfPi) return [0, phi]; else if (phi === 0) return [lambda, 0]; else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];
    var b = pi / (2 * lambda) - 2 * lambda / pi, c = 2 * phi / pi, d = (1 - c * c) / (sinPhi - c);
    var b2 = b * b, d2 = d * d, b2d2 = 1 + b2 / d2, d2b2 = 1 + d2 / b2;
    var M = (b * sinPhi / d - b / 2) / b2d2, N = (d2 * sinPhi / b2 + d / 2) / d2b2, m = M * M + q * q / b2d2, n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;
    return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];
  }
  nicolosiRaw.invert = function (x, y) {
    x /= halfPi;
    y /= halfPi;
    var x2 = x * x, y2 = y * y, x2y2 = x2 + y2, pi2 = pi * pi;
    return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {
      return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;
    }, 0)];
  };
  function nicolosi() {
    return d3Geo.geoProjection(nicolosiRaw).scale(127.267);
  }
  // Based on Java implementation by Bojan Savric.
  // https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java
  var pattersonK1 = 1.0148, pattersonK2 = 0.23185, pattersonK3 = -0.14499, pattersonK4 = 0.02406, pattersonC1 = pattersonK1, pattersonC2 = 5 * pattersonK2, pattersonC3 = 7 * pattersonK3, pattersonC4 = 9 * pattersonK4, pattersonYmax = 1.790857183;
  function pattersonRaw(lambda, phi) {
    var phi2 = phi * phi;
    return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];
  }
  pattersonRaw.invert = function (x, y) {
    if (y > pattersonYmax) y = pattersonYmax; else if (y < -pattersonYmax) y = -pattersonYmax;
    var yc = y, delta;
    do {
      // Newton-Raphson
      var y2 = yc * yc;
      yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
    } while (abs(delta) > epsilon);
    return [x, yc];
  };
  function patterson() {
    return d3Geo.geoProjection(pattersonRaw).scale(139.319);
  }
  function polyconicRaw(lambda, phi) {
    if (abs(phi) < epsilon) return [lambda, 0];
    var tanPhi = tan(phi), k = lambda * sin(phi);
    return [sin(k) / tanPhi, phi + (1 - cos(k)) / tanPhi];
  }
  polyconicRaw.invert = function (x, y) {
    if (abs(y) < epsilon) return [x, 0];
    var k = x * x + y * y, phi = y * 0.5, i = 10, delta;
    do {
      var tanPhi = tan(phi), secPhi = 1 / cos(phi), j = k - 2 * y * phi + phi * phi;
      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
    } while (abs(delta) > epsilon && --i > 0);
    tanPhi = tan(phi);
    return [(abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi), phi];
  };
  function polyconic() {
    return d3Geo.geoProjection(polyconicRaw).scale(103.74);
  }
  // Note: 6-element arrays are used to denote the 3x3 affine transform matrix:
  // [a, b, c,
  // d, e, f,
  // 0, 0, 1] - this redundant row is left out.
  // Transform matrix for [a0, a1] -> [b0, b1].
  function matrix(a, b) {
    var u = subtract(a[1], a[0]), v = subtract(b[1], b[0]), phi = angle$1(u, v), s = length(u) / length(v);
    return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([cos(phi), sin(phi), 0, -sin(phi), cos(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));
  }
  // Inverts a transform matrix.
  function inverse(m) {
    var k = 1 / (m[0] * m[4] - m[1] * m[3]);
    return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];
  }
  // Multiplies two 3x2 matrices.
  function multiply(a, b) {
    return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];
  }
  // Subtracts 2D vectors.
  function subtract(a, b) {
    return [a[0] - b[0], a[1] - b[1]];
  }
  // Magnitude of a 2D vector.
  function length(v) {
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  }
  // Angle between two 2D vectors.
  function angle$1(a, b) {
    return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);
  }
  // Creates a polyhedral projection.
  // * root: a spanning tree of polygon faces.  Nodes are automatically
  // augmented with a transform matrix.
  // * face: a function that returns the appropriate node for a given {lambda, phi}
  // point (radians).
  function polyhedral(root, face) {
    recurse(root, {
      transform: null
    });
    function recurse(node, parent) {
      node.edges = faceEdges(node.face);
      // Find shared edge.
      if (parent.face) {
        var shared = node.shared = sharedEdge(node.face, parent.face), m = matrix(shared.map(parent.project), shared.map(node.project));
        node.transform = parent.transform ? multiply(parent.transform, m) : m;
        // Replace shared edge in parent edges array.
        var edges = parent.edges;
        for (var i = 0, n = edges.length; i < n; ++i) {
          if (pointEqual$1(shared[0], edges[i][1]) && pointEqual$1(shared[1], edges[i][0])) edges[i] = node;
          if (pointEqual$1(shared[0], edges[i][0]) && pointEqual$1(shared[1], edges[i][1])) edges[i] = node;
        }
        edges = node.edges;
        for ((i = 0, n = edges.length); i < n; ++i) {
          if (pointEqual$1(shared[0], edges[i][0]) && pointEqual$1(shared[1], edges[i][1])) edges[i] = parent;
          if (pointEqual$1(shared[0], edges[i][1]) && pointEqual$1(shared[1], edges[i][0])) edges[i] = parent;
        }
      } else {
        node.transform = parent.transform;
      }
      if (node.children) {
        node.children.forEach(function (child) {
          recurse(child, node);
        });
      }
      return node;
    }
    function forward(lambda, phi) {
      var node = face(lambda, phi), point = node.project([lambda * degrees, phi * degrees]), t;
      if (t = node.transform) {
        return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];
      }
      point[1] = -point[1];
      return point;
    }
    // Naive inverse!  A faster solution would use bounding boxes, or even a
    // polygonal quadtree.
    if (hasInverse(root)) forward.invert = function (x, y) {
      var coordinates = faceInvert(root, [x, -y]);
      return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);
    };
    function faceInvert(node, coordinates) {
      var invert = node.project.invert, t = node.transform, point = coordinates;
      if (t) {
        t = inverse(t);
        point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];
      }
      if (invert && node === faceDegrees(p = invert(point))) return p;
      var p, children = node.children;
      for (var i = 0, n = children && children.length; i < n; ++i) {
        if (p = faceInvert(children[i], coordinates)) return p;
      }
    }
    function faceDegrees(coordinates) {
      return face(coordinates[0] * radians, coordinates[1] * radians);
    }
    var proj = d3Geo.geoProjection(forward), stream_ = proj.stream;
    proj.stream = function (stream) {
      var rotate = proj.rotate(), rotateStream = stream_(stream), sphereStream = (proj.rotate([0, 0]), stream_(stream));
      proj.rotate(rotate);
      rotateStream.sphere = function () {
        sphereStream.polygonStart();
        sphereStream.lineStart();
        outline(sphereStream, root);
        sphereStream.lineEnd();
        sphereStream.polygonEnd();
      };
      return rotateStream;
    };
    return proj.angle(-30);
  }
  function outline(stream, node, parent) {
    var point, edges = node.edges, n = edges.length, edge, multiPoint = {
      type: "MultiPoint",
      coordinates: node.face
    }, notPoles = node.face.filter(function (d) {
      return abs(d[1]) !== 90;
    }), b = d3Geo.geoBounds({
      type: "MultiPoint",
      coordinates: notPoles
    }), inside = false, j = -1, dx = b[1][0] - b[0][0];
    // TODO
    var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : d3Geo.geoCentroid(multiPoint);
    // First find the shared edge…
    if (parent) while (++j < n) {
      if (edges[j] === parent) break;
    }
    ++j;
    for (var i = 0; i < n; ++i) {
      edge = edges[(i + j) % n];
      if (Array.isArray(edge)) {
        if (!inside) {
          stream.point((point = d3Geo.geoInterpolate(edge[0], c)(epsilon))[0], point[1]);
          inside = true;
        }
        stream.point((point = d3Geo.geoInterpolate(edge[1], c)(epsilon))[0], point[1]);
      } else {
        inside = false;
        if (edge !== parent) outline(stream, edge, node);
      }
    }
  }
  // Tests equality of two spherical points.
  function pointEqual$1(a, b) {
    return a && b && a[0] === b[0] && a[1] === b[1];
  }
  // Finds a shared edge given two clockwise polygons.
  function sharedEdge(a, b) {
    var x, y, n = a.length, found = null;
    for (var i = 0; i < n; ++i) {
      x = a[i];
      for (var j = b.length; --j >= 0; ) {
        y = b[j];
        if (x[0] === y[0] && x[1] === y[1]) {
          if (found) return [found, x];
          found = x;
        }
      }
    }
  }
  // Converts an array of n face vertices to an array of n + 1 edges.
  function faceEdges(face) {
    var n = face.length, edges = [];
    for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);
    return edges;
  }
  function hasInverse(node) {
    return node.project.invert || node.children && node.children.some(hasInverse);
  }
  // TODO generate on-the-fly to avoid external modification.
  var octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];
  var octahedron$1 = [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {
    return face.map(function (i) {
      return octahedron[i];
    });
  });
  function butterfly(faceProjection) {
    faceProjection = faceProjection || (function (face) {
      var c = d3Geo.geoCentroid({
        type: "MultiPoint",
        coordinates: face
      });
      return d3Geo.geoGnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
    });
    var faces = octahedron$1.map(function (face) {
      return {
        face: face,
        project: faceProjection(face)
      };
    });
    [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
      var node = faces[d];
      node && (node.children || (node.children = [])).push(faces[i]);
    });
    return polyhedral(faces[0], function (lambda, phi) {
      return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
    }).angle(-30).scale(101.858).center([0, 45]);
  }
  var kx = 2 / sqrt(3);
  function collignonK(a, b) {
    var p = collignonRaw(a, b);
    return [p[0] * kx, p[1]];
  }
  collignonK.invert = function (x, y) {
    return collignonRaw.invert(x / kx, y);
  };
  function collignon$1(faceProjection) {
    faceProjection = faceProjection || (function (face) {
      var c = d3Geo.geoCentroid({
        type: "MultiPoint",
        coordinates: face
      });
      return d3Geo.geoProjection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);
    });
    var faces = octahedron$1.map(function (face) {
      return {
        face: face,
        project: faceProjection(face)
      };
    });
    [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {
      var node = faces[d];
      node && (node.children || (node.children = [])).push(faces[i]);
    });
    return polyhedral(faces[0], function (lambda, phi) {
      return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];
    }).angle(-30).scale(121.906).center([0, 48.5904]);
  }
  function waterman(faceProjection) {
    faceProjection = faceProjection || (function (face) {
      var c = face.length === 6 ? d3Geo.geoCentroid({
        type: "MultiPoint",
        coordinates: face
      }) : face[0];
      return d3Geo.geoGnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);
    });
    var w5 = octahedron$1.map(function (face) {
      var xyz = face.map(cartesian), n = xyz.length, a = xyz[n - 1], b, hexagon = [];
      for (var i = 0; i < n; ++i) {
        b = xyz[i];
        hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));
        a = b;
      }
      return hexagon;
    });
    var cornerNormals = [];
    var parents = [-1, 0, 0, 1, 0, 1, 4, 5];
    w5.forEach(function (hexagon, j) {
      var face = octahedron$1[j], n = face.length, normals = cornerNormals[j] = [];
      for (var i = 0; i < n; ++i) {
        w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);
        parents.push(j);
        normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));
      }
    });
    var faces = w5.map(function (face) {
      return {
        project: faceProjection(face),
        face: face
      };
    });
    parents.forEach(function (d, i) {
      var parent = faces[d];
      parent && (parent.children || (parent.children = [])).push(faces[i]);
    });
    function face(lambda, phi) {
      var cosphi = cos(phi), p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];
      var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;
      var n = cornerNormals[hexagon];
      return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];
    }
    return polyhedral(faces[0], face).angle(-30).scale(110.625).center([0, 45]);
  }
  function dot(a, b) {
    for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];
    return s;
  }
  function cross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  }
  // Converts 3D Cartesian to spherical coordinates (degrees).
  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];
  }
  // Converts spherical coordinates (degrees) to 3D Cartesian.
  function cartesian(coordinates) {
    var lambda = coordinates[0] * radians, phi = coordinates[1] * radians, cosphi = cos(phi);
    return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];
  }
  var noop = () => {};
  function clockwise(ring) {
    if ((n = ring.length) < 4) return false;
    var i = 0, n, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area <= 0;
  }
  function contains(ring, point) {
    var x = point[0], y = point[1], contains = false;
    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
      if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;
    }
    return contains;
  }
  function index(object, projection) {
    var stream = projection.stream, project;
    if (!stream) throw new Error("invalid projection");
    switch (object && object.type) {
      case "Feature":
        project = projectFeature;
        break;
      case "FeatureCollection":
        project = projectFeatureCollection;
        break;
      default:
        project = projectGeometry;
        break;
    }
    return project(object, stream);
  }
  function projectFeatureCollection(o, stream) {
    return {
      type: "FeatureCollection",
      features: o.features.map(function (f) {
        return projectFeature(f, stream);
      })
    };
  }
  function projectFeature(o, stream) {
    return {
      type: "Feature",
      id: o.id,
      properties: o.properties,
      geometry: projectGeometry(o.geometry, stream)
    };
  }
  function projectGeometryCollection(o, stream) {
    return {
      type: "GeometryCollection",
      geometries: o.geometries.map(function (o) {
        return projectGeometry(o, stream);
      })
    };
  }
  function projectGeometry(o, stream) {
    if (!o) return null;
    if (o.type === "GeometryCollection") return projectGeometryCollection(o, stream);
    var sink;
    switch (o.type) {
      case "Point":
        sink = sinkPoint;
        break;
      case "MultiPoint":
        sink = sinkPoint;
        break;
      case "LineString":
        sink = sinkLine;
        break;
      case "MultiLineString":
        sink = sinkLine;
        break;
      case "Polygon":
        sink = sinkPolygon;
        break;
      case "MultiPolygon":
        sink = sinkPolygon;
        break;
      case "Sphere":
        sink = sinkPolygon;
        break;
      default:
        return null;
    }
    d3Geo.geoStream(o, stream(sink));
    return sink.result();
  }
  var points = [], lines = [];
  var sinkPoint = {
    point: function (x, y) {
      points.push([x, y]);
    },
    result: function () {
      var result = !points.length ? null : points.length < 2 ? {
        type: "Point",
        coordinates: points[0]
      } : {
        type: "MultiPoint",
        coordinates: points
      };
      points = [];
      return result;
    }
  };
  var sinkLine = {
    lineStart: noop,
    point: function (x, y) {
      points.push([x, y]);
    },
    lineEnd: function () {
      if (points.length) (lines.push(points), points = []);
    },
    result: function () {
      var result = !lines.length ? null : lines.length < 2 ? {
        type: "LineString",
        coordinates: lines[0]
      } : {
        type: "MultiLineString",
        coordinates: lines
      };
      lines = [];
      return result;
    }
  };
  var sinkPolygon = {
    polygonStart: noop,
    lineStart: noop,
    point: function (x, y) {
      points.push([x, y]);
    },
    lineEnd: function () {
      var n = points.length;
      if (n) {
        do points.push(points[0].slice()); while (++n < 4);
        (lines.push(points), points = []);
      }
    },
    polygonEnd: noop,
    result: function () {
      if (!lines.length) return null;
      var polygons = [], holes = [];
      // https://github.com/d3/d3/issues/1558
      lines.forEach(function (ring) {
        if (clockwise(ring)) polygons.push([ring]); else holes.push(ring);
      });
      holes.forEach(function (hole) {
        var point = hole[0];
        polygons.some(function (polygon) {
          if (contains(polygon[0], point)) {
            polygon.push(hole);
            return true;
          }
        }) || polygons.push([hole]);
      });
      lines = [];
      return !polygons.length ? null : polygons.length > 1 ? {
        type: "MultiPolygon",
        coordinates: polygons
      } : {
        type: "Polygon",
        coordinates: polygons[0]
      };
    }
  };
  function quincuncial(project) {
    var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];
    function projectQuincuncial(lambda, phi) {
      var t = abs(lambda) < halfPi, p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi), x = (p[0] - p[1]) * sqrt1_2, y = (p[0] + p[1]) * sqrt1_2;
      if (t) return [x, y];
      var d = dx * sqrt1_2, s = x > 0 ^ y > 0 ? -1 : 1;
      return [s * x - sign(y) * d, s * y - sign(x) * d];
    }
    if (project.invert) projectQuincuncial.invert = function (x0, y0) {
      var x = (x0 + y0) * sqrt1_2, y = (y0 - x0) * sqrt1_2, t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;
      if (!t) {
        var d = dx * sqrt1_2, s = x > 0 ^ y > 0 ? -1 : 1, x1 = -s * x0 + (y > 0 ? 1 : -1) * d, y1 = -s * y0 + (x > 0 ? 1 : -1) * d;
        x = (-x1 - y1) * sqrt1_2;
        y = (x1 - y1) * sqrt1_2;
      }
      var p = project.invert(x, y);
      if (!t) p[0] += x > 0 ? pi : -pi;
      return p;
    };
    return d3Geo.geoProjection(projectQuincuncial).rotate([-90, -90, 45]).clipAngle(180 - 1e-3);
  }
  function gringorten$1() {
    return quincuncial(gringortenRaw).scale(176.423);
  }
  function peirce() {
    return quincuncial(guyouRaw).scale(111.48);
  }
  function quantize(input, digits) {
    if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error("invalid digits");
    function quantizePoint(input) {
      var n = input.length, i = 2, output = new Array(n);
      output[0] = +input[0].toFixed(digits);
      output[1] = +input[1].toFixed(digits);
      while (i < n) (output[i] = input[i], ++i);
      return output;
    }
    function quantizePoints(input) {
      return input.map(quantizePoint);
    }
    function quantizePointsNoDuplicates(input) {
      var point0 = quantizePoint(input[0]);
      var output = [point0];
      for (var i = 1; i < input.length; i++) {
        var point = quantizePoint(input[i]);
        if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {
          output.push(point);
          point0 = point;
        }
      }
      if (output.length === 1 && input.length > 1) {
        output.push(quantizePoint(input[input.length - 1]));
      }
      return output;
    }
    function quantizePolygon(input) {
      return input.map(quantizePointsNoDuplicates);
    }
    function quantizeGeometry(input) {
      if (input == null) return input;
      var output;
      switch (input.type) {
        case "GeometryCollection":
          output = {
            type: "GeometryCollection",
            geometries: input.geometries.map(quantizeGeometry)
          };
          break;
        case "Point":
          output = {
            type: "Point",
            coordinates: quantizePoint(input.coordinates)
          };
          break;
        case "MultiPoint":
          output = {
            type: input.type,
            coordinates: quantizePoints(input.coordinates)
          };
          break;
        case "LineString":
          output = {
            type: input.type,
            coordinates: quantizePointsNoDuplicates(input.coordinates)
          };
          break;
        case "MultiLineString":
        case "Polygon":
          output = {
            type: input.type,
            coordinates: quantizePolygon(input.coordinates)
          };
          break;
        case "MultiPolygon":
          output = {
            type: "MultiPolygon",
            coordinates: input.coordinates.map(quantizePolygon)
          };
          break;
        default:
          return input;
      }
      if (input.bbox != null) output.bbox = input.bbox;
      return output;
    }
    function quantizeFeature(input) {
      var output = {
        type: "Feature",
        properties: input.properties,
        geometry: quantizeGeometry(input.geometry)
      };
      if (input.id != null) output.id = input.id;
      if (input.bbox != null) output.bbox = input.bbox;
      return output;
    }
    if (input != null) switch (input.type) {
      case "Feature":
        return quantizeFeature(input);
      case "FeatureCollection":
        {
          var output = {
            type: "FeatureCollection",
            features: input.features.map(quantizeFeature)
          };
          if (input.bbox != null) output.bbox = input.bbox;
          return output;
        }
      default:
        return quantizeGeometry(input);
    }
    return input;
  }
  function rectangularPolyconicRaw(phi0) {
    var sinPhi0 = sin(phi0);
    function forward(lambda, phi) {
      var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;
      if (!phi) return [2 * A, -phi0];
      var E = 2 * atan(A * sin(phi)), cotPhi = 1 / tan(phi);
      return [sin(E) * cotPhi, phi + (1 - cos(E)) * cotPhi - phi0];
    }
    // TODO return null for points outside outline.
    forward.invert = function (x, y) {
      if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];
      var k = x * x + y * y, phi = 0, i = 10, delta;
      do {
        var tanPhi = tan(phi), secPhi = 1 / cos(phi), j = k - 2 * y * phi + phi * phi;
        phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);
      } while (abs(delta) > epsilon && --i > 0);
      var E = x * (tanPhi = tan(phi)), A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);
      return [sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A, phi];
    };
    return forward;
  }
  function rectangularPolyconic() {
    return parallel1(rectangularPolyconicRaw).scale(131.215);
  }
  var K$1 = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];
  K$1.forEach(function (d) {
    d[1] *= 1.0144;
  });
  function robinsonRaw(lambda, phi) {
    var i = min(18, abs(phi) * 36 / pi), i0 = floor(i), di = i - i0, ax = (k = K$1[i0])[0], ay = k[1], bx = (k = K$1[++i0])[0], by = k[1], cx = (k = K$1[min(19, ++i0)])[0], cy = k[1], k;
    return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];
  }
  robinsonRaw.invert = function (x, y) {
    var yy = y / halfPi, phi = yy * 90, i = min(18, abs(phi / 5)), i0 = max(0, floor(i));
    do {
      var ay = K$1[i0][1], by = K$1[i0 + 1][1], cy = K$1[min(19, i0 + 2)][1], u = cy - ay, v = cy - 2 * by + ay, t = 2 * (abs(yy) - by) / u, c = v / u, di = t * (1 - c * t * (1 - 2 * c * t));
      if (di >= 0 || i0 === 1) {
        phi = (y >= 0 ? 5 : -5) * (di + i);
        var j = 50, delta;
        do {
          i = min(18, abs(phi) / 5);
          i0 = floor(i);
          di = i - i0;
          ay = K$1[i0][1];
          by = K$1[i0 + 1][1];
          cy = K$1[min(19, i0 + 2)][1];
          phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;
        } while (abs(delta) > epsilon2 && --j > 0);
        break;
      }
    } while (--i0 >= 0);
    var ax = K$1[i0][0], bx = K$1[i0 + 1][0], cx = K$1[min(19, i0 + 2)][0];
    return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * radians];
  };
  function robinson() {
    return d3Geo.geoProjection(robinsonRaw).scale(152.63);
  }
  function satelliteVerticalRaw(P) {
    function forward(lambda, phi) {
      var cosPhi = cos(phi), k = (P - 1) / (P - cosPhi * cos(lambda));
      return [k * cosPhi * sin(lambda), k * sin(phi)];
    }
    forward.invert = function (x, y) {
      var rho2 = x * x + y * y, rho = sqrt(rho2), sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));
      return [atan2(x * sinc, rho * sqrt(1 - sinc * sinc)), rho ? asin(y * sinc / rho) : 0];
    };
    return forward;
  }
  function satelliteRaw(P, omega) {
    var vertical = satelliteVerticalRaw(P);
    if (!omega) return vertical;
    var cosOmega = cos(omega), sinOmega = sin(omega);
    function forward(lambda, phi) {
      var coordinates = vertical(lambda, phi), y = coordinates[1], A = y * sinOmega / (P - 1) + cosOmega;
      return [coordinates[0] * cosOmega / A, y / A];
    }
    forward.invert = function (x, y) {
      var k = (P - 1) / (P - 1 - y * sinOmega);
      return vertical.invert(k * x, k * y * cosOmega);
    };
    return forward;
  }
  function satellite() {
    var distance = 2, omega = 0, m = d3Geo.geoProjectionMutator(satelliteRaw), p = m(distance, omega);
    // As a multiple of radius.
    p.distance = function (_) {
      if (!arguments.length) return distance;
      return m(distance = +_, omega);
    };
    p.tilt = function (_) {
      if (!arguments.length) return omega * degrees;
      return m(distance, omega = _ * radians);
    };
    return p.scale(432.147).clipAngle(acos(1 / distance) * degrees - 1e-6);
  }
  var epsilon$1 = 1e-4, epsilonInverse = 1e4, x0 = -180, x0e = x0 + epsilon$1, x1 = 180, x1e = x1 - epsilon$1, y0 = -90, y0e = y0 + epsilon$1, y1 = 90, y1e = y1 - epsilon$1;
  function nonempty(coordinates) {
    return coordinates.length > 0;
  }
  function quantize$1(x) {
    return Math.floor(x * epsilonInverse) / epsilonInverse;
  }
  function normalizePoint(y) {
    return y === y0 || y === y1 ? [0, y] : [x0, quantize$1(y)];
  }
  function clampPoint(p) {
    var x = p[0], y = p[1], clamped = false;
    if (x <= x0e) (x = x0, clamped = true); else if (x >= x1e) (x = x1, clamped = true);
    if (y <= y0e) (y = y0, clamped = true); else if (y >= y1e) (y = y1, clamped = true);
    return clamped ? [x, y] : p;
  }
  function clampPoints(points) {
    return points.map(clampPoint);
  }
  // For each ring, detect where it crosses the antimeridian or pole.
  function extractFragments(rings, polygon, fragments) {
    for (var j = 0, m = rings.length; j < m; ++j) {
      var ring = rings[j].slice();
      // By default, assume that this ring doesn’t need any stitching.
      fragments.push({
        index: -1,
        polygon: polygon,
        ring: ring
      });
      for (var i = 0, n = ring.length; i < n; ++i) {
        var point = ring[i], x = point[0], y = point[1];
        // If this is an antimeridian or polar point…
        if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {
          ring[i] = clampPoint(point);
          // Advance through any antimeridian or polar points…
          for (var k = i + 1; k < n; ++k) {
            var pointk = ring[k], xk = pointk[0], yk = pointk[1];
            if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;
          }
          // If this was just a single antimeridian or polar point,
          // we don’t need to cut this ring into a fragment;
          // we can just leave it as-is.
          if (k === i + 1) continue;
          // Otherwise, if this is not the first point in the ring,
          // cut the current fragment so that it ends at the current point.
          // The current point is also normalized for later joining.
          if (i) {
            var fragmentBefore = {
              index: -1,
              polygon: polygon,
              ring: ring.slice(0, i + 1)
            };
            fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);
            fragments[fragments.length - 1] = fragmentBefore;
                      // If the ring started with an antimeridian fragment,
            // we can ignore that fragment entirely.
} else // If the ring started with an antimeridian fragment,
          // we can ignore that fragment entirely.
          fragments.pop();
          // If the remainder of the ring is an antimeridian fragment,
          // move on to the next ring.
          if (k >= n) break;
          // Otherwise, add the remaining ring fragment and continue.
          fragments.push({
            index: -1,
            polygon: polygon,
            ring: ring = ring.slice(k - 1)
          });
          ring[0] = normalizePoint(ring[0][1]);
          i = -1;
          n = ring.length;
        }
      }
    }
  }
  // Now stitch the fragments back together into rings.
  function stitchFragments(fragments) {
    var i, n = fragments.length;
    // To connect the fragments start-to-end, create a simple index by end.
    var fragmentByStart = {}, fragmentByEnd = {}, fragment, start, startFragment, end, endFragment;
    // For each fragment…
    for (i = 0; i < n; ++i) {
      fragment = fragments[i];
      start = fragment.ring[0];
      end = fragment.ring[fragment.ring.length - 1];
      // If this fragment is closed, add it as a standalone ring.
      if (start[0] === end[0] && start[1] === end[1]) {
        fragment.polygon.push(fragment.ring);
        fragments[i] = null;
        continue;
      }
      fragment.index = i;
      fragmentByStart[start] = fragmentByEnd[end] = fragment;
    }
    // For each open fragment…
    for (i = 0; i < n; ++i) {
      fragment = fragments[i];
      if (fragment) {
        start = fragment.ring[0];
        end = fragment.ring[fragment.ring.length - 1];
        startFragment = fragmentByEnd[start];
        endFragment = fragmentByStart[end];
        delete fragmentByStart[start];
        delete fragmentByEnd[end];
        // If this fragment is closed, add it as a standalone ring.
        if (start[0] === end[0] && start[1] === end[1]) {
          fragment.polygon.push(fragment.ring);
          continue;
        }
        if (startFragment) {
          delete fragmentByEnd[start];
          delete fragmentByStart[startFragment.ring[0]];
          startFragment.ring.pop();
          // drop the shared coordinate
          fragments[startFragment.index] = null;
          fragment = {
            index: -1,
            polygon: startFragment.polygon,
            ring: startFragment.ring.concat(fragment.ring)
          };
          if (startFragment === endFragment) {
            // Connect both ends to this single fragment to create a ring.
            fragment.polygon.push(fragment.ring);
          } else {
            fragment.index = n++;
            fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
          }
        } else if (endFragment) {
          delete fragmentByStart[end];
          delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];
          fragment.ring.pop();
          // drop the shared coordinate
          fragment = {
            index: n++,
            polygon: endFragment.polygon,
            ring: fragment.ring.concat(endFragment.ring)
          };
          fragments[endFragment.index] = null;
          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);
        } else {
          fragment.ring.push(fragment.ring[0]);
          // close ring
          fragment.polygon.push(fragment.ring);
        }
      }
    }
  }
  function stitchFeature(input) {
    var output = {
      type: "Feature",
      geometry: stitchGeometry(input.geometry)
    };
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }
  function stitchGeometry(input) {
    if (input == null) return input;
    var output, fragments, i, n;
    switch (input.type) {
      case "GeometryCollection":
        output = {
          type: "GeometryCollection",
          geometries: input.geometries.map(stitchGeometry)
        };
        break;
      case "Point":
        output = {
          type: "Point",
          coordinates: clampPoint(input.coordinates)
        };
        break;
      case "MultiPoint":
      case "LineString":
        output = {
          type: input.type,
          coordinates: clampPoints(input.coordinates)
        };
        break;
      case "MultiLineString":
        output = {
          type: "MultiLineString",
          coordinates: input.coordinates.map(clampPoints)
        };
        break;
      case "Polygon":
        {
          var polygon = [];
          extractFragments(input.coordinates, polygon, fragments = []);
          stitchFragments(fragments);
          output = {
            type: "Polygon",
            coordinates: polygon
          };
          break;
        }
      case "MultiPolygon":
        {
          (fragments = [], i = -1, n = input.coordinates.length);
          var polygons = new Array(n);
          while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);
          stitchFragments(fragments);
          output = {
            type: "MultiPolygon",
            coordinates: polygons.filter(nonempty)
          };
          break;
        }
      default:
        return input;
    }
    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }
  function stitch(input) {
    if (input == null) return input;
    switch (input.type) {
      case "Feature":
        return stitchFeature(input);
      case "FeatureCollection":
        {
          var output = {
            type: "FeatureCollection",
            features: input.features.map(stitchFeature)
          };
          if (input.bbox != null) output.bbox = input.bbox;
          return output;
        }
      default:
        return stitchGeometry(input);
    }
  }
  function timesRaw(lambda, phi) {
    var t = tan(phi / 2), s = sin(quarterPi * t);
    return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];
  }
  timesRaw.invert = function (x, y) {
    var t = y / 1.70711, s = sin(quarterPi * t);
    return [x / (0.74482 - 0.34588 * s * s), 2 * atan(t)];
  };
  function times() {
    return d3Geo.geoProjection(timesRaw).scale(146.153);
  }
  // Compute the origin as the midpoint of the two reference points.
  // Rotate one of the reference points by the origin.
  // Apply the spherical law of sines to compute gamma rotation.
  function twoPoint(raw, p0, p1) {
    var i = d3Geo.geoInterpolate(p0, p1), o = i(0.5), a = d3Geo.geoRotation([-o[0], -o[1]])(p0), b = i.distance / 2, y = -asin(sin(a[1] * radians) / sin(b)), R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees], p = d3Geo.geoProjection(raw(b)).rotate(R), r = d3Geo.geoRotation(R), center = p.center;
    delete p.rotate;
    p.center = function (_) {
      return arguments.length ? center(r(_)) : r.invert(center());
    };
    return p.clipAngle(90);
  }
  function twoPointAzimuthalRaw(d) {
    var cosd = cos(d);
    function forward(lambda, phi) {
      var coordinates = d3Geo.geoGnomonicRaw(lambda, phi);
      coordinates[0] *= cosd;
      return coordinates;
    }
    forward.invert = function (x, y) {
      return d3Geo.geoGnomonicRaw.invert(x / cosd, y);
    };
    return forward;
  }
  function twoPointAzimuthalUsa() {
    return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);
  }
  function twoPointAzimuthal(p0, p1) {
    return twoPoint(twoPointAzimuthalRaw, p0, p1);
  }
  function twoPointEquidistantRaw(z0) {
    if (!(z0 *= 2)) return d3Geo.geoAzimuthalEquidistantRaw;
    var lambdaa = -z0 / 2, lambdab = -lambdaa, z02 = z0 * z0, tanLambda0 = tan(lambdab), S = 0.5 / sin(lambdab);
    function forward(lambda, phi) {
      var za = acos(cos(phi) * cos(lambda - lambdaa)), zb = acos(cos(phi) * cos(lambda - lambdab)), ys = phi < 0 ? -1 : 1;
      (za *= za, zb *= zb);
      return [(za - zb) / (2 * z0), ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];
    }
    forward.invert = function (x, y) {
      var y2 = y * y, cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)), coszb = cos(sqrt(y2 + (t = x + lambdab) * t)), t, d;
      return [atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0), (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)];
    };
    return forward;
  }
  function twoPointEquidistantUsa() {
    return twoPointEquidistant([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);
  }
  function twoPointEquidistant(p0, p1) {
    return twoPoint(twoPointEquidistantRaw, p0, p1);
  }
  function vanDerGrintenRaw(lambda, phi) {
    if (abs(phi) < epsilon) return [lambda, 0];
    var sinTheta = abs(phi / halfPi), theta = asin(sinTheta);
    if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];
    var cosTheta = cos(theta), A = abs(pi / lambda - lambda / pi) / 2, A2 = A * A, G = cosTheta / (sinTheta + cosTheta - 1), P = G * (2 / sinTheta - 1), P2 = P * P, P2_A2 = P2 + A2, G_P2 = G - P2, Q = A2 + G;
    return [sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];
  }
  vanDerGrintenRaw.invert = function (x, y) {
    if (abs(y) < epsilon) return [x, 0];
    if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];
    var x2 = (x /= pi) * x, y2 = (y /= pi) * y, x2_y2 = x2 + y2, z = x2_y2 * x2_y2, c1 = -abs(y) * (1 + x2_y2), c2 = c1 - 2 * y2 + x2, c3 = -2 * c1 + 1 + 2 * y2 + z, d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27, a1 = (c1 - c2 * c2 / (3 * c3)) / c3, m1 = 2 * sqrt(-a1 / 3), theta1 = acos(3 * d / (a1 * m1)) / 3;
    return [pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))];
  };
  function vanDerGrinten() {
    return d3Geo.geoProjection(vanDerGrintenRaw).scale(79.4183);
  }
  function vanDerGrinten2Raw(lambda, phi) {
    if (abs(phi) < epsilon) return [lambda, 0];
    var sinTheta = abs(phi / halfPi), theta = asin(sinTheta);
    if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];
    var cosTheta = cos(theta), A = abs(pi / lambda - lambda / pi) / 2, A2 = A * A, x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);
    return [sign(lambda) * pi * x1, sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))];
  }
  vanDerGrinten2Raw.invert = function (x, y) {
    if (!x) return [0, halfPi * sin(2 * atan(y / pi))];
    var x1 = abs(x / pi), A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1), A2 = A * A, B = sqrt(A2 + 1);
    return [sign(x) * pi * (B - A), sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))];
  };
  function vanDerGrinten2() {
    return d3Geo.geoProjection(vanDerGrinten2Raw).scale(79.4183);
  }
  function vanDerGrinten3Raw(lambda, phi) {
    if (abs(phi) < epsilon) return [lambda, 0];
    var sinTheta = phi / halfPi, theta = asin(sinTheta);
    if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];
    var A = (pi / lambda - lambda / pi) / 2, y1 = sinTheta / (1 + cos(theta));
    return [pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A), pi * y1];
  }
  vanDerGrinten3Raw.invert = function (x, y) {
    if (!y) return [x, 0];
    var y1 = y / pi, A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);
    return [x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0, halfPi * sin(2 * atan(y1))];
  };
  function vanDerGrinten3() {
    return d3Geo.geoProjection(vanDerGrinten3Raw).scale(79.4183);
  }
  function vanDerGrinten4Raw(lambda, phi) {
    if (!phi) return [lambda, 0];
    var phi0 = abs(phi);
    if (!lambda || phi0 === halfPi) return [0, phi];
    var B = phi0 / halfPi, B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C2 = C * C, BC = B * C, B_C2 = B2 + C2 + 2 * BC, B_3C = B + 3 * C, lambda0 = lambda / halfPi, lambda1 = lambda0 + 1 / lambda0, D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4), D2 = D * D, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2), x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);
    return [sign(lambda) * halfPi * x1, sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)];
  }
  vanDerGrinten4Raw.invert = function (x, y) {
    var delta;
    if (!x || !y) return [x, y];
    var sy = sign(y);
    y = abs(y) / pi;
    var x1 = sign(x) * x / halfPi, D = (x1 * x1 - 1 + 4 * y * y) / abs(x1), D2 = D * D, B = y * (2 - (y > 0.5 ? min(y, abs(x)) : 0)), r = x * x + y * y, i = 50;
    do {
      var B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C_ = (3 * B - B2 * B - 10) / (2 * B2 * B), C2 = C * C, BC = B * C, B_C = B + C, B_C2 = B_C * B_C, B_3C = B + 3 * C, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)), F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)), sqrtF = sqrt(F), f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2), f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
      B -= delta = f / f_;
    } while (delta * r * r > epsilon && --i > 0);
    return [sign(x) * (sqrt(D * D + 4) + D) * pi / 4, sy * halfPi * B];
  };
  function vanDerGrinten4() {
    return d3Geo.geoProjection(vanDerGrinten4Raw).scale(127.16);
  }
  function wagnerFormula(cx, cy, m1, m2, n) {
    function forward(lambda, phi) {
      var s = m1 * sin(m2 * phi), c0 = sqrt(1 - s * s), c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));
      return [cx * c0 * c1 * sin(lambda), cy * s * c1];
    }
    forward.invert = function (x, y) {
      var t1 = x / cx, t2 = y / cy, p = sqrt(t1 * t1 + t2 * t2), c = 2 * asin(p / 2);
      return [atan2(x * tan(c), cx * p) / n, p && asin(y * sin(c) / (cy * m1 * p)) / m2];
    };
    return forward;
  }
  function wagnerRaw(poleline, parallels, inflation, ratio) {
    // 60 is always used as reference parallel
    var phi1 = pi / 3;
    // sanitizing the input values
    // poleline and parallels may approximate but never equal 0
    poleline = max(poleline, epsilon);
    parallels = max(parallels, epsilon);
    // poleline must be <= 90; parallels may approximate but never equal 180
    poleline = min(poleline, halfPi);
    parallels = min(parallels, pi - epsilon);
    // 0 <= inflation <= 99.999
    inflation = max(inflation, 0);
    inflation = min(inflation, 100 - epsilon);
    // ratio > 0.
    // sensible values, i.e. something that renders a map which still can be
    // recognized as world map, are e.g. 20 <= ratio <= 1000.
    ratio = max(ratio, epsilon);
    // convert values from boehm notation
    // areal inflation e.g. from 0 to 1 or 20 to 1.2:
    var vinflation = inflation / 100 + 1;
    // axial ratio e.g. from 200 to 2:
    var vratio = ratio / 100;
    // the other ones are a bit more complicated...
    var m2 = acos(vinflation * cos(phi1)) / phi1, m1 = sin(poleline) / sin(m2 * halfPi), n = parallels / pi, k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)), cx = k / sqrt(n * m1 * m2), cy = 1 / (k * sqrt(n * m1 * m2));
    return wagnerFormula(cx, cy, m1, m2, n);
  }
  function wagner() {
    // default values generate wagner8
    var poleline = 65 * radians, parallels = 60 * radians, inflation = 20, ratio = 200, mutate = d3Geo.geoProjectionMutator(wagnerRaw), projection = mutate(poleline, parallels, inflation, ratio);
    projection.poleline = function (_) {
      return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;
    };
    projection.parallels = function (_) {
      return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;
    };
    projection.inflation = function (_) {
      return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;
    };
    projection.ratio = function (_) {
      return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;
    };
    return projection.scale(163.775);
  }
  function wagner7() {
    return wagner().poleline(65).parallels(60).inflation(0).ratio(200).scale(172.633);
  }
  var A = 4 * pi + 3 * sqrt(3), B = 2 * sqrt(2 * pi * sqrt(3) / A);
  var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);
  function wagner4() {
    return d3Geo.geoProjection(wagner4Raw).scale(176.84);
  }
  function wagner6Raw(lambda, phi) {
    return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];
  }
  wagner6Raw.invert = function (x, y) {
    return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];
  };
  function wagner6() {
    return d3Geo.geoProjection(wagner6Raw).scale(152.63);
  }
  function wiechelRaw(lambda, phi) {
    var cosPhi = cos(phi), sinPhi = cos(lambda) * cosPhi, sin1_Phi = 1 - sinPhi, cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))), sinLambda = sin(lambda);
    cosPhi = sqrt(1 - sinPhi * sinPhi);
    return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];
  }
  wiechelRaw.invert = function (x, y) {
    var w = (x * x + y * y) / -2, k = sqrt(-w * (2 + w)), b = y * w + x * k, a = x * w - y * k, D = sqrt(a * a + b * b);
    return [atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0];
  };
  function wiechel() {
    return d3Geo.geoProjection(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);
  }
  function winkel3Raw(lambda, phi) {
    var coordinates = aitoffRaw(lambda, phi);
    return [(coordinates[0] + lambda / halfPi) / 2, (coordinates[1] + phi) / 2];
  }
  winkel3Raw.invert = function (x, y) {
    var lambda = x, phi = y, i = 25;
    do {
      var cosphi = cos(phi), sinphi = sin(phi), sin_2phi = sin(2 * phi), sin2phi = sinphi * sinphi, cos2phi = cosphi * cosphi, sinlambda = sin(lambda), coslambda_2 = cos(lambda / 2), sinlambda_2 = sin(lambda / 2), sin2lambda_2 = sinlambda_2 * sinlambda_2, C = 1 - cos2phi * coslambda_2 * coslambda_2, E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0, F, fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x, fy = 0.5 * (E * sinphi + phi) - y, dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi, dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2), dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda), dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5, denominator = dxdphi * dydlambda - dydphi * dxdlambda, dlambda = (fy * dxdphi - fx * dydphi) / denominator, dphi = (fx * dydlambda - fy * dxdlambda) / denominator;
      (lambda -= dlambda, phi -= dphi);
    } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);
    return [lambda, phi];
  };
  function winkel3() {
    return d3Geo.geoProjection(winkel3Raw).scale(158.837);
  }
  exports.geoAiry = airy;
  exports.geoAiryRaw = airyRaw;
  exports.geoAitoff = aitoff;
  exports.geoAitoffRaw = aitoffRaw;
  exports.geoArmadillo = armadillo;
  exports.geoArmadilloRaw = armadilloRaw;
  exports.geoAugust = august;
  exports.geoAugustRaw = augustRaw;
  exports.geoBaker = baker;
  exports.geoBakerRaw = bakerRaw;
  exports.geoBerghaus = berghaus;
  exports.geoBerghausRaw = berghausRaw;
  exports.geoBertin1953 = bertin;
  exports.geoBertin1953Raw = bertin1953Raw;
  exports.geoBoggs = boggs;
  exports.geoBoggsRaw = boggsRaw;
  exports.geoBonne = bonne;
  exports.geoBonneRaw = bonneRaw;
  exports.geoBottomley = bottomley;
  exports.geoBottomleyRaw = bottomleyRaw;
  exports.geoBromley = bromley;
  exports.geoBromleyRaw = bromleyRaw;
  exports.geoChamberlin = chamberlin;
  exports.geoChamberlinRaw = chamberlinRaw;
  exports.geoChamberlinAfrica = chamberlinAfrica;
  exports.geoCollignon = collignon;
  exports.geoCollignonRaw = collignonRaw;
  exports.geoCraig = craig;
  exports.geoCraigRaw = craigRaw;
  exports.geoCraster = craster;
  exports.geoCrasterRaw = crasterRaw;
  exports.geoCylindricalEqualArea = cylindricalEqualArea;
  exports.geoCylindricalEqualAreaRaw = cylindricalEqualAreaRaw;
  exports.geoCylindricalStereographic = cylindricalStereographic;
  exports.geoCylindricalStereographicRaw = cylindricalStereographicRaw;
  exports.geoEckert1 = eckert1;
  exports.geoEckert1Raw = eckert1Raw;
  exports.geoEckert2 = eckert2;
  exports.geoEckert2Raw = eckert2Raw;
  exports.geoEckert3 = eckert3;
  exports.geoEckert3Raw = eckert3Raw;
  exports.geoEckert4 = eckert4;
  exports.geoEckert4Raw = eckert4Raw;
  exports.geoEckert5 = eckert5;
  exports.geoEckert5Raw = eckert5Raw;
  exports.geoEckert6 = eckert6;
  exports.geoEckert6Raw = eckert6Raw;
  exports.geoEisenlohr = eisenlohr;
  exports.geoEisenlohrRaw = eisenlohrRaw;
  exports.geoFahey = fahey;
  exports.geoFaheyRaw = faheyRaw;
  exports.geoFoucaut = foucaut;
  exports.geoFoucautRaw = foucautRaw;
  exports.geoFoucautSinusoidal = foucautSinusoidal;
  exports.geoFoucautSinusoidalRaw = foucautSinusoidalRaw;
  exports.geoGilbert = gilbert;
  exports.geoGingery = gingery;
  exports.geoGingeryRaw = gingeryRaw;
  exports.geoGinzburg4 = ginzburg4;
  exports.geoGinzburg4Raw = ginzburg4Raw;
  exports.geoGinzburg5 = ginzburg5;
  exports.geoGinzburg5Raw = ginzburg5Raw;
  exports.geoGinzburg6 = ginzburg6;
  exports.geoGinzburg6Raw = ginzburg6Raw;
  exports.geoGinzburg8 = ginzburg8;
  exports.geoGinzburg8Raw = ginzburg8Raw;
  exports.geoGinzburg9 = ginzburg9;
  exports.geoGinzburg9Raw = ginzburg9Raw;
  exports.geoGringorten = gringorten;
  exports.geoGringortenRaw = gringortenRaw;
  exports.geoGuyou = guyou;
  exports.geoGuyouRaw = guyouRaw;
  exports.geoHammer = hammer;
  exports.geoHammerRaw = hammerRaw;
  exports.geoHammerRetroazimuthal = hammerRetroazimuthal;
  exports.geoHammerRetroazimuthalRaw = hammerRetroazimuthalRaw;
  exports.geoHealpix = healpix;
  exports.geoHealpixRaw = healpixRaw;
  exports.geoHill = hill;
  exports.geoHillRaw = hillRaw;
  exports.geoHomolosine = homolosine;
  exports.geoHomolosineRaw = homolosineRaw;
  exports.geoHufnagel = hufnagel;
  exports.geoHufnagelRaw = hufnagelRaw;
  exports.geoHyperelliptical = hyperelliptical;
  exports.geoHyperellipticalRaw = hyperellipticalRaw;
  exports.geoInterrupt = interrupt;
  exports.geoInterruptedBoggs = boggs$1;
  exports.geoInterruptedHomolosine = homolosine$1;
  exports.geoInterruptedMollweide = mollweide$1;
  exports.geoInterruptedMollweideHemispheres = mollweideHemispheres;
  exports.geoInterruptedSinuMollweide = sinuMollweide$1;
  exports.geoInterruptedSinusoidal = sinusoidal$1;
  exports.geoKavrayskiy7 = kavrayskiy7;
  exports.geoKavrayskiy7Raw = kavrayskiy7Raw;
  exports.geoLagrange = lagrange;
  exports.geoLagrangeRaw = lagrangeRaw;
  exports.geoLarrivee = larrivee;
  exports.geoLarriveeRaw = larriveeRaw;
  exports.geoLaskowski = laskowski;
  exports.geoLaskowskiRaw = laskowskiRaw;
  exports.geoLittrow = littrow;
  exports.geoLittrowRaw = littrowRaw;
  exports.geoLoximuthal = loximuthal;
  exports.geoLoximuthalRaw = loximuthalRaw;
  exports.geoMiller = miller;
  exports.geoMillerRaw = millerRaw;
  exports.geoModifiedStereographic = modifiedStereographic;
  exports.geoModifiedStereographicRaw = modifiedStereographicRaw;
  exports.geoModifiedStereographicAlaska = modifiedStereographicAlaska;
  exports.geoModifiedStereographicGs48 = modifiedStereographicGs48;
  exports.geoModifiedStereographicGs50 = modifiedStereographicGs50;
  exports.geoModifiedStereographicMiller = modifiedStereographicMiller;
  exports.geoModifiedStereographicLee = modifiedStereographicLee;
  exports.geoMollweide = mollweide;
  exports.geoMollweideRaw = mollweideRaw;
  exports.geoMtFlatPolarParabolic = mtFlatPolarParabolic;
  exports.geoMtFlatPolarParabolicRaw = mtFlatPolarParabolicRaw;
  exports.geoMtFlatPolarQuartic = mtFlatPolarQuartic;
  exports.geoMtFlatPolarQuarticRaw = mtFlatPolarQuarticRaw;
  exports.geoMtFlatPolarSinusoidal = mtFlatPolarSinusoidal;
  exports.geoMtFlatPolarSinusoidalRaw = mtFlatPolarSinusoidalRaw;
  exports.geoNaturalEarth2 = naturalEarth2;
  exports.geoNaturalEarth2Raw = naturalEarth2Raw;
  exports.geoNellHammer = nellHammer;
  exports.geoNellHammerRaw = nellHammerRaw;
  exports.geoInterruptedQuarticAuthalic = quarticAuthalic;
  exports.geoNicolosi = nicolosi;
  exports.geoNicolosiRaw = nicolosiRaw;
  exports.geoPatterson = patterson;
  exports.geoPattersonRaw = pattersonRaw;
  exports.geoPolyconic = polyconic;
  exports.geoPolyconicRaw = polyconicRaw;
  exports.geoPolyhedral = polyhedral;
  exports.geoPolyhedralButterfly = butterfly;
  exports.geoPolyhedralCollignon = collignon$1;
  exports.geoPolyhedralWaterman = waterman;
  exports.geoProject = index;
  exports.geoGringortenQuincuncial = gringorten$1;
  exports.geoPeirceQuincuncial = peirce;
  exports.geoQuantize = quantize;
  exports.geoQuincuncial = quincuncial;
  exports.geoRectangularPolyconic = rectangularPolyconic;
  exports.geoRectangularPolyconicRaw = rectangularPolyconicRaw;
  exports.geoRobinson = robinson;
  exports.geoRobinsonRaw = robinsonRaw;
  exports.geoSatellite = satellite;
  exports.geoSatelliteRaw = satelliteRaw;
  exports.geoSinuMollweide = sinuMollweide;
  exports.geoSinuMollweideRaw = sinuMollweideRaw;
  exports.geoSinusoidal = sinusoidal;
  exports.geoSinusoidalRaw = sinusoidalRaw;
  exports.geoStitch = stitch;
  exports.geoTimes = times;
  exports.geoTimesRaw = timesRaw;
  exports.geoTwoPointAzimuthal = twoPointAzimuthal;
  exports.geoTwoPointAzimuthalRaw = twoPointAzimuthalRaw;
  exports.geoTwoPointAzimuthalUsa = twoPointAzimuthalUsa;
  exports.geoTwoPointEquidistant = twoPointEquidistant;
  exports.geoTwoPointEquidistantRaw = twoPointEquidistantRaw;
  exports.geoTwoPointEquidistantUsa = twoPointEquidistantUsa;
  exports.geoVanDerGrinten = vanDerGrinten;
  exports.geoVanDerGrintenRaw = vanDerGrintenRaw;
  exports.geoVanDerGrinten2 = vanDerGrinten2;
  exports.geoVanDerGrinten2Raw = vanDerGrinten2Raw;
  exports.geoVanDerGrinten3 = vanDerGrinten3;
  exports.geoVanDerGrinten3Raw = vanDerGrinten3Raw;
  exports.geoVanDerGrinten4 = vanDerGrinten4;
  exports.geoVanDerGrinten4Raw = vanDerGrinten4Raw;
  exports.geoWagner = wagner;
  exports.geoWagner7 = wagner7;
  exports.geoWagnerRaw = wagnerRaw;
  exports.geoWagner4 = wagner4;
  exports.geoWagner4Raw = wagner4Raw;
  exports.geoWagner6 = wagner6;
  exports.geoWagner6Raw = wagner6Raw;
  exports.geoWiechel = wiechel;
  exports.geoWiechelRaw = wiechelRaw;
  exports.geoWinkel3 = winkel3;
  exports.geoWinkel3Raw = winkel3Raw;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-geo":"3nbkI","d3-array":"7CLUA"}],"3Mn3U":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-force')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-force'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.d3));
})(this, function (exports, vegaDataflow, vegaUtil, d3Force) {
  "use strict";
  const ForceMap = {
    center: d3Force.forceCenter,
    collide: d3Force.forceCollide,
    nbody: d3Force.forceManyBody,
    link: d3Force.forceLink,
    x: d3Force.forceX,
    y: d3Force.forceY
  };
  const Forces = 'forces', ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'], ForceConfig = ['static', 'iterations'], ForceOutput = ['x', 'y', 'vx', 'vy'];
  /**
  * Force simulation layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<object>} params.forces - The forces to apply.
  */
  function Force(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Force.Definition = {
    'type': 'Force',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'static',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'restart',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'iterations',
      'type': 'number',
      'default': 300
    }, {
      'name': 'alpha',
      'type': 'number',
      'default': 1
    }, {
      'name': 'alphaMin',
      'type': 'number',
      'default': 0.001
    }, {
      'name': 'alphaTarget',
      'type': 'number',
      'default': 0
    }, {
      'name': 'velocityDecay',
      'type': 'number',
      'default': 0.4
    }, {
      'name': 'forces',
      'type': 'param',
      'array': true,
      'params': [{
        'key': {
          'force': 'center'
        },
        'params': [{
          'name': 'x',
          'type': 'number',
          'default': 0
        }, {
          'name': 'y',
          'type': 'number',
          'default': 0
        }]
      }, {
        'key': {
          'force': 'collide'
        },
        'params': [{
          'name': 'radius',
          'type': 'number',
          'expr': true
        }, {
          'name': 'strength',
          'type': 'number',
          'default': 0.7
        }, {
          'name': 'iterations',
          'type': 'number',
          'default': 1
        }]
      }, {
        'key': {
          'force': 'nbody'
        },
        'params': [{
          'name': 'strength',
          'type': 'number',
          'default': -30
        }, {
          'name': 'theta',
          'type': 'number',
          'default': 0.9
        }, {
          'name': 'distanceMin',
          'type': 'number',
          'default': 1
        }, {
          'name': 'distanceMax',
          'type': 'number'
        }]
      }, {
        'key': {
          'force': 'link'
        },
        'params': [{
          'name': 'links',
          'type': 'data'
        }, {
          'name': 'id',
          'type': 'field'
        }, {
          'name': 'distance',
          'type': 'number',
          'default': 30,
          'expr': true
        }, {
          'name': 'strength',
          'type': 'number',
          'expr': true
        }, {
          'name': 'iterations',
          'type': 'number',
          'default': 1
        }]
      }, {
        'key': {
          'force': 'x'
        },
        'params': [{
          'name': 'strength',
          'type': 'number',
          'default': 0.1
        }, {
          'name': 'x',
          'type': 'field'
        }]
      }, {
        'key': {
          'force': 'y'
        },
        'params': [{
          'name': 'strength',
          'type': 'number',
          'default': 0.1
        }, {
          'name': 'y',
          'type': 'field'
        }]
      }]
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'modify': false,
      'default': ForceOutput
    }]
  };
  vegaUtil.inherits(Force, vegaDataflow.Transform, {
    transform(_, pulse) {
      var sim = this.value, change = pulse.changed(pulse.ADD_REM), params = _.modified(ForceParams), iters = _.iterations || 300;
      // configure simulation
      if (!sim) {
        this.value = sim = simulation(pulse.source, _);
        sim.on('tick', rerun(pulse.dataflow, this));
        if (!_.static) {
          change = true;
          sim.tick();
        }
        pulse.modifies('index');
      } else {
        if (change) {
          pulse.modifies('index');
          sim.nodes(pulse.source);
        }
        if (params || pulse.changed(pulse.MOD)) {
          setup(sim, _, 0, pulse);
        }
      }
      // run simulation
      if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {
        sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
        if (_.static) {
          for (sim.stop(); --iters >= 0; ) sim.tick();
        } else {
          if (sim.stopped()) sim.restart();
          if (!change) return pulse.StopPropagation;
        }
      }
      return this.finish(_, pulse);
    },
    finish(_, pulse) {
      const dataflow = pulse.dataflow;
      // inspect dependencies, touch link source data
      for (let args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {
        arg = args[j];
        if (arg.name !== Forces || arg.op._argval.force !== 'link') {
          continue;
        }
        for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {
          if (ops[i].name === 'links' && (op = ops[i].op.source)) {
            dataflow.pulse(op, dataflow.changeset().reflow());
            break;
          }
        }
      }
      // reflow all nodes
      return pulse.reflow(_.modified()).modifies(ForceOutput);
    }
  });
  function rerun(df, op) {
    return () => df.touch(op).run();
  }
  function simulation(nodes, _) {
    const sim = d3Force.forceSimulation(nodes), stop = sim.stop, restart = sim.restart;
    let stopped = false;
    sim.stopped = () => stopped;
    sim.restart = () => (stopped = false, restart());
    sim.stop = () => (stopped = true, stop());
    return setup(sim, _, true).on('end', () => stopped = true);
  }
  function setup(sim, _, init, pulse) {
    var f = vegaUtil.array(_.forces), i, n, p, name;
    for ((i = 0, n = ForceParams.length); i < n; ++i) {
      p = ForceParams[i];
      if (p !== Forces && _.modified(p)) sim[p](_[p]);
    }
    for ((i = 0, n = f.length); i < n; ++i) {
      name = Forces + i;
      p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;
      if (p) sim.force(name, p);
    }
    for (n = sim.numForces || 0; i < n; ++i) {
      sim.force(Forces + i, null);
    }
    sim.numForces = f.length;
    return sim;
  }
  function modified(f, pulse) {
    var k, v;
    for (k in f) {
      if (vegaUtil.isFunction(v = f[k]) && pulse.modified(vegaUtil.accessorFields(v))) return 1;
    }
    return 0;
  }
  function getForce(_) {
    var f, p;
    if (!vegaUtil.hasOwnProperty(ForceMap, _.force)) {
      vegaUtil.error('Unrecognized force: ' + _.force);
    }
    f = ForceMap[_.force]();
    for (p in _) {
      if (vegaUtil.isFunction(f[p])) setForceParam(f[p], _[p], _);
    }
    return f;
  }
  function setForceParam(f, v, _) {
    f(vegaUtil.isFunction(v) ? d => v(d, _) : v);
  }
  exports.force = Force;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-util":"4BD5d","d3-force":"1dvpK"}],"1dvpK":[function(require,module,exports) {
var define;
// https://d3js.org/d3-force/ v2.1.1 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-dispatch'), require('d3-timer')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-dispatch', 'd3-timer'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({}), global.d3, global.d3, global.d3));
})(this, function (exports, d3Quadtree, d3Dispatch, d3Timer) {
  "use strict";
  function center(x, y) {
    var nodes, strength = 1;
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force() {
      var i, n = nodes.length, node, sx = 0, sy = 0;
      for (i = 0; i < n; ++i) {
        (node = nodes[i], sx += node.x, sy += node.y);
      }
      for ((sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0); i < n; ++i) {
        (node = nodes[i], node.x -= sx, node.y -= sy);
      }
    }
    force.initialize = function (_) {
      nodes = _;
    };
    force.x = function (_) {
      return arguments.length ? (x = +_, force) : x;
    };
    force.y = function (_) {
      return arguments.length ? (y = +_, force) : y;
    };
    force.strength = function (_) {
      return arguments.length ? (strength = +_, force) : strength;
    };
    return force;
  }
  function constant(x) {
    return function () {
      return x;
    };
  }
  function jiggle(random) {
    return (random() - 0.5) * 1e-6;
  }
  function x(d) {
    return d.x + d.vx;
  }
  function y(d) {
    return d.y + d.vy;
  }
  function collide(radius) {
    var nodes, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function") radius = constant(radius == null ? 1 : +radius);
    function force() {
      var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
      for (var k = 0; k < iterations; ++k) {
        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          (ri = radii[node.index], ri2 = ri * ri);
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree.visit(apply);
        }
      }
      function apply(quad, x0, y0, x1, y1) {
        var data = quad.data, rj = quad.r, r = ri + rj;
        if (data) {
          if (data.index > node.index) {
            var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
            if (l < r * r) {
              if (x === 0) (x = jiggle(random), l += x * x);
              if (y === 0) (y = jiggle(random), l += y * y);
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y *= l) * r;
              data.vx -= x * (r = 1 - r);
              data.vy -= y * r;
            }
          }
          return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }
    function prepare(quad) {
      if (quad.data) return quad.r = radii[quad.data.index];
      for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r;
        }
      }
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length, node;
      radii = new Array(n);
      for (i = 0; i < n; ++i) (node = nodes[i], radii[node.index] = +radius(node, i, nodes));
    }
    force.initialize = function (_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.iterations = function (_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function (_) {
      return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function (_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
    };
    return force;
  }
  function index(d) {
    return d.index;
  }
  function find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
  }
  function link(links) {
    var id = index, strength = defaultStrength, strengths, distance = constant(30), distances, nodes, count, bias, random, iterations = 1;
    if (links == null) links = [];
    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
          (link = links[i], source = link.source, target = link.target);
          x = target.x + target.vx - source.x - source.vx || jiggle(random);
          y = target.y + target.vy - source.y - source.vy || jiggle(random);
          l = Math.sqrt(x * x + y * y);
          l = (l - distances[i]) / l * alpha * strengths[i];
          (x *= l, y *= l);
          target.vx -= x * (b = bias[i]);
          target.vy -= y * b;
          source.vx += x * (b = 1 - b);
          source.vy += y * b;
        }
      }
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])), link;
      for ((i = 0, count = new Array(n)); i < m; ++i) {
        (link = links[i], link.index = i);
        if (typeof link.source !== "object") link.source = find(nodeById, link.source);
        if (typeof link.target !== "object") link.target = find(nodeById, link.target);
        count[link.source.index] = (count[link.source.index] || 0) + 1;
        count[link.target.index] = (count[link.target.index] || 0) + 1;
      }
      for ((i = 0, bias = new Array(m)); i < m; ++i) {
        (link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]));
      }
      (strengths = new Array(m), initializeStrength());
      (distances = new Array(m), initializeDistance());
    }
    function initializeStrength() {
      if (!nodes) return;
      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }
    function initializeDistance() {
      if (!nodes) return;
      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }
    force.initialize = function (_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.links = function (_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function (_) {
      return arguments.length ? (id = _, force) : id;
    };
    force.iterations = function (_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
    };
    force.distance = function (_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
    };
    return force;
  }
  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
  const a = 1664525;
  const c = 1013904223;
  const m = 4294967296;
  // 2^32
  function lcg() {
    let s = 1;
    return () => (s = (a * s + c) % m) / m;
  }
  function x$1(d) {
    return d.x;
  }
  function y$1(d) {
    return d.y;
  }
  var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
  function simulation(nodes) {
    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = d3Timer.timer(step), event = d3Dispatch.dispatch("tick", "end"), random = lcg();
    if (nodes == null) nodes = [];
    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }
    function tick(iterations) {
      var i, n = nodes.length, node;
      if (iterations === undefined) iterations = 1;
      for (var k = 0; k < iterations; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay;
        forces.forEach(function (force) {
          force(alpha);
        });
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (node.fx == null) node.x += node.vx *= velocityDecay; else (node.x = node.fx, node.vx = 0);
          if (node.fy == null) node.y += node.vy *= velocityDecay; else (node.y = node.fy, node.vy = 0);
        }
      }
      return simulation;
    }
    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        (node = nodes[i], node.index = i);
        if (node.fx != null) node.x = node.fx;
        if (node.fy != null) node.y = node.fy;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }
    function initializeForce(force) {
      if (force.initialize) force.initialize(nodes, random);
      return force;
    }
    initializeNodes();
    return simulation = {
      tick: tick,
      restart: function () {
        return (stepper.restart(step), simulation);
      },
      stop: function () {
        return (stepper.stop(), simulation);
      },
      nodes: function (_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
      },
      alpha: function (_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },
      alphaMin: function (_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },
      alphaDecay: function (_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },
      alphaTarget: function (_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },
      velocityDecay: function (_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },
      randomSource: function (_) {
        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
      },
      force: function (name, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
      },
      find: function (x, y, radius) {
        var i = 0, n = nodes.length, dx, dy, d2, node, closest;
        if (radius == null) radius = Infinity; else radius *= radius;
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x - node.x;
          dy = y - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius) (closest = node, radius = d2);
        }
        return closest;
      },
      on: function (name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }
  function manyBody() {
    var nodes, node, random, alpha, strength = constant(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
      var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
      for ((alpha = _, i = 0); i < n; ++i) (node = nodes[i], tree.visit(apply));
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length, node;
      strengths = new Array(n);
      for (i = 0; i < n; ++i) (node = nodes[i], strengths[node.index] = +strength(node, i, nodes));
    }
    function accumulate(quad) {
      var strength = 0, q, c, weight = 0, x, y, i;
      // For internal nodes, accumulate forces from child quadrants.
      if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c = Math.abs(q.value))) {
            (strength += q.value, weight += c, x += c * q.x, y += c * q.y);
          }
        }
        quad.x = x / weight;
        quad.y = y / weight;
              // For leaf nodes, accumulate forces from coincident quadrants.
} else // For leaf nodes, accumulate forces from coincident quadrants.
      {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do strength += strengths[q.data.index]; while (q = q.next);
      }
      quad.value = strength;
    }
    function apply(quad, x1, _, x2) {
      if (!quad.value) return true;
      var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
      // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x === 0) (x = jiggle(random), l += x * x);
          if (y === 0) (y = jiggle(random), l += y * y);
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x * quad.value * alpha / l;
          node.vy += y * quad.value * alpha / l;
        }
        return true;
              // Otherwise, process points directly.
} else // Otherwise, process points directly.
      if (quad.length || l >= distanceMax2) return;
      // Limit forces for very close nodes; randomize direction if coincident.
      if (quad.data !== node || quad.next) {
        if (x === 0) (x = jiggle(random), l += x * x);
        if (y === 0) (y = jiggle(random), l += y * y);
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }
      do if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x * w;
        node.vy += y * w;
      } while (quad = quad.next);
    }
    force.initialize = function (_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };
    force.distanceMin = function (_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function (_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function (_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
  }
  function radial(radius, x, y) {
    var nodes, strength = constant(0.1), strengths, radiuses;
    if (typeof radius !== "function") radius = constant(+radius);
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force(alpha) {
      for (var i = 0, n = nodes.length; i < n; ++i) {
        var node = nodes[i], dx = node.x - x || 1e-6, dy = node.y - y || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k = (radiuses[i] - r) * strengths[i] * alpha / r;
        node.vx += dx * k;
        node.vy += dy * k;
      }
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      radiuses = new Array(n);
      for (i = 0; i < n; ++i) {
        radiuses[i] = +radius(nodes[i], i, nodes);
        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force.initialize = function (_) {
      (nodes = _, initialize());
    };
    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };
    force.radius = function (_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
    };
    force.x = function (_) {
      return arguments.length ? (x = +_, force) : x;
    };
    force.y = function (_) {
      return arguments.length ? (y = +_, force) : y;
    };
    return force;
  }
  function x$2(x) {
    var strength = constant(0.1), nodes, strengths, xz;
    if (typeof x !== "function") x = constant(x == null ? 0 : +x);
    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        (node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha);
      }
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force.initialize = function (_) {
      nodes = _;
      initialize();
    };
    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };
    force.x = function (_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x;
    };
    return force;
  }
  function y$2(y) {
    var strength = constant(0.1), nodes, strengths, yz;
    if (typeof y !== "function") y = constant(y == null ? 0 : +y);
    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        (node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha);
      }
    }
    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force.initialize = function (_) {
      nodes = _;
      initialize();
    };
    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
    };
    force.y = function (_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y;
    };
    return force;
  }
  exports.forceCenter = center;
  exports.forceCollide = collide;
  exports.forceLink = link;
  exports.forceManyBody = manyBody;
  exports.forceRadial = radial;
  exports.forceSimulation = simulation;
  exports.forceX = x$2;
  exports.forceY = y$2;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-quadtree":"7scxm","d3-dispatch":"6ygE0","d3-timer":"6ZuUH"}],"7scxm":[function(require,module,exports) {
var define;
// https://d3js.org/d3-quadtree/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  function tree_add(d) {
    const x = +this._x.call(null, d), y = +this._y.call(null, d);
    return add(this.cover(x, y), x, y, d);
  }
  function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree;
    // ignore invalid points
    var parent, node = tree._root, leaf = {
      data: d
    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return (tree._root = leaf, tree);
    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if ((parent = node, !(node = node[i = bottom << 1 | right]))) return (parent[i] = leaf, tree);
    }
    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return (leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree);
    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return (parent[j] = node, parent[i] = leaf, tree);
  }
  function addAll(data) {
    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    // Compute the points and their extent.
    for (i = 0; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    }
    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;
    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);
    // Add the new points.
    for (i = 0; i < n; ++i) {
      add(this, xz[i], yz[i], data[i]);
    }
    return this;
  }
  function tree_cover(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this;
    // ignore invalid points
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
          // Otherwise, double repeatedly to cover.
} else // Otherwise, double repeatedly to cover.
    {
      var z = x1 - x0 || 1, node = this._root, parent, i;
      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        (parent = new Array(4), parent[i] = node, node = parent, z *= 2);
        switch (i) {
          case 0:
            (x1 = x0 + z, y1 = y0 + z);
            break;
          case 1:
            (x0 = x1 - z, y1 = y0 + z);
            break;
          case 2:
            (x1 = x0 + z, y0 = y1 - z);
            break;
          case 3:
            (x0 = x1 - z, y0 = y1 - z);
            break;
        }
      }
      if (this._root && this._root.length) this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }
  function tree_data() {
    var data = [];
    this.visit(function (node) {
      if (!node.length) do data.push(node.data); while (node = node.next);
    });
    return data;
  }
  function tree_extent(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
  }
  function Quad(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }
  function tree_find(x, y, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node) quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity; else {
      (x0 = x - radius, y0 = y - radius);
      (x3 = x + radius, y3 = y + radius);
      radius *= radius;
    }
    while (q = quads.pop()) {
      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;
      // Bisect the current quadrant.
      if (node.length) {
        var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
        quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
        // Visit the closest quadrant first.
        if (i = (y >= ym) << 1 | x >= xm) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
              // Visit this point. (Visiting coincident points isn’t necessary!)
} else // Visit this point. (Visiting coincident points isn’t necessary!)
      {
        var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          (x0 = x - d, y0 = y - d);
          (x3 = x + d, y3 = y + d);
          data = node.data;
        }
      }
    }
    return data;
  }
  function tree_remove(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this;
    // ignore invalid points
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;
    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) (retainer = parent, j = i);
    }
    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;
    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next, this);
    // If this is the root point, remove it.
    if (!parent) return (this._root = next, this);
    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];
    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
      if (retainer) retainer[j] = node; else this._root = node;
    }
    return this;
  }
  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }
  function tree_root() {
    return this._root;
  }
  function tree_size() {
    var size = 0;
    this.visit(function (node) {
      if (!node.length) do ++size; while (node = node.next);
    });
    return size;
  }
  function tree_visit(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      }
    }
    return this;
  }
  function tree_visitAfter(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }
  function defaultX(d) {
    return d[0];
  }
  function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }
  function defaultY(d) {
    return d[1];
  }
  function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }
  function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }
  function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
  }
  function leaf_copy(leaf) {
    var copy = {
      data: leaf.data
    }, next = copy;
    while (leaf = leaf.next) next = next.next = {
      data: leaf.data
    };
    return copy;
  }
  var treeProto = quadtree.prototype = Quadtree.prototype;
  treeProto.copy = function () {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node) return copy;
    if (!node.length) return (copy._root = leaf_copy(node), copy);
    nodes = [{
      source: node,
      target: copy._root = new Array(4)
    }];
    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({
            source: child,
            target: node.target[i] = new Array(4)
          }); else node.target[i] = leaf_copy(child);
        }
      }
    }
    return copy;
  };
  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;
  exports.quadtree = quadtree;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"6ygE0":[function(require,module,exports) {
var define;
// https://d3js.org/d3-dispatch/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  var noop = {
    value: () => {}
  };
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || (t in _) || (/[\s.]/).test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) (name = t.slice(i + 1), t = t.slice(0, i));
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {
        type: t,
        name: name
      };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function (typename, callback) {
      var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
      // If no callback was specified, return the callback of the given type and name.
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
        return;
      }
      // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.
      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback); else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
      }
      return this;
    },
    copy: function () {
      var copy = {}, _ = this._;
      for (var t in _) copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function (type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for ((t = this._[type], i = 0, n = t.length); i < n; ++i) t[i].value.apply(that, args);
    },
    apply: function (type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    }
  };
  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }
  function set(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        (type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1)));
        break;
      }
    }
    if (callback != null) type.push({
      name: name,
      value: callback
    });
    return type;
  }
  exports.dispatch = dispatch;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"6ZuUH":[function(require,module,exports) {
var define;
// https://d3js.org/d3-timer/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  var frame = 0, // is an animation frame pending?
  timeout = 0, // is a timeout pending?
  interval = 0, // are any timers active?
  pokeDelay = 1000, // how frequently we check for clock skew
  taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function (callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this; else taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function () {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now();
    // Get the current time, if not already set.
    ++frame;
    // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) (clockSkew -= delay, clockLast = now);
  }
  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        (t0 = t1, t1 = t1._next);
      } else {
        (t2 = t1._next, t1._next = null);
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame) return;
    // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval) interval = clearInterval(interval);
    } else {
      if (!interval) (clockLast = clock.now(), interval = setInterval(poke, pokeDelay));
      (frame = 1, setFrame(wake));
    }
  }
  function timeout$1(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart(elapsed => {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }
  function interval$1(callback, delay, time) {
    var t = new Timer(), total = delay;
    if (delay == null) return (t.restart(callback, delay, time), t);
    t._restart = t.restart;
    t.restart = function (callback, delay, time) {
      (delay = +delay, time = time == null ? now() : +time);
      t._restart(function tick(elapsed) {
        elapsed += total;
        t._restart(tick, total += delay, time);
        callback(elapsed);
      }, delay, time);
    };
    t.restart(callback, delay, time);
    return t;
  }
  exports.interval = interval$1;
  exports.now = now;
  exports.timeout = timeout$1;
  exports.timer = timer;
  exports.timerFlush = timerFlush;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"6vEON":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-hierarchy')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-hierarchy'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.d3));
})(this, function (exports, vegaDataflow, vegaUtil, d3Hierarchy) {
  "use strict";
  // Build lookup table mapping tuple keys to tree node instances
  function lookup(tree, key, filter) {
    const map = {};
    tree.each(node => {
      const t = node.data;
      if (filter(t)) map[key(t)] = node;
    });
    tree.lookup = map;
    return tree;
  }
  /**
  * Nest tuples into a tree structure, grouped by key values.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
  * @param {boolean} [params.generate=false] - A boolean flag indicating if
  *   non-leaf nodes generated by this transform should be included in the
  *   output. The default (false) includes only the input data (leaf nodes)
  *   in the data stream.
  */
  function Nest(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Nest.Definition = {
    'type': 'Nest',
    'metadata': {
      'treesource': true,
      'changes': true
    },
    'params': [{
      'name': 'keys',
      'type': 'field',
      'array': true
    }, {
      'name': 'generate',
      'type': 'boolean'
    }]
  };
  const children = n => n.values;
  vegaUtil.inherits(Nest, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (!pulse.source) {
        vegaUtil.error('Nest transform requires an upstream data source.');
      }
      var gen = _.generate, mod = _.modified(), out = pulse.clone(), tree = this.value;
      if (!tree || mod || pulse.changed()) {
        // collect nodes to remove
        if (tree) {
          tree.each(node => {
            if (node.children && vegaDataflow.isTuple(node.data)) {
              out.rem.push(node.data);
            }
          });
        }
        // generate new tree structure
        this.value = tree = d3Hierarchy.hierarchy({
          values: vegaUtil.array(_.keys).reduce((n, k) => {
            n.key(k);
            return n;
          }, nest()).entries(out.source)
        }, children);
        // collect nodes to add
        if (gen) {
          tree.each(node => {
            if (node.children) {
              node = vegaDataflow.ingest(node.data);
              out.add.push(node);
              out.source.push(node);
            }
          });
        }
        // build lookup table
        lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);
      }
      out.source.root = tree;
      return out;
    }
  });
  function nest() {
    const keys = [], nest = {
      entries: array => entries(apply(array, 0), 0),
      key: d => (keys.push(d), nest)
    };
    function apply(array, depth) {
      if (depth >= keys.length) {
        return array;
      }
      const n = array.length, key = keys[depth++], valuesByKey = {}, result = {};
      let i = -1, keyValue, value, values;
      while (++i < n) {
        keyValue = key(value = array[i]) + '';
        if (values = valuesByKey[keyValue]) {
          values.push(value);
        } else {
          valuesByKey[keyValue] = [value];
        }
      }
      for (keyValue in valuesByKey) {
        result[keyValue] = apply(valuesByKey[keyValue], depth);
      }
      return result;
    }
    function entries(map, depth) {
      if (++depth > keys.length) return map;
      const array = [];
      for (const key in map) {
        array.push({
          key,
          values: entries(map[key], depth)
        });
      }
      return array;
    }
    return nest;
  }
  /**
  * Abstract class for tree layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function HierarchyLayout(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;
  vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (!pulse.source || !pulse.source.root) {
        vegaUtil.error(this.constructor.name + ' transform requires a backing tree data source.');
      }
      const layout = this.layout(_.method), fields = this.fields, root = pulse.source.root, as = _.as || fields;
      if (_.field) root.sum(_.field); else root.count();
      if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));
      setParams(layout, this.params, _);
      if (layout.separation) {
        layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);
      }
      try {
        this.value = layout(root);
      } catch (err) {
        vegaUtil.error(err);
      }
      root.each(node => setFields(node, fields, as));
      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
    }
  });
  function setParams(layout, params, _) {
    for (let p, i = 0, n = params.length; i < n; ++i) {
      p = params[i];
      if ((p in _)) layout[p](_[p]);
    }
  }
  function setFields(node, fields, as) {
    const t = node.data, n = fields.length - 1;
    for (let i = 0; i < n; ++i) {
      t[as[i]] = node[fields[i]];
    }
    t[as[n]] = node.children ? node.children.length : 0;
  }
  const Output = ['x', 'y', 'r', 'depth', 'children'];
  /**
  * Packed circle tree layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to size nodes.
  */
  function Pack(params) {
    HierarchyLayout.call(this, params);
  }
  Pack.Definition = {
    'type': 'Pack',
    'metadata': {
      'tree': true,
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'padding',
      'type': 'number',
      'default': 0
    }, {
      'name': 'radius',
      'type': 'field',
      'default': null
    }, {
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': Output.length,
      'default': Output
    }]
  };
  vegaUtil.inherits(Pack, HierarchyLayout, {
    layout: d3Hierarchy.pack,
    params: ['radius', 'size', 'padding'],
    fields: Output
  });
  const Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
  /**
  * Partition tree layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to size nodes.
  */
  function Partition(params) {
    HierarchyLayout.call(this, params);
  }
  Partition.Definition = {
    'type': 'Partition',
    'metadata': {
      'tree': true,
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'padding',
      'type': 'number',
      'default': 0
    }, {
      'name': 'round',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': Output$1.length,
      'default': Output$1
    }]
  };
  vegaUtil.inherits(Partition, HierarchyLayout, {
    layout: d3Hierarchy.partition,
    params: ['size', 'round', 'padding'],
    fields: Output$1
  });
  /**
  * Stratify a collection of tuples into a tree structure based on
  * id and parent id fields.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.key - Unique key field for each tuple.
  * @param {function(object): *} params.parentKey - Field with key for parent tuple.
  */
  function Stratify(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Stratify.Definition = {
    'type': 'Stratify',
    'metadata': {
      'treesource': true
    },
    'params': [{
      'name': 'key',
      'type': 'field',
      'required': true
    }, {
      'name': 'parentKey',
      'type': 'field',
      'required': true
    }]
  };
  vegaUtil.inherits(Stratify, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (!pulse.source) {
        vegaUtil.error('Stratify transform requires an upstream data source.');
      }
      let tree = this.value;
      const mod = _.modified(), out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE), run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields);
      // prevent upstream source pollution
      out.source = out.source.slice();
      if (run) {
        tree = out.source.length ? lookup(d3Hierarchy.stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, vegaUtil.truthy) : lookup(d3Hierarchy.stratify()([{}]), _.key, _.key);
      }
      out.source.root = this.value = tree;
      return out;
    }
  });
  const Layouts = {
    tidy: d3Hierarchy.tree,
    cluster: d3Hierarchy.cluster
  };
  const Output$2 = ['x', 'y', 'depth', 'children'];
  /**
  * Tree layout. Depending on the method parameter, performs either
  * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function Tree(params) {
    HierarchyLayout.call(this, params);
  }
  Tree.Definition = {
    'type': 'Tree',
    'metadata': {
      'tree': true,
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'method',
      'type': 'enum',
      'default': 'tidy',
      'values': ['tidy', 'cluster']
    }, {
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'nodeSize',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'separation',
      'type': 'boolean',
      'default': true
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': Output$2.length,
      'default': Output$2
    }]
  };
  vegaUtil.inherits(Tree, HierarchyLayout, {
    /**
    * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
    */
    /**
    * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
    */
    layout(method) {
      const m = method || 'tidy';
      if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m](); else vegaUtil.error('Unrecognized Tree layout method: ' + m);
    },
    params: ['size', 'nodeSize'],
    fields: Output$2
  });
  /**
  * Generate tuples representing links between tree nodes.
  * The resulting tuples will contain 'source' and 'target' fields,
  * which point to parent and child node tuples, respectively.
  * @constructor
  * @param {object} params - The parameters for this operator.
  */
  function TreeLinks(params) {
    vegaDataflow.Transform.call(this, [], params);
  }
  TreeLinks.Definition = {
    'type': 'TreeLinks',
    'metadata': {
      'tree': true,
      'generates': true,
      'changes': true
    },
    'params': []
  };
  vegaUtil.inherits(TreeLinks, vegaDataflow.Transform, {
    transform(_, pulse) {
      const links = this.value, tree = pulse.source && pulse.source.root, out = pulse.fork(pulse.NO_SOURCE), lut = {};
      if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');
      if (pulse.changed(pulse.ADD_REM)) {
        // remove previous links
        out.rem = links;
        // build lookup table of valid tuples
        pulse.visit(pulse.SOURCE, t => lut[vegaDataflow.tupleid(t)] = 1);
        // generate links for all edges incident on valid tuples
        tree.each(node => {
          const t = node.data, p = node.parent && node.parent.data;
          if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {
            out.add.push(vegaDataflow.ingest({
              source: p,
              target: t
            }));
          }
        });
        this.value = out.add;
      } else if (pulse.changed(pulse.MOD)) {
        // build lookup table of modified tuples
        pulse.visit(pulse.MOD, t => lut[vegaDataflow.tupleid(t)] = 1);
        // gather links incident on modified tuples
        links.forEach(link => {
          if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {
            out.mod.push(link);
          }
        });
      }
      return out;
    }
  });
  const Tiles = {
    binary: d3Hierarchy.treemapBinary,
    dice: d3Hierarchy.treemapDice,
    slice: d3Hierarchy.treemapSlice,
    slicedice: d3Hierarchy.treemapSliceDice,
    squarify: d3Hierarchy.treemapSquarify,
    resquarify: d3Hierarchy.treemapResquarify
  };
  const Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
  /**
  * Treemap layout.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.field - The value field to size nodes.
  */
  function Treemap(params) {
    HierarchyLayout.call(this, params);
  }
  Treemap.Definition = {
    'type': 'Treemap',
    'metadata': {
      'tree': true,
      'modifies': true
    },
    'params': [{
      'name': 'field',
      'type': 'field'
    }, {
      'name': 'sort',
      'type': 'compare'
    }, {
      'name': 'method',
      'type': 'enum',
      'default': 'squarify',
      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']
    }, {
      'name': 'padding',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingInner',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingOuter',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingTop',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingRight',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingBottom',
      'type': 'number',
      'default': 0
    }, {
      'name': 'paddingLeft',
      'type': 'number',
      'default': 0
    }, {
      'name': 'ratio',
      'type': 'number',
      'default': 1.618033988749895
    }, {
      'name': 'round',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': Output$3.length,
      'default': Output$3
    }]
  };
  vegaUtil.inherits(Treemap, HierarchyLayout, {
    /**
    * Treemap layout generator. Adds 'method' and 'ratio' parameters
    * to configure the underlying tile method.
    */
    /**
    * Treemap layout generator. Adds 'method' and 'ratio' parameters
    * to configure the underlying tile method.
    */
    layout() {
      const x = d3Hierarchy.treemap();
      x.ratio = _ => {
        const t = x.tile();
        if (t.ratio) x.tile(t.ratio(_));
      };
      x.method = _ => {
        if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]); else vegaUtil.error('Unrecognized Treemap layout method: ' + _);
      };
      return x;
    },
    params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
    fields: Output$3
  });
  exports.nest = Nest;
  exports.pack = Pack;
  exports.partition = Partition;
  exports.stratify = Stratify;
  exports.tree = Tree;
  exports.treelinks = TreeLinks;
  exports.treemap = Treemap;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-util":"4BD5d","d3-hierarchy":"3iNG0"}],"3iNG0":[function(require,module,exports) {
var define;
// https://d3js.org/d3-hierarchy/ v2.0.0 Copyright 2020 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }
  function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
  }
  function meanXReduce(x, c) {
    return x + c.x;
  }
  function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
  }
  function maxYReduce(y, c) {
    return Math.max(y, c.y);
  }
  function leafLeft(node) {
    var children;
    while (children = node.children) node = children[0];
    return node;
  }
  function leafRight(node) {
    var children;
    while (children = node.children) node = children[children.length - 1];
    return node;
  }
  function cluster() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
      var previousNode, x = 0;
      // First walk, computing the initial x & y values.
      root.eachAfter(function (node) {
        var children = node.children;
        if (children) {
          node.x = meanX(children);
          node.y = maxY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      // Second walk, normalizing x & y to the desired size.
      return root.eachAfter(nodeSize ? function (node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
      } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
      });
    }
    cluster.separation = function (x) {
      return arguments.length ? (separation = x, cluster) : separation;
    };
    cluster.size = function (x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
    };
    cluster.nodeSize = function (x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
    };
    return cluster;
  }
  function count(node) {
    var sum = 0, children = node.children, i = children && children.length;
    if (!i) sum = 1; else while (--i >= 0) sum += children[i].value;
    node.value = sum;
  }
  function node_count() {
    return this.eachAfter(count);
  }
  function node_each(callback, that) {
    let index = -1;
    for (const node of this) {
      callback.call(that, node, ++index, this);
    }
    return this;
  }
  function node_eachBefore(callback, that) {
    var node = this, nodes = [node], children, i, index = -1;
    while (node = nodes.pop()) {
      callback.call(that, node, ++index, this);
      if (children = node.children) {
        for (i = children.length - 1; i >= 0; --i) {
          nodes.push(children[i]);
        }
      }
    }
    return this;
  }
  function node_eachAfter(callback, that) {
    var node = this, nodes = [node], next = [], children, i, n, index = -1;
    while (node = nodes.pop()) {
      next.push(node);
      if (children = node.children) {
        for ((i = 0, n = children.length); i < n; ++i) {
          nodes.push(children[i]);
        }
      }
    }
    while (node = next.pop()) {
      callback.call(that, node, ++index, this);
    }
    return this;
  }
  function node_find(callback, that) {
    let index = -1;
    for (const node of this) {
      if (callback.call(that, node, ++index, this)) {
        return node;
      }
    }
  }
  function node_sum(value) {
    return this.eachAfter(function (node) {
      var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
      while (--i >= 0) sum += children[i].value;
      node.value = sum;
    });
  }
  function node_sort(compare) {
    return this.eachBefore(function (node) {
      if (node.children) {
        node.children.sort(compare);
      }
    });
  }
  function node_path(end) {
    var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
    while (start !== ancestor) {
      start = start.parent;
      nodes.push(start);
    }
    var k = nodes.length;
    while (end !== ancestor) {
      nodes.splice(k, 0, end);
      end = end.parent;
    }
    return nodes;
  }
  function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while (a === b) {
      c = a;
      a = aNodes.pop();
      b = bNodes.pop();
    }
    return c;
  }
  function node_ancestors() {
    var node = this, nodes = [node];
    while (node = node.parent) {
      nodes.push(node);
    }
    return nodes;
  }
  function node_descendants() {
    return Array.from(this);
  }
  function node_leaves() {
    var leaves = [];
    this.eachBefore(function (node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  }
  function node_links() {
    var root = this, links = [];
    root.each(function (node) {
      if (node !== root) {
        // Don’t include the root’s parent, if any.
        links.push({
          source: node.parent,
          target: node
        });
      }
    });
    return links;
  }
  function* node_iterator() {
    var node = this, current, next = [node], children, i, n;
    do {
      (current = next.reverse(), next = []);
      while (node = current.pop()) {
        yield node;
        if (children = node.children) {
          for ((i = 0, n = children.length); i < n; ++i) {
            next.push(children[i]);
          }
        }
      }
    } while (next.length);
  }
  function hierarchy(data, children) {
    if (data instanceof Map) {
      data = [undefined, data];
      if (children === undefined) children = mapChildren;
    } else if (children === undefined) {
      children = objectChildren;
    }
    var root = new Node(data), node, nodes = [root], child, childs, i, n;
    while (node = nodes.pop()) {
      if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = childs[i] = new Node(childs[i]));
          child.parent = node;
          child.depth = node.depth + 1;
        }
      }
    }
    return root.eachBefore(computeHeight);
  }
  function node_copy() {
    return hierarchy(this).eachBefore(copyData);
  }
  function objectChildren(d) {
    return d.children;
  }
  function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
  }
  function copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value;
    node.data = node.data.data;
  }
  function computeHeight(node) {
    var height = 0;
    do node.height = height; while ((node = node.parent) && node.height < ++height);
  }
  function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
  }
  Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: node_count,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    find: node_find,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy,
    [Symbol.iterator]: node_iterator
  };
  function array(x) {
    return typeof x === "object" && ("length" in x) ? x : // Array, TypedArray, NodeList, array-like
    Array.from(x);
  }
  function shuffle(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }
    return array;
  }
  function enclose(circles) {
    var i = 0, n = (circles = shuffle(Array.from(circles))).length, B = [], p, e;
    while (i < n) {
      p = circles[i];
      if (e && enclosesWeak(e, p)) ++i; else (e = encloseBasis(B = extendBasis(B, p)), i = 0);
    }
    return e;
  }
  function extendBasis(B, p) {
    var i, j;
    if (enclosesWeakAll(p, B)) return [p];
    // If we get here then B must have at least one element.
    for (i = 0; i < B.length; ++i) {
      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
        return [B[i], p];
      }
    }
    // If we get here then B must have at least two elements.
    for (i = 0; i < B.length - 1; ++i) {
      for (j = i + 1; j < B.length; ++j) {
        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
          return [B[i], B[j], p];
        }
      }
    }
    // If we get here then something is very wrong.
    throw new Error();
  }
  function enclosesNot(a, b) {
    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
  }
  function enclosesWeak(a, b) {
    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }
  function enclosesWeakAll(a, B) {
    for (var i = 0; i < B.length; ++i) {
      if (!enclosesWeak(a, B[i])) {
        return false;
      }
    }
    return true;
  }
  function encloseBasis(B) {
    switch (B.length) {
      case 1:
        return encloseBasis1(B[0]);
      case 2:
        return encloseBasis2(B[0], B[1]);
      case 3:
        return encloseBasis3(B[0], B[1], B[2]);
    }
  }
  function encloseBasis1(a) {
    return {
      x: a.x,
      y: a.y,
      r: a.r
    };
  }
  function encloseBasis2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
      x: (x1 + x2 + x21 / l * r21) / 2,
      y: (y1 + y2 + y21 / l * r21) / 2,
      r: (l + r1 + r2) / 2
    };
  }
  function encloseBasis3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = x1 - x2, a3 = x1 - x3, b2 = y1 - y2, b3 = y1 - y3, c2 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
    return {
      x: x1 + xa + xb * r,
      y: y1 + ya + yb * r,
      r: r
    };
  }
  function place(b, a, c) {
    var dx = b.x - a.x, x, a2, dy = b.y - a.y, y, b2, d2 = dx * dx + dy * dy;
    if (d2) {
      (a2 = a.r + c.r, a2 *= a2);
      (b2 = b.r + c.r, b2 *= b2);
      if (a2 > b2) {
        x = (d2 + b2 - a2) / (2 * d2);
        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
        c.x = b.x - x * dx - y * dy;
        c.y = b.y - x * dy + y * dx;
      } else {
        x = (d2 + a2 - b2) / (2 * d2);
        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
        c.x = a.x + x * dx - y * dy;
        c.y = a.y + x * dy + y * dx;
      }
    } else {
      c.x = a.x + c.r;
      c.y = a.y;
    }
  }
  function intersects(a, b) {
    var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }
  function score(node) {
    var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab, dy = (a.y * b.r + b.y * a.r) / ab;
    return dx * dx + dy * dy;
  }
  function Node$1(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
  }
  function packEnclose(circles) {
    if (!(n = (circles = array(circles)).length)) return 0;
    var a, b, c, n, aa, ca, i, j, k, sj, sk;
    // Place the first circle.
    (a = circles[0], a.x = 0, a.y = 0);
    if (!(n > 1)) return a.r;
    // Place the second circle.
    (b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0);
    if (!(n > 2)) return a.r + b.r;
    // Place the third circle.
    place(b, a, c = circles[2]);
    // Initialize the front-chain using the first three circles a, b and c.
    (a = new Node$1(a), b = new Node$1(b), c = new Node$1(c));
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;
    // Attempt to place each remaining circle…
    pack: for (i = 3; i < n; ++i) {
      (place(a._, b._, c = circles[i]), c = new Node$1(c));
      // Find the closest intersecting circle on the front-chain, if any.
      // “Closeness” is determined by linear distance along the front-chain.
      // “Ahead” or “behind” is likewise determined by linear distance.
      (j = b.next, k = a.previous, sj = b._.r, sk = a._.r);
      do {
        if (sj <= sk) {
          if (intersects(j._, c._)) {
            (b = j, a.next = b, b.previous = a, --i);
            continue pack;
          }
          (sj += j._.r, j = j.next);
        } else {
          if (intersects(k._, c._)) {
            (a = k, a.next = b, b.previous = a, --i);
            continue pack;
          }
          (sk += k._.r, k = k.previous);
        }
      } while (j !== k.next);
      // Success! Insert the new circle c between a and b.
      (c.previous = a, c.next = b, a.next = b.previous = b = c);
      // Compute the new closest circle pair to the centroid.
      aa = score(a);
      while ((c = c.next) !== b) {
        if ((ca = score(c)) < aa) {
          (a = c, aa = ca);
        }
      }
      b = a.next;
    }
    // Compute the enclosing circle of the front chain.
    (a = [b._], c = b);
    while ((c = c.next) !== b) a.push(c._);
    c = enclose(a);
    // Translate the circles to put the enclosing circle around the origin.
    for (i = 0; i < n; ++i) (a = circles[i], a.x -= c.x, a.y -= c.y);
    return c.r;
  }
  function siblings(circles) {
    packEnclose(circles);
    return circles;
  }
  function optional(f) {
    return f == null ? null : required(f);
  }
  function required(f) {
    if (typeof f !== "function") throw new Error();
    return f;
  }
  function constantZero() {
    return 0;
  }
  function constant(x) {
    return function () {
      return x;
    };
  }
  function defaultRadius(d) {
    return Math.sqrt(d.value);
  }
  function index() {
    var radius = null, dx = 1, dy = 1, padding = constantZero;
    function pack(root) {
      (root.x = dx / 2, root.y = dy / 2);
      if (radius) {
        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
      } else {
        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
      }
      return root;
    }
    pack.radius = function (x) {
      return arguments.length ? (radius = optional(x), pack) : radius;
    };
    pack.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
    };
    pack.padding = function (x) {
      return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
    };
    return pack;
  }
  function radiusLeaf(radius) {
    return function (node) {
      if (!node.children) {
        node.r = Math.max(0, +radius(node) || 0);
      }
    };
  }
  function packChildren(padding, k) {
    return function (node) {
      if (children = node.children) {
        var children, i, n = children.length, r = padding(node) * k || 0, e;
        if (r) for (i = 0; i < n; ++i) children[i].r += r;
        e = packEnclose(children);
        if (r) for (i = 0; i < n; ++i) children[i].r -= r;
        node.r = e + r;
      }
    };
  }
  function translateChild(k) {
    return function (node) {
      var parent = node.parent;
      node.r *= k;
      if (parent) {
        node.x = parent.x + k * node.x;
        node.y = parent.y + k * node.y;
      }
    };
  }
  function roundNode(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
  }
  function treemapDice(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
    while (++i < n) {
      (node = nodes[i], node.y0 = y0, node.y1 = y1);
      (node.x0 = x0, node.x1 = x0 += node.value * k);
    }
  }
  function partition() {
    var dx = 1, dy = 1, padding = 0, round = false;
    function partition(root) {
      var n = root.height + 1;
      root.x0 = root.y0 = padding;
      root.x1 = dx;
      root.y1 = dy / n;
      root.eachBefore(positionNode(dy, n));
      if (round) root.eachBefore(roundNode);
      return root;
    }
    function positionNode(dy, n) {
      return function (node) {
        if (node.children) {
          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
        }
        var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
      };
    }
    partition.round = function (x) {
      return arguments.length ? (round = !!x, partition) : round;
    };
    partition.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
    };
    partition.padding = function (x) {
      return arguments.length ? (padding = +x, partition) : padding;
    };
    return partition;
  }
  var preroot = {
    depth: -1
  }, ambiguous = {};
  function defaultId(d) {
    return d.id;
  }
  function defaultParentId(d) {
    return d.parentId;
  }
  function stratify() {
    var id = defaultId, parentId = defaultParentId;
    function stratify(data) {
      var nodes = Array.from(data), n = nodes.length, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = new Map();
      for (i = 0; i < n; ++i) {
        (d = nodes[i], node = nodes[i] = new Node(d));
        if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
          nodeKey = node.id = nodeId;
          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
        }
        if ((nodeId = parentId(d, i, data)) != null && (nodeId += "")) {
          node.parent = nodeId;
        }
      }
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (nodeId = node.parent) {
          parent = nodeByKey.get(nodeId);
          if (!parent) throw new Error("missing: " + nodeId);
          if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
          if (parent.children) parent.children.push(node); else parent.children = [node];
          node.parent = parent;
        } else {
          if (root) throw new Error("multiple roots");
          root = node;
        }
      }
      if (!root) throw new Error("no root");
      root.parent = preroot;
      root.eachBefore(function (node) {
        node.depth = node.parent.depth + 1;
        --n;
      }).eachBefore(computeHeight);
      root.parent = null;
      if (n > 0) throw new Error("cycle");
      return root;
    }
    stratify.id = function (x) {
      return arguments.length ? (id = required(x), stratify) : id;
    };
    stratify.parentId = function (x) {
      return arguments.length ? (parentId = required(x), stratify) : parentId;
    };
    return stratify;
  }
  function defaultSeparation$1(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }
  // function radialSeparation(a, b) {
  // return (a.parent === b.parent ? 1 : 2) / a.depth;
  // }
  // This function is used to traverse the left contour of a subtree (or
  // subforest). It returns the successor of v on this contour. This successor is
  // either given by the leftmost child of v or by the thread of v. The function
  // returns null if and only if v is on the highest level of its subtree.
  function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
  }
  // This function works analogously to nextLeft.
  function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
  }
  // Shifts the current subtree rooted at w+. This is done by increasing
  // prelim(w+) and mod(w+) by shift.
  function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  // All other shifts, applied to the smaller subtrees between w- and w+, are
  // performed by this function. To prepare the shifts, we have to adjust
  // change(w+), shift(w+), and change(w-).
  function executeShifts(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
  // returns the specified (default) ancestor.
  function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null;
    // default ancestor
    this.a = this;
    // ancestor
    this.z = 0;
    // prelim
    this.m = 0;
    // mod
    this.c = 0;
    // change
    this.s = 0;
    // shift
    this.t = null;
    // thread
    this.i = i;
  }
  TreeNode.prototype = Object.create(Node.prototype);
  function treeRoot(root) {
    var tree = new TreeNode(root, 0), node, nodes = [tree], child, children, i, n;
    while (node = nodes.pop()) {
      if (children = node._.children) {
        node.children = new Array(n = children.length);
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new TreeNode(children[i], i));
          child.parent = node;
        }
      }
    }
    (tree.parent = new TreeNode(null, 0)).children = [tree];
    return tree;
  }
  // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
  function tree() {
    var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
      var t = treeRoot(root);
      // Compute the layout using Buchheim et al.’s algorithm.
      (t.eachAfter(firstWalk), t.parent.m = -t.z);
      t.eachBefore(secondWalk);
      // If a fixed node size is specified, scale x and y.
      if (nodeSize) root.eachBefore(sizeNode); else // If a fixed tree size is specified, scale x and y based on the extent.
      // Compute the left-most, right-most, and depth-most nodes for extents.
      {
        var left = root, right = root, bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return root;
    }
    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children) {
        executeShifts(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    // Computes all real x-coordinates by summing up the modifiers recursively.
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while ((vim = nextRight(vim), vip = nextLeft(vip), vim && vip)) {
          vom = nextLeft(vom);
          vop = nextRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !nextRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !nextLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= dx;
      node.y = node.depth * dy;
    }
    tree.separation = function (x) {
      return arguments.length ? (separation = x, tree) : separation;
    };
    tree.size = function (x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
    };
    tree.nodeSize = function (x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
    };
    return tree;
  }
  function treemapSlice(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
    while (++i < n) {
      (node = nodes[i], node.x0 = x0, node.x1 = x1);
      (node.y0 = y0, node.y1 = y0 += node.value * k);
    }
  }
  var phi = (1 + Math.sqrt(5)) / 2;
  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while (i0 < n) {
      (dx = x1 - x0, dy = y1 - y0);
      // Find the next non-empty node.
      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
      minValue = maxValue = sumValue;
      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
      beta = sumValue * sumValue * alpha;
      minRatio = Math.max(maxValue / beta, beta / minValue);
      // Keep adding nodes while the aspect ratio maintains or improves.
      for (; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value;
        if (nodeValue < minValue) minValue = nodeValue;
        if (nodeValue > maxValue) maxValue = nodeValue;
        beta = sumValue * sumValue * alpha;
        newRatio = Math.max(maxValue / beta, beta / minValue);
        if (newRatio > minRatio) {
          sumValue -= nodeValue;
          break;
        }
        minRatio = newRatio;
      }
      // Position and record the row orientation.
      rows.push(row = {
        value: sumValue,
        dice: dx < dy,
        children: nodes.slice(i0, i1)
      });
      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1); else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
      (value -= sumValue, i0 = i1);
    }
    return rows;
  }
  var squarify = (function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
      squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }
    squarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1);
    };
    return squarify;
  })(phi);
  function index$1() {
    var tile = squarify, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
    function treemap(root) {
      root.x0 = root.y0 = 0;
      root.x1 = dx;
      root.y1 = dy;
      root.eachBefore(positionNode);
      paddingStack = [0];
      if (round) root.eachBefore(roundNode);
      return root;
    }
    function positionNode(node) {
      var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
      if (node.children) {
        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
        x0 += paddingLeft(node) - p;
        y0 += paddingTop(node) - p;
        x1 -= paddingRight(node) - p;
        y1 -= paddingBottom(node) - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        tile(node, x0, y0, x1, y1);
      }
    }
    treemap.round = function (x) {
      return arguments.length ? (round = !!x, treemap) : round;
    };
    treemap.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
    };
    treemap.tile = function (x) {
      return arguments.length ? (tile = required(x), treemap) : tile;
    };
    treemap.padding = function (x) {
      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };
    treemap.paddingInner = function (x) {
      return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
    };
    treemap.paddingOuter = function (x) {
      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };
    treemap.paddingTop = function (x) {
      return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
    };
    treemap.paddingRight = function (x) {
      return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
    };
    treemap.paddingBottom = function (x) {
      return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
    };
    treemap.paddingLeft = function (x) {
      return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
    };
    return treemap;
  }
  function binary(parent, x0, y0, x1, y1) {
    var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
    for (sums[0] = sum = i = 0; i < n; ++i) {
      sums[i + 1] = sum += nodes[i].value;
    }
    partition(0, n, parent.value, x0, y0, x1, y1);
    function partition(i, j, value, x0, y0, x1, y1) {
      if (i >= j - 1) {
        var node = nodes[i];
        (node.x0 = x0, node.y0 = y0);
        (node.x1 = x1, node.y1 = y1);
        return;
      }
      var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
      while (k < hi) {
        var mid = k + hi >>> 1;
        if (sums[mid] < valueTarget) k = mid + 1; else hi = mid;
      }
      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
      var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
      if (x1 - x0 > y1 - y0) {
        var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
        partition(i, k, valueLeft, x0, y0, xk, y1);
        partition(k, j, valueRight, xk, y0, x1, y1);
      } else {
        var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
        partition(i, k, valueLeft, x0, y0, x1, yk);
        partition(k, j, valueRight, x0, yk, x1, y1);
      }
    }
  }
  function sliceDice(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
  }
  var resquarify = (function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
      if ((rows = parent._squarify) && rows.ratio === ratio) {
        var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
        while (++j < m) {
          (row = rows[j], nodes = row.children);
          for ((i = row.value = 0, n = nodes.length); i < n; ++i) row.value += nodes[i].value;
          if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1); else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
          value -= row.value;
        }
      } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
        rows.ratio = ratio;
      }
    }
    resquarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1);
    };
    return resquarify;
  })(phi);
  exports.cluster = cluster;
  exports.hierarchy = hierarchy;
  exports.pack = index;
  exports.packEnclose = enclose;
  exports.packSiblings = siblings;
  exports.partition = partition;
  exports.stratify = stratify;
  exports.tree = tree;
  exports.treemap = index$1;
  exports.treemapBinary = binary;
  exports.treemapDice = treemapDice;
  exports.treemapResquarify = resquarify;
  exports.treemapSlice = treemapSlice;
  exports.treemapSliceDice = sliceDice;
  exports.treemapSquarify = squarify;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"7itaU":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-canvas'), require('vega-dataflow'), require('vega-scenegraph'), require('vega-util')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-canvas', 'vega-dataflow', 'vega-scenegraph', 'vega-util'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.vega, global.vega));
})(this, function (exports, vegaCanvas, vegaDataflow, vegaScenegraph, vegaUtil) {
  "use strict";
  const ALPHA_MASK = 0xff000000;
  // alpha value equivalent to opacity 0.0625
  const INSIDE_OPACITY_IN_ALPHA = 0x10000000;
  const INSIDE_OPACITY = 0.0625;
  function baseBitmaps($, data) {
    const bitmap = $.bitmap();
    // when there is no base mark but data points are to be avoided
    (data || []).forEach(d => bitmap.set($(d.boundary[0]), $(d.boundary[3])));
    return [bitmap, undefined];
  }
  function markBitmaps($, avoidMarks, labelInside, isGroupArea) {
    // create canvas
    const width = $.width, height = $.height, border = labelInside || isGroupArea, context = vegaCanvas.canvas(width, height).getContext('2d');
    // render all marks to be avoided into canvas
    avoidMarks.forEach(items => draw(context, items, border));
    // get canvas buffer, create bitmaps
    const buffer = new Uint32Array(context.getImageData(0, 0, width, height).data.buffer), layer1 = $.bitmap(), layer2 = border && $.bitmap();
    // populate bitmap layers
    let x, y, u, v, alpha;
    for (y = 0; y < height; ++y) {
      for (x = 0; x < width; ++x) {
        alpha = buffer[y * width + x] & ALPHA_MASK;
        if (alpha) {
          u = $(x);
          v = $(y);
          if (!isGroupArea) layer1.set(u, v);
          // update interior bitmap
          if (border && alpha ^ INSIDE_OPACITY_IN_ALPHA) layer2.set(u, v);
        }
      }
    }
    return [layer1, layer2];
  }
  function draw(context, items, interior) {
    if (!items.length) return;
    const type = items[0].mark.marktype;
    if (type === 'group') {
      items.forEach(group => {
        group.items.forEach(mark => draw(context, mark.items, interior));
      });
    } else {
      vegaScenegraph.Marks[type].draw(context, {
        items: interior ? items.map(prepare) : items
      });
    }
  }
  /**
  * Prepare item before drawing into canvas (setting stroke and opacity)
  * @param {object} source item to be prepared
  * @returns prepared item
  */
  function prepare(source) {
    const item = vegaDataflow.rederive(source, {});
    if (item.stroke) {
      item.strokeOpacity = 1;
    }
    if (item.fill) {
      item.fillOpacity = INSIDE_OPACITY;
      item.stroke = '#000';
      item.strokeOpacity = 1;
      item.strokeWidth = 2;
    }
    return item;
  }
  const DIV = 5, // bit shift from x, y index to bit vector array index
  MOD = 31, // bit mask for index lookup within a bit vector
  SIZE = 32, // individual bit vector size
  RIGHT0 = new Uint32Array(SIZE + 1), // left-anchored bit vectors, full -> 0
  RIGHT1 = new Uint32Array(SIZE + 1);
  // right-anchored bit vectors, 0 -> full
  RIGHT1[0] = 0;
  RIGHT0[0] = ~RIGHT1[0];
  for (let i = 1; i <= SIZE; ++i) {
    RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;
    RIGHT0[i] = ~RIGHT1[i];
  }
  function Bitmap(w, h) {
    const array = new Uint32Array(~~((w * h + SIZE) / SIZE));
    function _set(index, mask) {
      array[index] |= mask;
    }
    function _clear(index, mask) {
      array[index] &= mask;
    }
    return {
      array: array,
      get: (x, y) => {
        const index = y * w + x;
        return array[index >>> DIV] & 1 << (index & MOD);
      },
      set: (x, y) => {
        const index = y * w + x;
        _set(index >>> DIV, 1 << (index & MOD));
      },
      clear: (x, y) => {
        const index = y * w + x;
        _clear(index >>> DIV, ~(1 << (index & MOD)));
      },
      getRange: (x, y, x2, y2) => {
        let r = y2, start, end, indexStart, indexEnd;
        for (; r >= y; --r) {
          start = r * w + x;
          end = r * w + x2;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            if (array[indexStart] & RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]) {
              return true;
            }
          } else {
            if (array[indexStart] & RIGHT0[start & MOD]) return true;
            if (array[indexEnd] & RIGHT1[(end & MOD) + 1]) return true;
            for (let i = indexStart + 1; i < indexEnd; ++i) {
              if (array[i]) return true;
            }
          }
        }
        return false;
      },
      setRange: (x, y, x2, y2) => {
        let start, end, indexStart, indexEnd, i;
        for (; y <= y2; ++y) {
          start = y * w + x;
          end = y * w + x2;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            _set(indexStart, RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]);
          } else {
            _set(indexStart, RIGHT0[start & MOD]);
            _set(indexEnd, RIGHT1[(end & MOD) + 1]);
            for (i = indexStart + 1; i < indexEnd; ++i) _set(i, 0xffffffff);
          }
        }
      },
      clearRange: (x, y, x2, y2) => {
        let start, end, indexStart, indexEnd, i;
        for (; y <= y2; ++y) {
          start = y * w + x;
          end = y * w + x2;
          indexStart = start >>> DIV;
          indexEnd = end >>> DIV;
          if (indexStart === indexEnd) {
            _clear(indexStart, RIGHT1[start & MOD] | RIGHT0[(end & MOD) + 1]);
          } else {
            _clear(indexStart, RIGHT1[start & MOD]);
            _clear(indexEnd, RIGHT0[(end & MOD) + 1]);
            for (i = indexStart + 1; i < indexEnd; ++i) _clear(i, 0);
          }
        }
      },
      outOfBounds: (x, y, x2, y2) => x < 0 || y < 0 || y2 >= h || x2 >= w
    };
  }
  function scaler(width, height, padding) {
    const ratio = Math.max(1, Math.sqrt(width * height / 1e6)), w = ~~((width + 2 * padding + ratio) / ratio), h = ~~((height + 2 * padding + ratio) / ratio), scale = _ => ~~((_ + padding) / ratio);
    scale.invert = _ => _ * ratio - padding;
    scale.bitmap = () => Bitmap(w, h);
    scale.ratio = ratio;
    scale.padding = padding;
    scale.width = width;
    scale.height = height;
    return scale;
  }
  function placeAreaLabelNaive($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height;
    // try to place a label within an input area mark
    return function (d) {
      const items = d.datum.datum.items[markIndex].items, // area points
      n = items.length, // number of points
      textHeight = d.datum.fontSize, // label width
      textWidth = vegaScenegraph.textMetrics.width(d.datum, d.datum.text);
      // label height
      let maxAreaWidth = 0, x1, x2, y1, y2, x, y, areaWidth;
      // for each area sample point
      for (let i = 0; i < n; ++i) {
        x1 = items[i].x;
        y1 = items[i].y;
        x2 = items[i].x2 === undefined ? x1 : items[i].x2;
        y2 = items[i].y2 === undefined ? y1 : items[i].y2;
        x = (x1 + x2) / 2;
        y = (y1 + y2) / 2;
        areaWidth = Math.abs(x2 - x1 + y2 - y1);
        if (areaWidth >= maxAreaWidth) {
          maxAreaWidth = areaWidth;
          d.x = x;
          d.y = y;
        }
      }
      x = textWidth / 2;
      y = textHeight / 2;
      x1 = d.x - x;
      x2 = d.x + x;
      y1 = d.y - y;
      y2 = d.y + y;
      d.align = 'center';
      if (x1 < 0 && x2 <= width) {
        d.align = 'left';
      } else if (0 <= x1 && width < x2) {
        d.align = 'right';
      }
      d.baseline = 'middle';
      if (y1 < 0 && y2 <= height) {
        d.baseline = 'top';
      } else if (0 <= y1 && height < y2) {
        d.baseline = 'bottom';
      }
      return true;
    };
  }
  function outOfBounds(x, y, textWidth, textHeight, width, height) {
    let r = textWidth / 2;
    return x - r < 0 || x + r > width || y - (r = textHeight / 2) < 0 || y + r > height;
  }
  function collision($, x, y, textHeight, textWidth, h, bm0, bm1) {
    const w = textWidth * h / (textHeight * 2), x1 = $(x - w), x2 = $(x + w), y1 = $(y - (h = h / 2)), y2 = $(y + h);
    return bm0.outOfBounds(x1, y1, x2, y2) || bm0.getRange(x1, y1, x2, y2) || bm1 && bm1.getRange(x1, y1, x2, y2);
  }
  function placeAreaLabelReducedSearch($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1];
    // area outlines
    function tryLabel(_x, _y, maxSize, textWidth, textHeight) {
      const x = $.invert(_x), y = $.invert(_y);
      let lo = maxSize, hi = height, mid;
      if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
        // if the label fits at the current sample point,
        // perform binary search to find the largest font size that fits
        while (hi - lo >= 1) {
          mid = (lo + hi) / 2;
          if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {
            hi = mid;
          } else {
            lo = mid;
          }
        }
        // place label if current lower bound exceeds prior max font size
        if (lo > maxSize) {
          return [x, y, lo, true];
        }
      }
    }
    // try to place a label within an input area mark
    return function (d) {
      const items = d.datum.datum.items[markIndex].items, // area points
      n = items.length, // number of points
      textHeight = d.datum.fontSize, // label width
      textWidth = vegaScenegraph.textMetrics.width(d.datum, d.datum.text);
      // label height
      let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, _x1, _xMid, _x2, _y1, _yMid, _y2, areaWidth, result, swapTmp;
      // for each area sample point
      for (let i = 0; i < n; ++i) {
        x1 = items[i].x;
        y1 = items[i].y;
        x2 = items[i].x2 === undefined ? x1 : items[i].x2;
        y2 = items[i].y2 === undefined ? y1 : items[i].y2;
        if (x1 > x2) {
          swapTmp = x1;
          x1 = x2;
          x2 = swapTmp;
        }
        if (y1 > y2) {
          swapTmp = y1;
          y1 = y2;
          y2 = swapTmp;
        }
        _x1 = $(x1);
        _x2 = $(x2);
        _xMid = ~~((_x1 + _x2) / 2);
        _y1 = $(y1);
        _y2 = $(y2);
        _yMid = ~~((_y1 + _y2) / 2);
        // search along the line from mid point between the 2 border to lower border
        for (_x = _xMid; _x >= _x1; --_x) {
          for (_y = _yMid; _y >= _y1; --_y) {
            result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
            if (result) {
              [d.x, d.y, maxSize, labelPlaced] = result;
            }
          }
        }
        // search along the line from mid point between the 2 border to upper border
        for (_x = _xMid; _x <= _x2; ++_x) {
          for (_y = _yMid; _y <= _y2; ++_y) {
            result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
            if (result) {
              [d.x, d.y, maxSize, labelPlaced] = result;
            }
          }
        }
        // place label at slice center if not placed through other means
        // and if we're not avoiding overlap with other areas
        if (!labelPlaced && !avoidBaseMark) {
          // one span is zero, hence we can add
          areaWidth = Math.abs(x2 - x1 + y2 - y1);
          x = (x1 + x2) / 2;
          y = (y1 + y2) / 2;
          // place label if it fits and improves the max area width
          if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
            maxAreaWidth = areaWidth;
            d.x = x;
            d.y = y;
            labelPlaced2 = true;
          }
        }
      }
      // record current label placement information, update label bitmap
      if (labelPlaced || labelPlaced2) {
        x = textWidth / 2;
        y = textHeight / 2;
        bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
        d.align = 'center';
        d.baseline = 'middle';
        return true;
      } else {
        return false;
      }
    };
  }
  const X_DIR = [-1, -1, 1, 1];
  const Y_DIR = [-1, 1, -1, 1];
  function placeAreaLabelFloodFill($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1], // area outlines
    bm2 = $.bitmap();
    // flood-fill visitations
    // try to place a label within an input area mark
    return function (d) {
      const items = d.datum.datum.items[markIndex].items, // area points
      n = items.length, // number of points
      textHeight = d.datum.fontSize, // label width
      textWidth = vegaScenegraph.textMetrics.width(d.datum, d.datum.text), // label height
      stack = [];
      // flood fill stack
      let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, lo, hi, mid, areaWidth;
      // for each area sample point
      for (let i = 0; i < n; ++i) {
        x1 = items[i].x;
        y1 = items[i].y;
        x2 = items[i].x2 === undefined ? x1 : items[i].x2;
        y2 = items[i].y2 === undefined ? y1 : items[i].y2;
        // add scaled center point to stack
        stack.push([$((x1 + x2) / 2), $((y1 + y2) / 2)]);
        // perform flood fill, visit points
        while (stack.length) {
          [_x, _y] = stack.pop();
          // exit if point already marked
          if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue;
          // mark point in flood fill bitmap
          // add search points for all (in bound) directions
          bm2.set(_x, _y);
          for (let j = 0; j < 4; ++j) {
            x = _x + X_DIR[j];
            y = _y + Y_DIR[j];
            if (!bm2.outOfBounds(x, y, x, y)) stack.push([x, y]);
          }
          // unscale point back to x, y space
          x = $.invert(_x);
          y = $.invert(_y);
          lo = maxSize;
          hi = height;
          // TODO: make this bound smaller
          if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
            // if the label fits at the current sample point,
            // perform binary search to find the largest font size that fits
            while (hi - lo >= 1) {
              mid = (lo + hi) / 2;
              if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {
                hi = mid;
              } else {
                lo = mid;
              }
            }
            // place label if current lower bound exceeds prior max font size
            if (lo > maxSize) {
              d.x = x;
              d.y = y;
              maxSize = lo;
              labelPlaced = true;
            }
          }
        }
        // place label at slice center if not placed through other means
        // and if we're not avoiding overlap with other areas
        if (!labelPlaced && !avoidBaseMark) {
          // one span is zero, hence we can add
          areaWidth = Math.abs(x2 - x1 + y2 - y1);
          x = (x1 + x2) / 2;
          y = (y1 + y2) / 2;
          // place label if it fits and improves the max area width
          if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
            maxAreaWidth = areaWidth;
            d.x = x;
            d.y = y;
            labelPlaced2 = true;
          }
        }
      }
      // record current label placement information, update label bitmap
      if (labelPlaced || labelPlaced2) {
        x = textWidth / 2;
        y = textHeight / 2;
        bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
        d.align = 'center';
        d.baseline = 'middle';
        return true;
      } else {
        return false;
      }
    };
  }
  const Aligns = ['right', 'center', 'left'], Baselines = ['bottom', 'middle', 'top'];
  function placeMarkLabel($, bitmaps, anchors, offsets) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], bm1 = bitmaps[1], n = offsets.length;
    return function (d) {
      const boundary = d.boundary, textHeight = d.datum.fontSize;
      // can not be placed if the mark is not visible in the graph bound
      if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) {
        return false;
      }
      let textWidth = 0, dx, dy, isInside, sizeFactor, insideFactor, x1, x2, y1, y2, xc, yc, _x1, _x2, _y1, _y2;
      // for each anchor and offset
      for (let i = 0; i < n; ++i) {
        dx = (anchors[i] & 0x3) - 1;
        dy = (anchors[i] >>> 0x2 & 0x3) - 1;
        isInside = dx === 0 && dy === 0 || offsets[i] < 0;
        sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
        insideFactor = offsets[i] < 0 ? -1 : 1;
        x1 = boundary[1 + dx] + offsets[i] * dx * sizeFactor;
        yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets[i] * dy * sizeFactor;
        y1 = yc - textHeight / 2;
        y2 = yc + textHeight / 2;
        _x1 = $(x1);
        _y1 = $(y1);
        _y2 = $(y2);
        if (!textWidth) {
          // to avoid finding width of text label,
          if (!test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) {
            // skip this anchor/offset option if we fail to place a label with 1px width
            continue;
          } else {
            // Otherwise, find the label width
            textWidth = vegaScenegraph.textMetrics.width(d.datum, d.datum.text);
          }
        }
        xc = x1 + insideFactor * textWidth * dx / 2;
        x1 = xc - textWidth / 2;
        x2 = xc + textWidth / 2;
        _x1 = $(x1);
        _x2 = $(x2);
        if (test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {
          // place label if the position is placeable
          d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;
          d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;
          d.align = Aligns[dx * insideFactor + 1];
          d.baseline = Baselines[dy * insideFactor + 1];
          bm0.setRange(_x1, _y1, _x2, _y2);
          return true;
        }
      }
      return false;
    };
  }
  // Test if a label with the given dimensions can be added without overlap
  function test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {
    return !(bm0.outOfBounds(_x1, _y1, _x2, _y2) || (isInside && bm1 ? bm1.getRange(_x1, _y1, _x2, _y2) || !isInMarkBound(x1, y1, x2, y2, boundary) : bm0.getRange(_x1, _y1, _x2, _y2)));
  }
  function isInMarkBound(x1, y1, x2, y2, boundary) {
    return boundary[0] <= x1 && x2 <= boundary[2] && boundary[3] <= y1 && y2 <= boundary[5];
  }
  const TOP = 0x0, MIDDLE = 0x4, BOTTOM = 0x8, LEFT = 0x0, CENTER = 0x1, RIGHT = 0x2;
  // Mapping from text anchor to number representation
  const anchorCode = {
    'top-left': TOP + LEFT,
    'top': TOP + CENTER,
    'top-right': TOP + RIGHT,
    'left': MIDDLE + LEFT,
    'middle': MIDDLE + CENTER,
    'right': MIDDLE + RIGHT,
    'bottom-left': BOTTOM + LEFT,
    'bottom': BOTTOM + CENTER,
    'bottom-right': BOTTOM + RIGHT
  };
  const placeAreaLabel = {
    'naive': placeAreaLabelNaive,
    'reduced-search': placeAreaLabelReducedSearch,
    'floodfill': placeAreaLabelFloodFill
  };
  function labelLayout(texts, size, compare, offset, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method) {
    // early exit for empty data
    if (!texts.length) return texts;
    const positions = Math.max(offset.length, anchor.length), offsets = getOffsets(offset, positions), anchors = getAnchors(anchor, positions), marktype = markType(texts[0].datum), grouptype = marktype === 'group' && texts[0].datum.items[markIndex].marktype, isGroupArea = grouptype === 'area', boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex), $ = scaler(size[0], size[1], padding), isNaiveGroupArea = isGroupArea && method === 'naive';
    // prepare text mark data for placing
    const data = texts.map(d => ({
      datum: d,
      opacity: 0,
      x: undefined,
      y: undefined,
      align: undefined,
      baseline: undefined,
      boundary: boundary(d)
    }));
    let bitmaps;
    if (!isNaiveGroupArea) {
      // sort labels in priority order, if comparator is provided
      if (compare) {
        data.sort((a, b) => compare(a.datum, b.datum));
      }
      // flag indicating if label can be placed inside its base mark
      let labelInside = false;
      for (let i = 0; i < anchors.length && !labelInside; ++i) {
        // label inside if anchor is at center
        // label inside if offset to be inside the mark bound
        labelInside = anchors[i] === 0x5 || offsets[i] < 0;
      }
      // extract data information from base mark when base mark is to be avoided
      // base mark is implicitly avoided if it is a group area
      if (marktype && (avoidBaseMark || isGroupArea)) {
        avoidMarks = [texts.map(d => d.datum)].concat(avoidMarks);
      }
      // generate bitmaps for layout calculation
      bitmaps = avoidMarks.length ? markBitmaps($, avoidMarks, labelInside, isGroupArea) : baseBitmaps($, avoidBaseMark && data);
    }
    // generate label placement function
    const place = isGroupArea ? placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($, bitmaps, anchors, offsets);
    // place all labels
    data.forEach(d => d.opacity = +place(d));
    return data;
  }
  function getOffsets(_, count) {
    const offsets = new Float64Array(count), n = _.length;
    for (let i = 0; i < n; ++i) offsets[i] = _[i] || 0;
    for (let i = n; i < count; ++i) offsets[i] = offsets[n - 1];
    return offsets;
  }
  function getAnchors(_, count) {
    const anchors = new Int8Array(count), n = _.length;
    for (let i = 0; i < n; ++i) anchors[i] |= anchorCode[_[i]];
    for (let i = n; i < count; ++i) anchors[i] = anchors[n - 1];
    return anchors;
  }
  function markType(item) {
    return item && item.mark && item.mark.marktype;
  }
  /**
  * Factory function for function for getting base mark boundary, depending
  * on mark and group type. When mark type is undefined, line or area: boundary
  * is the coordinate of each data point. When base mark is grouped line,
  * boundary is either at the beginning or end of the line depending on the
  * value of lineAnchor. Otherwise, use bounds of base mark.
  */
  function markBoundary(marktype, grouptype, lineAnchor, markIndex) {
    const xy = d => [d.x, d.x, d.x, d.y, d.y, d.y];
    if (!marktype) {
      return xy;
    } else if (marktype === 'line' || marktype === 'area') {
      return d => xy(d.datum);
    } else if (grouptype === 'line') {
      return d => {
        const items = d.datum.items[markIndex].items;
        return xy(items.length ? items[lineAnchor === 'start' ? 0 : items.length - 1] : {
          x: NaN,
          y: NaN
        });
      };
    } else {
      return d => {
        const b = d.datum.bounds;
        return [b.x1, (b.x1 + b.x2) / 2, b.x2, b.y1, (b.y1 + b.y2) / 2, b.y2];
      };
    }
  }
  const Output = ['x', 'y', 'opacity', 'align', 'baseline'];
  const Anchors = ['top-left', 'left', 'bottom-left', 'top', 'bottom', 'top-right', 'right', 'bottom-right'];
  /**
  * Compute text label layout to annotate marks.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.
  * @param {function(*,*): number} [params.sort] - An optional
  *   comparator function for sorting label data in priority order.
  * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.
  *   The available options are 'top-left', 'left', 'bottom-left', 'top',
  *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.
  * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.
  *   This parameter  is parallel to the list of anchor points.
  * @param {number} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.
  * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor
  *   position for labels. One of 'start' or 'end'.
  * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating
  *   which mark within the group should be labeled.
  * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label
  *   layout should avoid overlap.
  * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid
  *   overlap with the underlying base mark being labeled.
  * @param {string} [params.method='naive'] - For area make labels only, a method for
  *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.
  * @param {Array<string>} [params.as] - The output fields written by the transform.
  *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].
  */
  function Label(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Label.Definition = {
    type: 'Label',
    metadata: {
      modifies: true
    },
    params: [{
      name: 'size',
      type: 'number',
      array: true,
      length: 2,
      required: true
    }, {
      name: 'sort',
      type: 'compare'
    }, {
      name: 'anchor',
      type: 'string',
      array: true,
      default: Anchors
    }, {
      name: 'offset',
      type: 'number',
      array: true,
      default: [1]
    }, {
      name: 'padding',
      type: 'number',
      default: 0
    }, {
      name: 'lineAnchor',
      type: 'string',
      values: ['start', 'end'],
      default: 'end'
    }, {
      name: 'markIndex',
      type: 'number',
      default: 0
    }, {
      name: 'avoidBaseMark',
      type: 'boolean',
      default: true
    }, {
      name: 'avoidMarks',
      type: 'data',
      array: true
    }, {
      name: 'method',
      type: 'string',
      default: 'naive'
    }, {
      name: 'as',
      type: 'string',
      array: true,
      length: Output.length,
      default: Output
    }]
  };
  vegaUtil.inherits(Label, vegaDataflow.Transform, {
    transform(_, pulse) {
      function modp(param) {
        const p = _[param];
        return vegaUtil.isFunction(p) && pulse.modified(p.fields);
      }
      const mod = _.modified();
      if (!(mod || pulse.changed(pulse.ADD_REM) || modp('sort'))) return;
      if (!_.size || _.size.length !== 2) {
        vegaUtil.error('Size parameter should be specified as a [width, height] array.');
      }
      const as = _.as || Output;
      // run label layout
      labelLayout(pulse.materialize(pulse.SOURCE).source, _.size, _.sort, vegaUtil.array(_.offset || 1), vegaUtil.array(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark === false ? false : true, _.lineAnchor || 'end', _.markIndex || 0, _.padding || 0, _.method || 'naive').forEach(l => {
        // write layout results to data stream
        const t = l.datum;
        t[as[0]] = l.x;
        t[as[1]] = l.y;
        t[as[2]] = l.opacity;
        t[as[3]] = l.align;
        t[as[4]] = l.baseline;
      });
      return pulse.reflow(mod).modifies(as);
    }
  });
  exports.label = Label;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-canvas":"4uDqM","vega-dataflow":"1Owpt","vega-scenegraph":"6y4N1","vega-util":"4BD5d"}],"GZdnI":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-statistics'), require('vega-dataflow'), require('vega-util')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-statistics', 'vega-dataflow', 'vega-util'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega));
})(this, function (exports, vegaStatistics, vegaDataflow, vegaUtil) {
  "use strict";
  function partition(data, groupby) {
    var groups = [], get = function (f) {
      return f(t);
    }, map, i, n, t, k, g;
    // partition data points into stack groups
    if (groupby == null) {
      groups.push(data);
    } else {
      for ((map = {}, i = 0, n = data.length); i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }
        g.push(t);
      }
    }
    return groups;
  }
  /**
  * Compute locally-weighted regression fits for one or more data groups.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.x - An accessor for the predictor data field.
  * @param {function(object): *} params.y - An accessor for the predicted data field.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
  * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
  */
  function Loess(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Loess.Definition = {
    'type': 'Loess',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'x',
      'type': 'field',
      'required': true
    }, {
      'name': 'y',
      'type': 'field',
      'required': true
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'bandwidth',
      'type': 'number',
      'default': 0.3
    }, {
      'name': 'as',
      'type': 'string',
      'array': true
    }]
  };
  vegaUtil.inherits(Loess, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
      if (!this.value || pulse.changed() || _.modified()) {
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map(vegaUtil.accessorName), m = names.length, as = _.as || [vegaUtil.accessorName(_.x), vegaUtil.accessorName(_.y)], values = [];
        groups.forEach(g => {
          vegaStatistics.regressionLoess(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {
            const t = {};
            for (let i = 0; i < m; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = p[0];
            t[as[1]] = p[1];
            values.push(vegaDataflow.ingest(t));
          });
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
      }
      return out;
    }
  });
  const Methods = {
    linear: vegaStatistics.regressionLinear,
    log: vegaStatistics.regressionLog,
    exp: vegaStatistics.regressionExp,
    pow: vegaStatistics.regressionPow,
    quad: vegaStatistics.regressionQuad,
    poly: vegaStatistics.regressionPoly
  };
  const degreesOfFreedom = (method, order) => method === 'poly' ? order : method === 'quad' ? 2 : 1;
  /**
  * Compute regression fits for one or more data groups.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {function(object): *} params.x - An accessor for the predictor data field.
  * @param {function(object): *} params.y - An accessor for the predicted data field.
  * @param {string} [params.method='linear'] - The regression method to apply.
  * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
  * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
  * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
  */
  function Regression(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Regression.Definition = {
    'type': 'Regression',
    'metadata': {
      'generates': true
    },
    'params': [{
      'name': 'x',
      'type': 'field',
      'required': true
    }, {
      'name': 'y',
      'type': 'field',
      'required': true
    }, {
      'name': 'groupby',
      'type': 'field',
      'array': true
    }, {
      'name': 'method',
      'type': 'string',
      'default': 'linear',
      'values': Object.keys(Methods)
    }, {
      'name': 'order',
      'type': 'number',
      'default': 3
    }, {
      'name': 'extent',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'params',
      'type': 'boolean',
      'default': false
    }, {
      'name': 'as',
      'type': 'string',
      'array': true
    }]
  };
  vegaUtil.inherits(Regression, vegaDataflow.Transform, {
    transform(_, pulse) {
      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
      if (!this.value || pulse.changed() || _.modified()) {
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition(source, _.groupby), names = (_.groupby || []).map(vegaUtil.accessorName), method = _.method || 'linear', order = _.order || 3, dof = degreesOfFreedom(method, order), as = _.as || [vegaUtil.accessorName(_.x), vegaUtil.accessorName(_.y)], fit = Methods[method], values = [];
        let domain = _.extent;
        if (!vegaUtil.hasOwnProperty(Methods, method)) {
          vegaUtil.error('Invalid regression method: ' + method);
        }
        if (domain != null) {
          if (method === 'log' && domain[0] <= 0) {
            pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');
            domain = null;
          }
        }
        groups.forEach(g => {
          const n = g.length;
          if (n <= dof) {
            pulse.dataflow.warn('Skipping regression with more parameters than data points.');
            return;
          }
          const model = fit(g, _.x, _.y, order);
          if (_.params) {
            // if parameter vectors requested return those
            values.push(vegaDataflow.ingest({
              keys: g.dims,
              coef: model.coef,
              rSquared: model.rSquared
            }));
            return;
          }
          const dom = domain || vegaUtil.extent(g, _.x), add = p => {
            const t = {};
            for (let i = 0; i < names.length; ++i) {
              t[names[i]] = g.dims[i];
            }
            t[as[0]] = p[0];
            t[as[1]] = p[1];
            values.push(vegaDataflow.ingest(t));
          };
          if (method === 'linear') {
            // for linear regression we only need the end points
            dom.forEach(x => add([x, model.predict(x)]));
          } else {
            // otherwise return trend line sample points
            vegaStatistics.sampleCurve(model.predict, dom, 25, 200).forEach(add);
          }
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
      }
      return out;
    }
  });
  exports.loess = Loess;
  exports.regression = Regression;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-statistics":"5GzFx","vega-dataflow":"1Owpt","vega-util":"4BD5d"}],"26ztH":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-delaunay')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-delaunay'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.d3));
})(this, function (exports, vegaDataflow, vegaUtil, d3Delaunay) {
  "use strict";
  function Voronoi(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  Voronoi.Definition = {
    'type': 'Voronoi',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'x',
      'type': 'field',
      'required': true
    }, {
      'name': 'y',
      'type': 'field',
      'required': true
    }, {
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'extent',
      'type': 'array',
      'array': true,
      'length': 2,
      'default': [[-1e5, -1e5], [1e5, 1e5]],
      'content': {
        'type': 'number',
        'array': true,
        'length': 2
      }
    }, {
      'name': 'as',
      'type': 'string',
      'default': 'path'
    }]
  };
  const defaultExtent = [-1e5, -1e5, 1e5, 1e5];
  vegaUtil.inherits(Voronoi, vegaDataflow.Transform, {
    transform(_, pulse) {
      const as = _.as || 'path', data = pulse.source;
      // nothing to do if no data
      if (!data || !data.length) return pulse;
      // configure and construct voronoi diagram
      let s = _.size;
      s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;
      const voronoi = this.value = d3Delaunay.Delaunay.from(data, _.x, _.y).voronoi(s);
      // map polygons to paths
      for (let i = 0, n = data.length; i < n; ++i) {
        const polygon = voronoi.cellPolygon(i);
        data[i][as] = polygon ? toPathString(polygon) : null;
      }
      return pulse.reflow(_.modified()).modifies(as);
    }
  });
  // suppress duplicated end point vertices
  function toPathString(p) {
    const x = p[0][0], y = p[0][1];
    let n = p.length - 1;
    for (; p[n][0] === x && p[n][1] === y; --n) ;
    return 'M' + p.slice(0, n + 1).join('L') + 'Z';
  }
  exports.voronoi = Voronoi;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-dataflow":"1Owpt","vega-util":"4BD5d","d3-delaunay":"2ErsE"}],"2ErsE":[function(require,module,exports) {
var define;
// https://github.com/d3/d3-delaunay v5.3.0 Copyright 2020 Mike Bostock
// https://github.com/mapbox/delaunator v4.0.1. Copyright 2019 Mapbox, Inc.
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.d3 = global.d3 || ({})));
})(this, function (exports) {
  "use strict";
  const EPSILON = Math.pow(2, -52);
  const EDGE_STACK = new Uint32Array(512);
  class Delaunator {
    static from(points, getX = defaultGetX, getY = defaultGetY) {
      const n = points.length;
      const coords = new Float64Array(n * 2);
      for (let i = 0; i < n; i++) {
        const p = points[i];
        coords[2 * i] = getX(p);
        coords[2 * i + 1] = getY(p);
      }
      return new Delaunator(coords);
    }
    constructor(coords) {
      const n = coords.length >> 1;
      if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');
      this.coords = coords;
      // arrays that will store the triangulation graph
      const maxTriangles = Math.max(2 * n - 5, 0);
      this._triangles = new Uint32Array(maxTriangles * 3);
      this._halfedges = new Int32Array(maxTriangles * 3);
      // temporary arrays for tracking the edges of the advancing convex hull
      this._hashSize = Math.ceil(Math.sqrt(n));
      this._hullPrev = new Uint32Array(n);
      // edge to prev edge
      this._hullNext = new Uint32Array(n);
      // edge to next edge
      this._hullTri = new Uint32Array(n);
      // edge to adjacent triangle
      this._hullHash = new Int32Array(this._hashSize).fill(-1);
      // angular edge hash
      // temporary arrays for sorting points
      this._ids = new Uint32Array(n);
      this._dists = new Float64Array(n);
      this.update();
    }
    update() {
      const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} = this;
      const n = coords.length >> 1;
      // populate an array of point indices; calculate input data bbox
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      for (let i = 0; i < n; i++) {
        const x = coords[2 * i];
        const y = coords[2 * i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
        this._ids[i] = i;
      }
      const cx = (minX + maxX) / 2;
      const cy = (minY + maxY) / 2;
      let minDist = Infinity;
      let i0, i1, i2;
      // pick a seed point close to the center
      for (let i = 0; i < n; i++) {
        const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
        if (d < minDist) {
          i0 = i;
          minDist = d;
        }
      }
      const i0x = coords[2 * i0];
      const i0y = coords[2 * i0 + 1];
      minDist = Infinity;
      // find the point closest to the seed
      for (let i = 0; i < n; i++) {
        if (i === i0) continue;
        const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
        if (d < minDist && d > 0) {
          i1 = i;
          minDist = d;
        }
      }
      let i1x = coords[2 * i1];
      let i1y = coords[2 * i1 + 1];
      let minRadius = Infinity;
      // find the third point which forms the smallest circumcircle with the first two
      for (let i = 0; i < n; i++) {
        if (i === i0 || i === i1) continue;
        const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
        if (r < minRadius) {
          i2 = i;
          minRadius = r;
        }
      }
      let i2x = coords[2 * i2];
      let i2y = coords[2 * i2 + 1];
      if (minRadius === Infinity) {
        // order collinear points by dx (or dy if all x are identical)
        // and return the list as a hull
        for (let i = 0; i < n; i++) {
          this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
        }
        quicksort(this._ids, this._dists, 0, n - 1);
        const hull = new Uint32Array(n);
        let j = 0;
        for (let i = 0, d0 = -Infinity; i < n; i++) {
          const id = this._ids[i];
          if (this._dists[id] > d0) {
            hull[j++] = id;
            d0 = this._dists[id];
          }
        }
        this.hull = hull.subarray(0, j);
        this.triangles = new Uint32Array(0);
        this.halfedges = new Uint32Array(0);
        return;
      }
      // swap the order of the seed points for counter-clockwise orientation
      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
        const i = i1;
        const x = i1x;
        const y = i1y;
        i1 = i2;
        i1x = i2x;
        i1y = i2y;
        i2 = i;
        i2x = x;
        i2y = y;
      }
      const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
      this._cx = center.x;
      this._cy = center.y;
      for (let i = 0; i < n; i++) {
        this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
      }
      // sort the points by distance from the seed triangle circumcenter
      quicksort(this._ids, this._dists, 0, n - 1);
      // set up the seed triangle as the starting hull
      this._hullStart = i0;
      let hullSize = 3;
      hullNext[i0] = hullPrev[i2] = i1;
      hullNext[i1] = hullPrev[i0] = i2;
      hullNext[i2] = hullPrev[i1] = i0;
      hullTri[i0] = 0;
      hullTri[i1] = 1;
      hullTri[i2] = 2;
      hullHash.fill(-1);
      hullHash[this._hashKey(i0x, i0y)] = i0;
      hullHash[this._hashKey(i1x, i1y)] = i1;
      hullHash[this._hashKey(i2x, i2y)] = i2;
      this.trianglesLen = 0;
      this._addTriangle(i0, i1, i2, -1, -1, -1);
      for (let k = 0, xp, yp; k < this._ids.length; k++) {
        const i = this._ids[k];
        const x = coords[2 * i];
        const y = coords[2 * i + 1];
        // skip near-duplicate points
        if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
        xp = x;
        yp = y;
        // skip seed triangle points
        if (i === i0 || i === i1 || i === i2) continue;
        // find a visible edge on the convex hull using edge hash
        let start = 0;
        for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
          start = hullHash[(key + j) % this._hashSize];
          if (start !== -1 && start !== hullNext[start]) break;
        }
        start = hullPrev[start];
        let e = start, q;
        while ((q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]))) {
          e = q;
          if (e === start) {
            e = -1;
            break;
          }
        }
        if (e === -1) continue;
        // likely a near-duplicate point; skip it
        // add the first triangle from the point
        let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
        // recursively flip triangles from the point until they satisfy the Delaunay condition
        hullTri[i] = this._legalize(t + 2);
        hullTri[e] = t;
        // keep track of boundary triangles on the hull
        hullSize++;
        // walk forward through the hull, adding more triangles and flipping recursively
        let n = hullNext[e];
        while ((q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]))) {
          t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
          hullTri[i] = this._legalize(t + 2);
          hullNext[n] = n;
          // mark as removed
          hullSize--;
          n = q;
        }
        // walk backward from the other side, adding more triangles and flipping
        if (e === start) {
          while ((q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]))) {
            t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
            this._legalize(t + 2);
            hullTri[q] = t;
            hullNext[e] = e;
            // mark as removed
            hullSize--;
            e = q;
          }
        }
        // update the hull indices
        this._hullStart = hullPrev[i] = e;
        hullNext[e] = hullPrev[n] = i;
        hullNext[i] = n;
        // save the two new edges in the hash table
        hullHash[this._hashKey(x, y)] = i;
        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
      }
      this.hull = new Uint32Array(hullSize);
      for (let i = 0, e = this._hullStart; i < hullSize; i++) {
        this.hull[i] = e;
        e = hullNext[e];
      }
      // trim typed triangle mesh arrays
      this.triangles = this._triangles.subarray(0, this.trianglesLen);
      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x, y) {
      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a) {
      const {_triangles: triangles, _halfedges: halfedges, coords} = this;
      let i = 0;
      let ar = 0;
      // recursion eliminated with a fixed-size stack
      while (true) {
        const b = halfedges[a];
        /*if the pair of triangles doesn't satisfy the Delaunay condition
        * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
        * then do the same check/flip recursively for the new pair of triangles
        *
        *           pl                    pl
        *          /||\                  /  \
        *       al/ || \bl            al/    \a
        *        /  ||  \              /      \
        *       /  a||b  \    flip    /___ar___\
        *     p0\   ||   /p1   =>   p0\---bl---/p1
        *        \  ||  /              \      /
        *       ar\ || /br             b\    /br
        *          \||/                  \  /
        *           pr                    pr
        */
        const a0 = a - a % 3;
        ar = a0 + (a + 2) % 3;
        if (b === -1) {
          // convex hull edge
          if (i === 0) break;
          a = EDGE_STACK[--i];
          continue;
        }
        const b0 = b - b % 3;
        const al = a0 + (a + 1) % 3;
        const bl = b0 + (b + 2) % 3;
        const p0 = triangles[ar];
        const pr = triangles[a];
        const pl = triangles[al];
        const p1 = triangles[bl];
        const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
        if (illegal) {
          triangles[a] = p1;
          triangles[b] = p0;
          const hbl = halfedges[bl];
          // edge swapped on the other side of the hull (rare); fix the halfedge reference
          if (hbl === -1) {
            let e = this._hullStart;
            do {
              if (this._hullTri[e] === bl) {
                this._hullTri[e] = a;
                break;
              }
              e = this._hullPrev[e];
            } while (e !== this._hullStart);
          }
          this._link(a, hbl);
          this._link(b, halfedges[ar]);
          this._link(ar, bl);
          const br = b0 + (b + 1) % 3;
          // don't worry about hitting the cap: it can only happen on extremely degenerate input
          if (i < EDGE_STACK.length) {
            EDGE_STACK[i++] = br;
          }
        } else {
          if (i === 0) break;
          a = EDGE_STACK[--i];
        }
      }
      return ar;
    }
    _link(a, b) {
      this._halfedges[a] = b;
      if (b !== -1) this._halfedges[b] = a;
    }
    /*add a new triangle given vertex indices and adjacent half-edge ids*/
    _addTriangle(i0, i1, i2, a, b, c) {
      const t = this.trianglesLen;
      this._triangles[t] = i0;
      this._triangles[t + 1] = i1;
      this._triangles[t + 2] = i2;
      this._link(t, a);
      this._link(t + 1, b);
      this._link(t + 2, c);
      this.trianglesLen += 3;
      return t;
    }
  }
  // monotonically increases with real angle, but doesn't need expensive trigonometry
  function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4;
  }
  function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
  }
  // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check
  function orientIfSure(px, py, rx, ry, qx, qy) {
    const l = (ry - py) * (qx - px);
    const r = (rx - px) * (qy - py);
    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
  }
  // a more robust orientation test that's stable in a given triangle (to fix robustness issues)
  function orient(rx, ry, qx, qy, px, py) {
    const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
    return sign < 0;
  }
  function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
  }
  function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = (ey * bl - dy * cl) * d;
    const y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
  }
  function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = ax + (ey * bl - dy * cl) * d;
    const y = ay + (dx * cl - ex * bl) * d;
    return {
      x,
      y
    };
  }
  function quicksort(ids, dists, left, right) {
    if (right - left <= 20) {
      for (let i = left + 1; i <= right; i++) {
        const temp = ids[i];
        const tempDist = dists[temp];
        let j = i - 1;
        while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
        ids[j + 1] = temp;
      }
    } else {
      const median = left + right >> 1;
      let i = left + 1;
      let j = right;
      swap(ids, median, i);
      if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
      if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
      if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
      const temp = ids[i];
      const tempDist = dists[temp];
      while (true) {
        do i++; while (dists[ids[i]] < tempDist);
        do j--; while (dists[ids[j]] > tempDist);
        if (j < i) break;
        swap(ids, i, j);
      }
      ids[left + 1] = ids[j];
      ids[j] = temp;
      if (right - i + 1 >= j - left) {
        quicksort(ids, dists, i, right);
        quicksort(ids, dists, left, j - 1);
      } else {
        quicksort(ids, dists, left, j - 1);
        quicksort(ids, dists, i, right);
      }
    }
  }
  function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
  function defaultGetX(p) {
    return p[0];
  }
  function defaultGetY(p) {
    return p[1];
  }
  const epsilon = 1e-6;
  class Path {
    constructor() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      // end of current subpath
      this._ = "";
    }
    moveTo(x, y) {
      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
      if (this._x1 !== null) {
        (this._x1 = this._x0, this._y1 = this._y0);
        this._ += "Z";
      }
    }
    lineTo(x, y) {
      this._ += `L${this._x1 = +x},${this._y1 = +y}`;
    }
    arc(x, y, r) {
      (x = +x, y = +y, r = +r);
      const x0 = x + r;
      const y0 = y;
      if (r < 0) throw new Error("negative radius");
      if (this._x1 === null) this._ += `M${x0},${y0}`; else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
      if (!r) return;
      this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x, y, w, h) {
      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
    }
    value() {
      return this._ || null;
    }
  }
  class Polygon {
    constructor() {
      this._ = [];
    }
    moveTo(x, y) {
      this._.push([x, y]);
    }
    closePath() {
      this._.push(this._[0].slice());
    }
    lineTo(x, y) {
      this._.push([x, y]);
    }
    value() {
      return this._.length ? this._ : null;
    }
  }
  class Voronoi {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
      this.delaunay = delaunay;
      this._circumcenters = new Float64Array(delaunay.points.length * 2);
      this.vectors = new Float64Array(delaunay.points.length * 2);
      (this.xmax = xmax, this.xmin = xmin);
      (this.ymax = ymax, this.ymin = ymin);
      this._init();
    }
    update() {
      this.delaunay.update();
      this._init();
      return this;
    }
    _init() {
      const {delaunay: {points, hull, triangles}, vectors} = this;
      // Compute circumcenters.
      const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
      for (let i = 0, j = 0, n = triangles.length, x, y; i < n; (i += 3, j += 2)) {
        const t1 = triangles[i] * 2;
        const t2 = triangles[i + 1] * 2;
        const t3 = triangles[i + 2] * 2;
        const x1 = points[t1];
        const y1 = points[t1 + 1];
        const x2 = points[t2];
        const y2 = points[t2 + 1];
        const x3 = points[t3];
        const y3 = points[t3 + 1];
        const dx = x2 - x1;
        const dy = y2 - y1;
        const ex = x3 - x1;
        const ey = y3 - y1;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const ab = (dx * ey - dy * ex) * 2;
        if (!ab) {
          // degenerate case (collinear diagram)
          x = (x1 + x3) / 2 - 1e8 * ey;
          y = (y1 + y3) / 2 + 1e8 * ex;
        } else if (Math.abs(ab) < 1e-8) {
          // almost equal points (degenerate triangle)
          x = (x1 + x3) / 2;
          y = (y1 + y3) / 2;
        } else {
          const d = 1 / ab;
          x = x1 + (ey * bl - dy * cl) * d;
          y = y1 + (dx * cl - ex * bl) * d;
        }
        circumcenters[j] = x;
        circumcenters[j + 1] = y;
      }
      // Compute exterior cell rays.
      let h = hull[hull.length - 1];
      let p0, p1 = h * 4;
      let x0, x1 = points[2 * h];
      let y0, y1 = points[2 * h + 1];
      vectors.fill(0);
      for (let i = 0; i < hull.length; ++i) {
        h = hull[i];
        (p0 = p1, x0 = x1, y0 = y1);
        (p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1]);
        vectors[p0 + 2] = vectors[p1] = y0 - y1;
        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
      }
    }
    render(context) {
      const buffer = context == null ? context = new Path() : undefined;
      const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
      if (hull.length <= 1) return null;
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i];
        if (j < i) continue;
        const ti = Math.floor(i / 3) * 2;
        const tj = Math.floor(j / 3) * 2;
        const xi = circumcenters[ti];
        const yi = circumcenters[ti + 1];
        const xj = circumcenters[tj];
        const yj = circumcenters[tj + 1];
        this._renderSegment(xi, yi, xj, yj, context);
      }
      let h0, h1 = hull[hull.length - 1];
      for (let i = 0; i < hull.length; ++i) {
        (h0 = h1, h1 = hull[i]);
        const t = Math.floor(inedges[h1] / 3) * 2;
        const x = circumcenters[t];
        const y = circumcenters[t + 1];
        const v = h0 * 4;
        const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
        if (p) this._renderSegment(x, y, p[0], p[1], context);
      }
      return buffer && buffer.value();
    }
    renderBounds(context) {
      const buffer = context == null ? context = new Path() : undefined;
      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
      return buffer && buffer.value();
    }
    renderCell(i, context) {
      const buffer = context == null ? context = new Path() : undefined;
      const points = this._clip(i);
      if (points === null || !points.length) return;
      context.moveTo(points[0], points[1]);
      let n = points.length;
      while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;
      for (let i = 2; i < n; i += 2) {
        if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);
      }
      context.closePath();
      return buffer && buffer.value();
    }
    *cellPolygons() {
      const {delaunay: {points}} = this;
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const cell = this.cellPolygon(i);
        if (cell) (cell.index = i, yield cell);
      }
    }
    cellPolygon(i) {
      const polygon = new Polygon();
      this.renderCell(i, polygon);
      return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
      let S;
      const c0 = this._regioncode(x0, y0);
      const c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
      } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
        context.moveTo(S[0], S[1]);
        context.lineTo(S[2], S[3]);
      }
    }
    contains(i, x, y) {
      if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
      return this.delaunay._step(i, x, y) === i;
    }
    *neighbors(i) {
      const ci = this._clip(i);
      if (ci) for (const j of this.delaunay.neighbors(i)) {
        const cj = this._clip(j);
        // find the common edge
        if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
          for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
            if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
              yield j;
              break loop;
            }
          }
        }
      }
    }
    _cell(i) {
      const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
      const e0 = inedges[i];
      if (e0 === -1) return null;
      // coincident point
      const points = [];
      let e = e0;
      do {
        const t = Math.floor(e / 3);
        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
        e = e % 3 === 2 ? e - 2 : e + 1;
        if (triangles[e] !== i) break;
        // bad triangulation
        e = halfedges[e];
      } while (e !== e0 && e !== -1);
      return points;
    }
    _clip(i) {
      // degenerate case (1 valid point: return the box)
      if (i === 0 && this.delaunay.hull.length === 1) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      const points = this._cell(i);
      if (points === null) return null;
      const {vectors: V} = this;
      const v = i * 4;
      return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
    }
    _clipFinite(i, points) {
      const n = points.length;
      let P = null;
      let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
      let c0, c1 = this._regioncode(x1, y1);
      let e0, e1;
      for (let j = 0; j < n; j += 2) {
        (x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1]);
        (c0 = c1, c1 = this._regioncode(x1, y1));
        if (c0 === 0 && c1 === 0) {
          (e0 = e1, e1 = 0);
          if (P) P.push(x1, y1); else P = [x1, y1];
        } else {
          let S, sx0, sy0, sx1, sy1;
          if (c0 === 0) {
            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
            [sx0, sy0, sx1, sy1] = S;
          } else {
            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
            [sx1, sy1, sx0, sy0] = S;
            (e0 = e1, e1 = this._edgecode(sx0, sy0));
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx0, sy0); else P = [sx0, sy0];
          }
          (e0 = e1, e1 = this._edgecode(sx1, sy1));
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx1, sy1); else P = [sx1, sy1];
        }
      }
      if (P) {
        (e0 = e1, e1 = this._edgecode(P[0], P[1]));
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }
      return P;
    }
    _clipSegment(x0, y0, x1, y1, c0, c1) {
      while (true) {
        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
        if (c0 & c1) return null;
        let x, y, c = c0 || c1;
        if (c & 0b1000) (x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax); else if (c & 0b0100) (x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin); else if (c & 0b0010) (y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax); else (y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin);
        if (c0) (x0 = x, y0 = y, c0 = this._regioncode(x0, y0)); else (x1 = x, y1 = y, c1 = this._regioncode(x1, y1));
      }
    }
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
      let P = Array.from(points), p;
      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
      if (P = this._clipFinite(i, P)) {
        for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
          (c0 = c1, c1 = this._edgecode(P[j], P[j + 1]));
          if (c0 && c1) (j = this._edge(i, c0, c1, P, j), n = P.length);
        }
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
      }
      return P;
    }
    _edge(i, e0, e1, P, j) {
      while (e0 !== e1) {
        let x, y;
        switch (e0) {
          case 0b0101:
            e0 = 0b0100;
            continue;
          case 0b0100:
            (e0 = 0b0110, x = this.xmax, y = this.ymin);
            break;
          case 0b0110:
            e0 = 0b0010;
            continue;
          case 0b0010:
            (e0 = 0b1010, x = this.xmax, y = this.ymax);
            break;
          case 0b1010:
            e0 = 0b1000;
            continue;
          case 0b1000:
            (e0 = 0b1001, x = this.xmin, y = this.ymax);
            break;
          case 0b1001:
            e0 = 0b0001;
            continue;
          case 0b0001:
            (e0 = 0b0101, x = this.xmin, y = this.ymin);
            break;
        }
        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
          (P.splice(j, 0, x, y), j += 2);
        }
      }
      if (P.length > 4) {
        for (let i = 0; i < P.length; i += 2) {
          const j = (i + 2) % P.length, k = (i + 4) % P.length;
          if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) (P.splice(j, 2), i -= 2);
        }
      }
      return j;
    }
    _project(x0, y0, vx, vy) {
      let t = Infinity, c, x, y;
      if (vy < 0) {
        // top
        if (y0 <= this.ymin) return null;
        if ((c = (this.ymin - y0) / vy) < t) (y = this.ymin, x = x0 + (t = c) * vx);
      } else if (vy > 0) {
        // bottom
        if (y0 >= this.ymax) return null;
        if ((c = (this.ymax - y0) / vy) < t) (y = this.ymax, x = x0 + (t = c) * vx);
      }
      if (vx > 0) {
        // right
        if (x0 >= this.xmax) return null;
        if ((c = (this.xmax - x0) / vx) < t) (x = this.xmax, y = y0 + (t = c) * vy);
      } else if (vx < 0) {
        // left
        if (x0 <= this.xmin) return null;
        if ((c = (this.xmin - x0) / vx) < t) (x = this.xmin, y = y0 + (t = c) * vy);
      }
      return [x, y];
    }
    _edgecode(x, y) {
      return (x === this.xmin ? 0b0001 : x === this.xmax ? 0b0010 : 0b0000) | (y === this.ymin ? 0b0100 : y === this.ymax ? 0b1000 : 0b0000);
    }
    _regioncode(x, y) {
      return (x < this.xmin ? 0b0001 : x > this.xmax ? 0b0010 : 0b0000) | (y < this.ymin ? 0b0100 : y > this.ymax ? 0b1000 : 0b0000);
    }
  }
  const tau = 2 * Math.PI, pow = Math.pow;
  function pointX(p) {
    return p[0];
  }
  function pointY(p) {
    return p[1];
  }
  // A triangulation is collinear if all its triangles have a non-null area
  function collinear(d) {
    const {triangles, coords} = d;
    for (let i = 0; i < triangles.length; i += 3) {
      const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
      if (cross > 1e-10) return false;
    }
    return true;
  }
  function jitter(x, y, r) {
    return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
  }
  class Delaunay {
    static from(points, fx = pointX, fy = pointY, that) {
      return new Delaunay(("length" in points) ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
    constructor(points) {
      this._delaunator = new Delaunator(points);
      this.inedges = new Int32Array(points.length / 2);
      this._hullIndex = new Int32Array(points.length / 2);
      this.points = this._delaunator.coords;
      this._init();
    }
    update() {
      this._delaunator.update();
      this._init();
      return this;
    }
    _init() {
      const d = this._delaunator, points = this.points;
      // check for collinear
      if (d.hull && d.hull.length > 2 && collinear(d)) {
        this.collinear = Int32Array.from({
          length: points.length / 2
        }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
        // for exact neighbors
        const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const p = jitter(points[2 * i], points[2 * i + 1], r);
          points[2 * i] = p[0];
          points[2 * i + 1] = p[1];
        }
        this._delaunator = new Delaunator(points);
      } else {
        delete this.collinear;
      }
      const halfedges = this.halfedges = this._delaunator.halfedges;
      const hull = this.hull = this._delaunator.hull;
      const triangles = this.triangles = this._delaunator.triangles;
      const inedges = this.inedges.fill(-1);
      const hullIndex = this._hullIndex.fill(-1);
      // Compute an index from each point to an (arbitrary) incoming halfedge
      // Used to give the first neighbor of each point; for this reason,
      // on the hull we give priority to exterior halfedges
      for (let e = 0, n = halfedges.length; e < n; ++e) {
        const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
        if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
      }
      for (let i = 0, n = hull.length; i < n; ++i) {
        hullIndex[hull[i]] = i;
      }
      // degenerate case: 1 or 2 (distinct) points
      if (hull.length <= 2 && hull.length > 0) {
        this.triangles = new Int32Array(3).fill(-1);
        this.halfedges = new Int32Array(3).fill(-1);
        this.triangles[0] = hull[0];
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
        inedges[hull[0]] = 1;
        if (hull.length === 2) inedges[hull[1]] = 0;
      }
    }
    voronoi(bounds) {
      return new Voronoi(this, bounds);
    }
    *neighbors(i) {
      const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;
      // degenerate case with several collinear points
      if (collinear) {
        const l = collinear.indexOf(i);
        if (l > 0) yield collinear[l - 1];
        if (l < collinear.length - 1) yield collinear[l + 1];
        return;
      }
      const e0 = inedges[i];
      if (e0 === -1) return;
      // coincident point
      let e = e0, p0 = -1;
      do {
        yield p0 = triangles[e];
        e = e % 3 === 2 ? e - 2 : e + 1;
        if (triangles[e] !== i) return;
        // bad triangulation
        e = halfedges[e];
        if (e === -1) {
          const p = hull[(_hullIndex[i] + 1) % hull.length];
          if (p !== p0) yield p;
          return;
        }
      } while (e !== e0);
    }
    find(x, y, i = 0) {
      if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
      const i0 = i;
      let c;
      while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
      return c;
    }
    _step(i, x, y) {
      const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
      if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
      let c = i;
      let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
      const e0 = inedges[i];
      let e = e0;
      do {
        let t = triangles[e];
        const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
        if (dt < dc) (dc = dt, c = t);
        e = e % 3 === 2 ? e - 2 : e + 1;
        if (triangles[e] !== i) break;
        // bad triangulation
        e = halfedges[e];
        if (e === -1) {
          e = hull[(_hullIndex[i] + 1) % hull.length];
          if (e !== t) {
            if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
          }
          break;
        }
      } while (e !== e0);
      return c;
    }
    render(context) {
      const buffer = context == null ? context = new Path() : undefined;
      const {points, halfedges, triangles} = this;
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i];
        if (j < i) continue;
        const ti = triangles[i] * 2;
        const tj = triangles[j] * 2;
        context.moveTo(points[ti], points[ti + 1]);
        context.lineTo(points[tj], points[tj + 1]);
      }
      this.renderHull(context);
      return buffer && buffer.value();
    }
    renderPoints(context, r = 2) {
      const buffer = context == null ? context = new Path() : undefined;
      const {points} = this;
      for (let i = 0, n = points.length; i < n; i += 2) {
        const x = points[i], y = points[i + 1];
        context.moveTo(x + r, y);
        context.arc(x, y, r, 0, tau);
      }
      return buffer && buffer.value();
    }
    renderHull(context) {
      const buffer = context == null ? context = new Path() : undefined;
      const {hull, points} = this;
      const h = hull[0] * 2, n = hull.length;
      context.moveTo(points[h], points[h + 1]);
      for (let i = 1; i < n; ++i) {
        const h = 2 * hull[i];
        context.lineTo(points[h], points[h + 1]);
      }
      context.closePath();
      return buffer && buffer.value();
    }
    hullPolygon() {
      const polygon = new Polygon();
      this.renderHull(polygon);
      return polygon.value();
    }
    renderTriangle(i, context) {
      const buffer = context == null ? context = new Path() : undefined;
      const {points, triangles} = this;
      const t0 = triangles[i *= 3] * 2;
      const t1 = triangles[i + 1] * 2;
      const t2 = triangles[i + 2] * 2;
      context.moveTo(points[t0], points[t0 + 1]);
      context.lineTo(points[t1], points[t1 + 1]);
      context.lineTo(points[t2], points[t2 + 1]);
      context.closePath();
      return buffer && buffer.value();
    }
    *trianglePolygons() {
      const {triangles} = this;
      for (let i = 0, n = triangles.length / 3; i < n; ++i) {
        yield this.trianglePolygon(i);
      }
    }
    trianglePolygon(i) {
      const polygon = new Polygon();
      this.renderTriangle(i, polygon);
      return polygon.value();
    }
  }
  function flatArray(points, fx, fy, that) {
    const n = points.length;
    const array = new Float64Array(n * 2);
    for (let i = 0; i < n; ++i) {
      const p = points[i];
      array[i * 2] = fx.call(that, p, i, points);
      array[i * 2 + 1] = fy.call(that, p, i, points);
    }
    return array;
  }
  function* flatIterable(points, fx, fy, that) {
    let i = 0;
    for (const p of points) {
      yield fx.call(that, p, i, points);
      yield fy.call(that, p, i, points);
      ++i;
    }
  }
  exports.Delaunay = Delaunay;
  exports.Voronoi = Voronoi;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"7DvpH":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-canvas'), require('vega-dataflow'), require('vega-util'), require('vega-scale'), require('vega-statistics')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-canvas', 'vega-dataflow', 'vega-util', 'vega-scale', 'vega-statistics'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.vega, global.vega, global.vega, global.vega, global.vega));
})(this, function (exports, vegaCanvas, vegaDataflow, vegaUtil, vegaScale, vegaStatistics) {
  "use strict";
  /*
  Copyright (c) 2013, Jason Davies.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  * Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
  
  * The name Jason Davies may not be used to endorse or promote products
  derived from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
  // Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
  var cloudRadians = Math.PI / 180, cw = 1 << 11 >> 5, ch = 1 << 11;
  function cloud() {
    var size = [256, 256], text, font, fontSize, fontStyle, fontWeight, rotate, padding, spiral = archimedeanSpiral, words = [], random = Math.random, cloud = {};
    cloud.layout = function () {
      var contextAndRatio = getContext(vegaCanvas.canvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words.length, i = -1, tags = [], data = words.map(d => ({
        text: text(d),
        font: font(d),
        style: fontStyle(d),
        weight: fontWeight(d),
        rotate: rotate(d),
        size: ~~(fontSize(d) + 1e-14),
        padding: padding(d),
        xoff: 0,
        yoff: 0,
        x1: 0,
        y1: 0,
        x0: 0,
        y0: 0,
        hasText: false,
        sprite: null,
        datum: d
      })).sort((a, b) => b.size - a.size);
      while (++i < n) {
        var d = data[i];
        d.x = size[0] * (random() + .5) >> 1;
        d.y = size[1] * (random() + .5) >> 1;
        cloudSprite(contextAndRatio, d, data, i);
        if (d.hasText && place(board, d, bounds)) {
          tags.push(d);
          if (bounds) cloudBounds(bounds, d); else bounds = [{
            x: d.x + d.x0,
            y: d.y + d.y0
          }, {
            x: d.x + d.x1,
            y: d.y + d.y1
          }];
          // Temporary hack
          d.x -= size[0] >> 1;
          d.y -= size[1] >> 1;
        }
      }
      return tags;
    };
    function getContext(canvas) {
      canvas.width = canvas.height = 1;
      var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);
      canvas.width = (cw << 5) / ratio;
      canvas.height = ch / ratio;
      var context = canvas.getContext('2d');
      context.fillStyle = context.strokeStyle = 'red';
      context.textAlign = 'center';
      return {
        context: context,
        ratio: ratio
      };
    }
    function place(board, tag, bounds) {
      var startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s = spiral(size), dt = random() < .5 ? 1 : -1, t = -dt, dxdy, dx, dy;
      while (dxdy = s(t += dt)) {
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];
        if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
        tag.x = startX + dx;
        tag.y = startY + dy;
        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
        // TODO only check for collisions within current bounds.
        if (!bounds || !cloudCollide(tag, board, size[0])) {
          if (!bounds || collideRects(tag, bounds)) {
            var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
            for (var j = 0; j < h; j++) {
              last = 0;
              for (var i = 0; i <= w; i++) {
                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
              }
              x += sw;
            }
            tag.sprite = null;
            return true;
          }
        }
      }
      return false;
    }
    cloud.words = function (_) {
      if (arguments.length) {
        words = _;
        return cloud;
      } else {
        return words;
      }
    };
    cloud.size = function (_) {
      if (arguments.length) {
        size = [+_[0], +_[1]];
        return cloud;
      } else {
        return size;
      }
    };
    cloud.font = function (_) {
      if (arguments.length) {
        font = functor(_);
        return cloud;
      } else {
        return font;
      }
    };
    cloud.fontStyle = function (_) {
      if (arguments.length) {
        fontStyle = functor(_);
        return cloud;
      } else {
        return fontStyle;
      }
    };
    cloud.fontWeight = function (_) {
      if (arguments.length) {
        fontWeight = functor(_);
        return cloud;
      } else {
        return fontWeight;
      }
    };
    cloud.rotate = function (_) {
      if (arguments.length) {
        rotate = functor(_);
        return cloud;
      } else {
        return rotate;
      }
    };
    cloud.text = function (_) {
      if (arguments.length) {
        text = functor(_);
        return cloud;
      } else {
        return text;
      }
    };
    cloud.spiral = function (_) {
      if (arguments.length) {
        spiral = spirals[_] || _;
        return cloud;
      } else {
        return spiral;
      }
    };
    cloud.fontSize = function (_) {
      if (arguments.length) {
        fontSize = functor(_);
        return cloud;
      } else {
        return fontSize;
      }
    };
    cloud.padding = function (_) {
      if (arguments.length) {
        padding = functor(_);
        return cloud;
      } else {
        return padding;
      }
    };
    cloud.random = function (_) {
      if (arguments.length) {
        random = _;
        return cloud;
      } else {
        return random;
      }
    };
    return cloud;
  }
  // Fetches a monochrome sprite bitmap for the specified text.
  // Load in batches for speed.
  function cloudSprite(contextAndRatio, d, data, di) {
    if (d.sprite) return;
    var c = contextAndRatio.context, ratio = contextAndRatio.ratio;
    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x = 0, y = 0, maxh = 0, n = data.length, w, w32, h, i, j;
    --di;
    while (++di < n) {
      d = data[di];
      c.save();
      c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;
      w = c.measureText(d.text + 'm').width * ratio;
      h = d.size << 1;
      if (d.rotate) {
        var sr = Math.sin(d.rotate * cloudRadians), cr = Math.cos(d.rotate * cloudRadians), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;
        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
      } else {
        w = w + 0x1f >> 5 << 5;
      }
      if (h > maxh) maxh = h;
      if (x + w >= cw << 5) {
        x = 0;
        y += maxh;
        maxh = 0;
      }
      if (y + h >= ch) break;
      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
      if (d.rotate) c.rotate(d.rotate * cloudRadians);
      c.fillText(d.text, 0, 0);
      if (d.padding) {
        c.lineWidth = 2 * d.padding;
        c.strokeText(d.text, 0, 0);
      }
      c.restore();
      d.width = w;
      d.height = h;
      d.xoff = x;
      d.yoff = y;
      d.x1 = w >> 1;
      d.y1 = h >> 1;
      d.x0 = -d.x1;
      d.y0 = -d.y1;
      d.hasText = true;
      x += w;
    }
    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];
    while (--di >= 0) {
      d = data[di];
      if (!d.hasText) continue;
      w = d.width;
      w32 = w >> 5;
      h = d.y1 - d.y0;
      // Zero the buffer
      for (i = 0; i < h * w32; i++) sprite[i] = 0;
      x = d.xoff;
      if (x == null) return;
      y = d.yoff;
      var seen = 0, seenRow = -1;
      for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
          var k = w32 * j + (i >> 5), m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
          sprite[k] |= m;
          seen |= m;
        }
        if (seen) seenRow = j; else {
          d.y0++;
          h--;
          j--;
          y++;
        }
      }
      d.y1 = d.y0 + seenRow;
      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
  }
  // Use mask-based collision detection.
  function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
    for (var j = 0; j < h; j++) {
      last = 0;
      for (var i = 0; i <= w; i++) {
        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
      }
      x += sw;
    }
    return false;
  }
  function cloudBounds(bounds, d) {
    var b0 = bounds[0], b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
  }
  function collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
  }
  function archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function (t) {
      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
    };
  }
  function rectangularSpiral(size) {
    var dy = 4, dx = dy * size[0] / size[1], x = 0, y = 0;
    return function (t) {
      var sign = t < 0 ? -1 : 1;
      // See triangular numbers: T_n = n * (n + 1) / 2.
      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
        case 0:
          x += dx;
          break;
        case 1:
          y += dy;
          break;
        case 2:
          x -= dx;
          break;
        default:
          y -= dy;
          break;
      }
      return [x, y];
    };
  }
  // TODO reuse arrays?
  function zeroArray(n) {
    var a = [], i = -1;
    while (++i < n) a[i] = 0;
    return a;
  }
  function functor(d) {
    return typeof d === 'function' ? d : function () {
      return d;
    };
  }
  var spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral
  };
  const Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];
  const Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];
  function Wordcloud(params) {
    vegaDataflow.Transform.call(this, cloud(), params);
  }
  Wordcloud.Definition = {
    'type': 'Wordcloud',
    'metadata': {
      'modifies': true
    },
    'params': [{
      'name': 'size',
      'type': 'number',
      'array': true,
      'length': 2
    }, {
      'name': 'font',
      'type': 'string',
      'expr': true,
      'default': 'sans-serif'
    }, {
      'name': 'fontStyle',
      'type': 'string',
      'expr': true,
      'default': 'normal'
    }, {
      'name': 'fontWeight',
      'type': 'string',
      'expr': true,
      'default': 'normal'
    }, {
      'name': 'fontSize',
      'type': 'number',
      'expr': true,
      'default': 14
    }, {
      'name': 'fontSizeRange',
      'type': 'number',
      'array': 'nullable',
      'default': [10, 50]
    }, {
      'name': 'rotate',
      'type': 'number',
      'expr': true,
      'default': 0
    }, {
      'name': 'text',
      'type': 'field'
    }, {
      'name': 'spiral',
      'type': 'string',
      'values': ['archimedean', 'rectangular']
    }, {
      'name': 'padding',
      'type': 'number',
      'expr': true
    }, {
      'name': 'as',
      'type': 'string',
      'array': true,
      'length': 7,
      'default': Output
    }]
  };
  vegaUtil.inherits(Wordcloud, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (_.size && !(_.size[0] && _.size[1])) {
        vegaUtil.error('Wordcloud size dimensions must be non-zero.');
      }
      function modp(param) {
        const p = _[param];
        return vegaUtil.isFunction(p) && pulse.modified(p.fields);
      }
      const mod = _.modified();
      if (!(mod || pulse.changed(pulse.ADD_REM) || Params.some(modp))) return;
      const data = pulse.materialize(pulse.SOURCE).source, layout = this.value, as = _.as || Output;
      let fontSize = _.fontSize || 14, range;
      vegaUtil.isFunction(fontSize) ? range = _.fontSizeRange : fontSize = vegaUtil.constant(fontSize);
      // create font size scaling function as needed
      if (range) {
        const fsize = fontSize, sizeScale = vegaScale.scale('sqrt')().domain(vegaUtil.extent(data, fsize)).range(range);
        fontSize = x => sizeScale(fsize(x));
      }
      data.forEach(t => {
        t[as[0]] = NaN;
        t[as[1]] = NaN;
        t[as[3]] = 0;
      });
      // configure layout
      const words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(vegaStatistics.random).layout();
      const size = layout.size(), dx = size[0] >> 1, dy = size[1] >> 1, n = words.length;
      for (let i = 0, w, t; i < n; ++i) {
        w = words[i];
        t = w.datum;
        t[as[0]] = w.x + dx;
        t[as[1]] = w.y + dy;
        t[as[2]] = w.font;
        t[as[3]] = w.size;
        t[as[4]] = w.style;
        t[as[5]] = w.weight;
        t[as[6]] = w.rotate;
      }
      return pulse.reflow(mod).modifies(as);
    }
  });
  exports.wordcloud = Wordcloud;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-canvas":"4uDqM","vega-dataflow":"1Owpt","vega-util":"4BD5d","vega-scale":"13AnI","vega-statistics":"5GzFx"}],"4xToR":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('vega-dataflow'), require('vega-util')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'vega-dataflow', 'vega-util'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || ({}), global.vega.transforms = {}), global.d3, global.vega, global.vega));
})(this, function (exports, d3Array, vegaDataflow, vegaUtil) {
  "use strict";
  const array8 = n => new Uint8Array(n);
  const array16 = n => new Uint16Array(n);
  const array32 = n => new Uint32Array(n);
  /**
  * Maintains CrossFilter state.
  */
  function Bitmaps() {
    let width = 8, data = [], seen = array32(0), curr = array(0, width), prev = array(0, width);
    return {
      data: () => data,
      seen: () => seen = lengthen(seen, data.length),
      add(array) {
        for (let i = 0, j = data.length, n = array.length, t; i < n; ++i) {
          t = array[i];
          t._index = j++;
          data.push(t);
        }
      },
      remove(num, map) {
        // map: index -> boolean (true => remove)
        const n = data.length, copy = Array(n - num), reindex = data;
        // reuse old data array for index map
        let t, i, j;
        // seek forward to first removal
        for (i = 0; !map[i] && i < n; ++i) {
          copy[i] = data[i];
          reindex[i] = i;
        }
        // condense arrays
        for (j = i; i < n; ++i) {
          t = data[i];
          if (!map[i]) {
            reindex[i] = j;
            curr[j] = curr[i];
            prev[j] = prev[i];
            copy[j] = t;
            t._index = j++;
          } else {
            reindex[i] = -1;
          }
          curr[i] = 0;
        }
        data = copy;
        return reindex;
      },
      size: () => data.length,
      curr: () => curr,
      prev: () => prev,
      reset: k => prev[k] = curr[k],
      all: () => width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,
      set(k, one) {
        curr[k] |= one;
      },
      clear(k, one) {
        curr[k] &= ~one;
      },
      resize(n, m) {
        const k = curr.length;
        if (n > k || m > width) {
          width = Math.max(m, width);
          curr = array(n, width, curr);
          prev = array(n, width);
        }
      }
    };
  }
  function lengthen(array, length, copy) {
    if (array.length >= length) return array;
    copy = copy || new array.constructor(length);
    copy.set(array);
    return copy;
  }
  function array(n, m, array) {
    const copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
    if (array) copy.set(array);
    return copy;
  }
  function Dimension(index, i, query) {
    const bit = 1 << i;
    return {
      one: bit,
      zero: ~bit,
      range: query.slice(),
      bisect: index.bisect,
      index: index.index,
      size: index.size,
      onAdd(added, curr) {
        const dim = this, range = dim.bisect(dim.range, added.value), idx = added.index, lo = range[0], hi = range[1], n1 = idx.length;
        let i;
        for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;
        for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;
        return dim;
      }
    };
  }
  /**
  * Maintains a list of values, sorted by key.
  */
  function SortedIndex() {
    let index = array32(0), value = [], size = 0;
    function insert(key, data, base) {
      if (!data.length) return [];
      const n0 = size, n1 = data.length, addi = array32(n1);
      let addv = Array(n1), oldv, oldi, i;
      for (i = 0; i < n1; ++i) {
        addv[i] = key(data[i]);
        addi[i] = i;
      }
      addv = sort(addv, addi);
      if (n0) {
        oldv = value;
        oldi = index;
        value = Array(n0 + n1);
        index = array32(n0 + n1);
        merge(base, oldv, oldi, n0, addv, addi, n1, value, index);
      } else {
        if (base > 0) for (i = 0; i < n1; ++i) {
          addi[i] += base;
        }
        value = addv;
        index = addi;
      }
      size = n0 + n1;
      return {
        index: addi,
        value: addv
      };
    }
    function remove(num, map) {
      // map: index -> remove
      const n = size;
      let idx, i, j;
      // seek forward to first removal
      for (i = 0; !map[index[i]] && i < n; ++i) ;
      // condense index and value arrays
      for (j = i; i < n; ++i) {
        if (!map[idx = index[i]]) {
          index[j] = idx;
          value[j] = value[i];
          ++j;
        }
      }
      size = n - num;
    }
    function reindex(map) {
      for (let i = 0, n = size; i < n; ++i) {
        index[i] = map[index[i]];
      }
    }
    function bisect(range, array) {
      let n;
      if (array) {
        n = array.length;
      } else {
        array = value;
        n = size;
      }
      return [d3Array.bisectLeft(array, range[0], 0, n), d3Array.bisectRight(array, range[1], 0, n)];
    }
    return {
      insert: insert,
      remove: remove,
      bisect: bisect,
      reindex: reindex,
      index: () => index,
      size: () => size
    };
  }
  function sort(values, index) {
    values.sort.call(index, (a, b) => {
      const x = values[a], y = values[b];
      return x < y ? -1 : x > y ? 1 : 0;
    });
    return d3Array.permute(values, index);
  }
  function merge(base, value0, index0, n0, value1, index1, n1, value, index) {
    let i0 = 0, i1 = 0, i;
    for (i = 0; i0 < n0 && i1 < n1; ++i) {
      if (value0[i0] < value1[i1]) {
        value[i] = value0[i0];
        index[i] = index0[i0++];
      } else {
        value[i] = value1[i1];
        index[i] = index1[i1++] + base;
      }
    }
    for (; i0 < n0; (++i0, ++i)) {
      value[i] = value0[i0];
      index[i] = index0[i0];
    }
    for (; i1 < n1; (++i1, ++i)) {
      value[i] = value1[i1];
      index[i] = index1[i1] + base;
    }
  }
  /**
  * An indexed multi-dimensional filter.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
  * @param {Array} params.query - An array of per-dimension range queries.
  */
  function CrossFilter(params) {
    vegaDataflow.Transform.call(this, Bitmaps(), params);
    this._indices = null;
    this._dims = null;
  }
  CrossFilter.Definition = {
    'type': 'CrossFilter',
    'metadata': {},
    'params': [{
      'name': 'fields',
      'type': 'field',
      'array': true,
      'required': true
    }, {
      'name': 'query',
      'type': 'array',
      'array': true,
      'required': true,
      'content': {
        'type': 'number',
        'array': true,
        'length': 2
      }
    }]
  };
  vegaUtil.inherits(CrossFilter, vegaDataflow.Transform, {
    transform(_, pulse) {
      if (!this._dims) {
        return this.init(_, pulse);
      } else {
        var init = _.modified('fields') || _.fields.some(f => pulse.modified(f.fields));
        return init ? this.reinit(_, pulse) : this.eval(_, pulse);
      }
    },
    init(_, pulse) {
      const fields = _.fields, query = _.query, indices = this._indices = {}, dims = this._dims = [], m = query.length;
      let i = 0, key, index;
      // instantiate indices and dimensions
      for (; i < m; ++i) {
        key = fields[i].fname;
        index = indices[key] || (indices[key] = SortedIndex());
        dims.push(Dimension(index, i, query[i]));
      }
      return this.eval(_, pulse);
    },
    reinit(_, pulse) {
      const output = pulse.materialize().fork(), fields = _.fields, query = _.query, indices = this._indices, dims = this._dims, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), out = output.rem = output.add, mod = output.mod, m = query.length, adds = {};
      let add, index, key, mods, remMap, modMap, i, n, f;
      // set prev to current state
      prev.set(curr);
      // if pulse has remove tuples, process them first
      if (pulse.rem.length) {
        remMap = this.remove(_, pulse, output);
      }
      // if pulse has added tuples, add them to state
      if (pulse.add.length) {
        bits.add(pulse.add);
      }
      // if pulse has modified tuples, create an index map
      if (pulse.mod.length) {
        modMap = {};
        for ((mods = pulse.mod, i = 0, n = mods.length); i < n; ++i) {
          modMap[mods[i]._index] = 1;
        }
      }
      // re-initialize indices as needed, update curr bitmap
      for (i = 0; i < m; ++i) {
        f = fields[i];
        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
          key = f.fname;
          if (!(add = adds[key])) {
            indices[key] = index = SortedIndex();
            adds[key] = add = index.insert(f, pulse.source, 0);
          }
          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
        }
      }
      // visit each tuple
      // if filter state changed, push index to add/rem
      // else if in mod and passes a filter, push index to mod
      for ((i = 0, n = bits.data().length); i < n; ++i) {
        if (remMap[i]) {
          // skip if removed tuple
          continue;
        } else if (prev[i] !== curr[i]) {
          // add if state changed
          out.push(i);
        } else if (modMap[i] && curr[i] !== all) {
          // otherwise, pass mods through
          mod.push(i);
        }
      }
      bits.mask = (1 << m) - 1;
      return output;
    },
    eval(_, pulse) {
      const output = pulse.materialize().fork(), m = this._dims.length;
      let mask = 0;
      if (pulse.rem.length) {
        this.remove(_, pulse, output);
        mask |= (1 << m) - 1;
      }
      if (_.modified('query') && !_.modified('fields')) {
        mask |= this.update(_, pulse, output);
      }
      if (pulse.add.length) {
        this.insert(_, pulse, output);
        mask |= (1 << m) - 1;
      }
      if (pulse.mod.length) {
        this.modify(pulse, output);
        mask |= (1 << m) - 1;
      }
      this.value.mask = mask;
      return output;
    },
    insert(_, pulse, output) {
      const tuples = pulse.add, bits = this.value, dims = this._dims, indices = this._indices, fields = _.fields, adds = {}, out = output.add, n = bits.size() + tuples.length, m = dims.length;
      let k = bits.size(), j, key, add;
      // resize bitmaps and add tuples as needed
      bits.resize(n, m);
      bits.add(tuples);
      const curr = bits.curr(), prev = bits.prev(), all = bits.all();
      // add to dimensional indices
      for (j = 0; j < m; ++j) {
        key = fields[j].fname;
        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
        dims[j].onAdd(add, curr);
      }
      // set previous filters, output if passes at least one filter
      for (; k < n; ++k) {
        prev[k] = all;
        if (curr[k] !== all) out.push(k);
      }
    },
    modify(pulse, output) {
      const out = output.mod, bits = this.value, curr = bits.curr(), all = bits.all(), tuples = pulse.mod;
      let i, n, k;
      for ((i = 0, n = tuples.length); i < n; ++i) {
        k = tuples[i]._index;
        if (curr[k] !== all) out.push(k);
      }
    },
    remove(_, pulse, output) {
      const indices = this._indices, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), map = {}, out = output.rem, tuples = pulse.rem;
      let i, n, k, f;
      // process tuples, output if passes at least one filter
      for ((i = 0, n = tuples.length); i < n; ++i) {
        k = tuples[i]._index;
        map[k] = 1;
        // build index map
        prev[k] = f = curr[k];
        curr[k] = all;
        if (f !== all) out.push(k);
      }
      // remove from dimensional indices
      for (k in indices) {
        indices[k].remove(n, map);
      }
      this.reindex(pulse, n, map);
      return map;
    },
    // reindex filters and indices after propagation completes
    // reindex filters and indices after propagation completes
    reindex(pulse, num, map) {
      const indices = this._indices, bits = this.value;
      pulse.runAfter(() => {
        const indexMap = bits.remove(num, map);
        for (const key in indices) indices[key].reindex(indexMap);
      });
    },
    update(_, pulse, output) {
      const dims = this._dims, query = _.query, stamp = pulse.stamp, m = dims.length;
      let mask = 0, i, q;
      // survey how many queries have changed
      output.filters = 0;
      for (q = 0; q < m; ++q) {
        if (_.modified('query', q)) {
          i = q;
          ++mask;
        }
      }
      if (mask === 1) {
        // only one query changed, use more efficient update
        mask = dims[i].one;
        this.incrementOne(dims[i], query[i], output.add, output.rem);
      } else {
        // multiple queries changed, perform full record keeping
        for ((q = 0, mask = 0); q < m; ++q) {
          if (!_.modified('query', q)) continue;
          mask |= dims[q].one;
          this.incrementAll(dims[q], query[q], stamp, output.add);
          output.rem = output.add;
        }
      }
      return mask;
    },
    incrementAll(dim, query, stamp, out) {
      const bits = this.value, seen = bits.seen(), curr = bits.curr(), prev = bits.prev(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
      let i, j, k;
      // Fast incremental update based on previous lo index.
      if (lo1 < lo0) {
        for ((i = lo1, j = Math.min(lo0, hi1)); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      } else if (lo1 > lo0) {
        for ((i = lo0, j = Math.min(lo1, hi0)); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      }
      // Fast incremental update based on previous hi index.
      if (hi1 > hi0) {
        for ((i = Math.max(lo1, hi0), j = hi1); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      } else if (hi1 < hi0) {
        for ((i = Math.max(lo0, hi1), j = hi0); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      }
      dim.range = query.slice();
    },
    incrementOne(dim, query, add, rem) {
      const bits = this.value, curr = bits.curr(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
      let i, j, k;
      // Fast incremental update based on previous lo index.
      if (lo1 < lo0) {
        for ((i = lo1, j = Math.min(lo0, hi1)); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          add.push(k);
        }
      } else if (lo1 > lo0) {
        for ((i = lo0, j = Math.min(lo1, hi0)); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          rem.push(k);
        }
      }
      // Fast incremental update based on previous hi index.
      if (hi1 > hi0) {
        for ((i = Math.max(lo1, hi0), j = hi1); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          add.push(k);
        }
      } else if (hi1 < hi0) {
        for ((i = Math.max(lo0, hi1), j = hi0); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          rem.push(k);
        }
      }
      dim.range = query.slice();
    }
  });
  /**
  * Selectively filters tuples by resolving against a filter bitmap.
  * Useful for processing the output of a cross-filter transform.
  * @constructor
  * @param {object} params - The parameters for this operator.
  * @param {object} params.ignore - A bit mask indicating which filters to ignore.
  * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
  *   parameter value is a reference to a {@link CrossFilter} transform.
  */
  function ResolveFilter(params) {
    vegaDataflow.Transform.call(this, null, params);
  }
  ResolveFilter.Definition = {
    'type': 'ResolveFilter',
    'metadata': {},
    'params': [{
      'name': 'ignore',
      'type': 'number',
      'required': true,
      'description': 'A bit mask indicating which filters to ignore.'
    }, {
      'name': 'filter',
      'type': 'object',
      'required': true,
      'description': 'Per-tuple filter bitmaps from a CrossFilter transform.'
    }]
  };
  vegaUtil.inherits(ResolveFilter, vegaDataflow.Transform, {
    transform(_, pulse) {
      const ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore
      bitmap = _.filter, mask = bitmap.mask;
      // exit early if no relevant filter changes
      if ((mask & ignore) === 0) return pulse.StopPropagation;
      const output = pulse.fork(pulse.ALL), data = bitmap.data(), curr = bitmap.curr(), prev = bitmap.prev(), pass = k => !(curr[k] & ignore) ? data[k] : null;
      // propagate all mod tuples that pass the filter
      output.filter(output.MOD, pass);
      // determine add & rem tuples via filter functions
      // for efficiency, we do *not* populate new arrays,
      // instead we add filter functions applied downstream
      if (!(mask & mask - 1)) {
        // only one filter changed
        output.filter(output.ADD, pass);
        output.filter(output.REM, k => (curr[k] & ignore) === mask ? data[k] : null);
      } else {
        // multiple filters changed
        output.filter(output.ADD, k => {
          const c = curr[k] & ignore, f = !c && c ^ prev[k] & ignore;
          return f ? data[k] : null;
        });
        output.filter(output.REM, k => {
          const c = curr[k] & ignore, f = c && !(c ^ (c ^ prev[k] & ignore));
          return f ? data[k] : null;
        });
      }
      // add filter to source data in case of reflow...
      return output.filter(output.SOURCE, t => pass(t._index));
    }
  });
  exports.crossfilter = CrossFilter;
  exports.resolvefilter = ResolveFilter;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"d3-array":"7CLUA","vega-dataflow":"1Owpt","vega-util":"4BD5d"}],"5bB4x":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-scenegraph'), require('d3-array'), require('vega-functions'), require('vega-runtime'), require('d3-timer'), require('vega-format')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-scenegraph', 'd3-array', 'vega-functions', 'vega-runtime', 'd3-timer', 'vega-format'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.d3, global.vega, global.vega, global.d3, global.vega));
})(this, function (exports, vegaUtil, vegaDataflow, vegaScenegraph, d3Array, vegaFunctions, vegaRuntime, d3Timer, vegaFormat) {
  "use strict";
  // initialize aria role and label attributes
  function initializeAria(view) {
    const el = view.container();
    if (el) {
      el.setAttribute('role', 'graphics-document');
      el.setAttribute('aria-roleDescription', 'visualization');
      ariaLabel(el, view.description());
    }
  }
  // update aria-label if we have a DOM container element
  function ariaLabel(el, desc) {
    if (el) desc == null ? el.removeAttribute('aria-label') : el.setAttribute('aria-label', desc);
  }
  function background(view) {
    // respond to background signal
    view.add(null, _ => {
      view._background = _.bg;
      view._resize = 1;
      return _.bg;
    }, {
      bg: view._signals.background
    });
  }
  const Default = 'default';
  function cursor(view) {
    // get cursor signal, add to dataflow if needed
    const cursor = view._signals.cursor || (view._signals.cursor = view.add({
      user: Default,
      item: null
    }));
    // evaluate cursor on each mousemove event
    view.on(view.events('view', 'mousemove'), cursor, (_, event) => {
      const value = cursor.value, user = value ? vegaUtil.isString(value) ? value : value.user : Default, item = event.item && event.item.cursor || null;
      return value && user === value.user && item == value.item ? value : {
        user: user,
        item: item
      };
    });
    // when cursor signal updates, set visible cursor
    view.add(null, function (_) {
      let user = _.cursor, item = this.value;
      if (!vegaUtil.isString(user)) {
        item = user.item;
        user = user.user;
      }
      setCursor(view, user && user !== Default ? user : item || user);
      return item;
    }, {
      cursor: cursor
    });
  }
  function setCursor(view, cursor) {
    const el = view.globalCursor() ? typeof document !== 'undefined' && document.body : view.container();
    if (el) {
      return cursor == null ? el.style.removeProperty('cursor') : el.style.cursor = cursor;
    }
  }
  function dataref(view, name) {
    var data = view._runtime.data;
    if (!vegaUtil.hasOwnProperty(data, name)) {
      vegaUtil.error('Unrecognized data set: ' + name);
    }
    return data[name];
  }
  function data(name, values) {
    return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, vegaDataflow.changeset().remove(vegaUtil.truthy).insert(values));
  }
  function change(name, changes) {
    if (!vegaDataflow.isChangeSet(changes)) {
      vegaUtil.error('Second argument to changes must be a changeset.');
    }
    const dataset = dataref(this, name);
    dataset.modified = true;
    return this.pulse(dataset.input, changes);
  }
  function insert(name, _) {
    return change.call(this, name, vegaDataflow.changeset().insert(_));
  }
  function remove(name, _) {
    return change.call(this, name, vegaDataflow.changeset().remove(_));
  }
  function width(view) {
    var padding = view.padding();
    return Math.max(0, view._viewWidth + padding.left + padding.right);
  }
  function height(view) {
    var padding = view.padding();
    return Math.max(0, view._viewHeight + padding.top + padding.bottom);
  }
  function offset(view) {
    var padding = view.padding(), origin = view._origin;
    return [padding.left + origin[0], padding.top + origin[1]];
  }
  function resizeRenderer(view) {
    var origin = offset(view), w = width(view), h = height(view);
    view._renderer.background(view.background());
    view._renderer.resize(w, h, origin);
    view._handler.origin(origin);
    view._resizeListeners.forEach(handler => {
      try {
        handler(w, h);
      } catch (error) {
        view.error(error);
      }
    });
  }
  /**
  * Extend an event with additional view-specific methods.
  * Adds a new property ('vega') to an event that provides a number
  * of methods for querying information about the current interaction.
  * The vega object provides the following methods:
  *   view - Returns the backing View instance.
  *   item - Returns the currently active scenegraph item (if any).
  *   group - Returns the currently active scenegraph group (if any).
  *     This method accepts a single string-typed argument indicating the name
  *     of the desired parent group. The scenegraph will be traversed from
  *     the item up towards the root to search for a matching group. If no
  *     argument is provided the enclosing group for the active item is
  *     returned, unless the item it itself a group, in which case it is
  *     returned directly.
  *   xy - Returns a two-element array containing the x and y coordinates for
  *     mouse or touch events. For touch events, this is based on the first
  *     elements in the changedTouches array. This method accepts a single
  *     argument: either an item instance or mark name that should serve as
  *     the reference coordinate system. If no argument is provided the
  *     top-level view coordinate system is assumed.
  *   x - Returns the current x-coordinate, accepts the same arguments as xy.
  *   y - Returns the current y-coordinate, accepts the same arguments as xy.
  * @param {Event} event - The input event to extend.
  * @param {Item} item - The currently active scenegraph item (if any).
  * @return {Event} - The extended input event.
  */
  function eventExtend(view, event, item) {
    var r = view._renderer, el = r && r.canvas(), p, e, translate;
    if (el) {
      translate = offset(view);
      e = event.changedTouches ? event.changedTouches[0] : event;
      p = vegaScenegraph.point(e, el);
      p[0] -= translate[0];
      p[1] -= translate[1];
    }
    event.dataflow = view;
    event.item = item;
    event.vega = extension(view, item, p);
    return event;
  }
  function extension(view, item, point) {
    const itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;
    function group(name) {
      var g = itemGroup, i;
      if (name) for (i = item; i; i = i.mark.group) {
        if (i.mark.name === name) {
          g = i;
          break;
        }
      }
      return g && g.mark && g.mark.interactive ? g : {};
    }
    function xy(item) {
      if (!item) return point;
      if (vegaUtil.isString(item)) item = group(item);
      const p = point.slice();
      while (item) {
        p[0] -= item.x || 0;
        p[1] -= item.y || 0;
        item = item.mark && item.mark.group;
      }
      return p;
    }
    return {
      view: vegaUtil.constant(view),
      item: vegaUtil.constant(item || ({})),
      group: group,
      xy: xy,
      x: item => xy(item)[0],
      y: item => xy(item)[1]
    };
  }
  const VIEW = 'view', TIMER = 'timer', WINDOW = 'window', NO_TRAP = {
    trap: false
  };
  /**
  * Initialize event handling configuration.
  * @param {object} config - The configuration settings.
  * @return {object}
  */
  function initializeEventConfig(config) {
    const events = vegaUtil.extend({
      defaults: {}
    }, config);
    const unpack = (obj, keys) => {
      keys.forEach(k => {
        if (vegaUtil.isArray(obj[k])) obj[k] = vegaUtil.toSet(obj[k]);
      });
    };
    unpack(events.defaults, ['prevent', 'allow']);
    unpack(events, ['view', 'window', 'selector']);
    return events;
  }
  function trackEventListener(view, sources, type, handler) {
    view._eventListeners.push({
      type: type,
      sources: vegaUtil.array(sources),
      handler: handler
    });
  }
  function prevent(view, type) {
    var def = view._eventConfig.defaults, prevent = def.prevent, allow = def.allow;
    return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
  }
  function permit(view, key, type) {
    const rule = view._eventConfig && view._eventConfig[key];
    if (rule === false || vegaUtil.isObject(rule) && !rule[type]) {
      view.warn(`Blocked ${key} ${type} event listener.`);
      return false;
    }
    return true;
  }
  /**
  * Create a new event stream from an event source.
  * @param {object} source - The event source to monitor.
  * @param {string} type - The event type.
  * @param {function(object): boolean} [filter] - Event filter function.
  * @return {EventStream}
  */
  function events(source, type, filter) {
    var view = this, s = new vegaDataflow.EventStream(filter), send = function (e, item) {
      view.runAsync(null, () => {
        if (source === VIEW && prevent(view, type)) {
          e.preventDefault();
        }
        s.receive(eventExtend(view, e, item));
      });
    }, sources;
    if (source === TIMER) {
      if (permit(view, 'timer', type)) {
        view.timer(send, type);
      }
    } else if (source === VIEW) {
      if (permit(view, 'view', type)) {
        // send traps errors, so use {trap: false} option
        view.addEventListener(type, send, NO_TRAP);
      }
    } else {
      if (source === WINDOW) {
        if (permit(view, 'window', type) && typeof window !== 'undefined') {
          sources = [window];
        }
      } else if (typeof document !== 'undefined') {
        if (permit(view, 'selector', type)) {
          sources = document.querySelectorAll(source);
        }
      }
      if (!sources) {
        view.warn('Can not resolve event source: ' + source);
      } else {
        for (var i = 0, n = sources.length; i < n; ++i) {
          sources[i].addEventListener(type, send);
        }
        trackEventListener(view, sources, type, send);
      }
    }
    return s;
  }
  function itemFilter(event) {
    return event.item;
  }
  function markTarget(event) {
    // grab upstream collector feeding the mark operator
    return event.item.mark.source;
  }
  function invoke(name) {
    return function (_, event) {
      return event.vega.view().changeset().encode(event.item, name);
    };
  }
  function hover(hoverSet, leaveSet) {
    hoverSet = [hoverSet || 'hover'];
    leaveSet = [leaveSet || 'update', hoverSet[0]];
    // invoke hover set upon mouseover
    this.on(this.events('view', 'mouseover', itemFilter), markTarget, invoke(hoverSet));
    // invoke leave set upon mouseout
    this.on(this.events('view', 'mouseout', itemFilter), markTarget, invoke(leaveSet));
    return this;
  }
  /**
  * Finalize a View instance that is being removed.
  * Cancel any running timers.
  * Remove all external event listeners.
  * Remove any currently displayed tooltip.
  */
  function finalize() {
    var tooltip = this._tooltip, timers = this._timers, listeners = this._eventListeners, n, m, e;
    n = timers.length;
    while (--n >= 0) {
      timers[n].stop();
    }
    n = listeners.length;
    while (--n >= 0) {
      e = listeners[n];
      m = e.sources.length;
      while (--m >= 0) {
        e.sources[m].removeEventListener(e.type, e.handler);
      }
    }
    if (tooltip) {
      tooltip.call(this, this._handler, null, null, null);
    }
    return this;
  }
  function element(tag, attr, text) {
    const el = document.createElement(tag);
    for (const key in attr) el.setAttribute(key, attr[key]);
    if (text != null) el.textContent = text;
    return el;
  }
  const BindClass = 'vega-bind', NameClass = 'vega-bind-name', RadioClass = 'vega-bind-radio';
  /**
  * Bind a signal to an external HTML input element. The resulting two-way
  * binding will propagate input changes to signals, and propagate signal
  * changes to the input element state. If this view instance has no parent
  * element, we assume the view is headless and no bindings are created.
  * @param {Element|string} el - The parent DOM element to which the input
  *   element should be appended as a child. If string-valued, this argument
  *   will be treated as a CSS selector. If null or undefined, the parent
  *   element of this view will be used as the element.
  * @param {object} param - The binding parameters which specify the signal
  *   to bind to, the input element type, and type-specific configuration.
  * @return {View} - This view instance.
  */
  function bind(view, el, binding) {
    if (!el) return;
    const param = binding.param;
    let bind = binding.state;
    if (!bind) {
      bind = binding.state = {
        elements: null,
        active: false,
        set: null,
        update: value => {
          if (value != view.signal(param.signal)) {
            view.runAsync(null, () => {
              bind.source = true;
              view.signal(param.signal, value);
            });
          }
        }
      };
      if (param.debounce) {
        bind.update = vegaUtil.debounce(param.debounce, bind.update);
      }
    }
    const create = param.input == null && param.element ? target : generate;
    create(bind, el, param, view);
    if (!bind.active) {
      view.on(view._signals[param.signal], null, () => {
        bind.source ? bind.source = false : bind.set(view.signal(param.signal));
      });
      bind.active = true;
    }
    return bind;
  }
  /**
  * Bind the signal to an external EventTarget.
  */
  function target(bind, node, param, view) {
    const type = param.event || 'input';
    const handler = () => bind.update(node.value);
    // initialize signal value to external input value
    view.signal(param.signal, node.value);
    // listen for changes on the element
    node.addEventListener(type, handler);
    // register with view, so we can remove it upon finalization
    trackEventListener(view, node, type, handler);
    // propagate change to element
    bind.set = value => {
      node.value = value;
      node.dispatchEvent(event(type));
    };
  }
  function event(type) {
    return typeof Event !== 'undefined' ? new Event(type) : {
      type
    };
  }
  /**
  * Generate an HTML input form element and bind it to a signal.
  */
  function generate(bind, el, param, view) {
    const value = view.signal(param.signal);
    const div = element('div', {
      'class': BindClass
    });
    const wrapper = param.input === 'radio' ? div : div.appendChild(element('label'));
    wrapper.appendChild(element('span', {
      'class': NameClass
    }, param.name || param.signal));
    el.appendChild(div);
    let input = form;
    switch (param.input) {
      case 'checkbox':
        input = checkbox;
        break;
      case 'select':
        input = select;
        break;
      case 'radio':
        input = radio;
        break;
      case 'range':
        input = range;
        break;
    }
    input(bind, wrapper, param, value);
  }
  /**
  * Generates an arbitrary input form element.
  * The input type is controlled via user-provided parameters.
  */
  function form(bind, el, param, value) {
    const node = element('input');
    for (const key in param) {
      if (key !== 'signal' && key !== 'element') {
        node.setAttribute(key === 'input' ? 'type' : key, param[key]);
      }
    }
    node.setAttribute('name', param.signal);
    node.value = value;
    el.appendChild(node);
    node.addEventListener('input', () => bind.update(node.value));
    bind.elements = [node];
    bind.set = value => node.value = value;
  }
  /**
  * Generates a checkbox input element.
  */
  function checkbox(bind, el, param, value) {
    const attr = {
      type: 'checkbox',
      name: param.signal
    };
    if (value) attr.checked = true;
    const node = element('input', attr);
    el.appendChild(node);
    node.addEventListener('change', () => bind.update(node.checked));
    bind.elements = [node];
    bind.set = value => node.checked = !!value || null;
  }
  /**
  * Generates a selection list input element.
  */
  function select(bind, el, param, value) {
    const node = element('select', {
      name: param.signal
    }), labels = param.labels || [];
    param.options.forEach((option, i) => {
      const attr = {
        value: option
      };
      if (valuesEqual(option, value)) attr.selected = true;
      node.appendChild(element('option', attr, (labels[i] || option) + ''));
    });
    el.appendChild(node);
    node.addEventListener('change', () => {
      bind.update(param.options[node.selectedIndex]);
    });
    bind.elements = [node];
    bind.set = value => {
      for (let i = 0, n = param.options.length; i < n; ++i) {
        if (valuesEqual(param.options[i], value)) {
          node.selectedIndex = i;
          return;
        }
      }
    };
  }
  /**
  * Generates a radio button group.
  */
  function radio(bind, el, param, value) {
    const group = element('span', {
      'class': RadioClass
    }), labels = param.labels || [];
    el.appendChild(group);
    bind.elements = param.options.map((option, i) => {
      const attr = {
        type: 'radio',
        name: param.signal,
        value: option
      };
      if (valuesEqual(option, value)) attr.checked = true;
      const input = element('input', attr);
      input.addEventListener('change', () => bind.update(option));
      const label = element('label', {}, (labels[i] || option) + '');
      label.prepend(input);
      group.appendChild(label);
      return input;
    });
    bind.set = value => {
      const nodes = bind.elements, n = nodes.length;
      for (let i = 0; i < n; ++i) {
        if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
      }
    };
  }
  /**
  * Generates a slider input element.
  */
  function range(bind, el, param, value) {
    value = value !== undefined ? value : (+param.max + +param.min) / 2;
    const max = param.max != null ? param.max : Math.max(100, +value) || 100, min = param.min || Math.min(0, max, +value) || 0, step = param.step || d3Array.tickStep(min, max, 100);
    const node = element('input', {
      type: 'range',
      name: param.signal,
      min: min,
      max: max,
      step: step
    });
    node.value = value;
    const span = element('span', {}, +value);
    el.appendChild(node);
    el.appendChild(span);
    const update = () => {
      span.textContent = node.value;
      bind.update(+node.value);
    };
    // subscribe to both input and change
    node.addEventListener('input', update);
    node.addEventListener('change', update);
    bind.elements = [node];
    bind.set = value => {
      node.value = value;
      span.textContent = value;
    };
  }
  function valuesEqual(a, b) {
    return a === b || a + '' === b + '';
  }
  function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
    r = r || new constructor(view.loader());
    return r.initialize(el, width(view), height(view), offset(view), scaleFactor, opt).background(view.background());
  }
  function trap(view, fn) {
    return !fn ? null : function () {
      try {
        fn.apply(this, arguments);
      } catch (error) {
        view.error(error);
      }
    };
  }
  function initializeHandler(view, prevHandler, el, constructor) {
    // instantiate scenegraph handler
    const handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset(view), view);
    // transfer event handlers
    if (prevHandler) {
      prevHandler.handlers().forEach(h => {
        handler.on(h.type, h.handler);
      });
    }
    return handler;
  }
  function initialize(el, elBind) {
    const view = this, type = view._renderType, config = view._eventConfig.bind, module = vegaScenegraph.renderModule(type);
    // containing dom element
    el = view._el = el ? lookup(view, el, true) : null;
    // initialize aria attributes
    initializeAria(view);
    // select appropriate renderer & handler
    if (!module) view.error('Unrecognized renderer type: ' + type);
    const Handler = module.handler || vegaScenegraph.CanvasHandler, Renderer = el ? module.renderer : module.headless;
    // initialize renderer and input handler
    view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);
    view._handler = initializeHandler(view, view._handler, el, Handler);
    view._redraw = true;
    // initialize signal bindings
    if (el && config !== 'none') {
      elBind = elBind ? view._elBind = lookup(view, elBind, true) : el.appendChild(element('form', {
        'class': 'vega-bindings'
      }));
      view._bind.forEach(_ => {
        if (_.param.element && config !== 'container') {
          _.element = lookup(view, _.param.element, !!_.param.input);
        }
      });
      view._bind.forEach(_ => {
        bind(view, _.element || elBind, _);
      });
    }
    return view;
  }
  function lookup(view, el, clear) {
    if (typeof el === 'string') {
      if (typeof document !== 'undefined') {
        el = document.querySelector(el);
        if (!el) {
          view.error('Signal bind element not found: ' + el);
          return null;
        }
      } else {
        view.error('DOM document instance not found.');
        return null;
      }
    }
    if (el && clear) {
      try {
        el.innerHTML = '';
      } catch (e) {
        el = null;
        view.error(e);
      }
    }
    return el;
  }
  const number = _ => +_ || 0;
  const paddingObject = _ => ({
    top: _,
    bottom: _,
    left: _,
    right: _
  });
  function padding(_) {
    return vegaUtil.isObject(_) ? {
      top: number(_.top),
      bottom: number(_.bottom),
      left: number(_.left),
      right: number(_.right)
    } : paddingObject(number(_));
  }
  /**
  * Render the current scene in a headless fashion.
  * This method is asynchronous, returning a Promise instance.
  * @return {Promise} - A Promise that resolves to a renderer.
  */
  async function renderHeadless(view, type, scaleFactor, opt) {
    const module = vegaScenegraph.renderModule(type), ctr = module && module.headless;
    if (!ctr) vegaUtil.error('Unrecognized renderer type: ' + type);
    await view.runAsync();
    return initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
  }
  /**
  * Produce an image URL for the visualization. Depending on the type
  * parameter, the generated URL contains data for either a PNG or SVG image.
  * The URL can be used (for example) to download images of the visualization.
  * This method is asynchronous, returning a Promise instance.
  * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
  *   The 'canvas' and 'png' types are synonyms for a PNG image.
  * @return {Promise} - A promise that resolves to an image URL.
  */
  async function renderToImageURL(type, scaleFactor) {
    if (type !== vegaScenegraph.RenderType.Canvas && type !== vegaScenegraph.RenderType.SVG && type !== vegaScenegraph.RenderType.PNG) {
      vegaUtil.error('Unrecognized image type: ' + type);
    }
    const r = await renderHeadless(this, type, scaleFactor);
    return type === vegaScenegraph.RenderType.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png');
  }
  function toBlobURL(data, mime) {
    const blob = new Blob([data], {
      type: mime
    });
    return window.URL.createObjectURL(blob);
  }
  /**
  * Produce a Canvas instance containing a rendered visualization.
  * This method is asynchronous, returning a Promise instance.
  * @return {Promise} - A promise that resolves to a Canvas instance.
  */
  async function renderToCanvas(scaleFactor, opt) {
    const r = await renderHeadless(this, vegaScenegraph.RenderType.Canvas, scaleFactor, opt);
    return r.canvas();
  }
  /**
  * Produce a rendered SVG string of the visualization.
  * This method is asynchronous, returning a Promise instance.
  * @return {Promise} - A promise that resolves to an SVG string.
  */
  async function renderToSVG(scaleFactor) {
    const r = await renderHeadless(this, vegaScenegraph.RenderType.SVG, scaleFactor);
    return r.svg();
  }
  function runtime(view, spec, expr) {
    return vegaRuntime.context(view, vegaDataflow.transforms, vegaFunctions.functionContext, expr).parse(spec);
  }
  function scale(name) {
    var scales = this._runtime.scales;
    if (!vegaUtil.hasOwnProperty(scales, name)) {
      vegaUtil.error('Unrecognized scale or projection: ' + name);
    }
    return scales[name].value;
  }
  var Width = 'width', Height = 'height', Padding = 'padding', Skip = {
    skip: true
  };
  function viewWidth(view, width) {
    var a = view.autosize(), p = view.padding();
    return width - (a && a.contains === Padding ? p.left + p.right : 0);
  }
  function viewHeight(view, height) {
    var a = view.autosize(), p = view.padding();
    return height - (a && a.contains === Padding ? p.top + p.bottom : 0);
  }
  function initializeResize(view) {
    var s = view._signals, w = s[Width], h = s[Height], p = s[Padding];
    function resetSize() {
      view._autosize = view._resize = 1;
    }
    // respond to width signal
    view._resizeWidth = view.add(null, _ => {
      view._width = _.size;
      view._viewWidth = viewWidth(view, _.size);
      resetSize();
    }, {
      size: w
    });
    // respond to height signal
    view._resizeHeight = view.add(null, _ => {
      view._height = _.size;
      view._viewHeight = viewHeight(view, _.size);
      resetSize();
    }, {
      size: h
    });
    // respond to padding signal
    const resizePadding = view.add(null, resetSize, {
      pad: p
    });
    // set rank to run immediately after source signal
    view._resizeWidth.rank = w.rank + 1;
    view._resizeHeight.rank = h.rank + 1;
    resizePadding.rank = p.rank + 1;
  }
  function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
    this.runAfter(view => {
      let rerun = 0;
      // reset autosize flag
      view._autosize = 0;
      // width value changed: update signal, skip resize op
      if (view.width() !== width) {
        rerun = 1;
        view.signal(Width, width, Skip);
        // set width, skip update calc
        view._resizeWidth.skip(true);
      }
      // height value changed: update signal, skip resize op
      if (view.height() !== height) {
        rerun = 1;
        view.signal(Height, height, Skip);
        // set height, skip update calc
        view._resizeHeight.skip(true);
      }
      // view width changed: update view property, set resize flag
      if (view._viewWidth !== viewWidth) {
        view._resize = 1;
        view._viewWidth = viewWidth;
      }
      // view height changed: update view property, set resize flag
      if (view._viewHeight !== viewHeight) {
        view._resize = 1;
        view._viewHeight = viewHeight;
      }
      // origin changed: update view property, set resize flag
      if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
        view._resize = 1;
        view._origin = origin;
      }
      // run dataflow on width/height signal change
      if (rerun) view.run('enter');
      if (auto) view.runAfter(v => v.resize());
    }, false, 1);
  }
  /**
  * Get the current view state, consisting of signal values and/or data sets.
  * @param {object} [options] - Options flags indicating which state to export.
  *   If unspecified, all signals and data sets will be exported.
  * @param {function(string, Operator):boolean} [options.signals] - Optional
  *   predicate function for testing if a signal should be included in the
  *   exported state. If unspecified, all signals will be included, except for
  *   those named 'parent' or those which refer to a Transform value.
  * @param {function(string, object):boolean} [options.data] - Optional
  *   predicate function for testing if a data set's input should be included
  *   in the exported state. If unspecified, all data sets that have been
  *   explicitly modified will be included.
  * @param {boolean} [options.recurse=true] - Flag indicating if the exported
  *   state should recursively include state from group mark sub-contexts.
  * @return {object} - An object containing the exported state values.
  */
  function getState(options) {
    return this._runtime.getState(options || ({
      data: dataTest,
      signals: signalTest,
      recurse: true
    }));
  }
  function dataTest(name, data) {
    return data.modified && vegaUtil.isArray(data.input.value) && name.indexOf('_:vega:_');
  }
  function signalTest(name, op) {
    return !(name === 'parent' || op instanceof vegaDataflow.transforms.proxy);
  }
  /**
  * Sets the current view state and updates the view by invoking run.
  * @param {object} state - A state object containing signal and/or
  *   data set values, following the format used by the getState method.
  * @return {View} - This view instance.
  */
  function setState(state) {
    this.runAsync(null, v => {
      v._trigger = false;
      v._runtime.setState(state);
    }, v => {
      v._trigger = true;
    });
    return this;
  }
  function timer(callback, delay) {
    function tick(elapsed) {
      callback({
        timestamp: Date.now(),
        elapsed: elapsed
      });
    }
    this._timers.push(d3Timer.interval(tick, delay));
  }
  function defaultTooltip(handler, event, item, value) {
    const el = handler.element();
    if (el) el.setAttribute('title', formatTooltip(value));
  }
  function formatTooltip(value) {
    return value == null ? '' : vegaUtil.isArray(value) ? formatArray(value) : vegaUtil.isObject(value) && !vegaUtil.isDate(value) ? formatObject(value) : value + '';
  }
  function formatObject(obj) {
    return Object.keys(obj).map(key => {
      const v = obj[key];
      return key + ': ' + (vegaUtil.isArray(v) ? formatArray(v) : formatValue(v));
    }).join('\n');
  }
  function formatArray(value) {
    return '[' + value.map(formatValue).join(', ') + ']';
  }
  function formatValue(value) {
    return vegaUtil.isArray(value) ? '[\u2026]' : vegaUtil.isObject(value) && !vegaUtil.isDate(value) ? '{\u2026}' : value;
  }
  /**
  * Create a new View instance from a Vega dataflow runtime specification.
  * The generated View will not immediately be ready for display. Callers
  * should also invoke the initialize method (e.g., to set the parent
  * DOM element in browser-based deployment) and then invoke the run
  * method to evaluate the dataflow graph. Rendering will automatically
  * be performed upon dataflow runs.
  * @constructor
  * @param {object} spec - The Vega dataflow runtime specification.
  */
  function View(spec, options) {
    const view = this;
    options = options || ({});
    vegaDataflow.Dataflow.call(view);
    if (options.loader) view.loader(options.loader);
    if (options.logger) view.logger(options.logger);
    if (options.logLevel != null) view.logLevel(options.logLevel);
    if (options.locale || spec.locale) {
      const loc = vegaUtil.extend({}, spec.locale, options.locale);
      view.locale(vegaFormat.locale(loc.number, loc.time));
    }
    view._el = null;
    view._elBind = null;
    view._renderType = options.renderer || vegaScenegraph.RenderType.Canvas;
    view._scenegraph = new vegaScenegraph.Scenegraph();
    const root = view._scenegraph.root;
    // initialize renderer, handler and event management
    view._renderer = null;
    (view._tooltip = options.tooltip || defaultTooltip, view._redraw = true);
    view._handler = new vegaScenegraph.CanvasHandler().scene(root);
    view._globalCursor = false;
    view._preventDefault = false;
    view._timers = [];
    view._eventListeners = [];
    view._resizeListeners = [];
    // initialize event configuration
    view._eventConfig = initializeEventConfig(spec.eventConfig);
    view.globalCursor(view._eventConfig.globalCursor);
    // initialize dataflow graph
    const ctx = runtime(view, spec, options.expr);
    view._runtime = ctx;
    view._signals = ctx.signals;
    view._bind = (spec.bindings || []).map(_ => ({
      state: null,
      param: vegaUtil.extend({}, _)
    }));
    // initialize scenegraph
    if (ctx.root) ctx.root.set(root);
    root.source = ctx.data.root.input;
    view.pulse(ctx.data.root.input, view.changeset().insert(root.items));
    // initialize view size
    view._width = view.width();
    view._height = view.height();
    view._viewWidth = viewWidth(view, view._width);
    view._viewHeight = viewHeight(view, view._height);
    view._origin = [0, 0];
    view._resize = 0;
    view._autosize = 1;
    initializeResize(view);
    // initialize background color
    background(view);
    // initialize cursor
    cursor(view);
    // initialize view description
    view.description(spec.description);
    // initialize hover proessing, if requested
    if (options.hover) view.hover();
    // initialize DOM container(s) and renderer
    if (options.container) view.initialize(options.container, options.bind);
  }
  function lookupSignal(view, name) {
    return vegaUtil.hasOwnProperty(view._signals, name) ? view._signals[name] : vegaUtil.error('Unrecognized signal name: ' + vegaUtil.stringValue(name));
  }
  function findOperatorHandler(op, handler) {
    const h = (op._targets || []).filter(op => op._update && op._update.handler === handler);
    return h.length ? h[0] : null;
  }
  function addOperatorListener(view, name, op, handler) {
    let h = findOperatorHandler(op, handler);
    if (!h) {
      h = trap(view, () => handler(name, op.value));
      h.handler = handler;
      view.on(op, null, h);
    }
    return view;
  }
  function removeOperatorListener(view, op, handler) {
    const h = findOperatorHandler(op, handler);
    if (h) op._targets.remove(h);
    return view;
  }
  vegaUtil.inherits(View, vegaDataflow.Dataflow, {
    // -- DATAFLOW / RENDERING ----
    // -- DATAFLOW / RENDERING ----
    async evaluate(encode, prerun, postrun) {
      // evaluate dataflow and prerun
      await vegaDataflow.Dataflow.prototype.evaluate.call(this, encode, prerun);
      // render as needed
      if (this._redraw || this._resize) {
        try {
          if (this._renderer) {
            if (this._resize) {
              this._resize = 0;
              resizeRenderer(this);
            }
            await this._renderer.renderAsync(this._scenegraph.root);
          }
          this._redraw = false;
        } catch (e) {
          this.error(e);
        }
      }
      // evaluate postrun
      if (postrun) vegaDataflow.asyncCallback(this, postrun);
      return this;
    },
    dirty(item) {
      this._redraw = true;
      this._renderer && this._renderer.dirty(item);
    },
    // -- GET / SET ----
    // -- GET / SET ----
    description(text) {
      if (arguments.length) {
        const desc = text != null ? text + '' : null;
        if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);
        return this;
      }
      return this._desc;
    },
    container() {
      return this._el;
    },
    scenegraph() {
      return this._scenegraph;
    },
    origin() {
      return this._origin.slice();
    },
    signal(name, value, options) {
      const op = lookupSignal(this, name);
      return arguments.length === 1 ? op.value : this.update(op, value, options);
    },
    width(_) {
      return arguments.length ? this.signal('width', _) : this.signal('width');
    },
    height(_) {
      return arguments.length ? this.signal('height', _) : this.signal('height');
    },
    padding(_) {
      return arguments.length ? this.signal('padding', padding(_)) : padding(this.signal('padding'));
    },
    autosize(_) {
      return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
    },
    background(_) {
      return arguments.length ? this.signal('background', _) : this.signal('background');
    },
    renderer(type) {
      if (!arguments.length) return this._renderType;
      if (!vegaScenegraph.renderModule(type)) vegaUtil.error('Unrecognized renderer type: ' + type);
      if (type !== this._renderType) {
        this._renderType = type;
        this._resetRenderer();
      }
      return this;
    },
    tooltip(handler) {
      if (!arguments.length) return this._tooltip;
      if (handler !== this._tooltip) {
        this._tooltip = handler;
        this._resetRenderer();
      }
      return this;
    },
    loader(loader) {
      if (!arguments.length) return this._loader;
      if (loader !== this._loader) {
        vegaDataflow.Dataflow.prototype.loader.call(this, loader);
        this._resetRenderer();
      }
      return this;
    },
    resize() {
      // set flag to perform autosize
      this._autosize = 1;
      // touch autosize signal to ensure top-level ViewLayout runs
      return this.touch(lookupSignal(this, 'autosize'));
    },
    _resetRenderer() {
      if (this._renderer) {
        this._renderer = null;
        this.initialize(this._el, this._elBind);
      }
    },
    // -- SIZING ----
    _resizeView: resizeView,
    // -- EVENT HANDLING ----
    // -- EVENT HANDLING ----
    addEventListener(type, handler, options) {
      let callback = handler;
      if (!(options && options.trap === false)) {
        // wrap callback in error handler
        callback = trap(this, handler);
        callback.raw = handler;
      }
      this._handler.on(type, callback);
      return this;
    },
    removeEventListener(type, handler) {
      var handlers = this._handler.handlers(type), i = handlers.length, h, t;
      // search registered handlers, remove if match found
      while (--i >= 0) {
        t = handlers[i].type;
        h = handlers[i].handler;
        if (type === t && (handler === h || handler === h.raw)) {
          this._handler.off(t, h);
          break;
        }
      }
      return this;
    },
    addResizeListener(handler) {
      const l = this._resizeListeners;
      if (l.indexOf(handler) < 0) {
        // add handler if it isn't already registered
        // note: error trapping handled elsewhere, so
        // no need to wrap handlers here
        l.push(handler);
      }
      return this;
    },
    removeResizeListener(handler) {
      var l = this._resizeListeners, i = l.indexOf(handler);
      if (i >= 0) {
        l.splice(i, 1);
      }
      return this;
    },
    addSignalListener(name, handler) {
      return addOperatorListener(this, name, lookupSignal(this, name), handler);
    },
    removeSignalListener(name, handler) {
      return removeOperatorListener(this, lookupSignal(this, name), handler);
    },
    addDataListener(name, handler) {
      return addOperatorListener(this, name, dataref(this, name).values, handler);
    },
    removeDataListener(name, handler) {
      return removeOperatorListener(this, dataref(this, name).values, handler);
    },
    globalCursor(_) {
      if (arguments.length) {
        if (this._globalCursor !== !!_) {
          const prev = setCursor(this, null);
          // clear previous cursor
          this._globalCursor = !!_;
          if (prev) setCursor(this, prev);
        }
        return this;
      } else {
        return this._globalCursor;
      }
    },
    preventDefault(_) {
      if (arguments.length) {
        this._preventDefault = _;
        return this;
      } else {
        return this._preventDefault;
      }
    },
    timer,
    events,
    finalize,
    hover,
    // -- DATA ----
    data,
    change,
    insert,
    remove,
    // -- SCALES --
    scale,
    // -- INITIALIZATION ----
    initialize,
    // -- HEADLESS RENDERING ----
    toImageURL: renderToImageURL,
    toCanvas: renderToCanvas,
    toSVG: renderToSVG,
    // -- SAVE / RESTORE STATE ----
    getState,
    setState
  });
  exports.View = View;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-dataflow":"1Owpt","vega-scenegraph":"6y4N1","d3-array":"7CLUA","vega-functions":"4qZqy","vega-runtime":"1m2MK","d3-timer":"6ZuUH","vega-format":"2s7uE"}],"4qZqy":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-expression'), require('d3-geo'), require('d3-color'), require('vega-dataflow'), require('vega-scale'), require('vega-scenegraph'), require('vega-selections'), require('vega-statistics'), require('vega-time'), require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-expression', 'd3-geo', 'd3-color', 'vega-dataflow', 'vega-scale', 'vega-scenegraph', 'vega-selections', 'vega-statistics', 'vega-time', 'd3-array'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.d3, global.d3, global.vega, global.vega, global.vega, global.vega, global.vega, global.vega, global.d3));
})(this, function (exports, vegaUtil, vegaExpression, d3Geo, d3Color, vegaDataflow, vegaScale, vegaScenegraph, vegaSelections, vegaStatistics, vegaTime, d3Array) {
  "use strict";
  function data(name) {
    const data = this.context.data[name];
    return data ? data.values.value : [];
  }
  function indata(name, field, value) {
    const index = this.context.data[name]['index:' + field], entry = index ? index.value.get(value) : undefined;
    return entry ? entry.count : entry;
  }
  function setdata(name, tuples) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input;
    df.pulse(input, df.changeset().remove(vegaUtil.truthy).insert(tuples));
    return 1;
  }
  function encode(item, name, retval) {
    if (item) {
      const df = this.context.dataflow, target = item.mark.source;
      df.pulse(target, df.changeset().encode(item, name));
    }
    return retval !== undefined ? retval : item;
  }
  const wrap = method => function (value, spec) {
    const locale = this.context.dataflow.locale();
    return locale[method](spec)(value);
  };
  const format = wrap('format');
  const timeFormat = wrap('timeFormat');
  const utcFormat = wrap('utcFormat');
  const timeParse = wrap('timeParse');
  const utcParse = wrap('utcParse');
  const dateObj = new Date(2000, 0, 1);
  function time(month, day, specifier) {
    if (!Number.isInteger(month) || !Number.isInteger(day)) return '';
    dateObj.setYear(2000);
    dateObj.setMonth(month);
    dateObj.setDate(day);
    return timeFormat.call(this, dateObj, specifier);
  }
  function monthFormat(month) {
    return time.call(this, month, 1, '%B');
  }
  function monthAbbrevFormat(month) {
    return time.call(this, month, 1, '%b');
  }
  function dayFormat(day) {
    return time.call(this, 0, 2 + day, '%A');
  }
  function dayAbbrevFormat(day) {
    return time.call(this, 0, 2 + day, '%a');
  }
  const DataPrefix = ':';
  const IndexPrefix = '@';
  const ScalePrefix = '%';
  const SignalPrefix = '$';
  function dataVisitor(name, args, scope, params) {
    if (args[0].type !== vegaExpression.Literal) {
      vegaUtil.error('First argument to data functions must be a string literal.');
    }
    const data = args[0].value, dataName = DataPrefix + data;
    if (!vegaUtil.hasOwnProperty(dataName, params)) {
      try {
        params[dataName] = scope.getData(data).tuplesRef();
      } catch (err) {}
    }
  }
  function indataVisitor(name, args, scope, params) {
    if (args[0].type !== vegaExpression.Literal) vegaUtil.error('First argument to indata must be a string literal.');
    if (args[1].type !== vegaExpression.Literal) vegaUtil.error('Second argument to indata must be a string literal.');
    const data = args[0].value, field = args[1].value, indexName = IndexPrefix + field;
    if (!vegaUtil.hasOwnProperty(indexName, params)) {
      params[indexName] = scope.getData(data).indataRef(scope, field);
    }
  }
  function scaleVisitor(name, args, scope, params) {
    if (args[0].type === vegaExpression.Literal) {
      // add scale dependency
      addScaleDependency(scope, params, args[0].value);
    } else {
      // indirect scale lookup; add all scales as parameters
      for (name in scope.scales) {
        addScaleDependency(scope, params, name);
      }
    }
  }
  function addScaleDependency(scope, params, name) {
    const scaleName = ScalePrefix + name;
    if (!vegaUtil.hasOwnProperty(params, scaleName)) {
      try {
        params[scaleName] = scope.scaleRef(name);
      } catch (err) {}
    }
  }
  function getScale(name, ctx) {
    let s;
    return vegaUtil.isFunction(name) ? name : vegaUtil.isString(name) ? (s = ctx.scales[name]) && s.value : undefined;
  }
  function internalScaleFunctions(codegen, fnctx, visitors) {
    // add helper method to the 'this' expression function context
    fnctx.__bandwidth = s => s && s.bandwidth ? s.bandwidth() : 0;
    // register AST visitors for internal scale functions
    visitors._bandwidth = scaleVisitor;
    visitors._range = scaleVisitor;
    visitors._scale = scaleVisitor;
    // resolve scale reference directly to the signal hash argument
    const ref = arg => '_[' + (arg.type === vegaExpression.Literal ? vegaUtil.stringValue(ScalePrefix + arg.value) : vegaUtil.stringValue(ScalePrefix) + '+' + codegen(arg)) + ']';
    // define and return internal scale function code generators
    // these internal functions are called by mark encoders
    return {
      _bandwidth: args => `this.__bandwidth(${ref(args[0])})`,
      _range: args => `${ref(args[0])}.range()`,
      _scale: args => `${ref(args[0])}(${codegen(args[1])})`
    };
  }
  function geoMethod(methodName, globalMethod) {
    return function (projection, geojson, group) {
      if (projection) {
        // projection defined, use it
        const p = getScale(projection, (group || this).context);
        return p && p.path[methodName](geojson);
      } else {
        // projection undefined, use global method
        return globalMethod(geojson);
      }
    };
  }
  const geoArea = geoMethod('area', d3Geo.geoArea);
  const geoBounds = geoMethod('bounds', d3Geo.geoBounds);
  const geoCentroid = geoMethod('centroid', d3Geo.geoCentroid);
  function inScope(item) {
    const group = this.context.group;
    let value = false;
    if (group) while (item) {
      if (item === group) {
        value = true;
        break;
      }
      item = item.mark.group;
    }
    return value;
  }
  function log(df, method, args) {
    try {
      df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
    } catch (err) {
      df.warn(err);
    }
    return args[args.length - 1];
  }
  function warn() {
    return log(this.context.dataflow, 'warn', arguments);
  }
  function info() {
    return log(this.context.dataflow, 'info', arguments);
  }
  function debug() {
    return log(this.context.dataflow, 'debug', arguments);
  }
  function channel_luminance_value(channelValue) {
    const val = channelValue / 255;
    if (val <= 0.03928) {
      return val / 12.92;
    }
    return Math.pow((val + 0.055) / 1.055, 2.4);
  }
  function luminance(color) {
    const c = d3Color.rgb(color), r = channel_luminance_value(c.r), g = channel_luminance_value(c.g), b = channel_luminance_value(c.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  }
  // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  function contrast(color1, color2) {
    const lum1 = luminance(color1), lum2 = luminance(color2), lumL = Math.max(lum1, lum2), lumD = Math.min(lum1, lum2);
    return (lumL + 0.05) / (lumD + 0.05);
  }
  function merge() {
    const args = [].slice.call(arguments);
    args.unshift({});
    return vegaUtil.extend(...args);
  }
  function equal(a, b) {
    return a === b || a !== a && b !== b ? true : vegaUtil.isArray(a) ? vegaUtil.isArray(b) && a.length === b.length ? equalArray(a, b) : false : vegaUtil.isObject(a) && vegaUtil.isObject(b) ? equalObject(a, b) : false;
  }
  function equalArray(a, b) {
    for (let i = 0, n = a.length; i < n; ++i) {
      if (!equal(a[i], b[i])) return false;
    }
    return true;
  }
  function equalObject(a, b) {
    for (const key in a) {
      if (!equal(a[key], b[key])) return false;
    }
    return true;
  }
  function removePredicate(props) {
    return _ => equalObject(props, _);
  }
  function modify(name, insert, remove, toggle, modify, values) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input, stamp = df.stamp();
    let changes = data.changes, predicate, key;
    if (df._trigger === false || !(input.value.length || insert || toggle)) {
      // nothing to do!
      return 0;
    }
    if (!changes || changes.stamp < stamp) {
      data.changes = changes = df.changeset();
      changes.stamp = stamp;
      df.runAfter(() => {
        data.modified = true;
        df.pulse(input, changes).run();
      }, true, 1);
    }
    if (remove) {
      predicate = remove === true ? vegaUtil.truthy : vegaUtil.isArray(remove) || vegaDataflow.isTuple(remove) ? remove : removePredicate(remove);
      changes.remove(predicate);
    }
    if (insert) {
      changes.insert(insert);
    }
    if (toggle) {
      predicate = removePredicate(toggle);
      if (input.value.some(predicate)) {
        changes.remove(predicate);
      } else {
        changes.insert(toggle);
      }
    }
    if (modify) {
      for (key in values) {
        changes.modify(modify, key, values[key]);
      }
    }
    return 1;
  }
  function pinchDistance(event) {
    const t = event.touches, dx = t[0].clientX - t[1].clientX, dy = t[0].clientY - t[1].clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }
  function pinchAngle(event) {
    const t = event.touches;
    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
  }
  const accessors = {};
  function pluck(data, name) {
    const accessor = accessors[name] || (accessors[name] = vegaUtil.field(name));
    return vegaUtil.isArray(data) ? data.map(accessor) : accessor(data);
  }
  function array(seq) {
    return vegaUtil.isArray(seq) || ArrayBuffer.isView(seq) ? seq : null;
  }
  function sequence(seq) {
    return array(seq) || (vegaUtil.isString(seq) ? seq : null);
  }
  function join(seq, ...args) {
    return array(seq).join(...args);
  }
  function indexof(seq, ...args) {
    return sequence(seq).indexOf(...args);
  }
  function lastindexof(seq, ...args) {
    return sequence(seq).lastIndexOf(...args);
  }
  function slice(seq, ...args) {
    return sequence(seq).slice(...args);
  }
  function replace(str, pattern, repl) {
    if (vegaUtil.isFunction(repl)) vegaUtil.error('Function argument passed to replace.');
    return String(str).replace(pattern, repl);
  }
  function reverse(seq) {
    return array(seq).slice().reverse();
  }
  function bandspace(count, paddingInner, paddingOuter) {
    return vegaScale.bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);
  }
  function bandwidth(name, group) {
    const s = getScale(name, (group || this).context);
    return s && s.bandwidth ? s.bandwidth() : 0;
  }
  function copy(name, group) {
    const s = getScale(name, (group || this).context);
    return s ? s.copy() : undefined;
  }
  function domain(name, group) {
    const s = getScale(name, (group || this).context);
    return s ? s.domain() : [];
  }
  function invert(name, range, group) {
    const s = getScale(name, (group || this).context);
    return !s ? undefined : vegaUtil.isArray(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
  }
  function range(name, group) {
    const s = getScale(name, (group || this).context);
    return s && s.range ? s.range() : [];
  }
  function scale(name, value, group) {
    const s = getScale(name, (group || this).context);
    return s ? s(value) : undefined;
  }
  function scaleGradient(scale, p0, p1, count, group) {
    scale = getScale(scale, (group || this).context);
    const gradient = vegaScenegraph.Gradient(p0, p1);
    let stops = scale.domain(), min = stops[0], max = vegaUtil.peek(stops), fraction = vegaUtil.identity;
    if (!(max - min)) {
      // expand scale if domain has zero span, fix #1479
      scale = (scale.interpolator ? vegaScale.scale('sequential')().interpolator(scale.interpolator()) : vegaScale.scale('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);
    } else {
      fraction = vegaScale.scaleFraction(scale, min, max);
    }
    if (scale.ticks) {
      stops = scale.ticks(+count || 15);
      if (min !== stops[0]) stops.unshift(min);
      if (max !== vegaUtil.peek(stops)) stops.push(max);
    }
    stops.forEach(_ => gradient.stop(fraction(_), scale(_)));
    return gradient;
  }
  function geoShape(projection, geojson, group) {
    const p = getScale(projection, (group || this).context);
    return function (context) {
      return p ? p.path.context(context)(geojson) : '';
    };
  }
  function pathShape(path) {
    let p = null;
    return function (context) {
      return context ? vegaScenegraph.pathRender(context, p = p || vegaScenegraph.pathParse(path)) : path;
    };
  }
  const datum = d => d.data;
  function treeNodes(name, context) {
    const tree = data.call(context, name);
    return tree.root && tree.root.lookup || ({});
  }
  function treePath(name, source, target) {
    const nodes = treeNodes(name, this), s = nodes[source], t = nodes[target];
    return s && t ? s.path(t).map(datum) : undefined;
  }
  function treeAncestors(name, node) {
    const n = treeNodes(name, this)[node];
    return n ? n.ancestors().map(datum) : undefined;
  }
  const _window = () => typeof window !== 'undefined' && window || null;
  function screen() {
    const w = _window();
    return w ? w.screen : {};
  }
  function windowSize() {
    const w = _window();
    return w ? [w.innerWidth, w.innerHeight] : [undefined, undefined];
  }
  function containerSize() {
    const view = this.context.dataflow, el = view.container && view.container();
    return el ? [el.clientWidth, el.clientHeight] : [undefined, undefined];
  }
  function intersect(b, opt, group) {
    if (!b) return [];
    const [u, v] = b, box = new vegaScenegraph.Bounds().set(u[0], u[1], v[0], v[1]), scene = group || this.context.dataflow.scenegraph().root;
    return vegaScenegraph.intersect(scene, box, filter(opt));
  }
  function filter(opt) {
    let p = null;
    if (opt) {
      const types = vegaUtil.array(opt.marktype), names = vegaUtil.array(opt.markname);
      p = _ => (!types.length || types.some(t => _.marktype === t)) && (!names.length || names.some(s => _.name === s));
    }
    return p;
  }
  const functionContext = {
    random() {
      return vegaStatistics.random();
    },
    // override default
    cumulativeNormal: vegaStatistics.cumulativeNormal,
    cumulativeLogNormal: vegaStatistics.cumulativeLogNormal,
    cumulativeUniform: vegaStatistics.cumulativeUniform,
    densityNormal: vegaStatistics.densityNormal,
    densityLogNormal: vegaStatistics.densityLogNormal,
    densityUniform: vegaStatistics.densityUniform,
    quantileNormal: vegaStatistics.quantileNormal,
    quantileLogNormal: vegaStatistics.quantileLogNormal,
    quantileUniform: vegaStatistics.quantileUniform,
    sampleNormal: vegaStatistics.sampleNormal,
    sampleLogNormal: vegaStatistics.sampleLogNormal,
    sampleUniform: vegaStatistics.sampleUniform,
    isArray: vegaUtil.isArray,
    isBoolean: vegaUtil.isBoolean,
    isDate: vegaUtil.isDate,
    isDefined(_) {
      return _ !== undefined;
    },
    isNumber: vegaUtil.isNumber,
    isObject: vegaUtil.isObject,
    isRegExp: vegaUtil.isRegExp,
    isString: vegaUtil.isString,
    isTuple: vegaDataflow.isTuple,
    isValid(_) {
      return _ != null && _ === _;
    },
    toBoolean: vegaUtil.toBoolean,
    toDate: vegaUtil.toDate,
    toNumber: vegaUtil.toNumber,
    toString: vegaUtil.toString,
    indexof,
    join,
    lastindexof,
    replace,
    reverse,
    slice,
    flush: vegaUtil.flush,
    lerp: vegaUtil.lerp,
    merge,
    pad: vegaUtil.pad,
    peek: vegaUtil.peek,
    pluck,
    span: vegaUtil.span,
    inrange: vegaUtil.inrange,
    truncate: vegaUtil.truncate,
    rgb: d3Color.rgb,
    lab: d3Color.lab,
    hcl: d3Color.hcl,
    hsl: d3Color.hsl,
    luminance,
    contrast,
    sequence: d3Array.range,
    format,
    utcFormat,
    utcParse,
    utcOffset: vegaTime.utcOffset,
    utcSequence: vegaTime.utcSequence,
    timeFormat,
    timeParse,
    timeOffset: vegaTime.timeOffset,
    timeSequence: vegaTime.timeSequence,
    timeUnitSpecifier: vegaTime.timeUnitSpecifier,
    monthFormat,
    monthAbbrevFormat,
    dayFormat,
    dayAbbrevFormat,
    quarter: vegaUtil.quarter,
    utcquarter: vegaUtil.utcquarter,
    week: vegaTime.week,
    utcweek: vegaTime.utcweek,
    dayofyear: vegaTime.dayofyear,
    utcdayofyear: vegaTime.utcdayofyear,
    warn,
    info,
    debug,
    extent: vegaUtil.extent,
    inScope,
    intersect,
    clampRange: vegaUtil.clampRange,
    pinchDistance,
    pinchAngle,
    screen,
    containerSize,
    windowSize,
    bandspace,
    setdata,
    pathShape,
    panLinear: vegaUtil.panLinear,
    panLog: vegaUtil.panLog,
    panPow: vegaUtil.panPow,
    panSymlog: vegaUtil.panSymlog,
    zoomLinear: vegaUtil.zoomLinear,
    zoomLog: vegaUtil.zoomLog,
    zoomPow: vegaUtil.zoomPow,
    zoomSymlog: vegaUtil.zoomSymlog,
    encode,
    modify
  };
  const eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'], // event functions
  eventPrefix = 'event.vega.', // event function prefix
  thisPrefix = 'this.', // function context prefix
  astVisitors = {};
  // AST visitors for dependency analysis
  // export code generator parameters
  const codegenParams = {
    forbidden: ['_'],
    allowed: ['datum', 'event', 'item'],
    fieldvar: 'datum',
    globalvar: id => `_[${vegaUtil.stringValue(SignalPrefix + id)}]`,
    functions: buildFunctions,
    constants: vegaExpression.constants,
    visitors: astVisitors
  };
  // export code generator
  const codeGenerator = vegaExpression.codegen(codegenParams);
  // Build expression function registry
  function buildFunctions(codegen) {
    const fn = vegaExpression.functions(codegen);
    eventFunctions.forEach(name => fn[name] = eventPrefix + name);
    for (const name in functionContext) {
      fn[name] = thisPrefix + name;
    }
    vegaUtil.extend(fn, internalScaleFunctions(codegen, functionContext, astVisitors));
    return fn;
  }
  // Register an expression function
  function expressionFunction(name, fn, visitor) {
    if (arguments.length === 1) {
      return functionContext[name];
    }
    // register with the functionContext
    functionContext[name] = fn;
    // if there is an astVisitor register that, too
    if (visitor) astVisitors[name] = visitor;
    // if the code generator has already been initialized,
    // we need to also register the function with it
    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
    return this;
  }
  // register expression functions with ast visitors
  expressionFunction('bandwidth', bandwidth, scaleVisitor);
  expressionFunction('copy', copy, scaleVisitor);
  expressionFunction('domain', domain, scaleVisitor);
  expressionFunction('range', range, scaleVisitor);
  expressionFunction('invert', invert, scaleVisitor);
  expressionFunction('scale', scale, scaleVisitor);
  expressionFunction('gradient', scaleGradient, scaleVisitor);
  expressionFunction('geoArea', geoArea, scaleVisitor);
  expressionFunction('geoBounds', geoBounds, scaleVisitor);
  expressionFunction('geoCentroid', geoCentroid, scaleVisitor);
  expressionFunction('geoShape', geoShape, scaleVisitor);
  expressionFunction('indata', indata, indataVisitor);
  expressionFunction('data', data, dataVisitor);
  expressionFunction('treePath', treePath, dataVisitor);
  expressionFunction('treeAncestors', treeAncestors, dataVisitor);
  // register Vega-Lite selection functions
  expressionFunction('vlSelectionTest', vegaSelections.selectionTest, vegaSelections.selectionVisitor);
  expressionFunction('vlSelectionIdTest', vegaSelections.selectionIdTest, vegaSelections.selectionVisitor);
  expressionFunction('vlSelectionResolve', vegaSelections.selectionResolve, vegaSelections.selectionVisitor);
  expressionFunction('vlSelectionTuples', vegaSelections.selectionTuples);
  function parser(expr, scope) {
    const params = {};
    // parse the expression to an abstract syntax tree (ast)
    let ast;
    try {
      expr = vegaUtil.isString(expr) ? expr : vegaUtil.stringValue(expr) + '';
      ast = vegaExpression.parse(expr);
    } catch (err) {
      vegaUtil.error('Expression parse error: ' + expr);
    }
    // analyze ast function calls for dependencies
    ast.visit(node => {
      if (node.type !== vegaExpression.CallExpression) return;
      const name = node.callee.name, visit = codegenParams.visitors[name];
      if (visit) visit(name, node.arguments, scope, params);
    });
    // perform code generation
    const gen = codeGenerator(ast);
    // collect signal dependencies
    gen.globals.forEach(name => {
      const signalName = SignalPrefix + name;
      if (!vegaUtil.hasOwnProperty(params, signalName) && scope.getSignal(name)) {
        params[signalName] = scope.signalRef(name);
      }
    });
    // return generated expression code and dependencies
    return {
      $expr: vegaUtil.extend({
        code: gen.code
      }, scope.options.ast ? {
        ast
      } : null),
      $fields: gen.fields,
      $params: params
    };
  }
  exports.DataPrefix = DataPrefix;
  exports.IndexPrefix = IndexPrefix;
  exports.ScalePrefix = ScalePrefix;
  exports.SignalPrefix = SignalPrefix;
  exports.bandspace = bandspace;
  exports.bandwidth = bandwidth;
  exports.codeGenerator = codeGenerator;
  exports.codegenParams = codegenParams;
  exports.containerSize = containerSize;
  exports.contrast = contrast;
  exports.copy = copy;
  exports.data = data;
  exports.dataVisitor = dataVisitor;
  exports.dayAbbrevFormat = dayAbbrevFormat;
  exports.dayFormat = dayFormat;
  exports.debug = debug;
  exports.domain = domain;
  exports.encode = encode;
  exports.expressionFunction = expressionFunction;
  exports.format = format;
  exports.functionContext = functionContext;
  exports.geoArea = geoArea;
  exports.geoBounds = geoBounds;
  exports.geoCentroid = geoCentroid;
  exports.geoShape = geoShape;
  exports.inScope = inScope;
  exports.indata = indata;
  exports.indataVisitor = indataVisitor;
  exports.indexof = indexof;
  exports.info = info;
  exports.invert = invert;
  exports.join = join;
  exports.lastindexof = lastindexof;
  exports.luminance = luminance;
  exports.merge = merge;
  exports.modify = modify;
  exports.monthAbbrevFormat = monthAbbrevFormat;
  exports.monthFormat = monthFormat;
  exports.parseExpression = parser;
  exports.pathShape = pathShape;
  exports.pinchAngle = pinchAngle;
  exports.pinchDistance = pinchDistance;
  exports.pluck = pluck;
  exports.range = range;
  exports.replace = replace;
  exports.reverse = reverse;
  exports.scale = scale;
  exports.scaleGradient = scaleGradient;
  exports.scaleVisitor = scaleVisitor;
  exports.screen = screen;
  exports.setdata = setdata;
  exports.slice = slice;
  exports.timeFormat = timeFormat;
  exports.timeParse = timeParse;
  exports.treeAncestors = treeAncestors;
  exports.treePath = treePath;
  exports.utcFormat = utcFormat;
  exports.utcParse = utcParse;
  exports.warn = warn;
  exports.windowSize = windowSize;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-expression":"2lNZi","d3-geo":"3nbkI","d3-color":"3mmqs","vega-dataflow":"1Owpt","vega-scale":"13AnI","vega-scenegraph":"6y4N1","vega-selections":"2gCpw","vega-statistics":"5GzFx","vega-time":"2Sl4A","d3-array":"7CLUA"}],"2lNZi":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega));
})(this, function (exports, vegaUtil) {
  "use strict";
  const RawCode = 'RawCode';
  const Literal = 'Literal';
  const Property = 'Property';
  const Identifier = 'Identifier';
  const ArrayExpression = 'ArrayExpression';
  const BinaryExpression = 'BinaryExpression';
  const CallExpression = 'CallExpression';
  const ConditionalExpression = 'ConditionalExpression';
  const LogicalExpression = 'LogicalExpression';
  const MemberExpression = 'MemberExpression';
  const ObjectExpression = 'ObjectExpression';
  const UnaryExpression = 'UnaryExpression';
  function ASTNode(type) {
    this.type = type;
  }
  ASTNode.prototype.visit = function (visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for ((c = children(this), i = 0, n = c.length); i < n; ++i) {
      if (c[i].visit(visitor)) return 1;
    }
  };
  function children(node) {
    switch (node.type) {
      case ArrayExpression:
        return node.elements;
      case BinaryExpression:
      case LogicalExpression:
        return [node.left, node.right];
      case CallExpression:
        return [node.callee].concat(node.arguments);
      case ConditionalExpression:
        return [node.test, node.consequent, node.alternate];
      case MemberExpression:
        return [node.object, node.property];
      case ObjectExpression:
        return node.properties;
      case Property:
        return [node.key, node.value];
      case UnaryExpression:
        return [node.argument];
      case Identifier:
      case Literal:
      case RawCode:
      default:
        return [];
    }
  }
  /*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:
  
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  var TokenName, source, index, length, lookahead;
  var TokenBooleanLiteral = 1, TokenEOF = 2, TokenIdentifier = 3, TokenKeyword = 4, TokenNullLiteral = 5, TokenNumericLiteral = 6, TokenPunctuator = 7, TokenStringLiteral = 8, TokenRegularExpression = 9;
  TokenName = {};
  TokenName[TokenBooleanLiteral] = 'Boolean';
  TokenName[TokenEOF] = '<end>';
  TokenName[TokenIdentifier] = 'Identifier';
  TokenName[TokenKeyword] = 'Keyword';
  TokenName[TokenNullLiteral] = 'Null';
  TokenName[TokenNumericLiteral] = 'Numeric';
  TokenName[TokenPunctuator] = 'Punctuator';
  TokenName[TokenStringLiteral] = 'String';
  TokenName[TokenRegularExpression] = 'RegularExpression';
  var SyntaxArrayExpression = 'ArrayExpression', SyntaxBinaryExpression = 'BinaryExpression', SyntaxCallExpression = 'CallExpression', SyntaxConditionalExpression = 'ConditionalExpression', SyntaxIdentifier = 'Identifier', SyntaxLiteral = 'Literal', SyntaxLogicalExpression = 'LogicalExpression', SyntaxMemberExpression = 'MemberExpression', SyntaxObjectExpression = 'ObjectExpression', SyntaxProperty = 'Property', SyntaxUnaryExpression = 'UnaryExpression';
  // Error messages should be identical to V8.
  var MessageUnexpectedToken = 'Unexpected token %0', MessageUnexpectedNumber = 'Unexpected number', MessageUnexpectedString = 'Unexpected string', MessageUnexpectedIdentifier = 'Unexpected identifier', MessageUnexpectedReserved = 'Unexpected reserved word', MessageUnexpectedEOS = 'Unexpected end of input', MessageInvalidRegExp = 'Invalid regular expression', MessageUnterminatedRegExp = 'Invalid regular expression: missing /', MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.', MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
  var ILLEGAL = 'ILLEGAL', DISABLED = 'Disabled.';
  // See also tools/generate-unicode-regex.py.
  var RegexNonAsciiIdentifierStart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'), // eslint-disable-next-line no-misleading-character-class
  RegexNonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');
  // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.
  function assert(condition, message) {
    /*istanbul ignore next*/
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }
  function isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39;
  }
  function isHexDigit(ch) {
    return ('0123456789abcdefABCDEF').indexOf(ch) >= 0;
  }
  function isOctalDigit(ch) {
    return ('01234567').indexOf(ch) >= 0;
  }
  // 7.2 White Space
  function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
  }
  // 7.3 Line Terminators
  function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
  }
  // 7.6 Identifier Names and Identifiers
  function isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
  }
  function isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch >= 0x30 && ch <= 0x39 || // 0..9
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
  }
  // 7.6.1.1 Keywords
  const keywords = {
    'if': 1,
    'in': 1,
    'do': 1,
    'var': 1,
    'for': 1,
    'new': 1,
    'try': 1,
    'let': 1,
    'this': 1,
    'else': 1,
    'case': 1,
    'void': 1,
    'with': 1,
    'enum': 1,
    'while': 1,
    'break': 1,
    'catch': 1,
    'throw': 1,
    'const': 1,
    'yield': 1,
    'class': 1,
    'super': 1,
    'return': 1,
    'typeof': 1,
    'delete': 1,
    'switch': 1,
    'export': 1,
    'import': 1,
    'public': 1,
    'static': 1,
    'default': 1,
    'finally': 1,
    'extends': 1,
    'package': 1,
    'private': 1,
    'function': 1,
    'continue': 1,
    'debugger': 1,
    'interface': 1,
    'protected': 1,
    'instanceof': 1,
    'implements': 1
  };
  function skipComment() {
    while (index < length) {
      const ch = source.charCodeAt(index);
      if (isWhiteSpace(ch) || isLineTerminator(ch)) {
        ++index;
      } else {
        break;
      }
    }
  }
  function scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === 'u' ? 4 : 2;
    for (i = 0; i < len; ++i) {
      if (index < length && isHexDigit(source[index])) {
        ch = source[index++];
        code = code * 16 + ('0123456789abcdef').indexOf(ch.toLowerCase());
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    return String.fromCharCode(code);
  }
  function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = source[index];
    code = 0;
    // At least, one hex digit is required.
    if (ch === '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    while (index < length) {
      ch = source[index++];
      if (!isHexDigit(ch)) {
        break;
      }
      code = code * 16 + ('0123456789abcdef').indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    // UTF-16 Encoding
    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    }
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
  }
  function getEscapedIdentifier() {
    var ch, id;
    ch = source.charCodeAt(index++);
    id = String.fromCharCode(ch);
    // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
      if (source.charCodeAt(index) !== 0x75) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      ++index;
      ch = scanHexEscape('u');
      if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      id = ch;
    }
    while (index < length) {
      ch = source.charCodeAt(index);
      if (!isIdentifierPart(ch)) {
        break;
      }
      ++index;
      id += String.fromCharCode(ch);
      // '\u' (U+005C, U+0075) denotes an escaped character.
      if (ch === 0x5C) {
        id = id.substr(0, id.length - 1);
        if (source.charCodeAt(index) !== 0x75) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        ++index;
        ch = scanHexEscape('u');
        if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        id += ch;
      }
    }
    return id;
  }
  function getIdentifier() {
    var start, ch;
    start = index++;
    while (index < length) {
      ch = source.charCodeAt(index);
      if (ch === 0x5C) {
        // Blackslash (U+005C) marks Unicode escape sequence.
        index = start;
        return getEscapedIdentifier();
      }
      if (isIdentifierPart(ch)) {
        ++index;
      } else {
        break;
      }
    }
    return source.slice(start, index);
  }
  function scanIdentifier() {
    var start, id, type;
    start = index;
    // Backslash (U+005C) starts an escaped character.
    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier();
    // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) {
      type = TokenIdentifier;
    } else if (keywords.hasOwnProperty(id)) {
      // eslint-disable-line no-prototype-builtins
      type = TokenKeyword;
    } else if (id === 'null') {
      type = TokenNullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = TokenBooleanLiteral;
    } else {
      type = TokenIdentifier;
    }
    return {
      type: type,
      value: id,
      start: start,
      end: index
    };
  }
  // 7.7 Punctuators
  function scanPunctuator() {
    var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2, ch3, ch4;
    switch (code) {
      case 0x2E:
      case 0x28:
      case 0x29:
      case 0x3B:
      case 0x2C:
      case 0x7B:
      case 0x7D:
      case 0x5B:
      case 0x5D:
      case 0x3A:
      case 0x3F:
      case 0x7E:
        // ~
        ++index;
        return {
          type: TokenPunctuator,
          value: String.fromCharCode(code),
          start: start,
          end: index
        };
      default:
        code2 = source.charCodeAt(index + 1);
        // '=' (U+003D) marks an assignment or comparison operator.
        if (code2 === 0x3D) {
          switch (code) {
            case 0x2B:
            case 0x2D:
            case 0x2F:
            case 0x3C:
            case 0x3E:
            case 0x5E:
            case 0x7C:
            case 0x25:
            case 0x26:
            case 0x2A:
              // *
              index += 2;
              return {
                type: TokenPunctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start: start,
                end: index
              };
            case 0x21:
            case 0x3D:
              // =
              index += 2;
              // !== and ===
              if (source.charCodeAt(index) === 0x3D) {
                ++index;
              }
              return {
                type: TokenPunctuator,
                value: source.slice(start, index),
                start: start,
                end: index
              };
          }
        }
    }
    // 4-character punctuator: >>>=
    ch4 = source.substr(index, 4);
    if (ch4 === '>>>=') {
      index += 4;
      return {
        type: TokenPunctuator,
        value: ch4,
        start: start,
        end: index
      };
    }
    // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
      index += 3;
      return {
        type: TokenPunctuator,
        value: ch3,
        start: start,
        end: index
      };
    }
    // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && ('+-<>&|').indexOf(ch1) >= 0 || ch2 === '=>') {
      index += 2;
      return {
        type: TokenPunctuator,
        value: ch2,
        start: start,
        end: index
      };
    }
    if (ch2 === '//') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    // 1-character punctuators: < > = ! + - * % & | ^ /
    if (('<>=!+-*%&|^/').indexOf(ch1) >= 0) {
      ++index;
      return {
        type: TokenPunctuator,
        value: ch1,
        start: start,
        end: index
      };
    }
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  // 7.8.3 Numeric Literals
  function scanHexLiteral(start) {
    let number = '';
    while (index < length) {
      if (!isHexDigit(source[index])) {
        break;
      }
      number += source[index++];
    }
    if (number.length === 0) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseInt('0x' + number, 16),
      start: start,
      end: index
    };
  }
  function scanOctalLiteral(start) {
    let number = '0' + source[index++];
    while (index < length) {
      if (!isOctalDigit(source[index])) {
        break;
      }
      number += source[index++];
    }
    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseInt(number, 8),
      octal: true,
      start: start,
      end: index
    };
  }
  function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index;
    number = '';
    if (ch !== '.') {
      number = source[index++];
      ch = source[index];
      // Hex number starts with '0x'.
      // Octal number starts with '0'.
      if (number === '0') {
        if (ch === 'x' || ch === 'X') {
          ++index;
          return scanHexLiteral(start);
        }
        if (isOctalDigit(ch)) {
          return scanOctalLiteral(start);
        }
        // decimal number starts with '0' such as '09' is illegal.
        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }
      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }
      ch = source[index];
    }
    if (ch === '.') {
      number += source[index++];
      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }
      ch = source[index];
    }
    if (ch === 'e' || ch === 'E') {
      number += source[index++];
      ch = source[index];
      if (ch === '+' || ch === '-') {
        number += source[index++];
      }
      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenNumericLiteral,
      value: parseFloat(number),
      start: start,
      end: index
    };
  }
  // 7.8.4 String Literals
  function scanStringLiteral() {
    var str = '', quote, start, ch, code, octal = false;
    quote = source[index];
    assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index;
    ++index;
    while (index < length) {
      ch = source[index++];
      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source[index++];
        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'u':
            case 'x':
              if (source[index] === '{') {
                ++index;
                str += scanUnicodeCodePointEscape();
              } else {
                str += scanHexEscape(ch);
              }
              break;
            case 'n':
              str += '\n';
              break;
            case 'r':
              str += '\r';
              break;
            case 't':
              str += '\t';
              break;
            case 'b':
              str += '\b';
              break;
            case 'f':
              str += '\f';
              break;
            case 'v':
              str += '\x0B';
              break;
            default:
              if (isOctalDigit(ch)) {
                code = ('01234567').indexOf(ch);
                // \0 is not octal escape sequence
                if (code !== 0) {
                  octal = true;
                }
                if (index < length && isOctalDigit(source[index])) {
                  octal = true;
                  code = code * 8 + ('01234567').indexOf(source[index++]);
                  // 3 digits are only allowed when string starts
                  // with 0, 1, 2, 3
                  if (('0123').indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                    code = code * 8 + ('01234567').indexOf(source[index++]);
                  }
                }
                str += String.fromCharCode(code);
              } else {
                str += ch;
              }
              break;
          }
        } else {
          if (ch === '\r' && source[index] === '\n') {
            ++index;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }
    if (quote !== '') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    return {
      type: TokenStringLiteral,
      value: str,
      octal: octal,
      start: start,
      end: index
    };
  }
  function testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf('u') >= 0) {
      // Replace each astral symbol and every Unicode code point
      // escape sequence with a single ASCII symbol to avoid throwing on
      // regular expressions that are only valid in combination with the
      // `/u` flag.
      // Note: replacing with the ASCII symbol `x` might cause false
      // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
      // perfectly valid pattern that is equivalent to `[a-b]`, but it
      // would be replaced by `[x-b]` which throws an error.
      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
        if (parseInt($1, 16) <= 0x10FFFF) {
          return 'x';
        }
        throwError({}, MessageInvalidRegExp);
      }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
    }
    // First, detect invalid regular expressions.
    try {
      new RegExp(tmp);
    } catch (e) {
      throwError({}, MessageInvalidRegExp);
    }
    // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }
  function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = source[index];
    assert(ch === '/', 'Regular expression literal must start with a slash');
    str = source[index++];
    classMarker = false;
    terminated = false;
    while (index < length) {
      ch = source[index++];
      str += ch;
      if (ch === '\\') {
        ch = source[index++];
        // ECMA-262 7.8.5
        if (isLineTerminator(ch.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        }
        str += ch;
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      } else if (classMarker) {
        if (ch === ']') {
          classMarker = false;
        }
      } else {
        if (ch === '/') {
          terminated = true;
          break;
        } else if (ch === '[') {
          classMarker = true;
        }
      }
    }
    if (!terminated) {
      throwError({}, MessageUnterminatedRegExp);
    }
    // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }
  function scanRegExpFlags() {
    var ch, str, flags;
    str = '';
    flags = '';
    while (index < length) {
      ch = source[index];
      if (!isIdentifierPart(ch.charCodeAt(0))) {
        break;
      }
      ++index;
      if (ch === '\\' && index < length) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } else {
        flags += ch;
        str += ch;
      }
    }
    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError({}, MessageInvalidRegExp, flags);
    }
    return {
      value: flags,
      literal: str
    };
  }
  function scanRegExp() {
    var start, body, flags, value;
    lookahead = null;
    skipComment();
    start = index;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);
    return {
      literal: body.literal + flags.literal,
      value: value,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start: start,
      end: index
    };
  }
  function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
  }
  function advance() {
    skipComment();
    if (index >= length) {
      return {
        type: TokenEOF,
        start: index,
        end: index
      };
    }
    const ch = source.charCodeAt(index);
    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    }
    // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
      return scanPunctuator();
    }
    // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) {
      return scanStringLiteral();
    }
    // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }
      return scanPunctuator();
    }
    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }
    return scanPunctuator();
  }
  function lex() {
    const token = lookahead;
    index = token.end;
    lookahead = advance();
    index = token.end;
    return token;
  }
  function peek() {
    const pos = index;
    lookahead = advance();
    index = pos;
  }
  function finishArrayExpression(elements) {
    const node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
  }
  function finishBinaryExpression(operator, left, right) {
    const node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
  }
  function finishCallExpression(callee, args) {
    const node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
  }
  function finishConditionalExpression(test, consequent, alternate) {
    const node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }
  function finishIdentifier(name) {
    const node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
  }
  function finishLiteral(token) {
    const node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
      if (node.raw === '//') {
        node.raw = '/(?:)/';
      }
      node.regex = token.regex;
    }
    return node;
  }
  function finishMemberExpression(accessor, object, property) {
    const node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === '[';
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
  }
  function finishObjectExpression(properties) {
    const node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
  }
  function finishProperty(kind, key, value) {
    const node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
  }
  function finishUnaryExpression(operator, argument) {
    const node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
  }
  // Throw an exception
  function throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index) => {
      assert(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
  }
  // Throw an exception because of the token.
  function throwUnexpected(token) {
    if (token.type === TokenEOF) {
      throwError(token, MessageUnexpectedEOS);
    }
    if (token.type === TokenNumericLiteral) {
      throwError(token, MessageUnexpectedNumber);
    }
    if (token.type === TokenStringLiteral) {
      throwError(token, MessageUnexpectedString);
    }
    if (token.type === TokenIdentifier) {
      throwError(token, MessageUnexpectedIdentifier);
    }
    if (token.type === TokenKeyword) {
      throwError(token, MessageUnexpectedReserved);
    }
    // BooleanLiteral, NullLiteral, or Punctuator.
    throwError(token, MessageUnexpectedToken, token.value);
  }
  // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.
  function expect(value) {
    const token = lex();
    if (token.type !== TokenPunctuator || token.value !== value) {
      throwUnexpected(token);
    }
  }
  // Return true if the next token matches the specified punctuator.
  function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
  }
  // Return true if the next token matches the specified keyword
  function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
  }
  // 11.1.4 Array Initialiser
  function parseArrayInitialiser() {
    const elements = [];
    index = lookahead.start;
    expect('[');
    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression());
        if (!match(']')) {
          expect(',');
        }
      }
    }
    lex();
    return finishArrayExpression(elements);
  }
  // 11.1.5 Object Initialiser
  function parseObjectPropertyKey() {
    index = lookahead.start;
    const token = lex();
    // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
      if (token.octal) {
        throwError(token, MessageStrictOctalLiteral);
      }
      return finishLiteral(token);
    }
    return finishIdentifier(token.value);
  }
  function parseObjectProperty() {
    var token, key, id, value;
    index = lookahead.start;
    token = lookahead;
    if (token.type === TokenIdentifier) {
      id = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', id, value);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) {
      throwUnexpected(token);
    } else {
      key = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', key, value);
    }
  }
  function parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    index = lookahead.start;
    expect('{');
    while (!match('}')) {
      property = parseObjectProperty();
      if (property.key.type === SyntaxIdentifier) {
        name = property.key.name;
      } else {
        name = toString(property.key.value);
      }
      key = '$' + name;
      if (Object.prototype.hasOwnProperty.call(map, key)) {
        throwError({}, MessageStrictDuplicateProperty);
      } else {
        map[key] = true;
      }
      properties.push(property);
      if (!match('}')) {
        expect(',');
      }
    }
    expect('}');
    return finishObjectExpression(properties);
  }
  // 11.1.6 The Grouping Operator
  function parseGroupExpression() {
    expect('(');
    const expr = parseExpression();
    expect(')');
    return expr;
  }
  // 11.1 Primary Expressions
  const legalKeywords = {
    'if': 1
  };
  function parsePrimaryExpression() {
    var type, token, expr;
    if (match('(')) {
      return parseGroupExpression();
    }
    if (match('[')) {
      return parseArrayInitialiser();
    }
    if (match('{')) {
      return parseObjectInitialiser();
    }
    type = lookahead.type;
    index = lookahead.start;
    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
      expr = finishIdentifier(lex().value);
    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
      if (lookahead.octal) {
        throwError(lookahead, MessageStrictOctalLiteral);
      }
      expr = finishLiteral(lex());
    } else if (type === TokenKeyword) {
      throw new Error(DISABLED);
    } else if (type === TokenBooleanLiteral) {
      token = lex();
      token.value = token.value === 'true';
      expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
      token = lex();
      token.value = null;
      expr = finishLiteral(token);
    } else if (match('/') || match('/=')) {
      expr = finishLiteral(scanRegExp());
      peek();
    } else {
      throwUnexpected(lex());
    }
    return expr;
  }
  // 11.2 Left-Hand-Side Expressions
  function parseArguments() {
    const args = [];
    expect('(');
    if (!match(')')) {
      while (index < length) {
        args.push(parseConditionalExpression());
        if (match(')')) {
          break;
        }
        expect(',');
      }
    }
    expect(')');
    return args;
  }
  function parseNonComputedProperty() {
    index = lookahead.start;
    const token = lex();
    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }
    return finishIdentifier(token.value);
  }
  function parseNonComputedMember() {
    expect('.');
    return parseNonComputedProperty();
  }
  function parseComputedMember() {
    expect('[');
    const expr = parseExpression();
    expect(']');
    return expr;
  }
  function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = parsePrimaryExpression();
    for (; ; ) {
      if (match('.')) {
        property = parseNonComputedMember();
        expr = finishMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = finishCallExpression(expr, args);
      } else if (match('[')) {
        property = parseComputedMember();
        expr = finishMemberExpression('[', expr, property);
      } else {
        break;
      }
    }
    return expr;
  }
  // 11.3 Postfix Expressions
  function parsePostfixExpression() {
    const expr = parseLeftHandSideExpressionAllowCall();
    if (lookahead.type === TokenPunctuator) {
      if (match('++') || match('--')) {
        throw new Error(DISABLED);
      }
    }
    return expr;
  }
  // 11.4 Unary Operators
  function parseUnaryExpression() {
    var token, expr;
    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
      expr = parsePostfixExpression();
    } else if (match('++') || match('--')) {
      throw new Error(DISABLED);
    } else if (match('+') || match('-') || match('~') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throw new Error(DISABLED);
    } else {
      expr = parsePostfixExpression();
    }
    return expr;
  }
  function binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
      return 0;
    }
    switch (token.value) {
      case '||':
        prec = 1;
        break;
      case '&&':
        prec = 2;
        break;
      case '|':
        prec = 3;
        break;
      case '^':
        prec = 4;
        break;
      case '&':
        prec = 5;
        break;
      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;
      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
      case 'in':
        prec = 7;
        break;
      case '<<':
      case '>>':
      case '>>>':
        prec = 8;
        break;
      case '+':
      case '-':
        prec = 9;
        break;
      case '*':
      case '/':
      case '%':
        prec = 11;
        break;
    }
    return prec;
  }
  // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators
  function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) {
      return left;
    }
    token.prec = prec;
    lex();
    markers = [marker, lookahead];
    right = parseUnaryExpression();
    stack = [left, token, right];
    while ((prec = binaryPrecedence(lookahead)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        markers.pop();
        expr = finishBinaryExpression(operator, left, right);
        stack.push(expr);
      }
      // Shift.
      token = lex();
      token.prec = prec;
      stack.push(token);
      markers.push(lookahead);
      expr = parseUnaryExpression();
      stack.push(expr);
    }
    // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while (i > 1) {
      markers.pop();
      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }
    return expr;
  }
  // 11.12 Conditional Operator
  function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();
    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();
      expr = finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
  }
  // 11.14 Comma Operator
  function parseExpression() {
    const expr = parseConditionalExpression();
    if (match(',')) {
      throw new Error(DISABLED);
    }
    return expr;
  }
  function parser(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    peek();
    const expr = parseExpression();
    if (lookahead.type !== TokenEOF) {
      throw new Error('Unexpect token after expression.');
    }
    return expr;
  }
  var Constants = {
    NaN: 'NaN',
    E: 'Math.E',
    LN2: 'Math.LN2',
    LN10: 'Math.LN10',
    LOG2E: 'Math.LOG2E',
    LOG10E: 'Math.LOG10E',
    PI: 'Math.PI',
    SQRT1_2: 'Math.SQRT1_2',
    SQRT2: 'Math.SQRT2',
    MIN_VALUE: 'Number.MIN_VALUE',
    MAX_VALUE: 'Number.MAX_VALUE'
  };
  function Functions(codegen) {
    function fncall(name, args, cast, type) {
      let obj = codegen(args[0]);
      if (cast) {
        obj = cast + '(' + obj + ')';
        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
      }
      return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');
    }
    function fn(name, cast, type) {
      return args => fncall(name, args, cast, type);
    }
    const DATE = 'new Date', STRING = 'String', REGEXP = 'RegExp';
    return {
      // MATH functions
      isNaN: 'Number.isNaN',
      isFinite: 'Number.isFinite',
      abs: 'Math.abs',
      acos: 'Math.acos',
      asin: 'Math.asin',
      atan: 'Math.atan',
      atan2: 'Math.atan2',
      ceil: 'Math.ceil',
      cos: 'Math.cos',
      exp: 'Math.exp',
      floor: 'Math.floor',
      log: 'Math.log',
      max: 'Math.max',
      min: 'Math.min',
      pow: 'Math.pow',
      random: 'Math.random',
      round: 'Math.round',
      sin: 'Math.sin',
      sqrt: 'Math.sqrt',
      tan: 'Math.tan',
      clamp: function (args) {
        if (args.length < 3) vegaUtil.error('Missing arguments to clamp function.');
        if (args.length > 3) vegaUtil.error('Too many arguments to clamp function.');
        const a = args.map(codegen);
        return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';
      },
      // DATE functions
      now: 'Date.now',
      utc: 'Date.UTC',
      datetime: DATE,
      date: fn('getDate', DATE, 0),
      day: fn('getDay', DATE, 0),
      year: fn('getFullYear', DATE, 0),
      month: fn('getMonth', DATE, 0),
      hours: fn('getHours', DATE, 0),
      minutes: fn('getMinutes', DATE, 0),
      seconds: fn('getSeconds', DATE, 0),
      milliseconds: fn('getMilliseconds', DATE, 0),
      time: fn('getTime', DATE, 0),
      timezoneoffset: fn('getTimezoneOffset', DATE, 0),
      utcdate: fn('getUTCDate', DATE, 0),
      utcday: fn('getUTCDay', DATE, 0),
      utcyear: fn('getUTCFullYear', DATE, 0),
      utcmonth: fn('getUTCMonth', DATE, 0),
      utchours: fn('getUTCHours', DATE, 0),
      utcminutes: fn('getUTCMinutes', DATE, 0),
      utcseconds: fn('getUTCSeconds', DATE, 0),
      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
      // sequence functions
      length: fn('length', null, -1),
      // STRING functions
      parseFloat: 'parseFloat',
      parseInt: 'parseInt',
      upper: fn('toUpperCase', STRING, 0),
      lower: fn('toLowerCase', STRING, 0),
      substring: fn('substring', STRING),
      split: fn('split', STRING),
      trim: fn('trim', STRING, 0),
      // REGEXP functions
      regexp: REGEXP,
      test: fn('test', REGEXP),
      // Control Flow functions
      if: function (args) {
        if (args.length < 3) vegaUtil.error('Missing arguments to if function.');
        if (args.length > 3) vegaUtil.error('Too many arguments to if function.');
        const a = args.map(codegen);
        return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';
      }
    };
  }
  function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === '\'' && s[n] === '\'') ? s.slice(1, -1) : s;
  }
  function codegen(opt) {
    opt = opt || ({});
    const allowed = opt.allowed ? vegaUtil.toSet(opt.allowed) : {}, forbidden = opt.forbidden ? vegaUtil.toSet(opt.forbidden) : {}, constants = opt.constants || Constants, functions = (opt.functions || Functions)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = vegaUtil.isFunction(globalvar) ? globalvar : id => `${globalvar}["${id}"]`;
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
      if (vegaUtil.isString(ast)) return ast;
      const generator = Generators[ast.type];
      if (generator == null) vegaUtil.error('Unsupported type: ' + ast.type);
      return generator(ast);
    }
    const Generators = {
      Literal: n => n.raw,
      Identifier: n => {
        const id = n.name;
        if (memberDepth > 0) {
          return id;
        } else if (vegaUtil.hasOwnProperty(forbidden, id)) {
          return vegaUtil.error('Illegal identifier: ' + id);
        } else if (vegaUtil.hasOwnProperty(constants, id)) {
          return constants[id];
        } else if (vegaUtil.hasOwnProperty(allowed, id)) {
          return id;
        } else {
          globals[id] = 1;
          return outputGlobal(id);
        }
      },
      MemberExpression: n => {
        const d = !n.computed, o = visit(n.object);
        if (d) memberDepth += 1;
        const p = visit(n.property);
        if (o === fieldvar) {
          // strip quotes to sanitize field name (#1653)
          fields[stripQuotes(p)] = 1;
        }
        if (d) memberDepth -= 1;
        return o + (d ? '.' + p : '[' + p + ']');
      },
      CallExpression: n => {
        if (n.callee.type !== 'Identifier') {
          vegaUtil.error('Illegal callee type: ' + n.callee.type);
        }
        const callee = n.callee.name, args = n.arguments, fn = vegaUtil.hasOwnProperty(functions, callee) && functions[callee];
        if (!fn) vegaUtil.error('Unrecognized function: ' + callee);
        return vegaUtil.isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';
      },
      ArrayExpression: n => '[' + n.elements.map(visit).join(',') + ']',
      BinaryExpression: n => '(' + visit(n.left) + ' ' + n.operator + ' ' + visit(n.right) + ')',
      UnaryExpression: n => '(' + n.operator + visit(n.argument) + ')',
      ConditionalExpression: n => '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')',
      LogicalExpression: n => '(' + visit(n.left) + n.operator + visit(n.right) + ')',
      ObjectExpression: n => '{' + n.properties.map(visit).join(',') + '}',
      Property: n => {
        memberDepth += 1;
        const k = visit(n.key);
        memberDepth -= 1;
        return k + ':' + visit(n.value);
      }
    };
    function codegen(ast) {
      const result = {
        code: visit(ast),
        globals: Object.keys(globals),
        fields: Object.keys(fields)
      };
      globals = {};
      fields = {};
      return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
  }
  exports.ASTNode = ASTNode;
  exports.ArrayExpression = ArrayExpression;
  exports.BinaryExpression = BinaryExpression;
  exports.CallExpression = CallExpression;
  exports.ConditionalExpression = ConditionalExpression;
  exports.Identifier = Identifier;
  exports.Literal = Literal;
  exports.LogicalExpression = LogicalExpression;
  exports.MemberExpression = MemberExpression;
  exports.ObjectExpression = ObjectExpression;
  exports.Property = Property;
  exports.RawCode = RawCode;
  exports.UnaryExpression = UnaryExpression;
  exports.codegen = codegen;
  exports.constants = Constants;
  exports.functions = Functions;
  exports.parse = parser;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d"}],"2gCpw":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-expression')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-expression'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega));
})(this, function (exports, vegaUtil, vegaExpression) {
  "use strict";
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  function bisector(f) {
    let delta = f;
    let compare = f;
    if (f.length === 1) {
      delta = (d, x) => f(d) - x;
      compare = ascendingComparator(f);
    }
    function left(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        const mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
      }
      return lo;
    }
    function right(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        const mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
      }
      return lo;
    }
    function center(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      const i = left(a, x, lo, hi - 1);
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
      left,
      center,
      right
    };
  }
  function ascendingComparator(f) {
    return (d, x) => ascending(f(d), x);
  }
  const Intersect = 'intersect';
  const Union = 'union';
  const VlMulti = 'vlMulti';
  const VlPoint = 'vlPoint';
  const Or = 'or';
  const And = 'and';
  const SELECTION_ID = '_vgsid_', TYPE_ENUM = 'E', TYPE_RANGE_INC = 'R', TYPE_RANGE_EXC = 'R-E', TYPE_RANGE_LE = 'R-LE', TYPE_RANGE_RE = 'R-RE', UNIT_INDEX = 'index:unit';
  // TODO: revisit date coercion?
  function testPoint(datum, entry) {
    var fields = entry.fields, values = entry.values, n = fields.length, i = 0, dval, f;
    for (; i < n; ++i) {
      f = fields[i];
      f.getter = vegaUtil.field.getter || vegaUtil.field(f.field);
      dval = f.getter(datum);
      if (vegaUtil.isDate(dval)) dval = vegaUtil.toNumber(dval);
      if (vegaUtil.isDate(values[i])) values[i] = vegaUtil.toNumber(values[i]);
      if (vegaUtil.isDate(values[i][0])) values[i] = values[i].map(vegaUtil.toNumber);
      if (f.type === TYPE_ENUM) {
        // Enumerated fields can either specify individual values (single/multi selections)
        // or an array of values (interval selections).
        if (vegaUtil.isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {
          return false;
        }
      } else {
        if (f.type === TYPE_RANGE_INC) {
          if (!vegaUtil.inrange(dval, values[i])) return false;
        } else if (f.type === TYPE_RANGE_RE) {
          // Discrete selection of bins test within the range [bin_start, bin_end).
          if (!vegaUtil.inrange(dval, values[i], true, false)) return false;
        } else if (f.type === TYPE_RANGE_EXC) {
          // 'R-E'/'R-LE' included for completeness.
          if (!vegaUtil.inrange(dval, values[i], false, false)) return false;
        } else if (f.type === TYPE_RANGE_LE) {
          if (!vegaUtil.inrange(dval, values[i], false, true)) return false;
        }
      }
    }
    return true;
  }
  /**
  * Tests if a tuple is contained within an interactive selection.
  * @param {string} name - The name of the data set representing the selection.
  *  Tuples in the dataset are of the form
  *  {unit: string, fields: array<fielddef>, values: array<*>}.
  *  Fielddef is of the form
  *  {field: string, channel: string, type: 'E' | 'R'} where
  *  'type' identifies whether tuples in the dataset enumerate
  *  values for the field, or specify a continuous range.
  * @param {object} datum - The tuple to test for inclusion.
  * @param {string} op - The set operation for combining selections.
  *   One of 'intersect' or 'union' (default).
  * @return {boolean} - True if the datum is in the selection, false otherwise.
  */
  function selectionTest(name, datum, op) {
    var data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined, intersect = op === Intersect, n = entries.length, i = 0, entry, miss, count, unit, b;
    for (; i < n; ++i) {
      entry = entries[i];
      if (unitIdx && intersect) {
        // multi selections union within the same unit and intersect across units.
        miss = miss || ({});
        count = miss[unit = entry.unit] || 0;
        // if we've already matched this unit, skip.
        if (count === -1) continue;
        b = testPoint(datum, entry);
        miss[unit] = b ? -1 : ++count;
        // if we match and there are no other units return true
        // if we've missed against all tuples in this unit return false
        if (b && unitIdx.size === 1) return true;
        if (!b && count === unitIdx.get(unit).count) return false;
      } else {
        b = testPoint(datum, entry);
        // if we find a miss and we do require intersection return false
        // if we find a match and we don't require intersection return true
        if (intersect ^ b) return b;
      }
    }
    // if intersecting and we made it here, then we saw no misses
    // if not intersecting, then we saw no matches
    // if no active selections, return false
    return n && intersect;
  }
  const selectionId = vegaUtil.field(SELECTION_ID), bisect = bisector(selectionId), bisectLeft = bisect.left, bisectRight = bisect.right;
  function selectionIdTest(name, datum, op) {
    const data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined, intersect = op === Intersect, value = selectionId(datum), index = bisectLeft(entries, value);
    if (index === entries.length) return false;
    if (selectionId(entries[index]) !== value) return false;
    if (unitIdx && intersect) {
      if (unitIdx.size === 1) return true;
      if (bisectRight(entries, value) - index < unitIdx.size) return false;
    }
    return true;
  }
  /**
  * Maps an array of scene graph items to an array of selection tuples.
  * @param {string} name  - The name of the dataset representing the selection.
  * @param {string} unit  - The name of the unit view.
  *
  * @returns {array} An array of selection entries for the given unit.
  */
  function selectionTuples(array, base) {
    return array.map(x => vegaUtil.extend({
      values: base.fields.map(f => (f.getter || (f.getter = vegaUtil.field(f.field)))(x.datum))
    }, base));
  }
  /**
  * Resolves selection for use as a scale domain or reads via the API.
  * @param {string} name - The name of the dataset representing the selection
  * @param {string} [op='union'] - The set operation for combining selections.
  *                 One of 'intersect' or 'union' (default).
  * @param {boolean} isMulti - Identifies a "multi" selection to perform more
  *                 expensive resolution computation.
  * @param {boolean} vl5 - With Vega-Lite v5, "multi" selections are now called "point"
  *                 selections, and thus the resolved tuple should reflect this name.
  *                 This parameter allows us to reflect this change without triggering
  *                 a major version bump for Vega.
  * @returns {object} An object of selected fields and values.
  */
  function selectionResolve(name, op, isMulti, vl5) {
    var data = this.context.data[name], entries = data ? data.values.value : [], resolved = {}, multiRes = {}, types = {}, entry, fields, values, unit, field, res, resUnit, type, union, n = entries.length, i = 0, j, m;
    // First union all entries within the same unit.
    for (; i < n; ++i) {
      entry = entries[i];
      unit = entry.unit;
      fields = entry.fields;
      values = entry.values;
      for ((j = 0, m = fields.length); j < m; ++j) {
        field = fields[j];
        res = resolved[field.field] || (resolved[field.field] = {});
        resUnit = res[unit] || (res[unit] = []);
        types[field.field] = type = field.type.charAt(0);
        union = ops[type + '_union'];
        res[unit] = union(resUnit, vegaUtil.array(values[j]));
      }
      // If the same multi-selection is repeated over views and projected over
      // an encoding, it may operate over different fields making it especially
      // tricky to reliably resolve it. At best, we can de-dupe identical entries
      // but doing so may be more computationally expensive than it is worth.
      // Instead, for now, we simply transform our store representation into
      // a more human-friendly one.
      if (isMulti) {
        resUnit = multiRes[unit] || (multiRes[unit] = []);
        resUnit.push(vegaUtil.array(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));
      }
    }
    // Then resolve fields across units as per the op.
    op = op || Union;
    Object.keys(resolved).forEach(field => {
      resolved[field] = Object.keys(resolved[field]).map(unit => resolved[field][unit]).reduce((acc, curr) => acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr));
    });
    entries = Object.keys(multiRes);
    if (isMulti && entries.length) {
      const key = vl5 ? VlPoint : VlMulti;
      resolved[key] = op === Union ? {
        [Or]: entries.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])
      } : {
        [And]: entries.map(k => ({
          [Or]: multiRes[k]
        }))
      };
    }
    return resolved;
  }
  var ops = {
    E_union: function (base, value) {
      if (!base.length) return value;
      var i = 0, n = value.length;
      for (; i < n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);
      return base;
    },
    E_intersect: function (base, value) {
      return !base.length ? value : base.filter(v => value.indexOf(v) >= 0);
    },
    R_union: function (base, value) {
      var lo = vegaUtil.toNumber(value[0]), hi = vegaUtil.toNumber(value[1]);
      if (lo > hi) {
        lo = value[1];
        hi = value[0];
      }
      if (!base.length) return [lo, hi];
      if (base[0] > lo) base[0] = lo;
      if (base[1] < hi) base[1] = hi;
      return base;
    },
    R_intersect: function (base, value) {
      var lo = vegaUtil.toNumber(value[0]), hi = vegaUtil.toNumber(value[1]);
      if (lo > hi) {
        lo = value[1];
        hi = value[0];
      }
      if (!base.length) return [lo, hi];
      if (hi < base[0] || base[1] < lo) {
        return [];
      } else {
        if (base[0] < lo) base[0] = lo;
        if (base[1] > hi) base[1] = hi;
      }
      return base;
    }
  };
  const DataPrefix = ':', IndexPrefix = '@';
  function selectionVisitor(name, args, scope, params) {
    if (args[0].type !== vegaExpression.Literal) vegaUtil.error('First argument to selection functions must be a string literal.');
    const data = args[0].value, op = args.length >= 2 && vegaUtil.peek(args).value, field = 'unit', indexName = IndexPrefix + field, dataName = DataPrefix + data;
    // eslint-disable-next-line no-prototype-builtins
    if (op === Intersect && !vegaUtil.hasOwnProperty(params, indexName)) {
      params[indexName] = scope.getData(data).indataRef(scope, field);
    }
    // eslint-disable-next-line no-prototype-builtins
    if (!vegaUtil.hasOwnProperty(params, dataName)) {
      params[dataName] = scope.getData(data).tuplesRef();
    }
  }
  exports.selectionIdTest = selectionIdTest;
  exports.selectionResolve = selectionResolve;
  exports.selectionTest = selectionTest;
  exports.selectionTuples = selectionTuples;
  exports.selectionVisitor = selectionVisitor;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-expression":"2lNZi"}],"1m2MK":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega));
})(this, function (exports, vegaUtil, vegaDataflow) {
  "use strict";
  /**
  * Parse a serialized dataflow specification.
  */
  function parse(spec) {
    const ctx = this, operators = spec.operators || [];
    // parse background
    if (spec.background) {
      ctx.background = spec.background;
    }
    // parse event configuration
    if (spec.eventConfig) {
      ctx.eventConfig = spec.eventConfig;
    }
    // parse locale configuration
    if (spec.locale) {
      ctx.locale = spec.locale;
    }
    // parse operators
    operators.forEach(entry => ctx.parseOperator(entry));
    // parse operator parameters
    operators.forEach(entry => ctx.parseOperatorParameters(entry));
    // parse streams
    (spec.streams || []).forEach(entry => ctx.parseStream(entry));
    // parse updates
    (spec.updates || []).forEach(entry => ctx.parseUpdate(entry));
    return ctx.resolve();
  }
  const Skip = vegaUtil.toSet(['rule']), Swap = vegaUtil.toSet(['group', 'image', 'rect']);
  function adjustSpatial(encode, marktype) {
    let code = '';
    if (Skip[marktype]) return code;
    if (encode.x2) {
      if (encode.x) {
        if (Swap[marktype]) {
          code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';
        }
        code += 'o.width=o.x2-o.x;';
      } else {
        code += 'o.x=o.x2-(o.width||0);';
      }
    }
    if (encode.xc) {
      code += 'o.x=o.xc-(o.width||0)/2;';
    }
    if (encode.y2) {
      if (encode.y) {
        if (Swap[marktype]) {
          code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';
        }
        code += 'o.height=o.y2-o.y;';
      } else {
        code += 'o.y=o.y2-(o.height||0);';
      }
    }
    if (encode.yc) {
      code += 'o.y=o.yc-(o.height||0)/2;';
    }
    return code;
  }
  function canonicalType(type) {
    return (type + '').toLowerCase();
  }
  function isOperator(type) {
    return canonicalType(type) === 'operator';
  }
  function isCollect(type) {
    return canonicalType(type) === 'collect';
  }
  function expression(ctx, args, code) {
    // wrap code in return statement if expression does not terminate
    if (code[code.length - 1] !== ';') {
      code = 'return(' + code + ');';
    }
    const fn = Function(...args.concat(code));
    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
  }
  // generate code for comparing a single field
  function _compare(u, v, lt, gt) {
    return `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}
  : (u > v || v == null) && u != null ? ${gt}
  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}
  : v !== v && u === u ? ${gt} : `;
  }
  var expressionCodegen = {
    /**
    * Parse an expression used to update an operator value.
    */
    operator: (ctx, expr) => expression(ctx, ['_'], expr.code),
    /**
    * Parse an expression provided as an operator parameter value.
    */
    parameter: (ctx, expr) => expression(ctx, ['datum', '_'], expr.code),
    /**
    * Parse an expression applied to an event stream.
    */
    event: (ctx, expr) => expression(ctx, ['event'], expr.code),
    /**
    * Parse an expression used to handle an event-driven operator update.
    */
    handler: (ctx, expr) => {
      const code = `var datum=event.item&&event.item.datum;return ${expr.code};`;
      return expression(ctx, ['_', 'event'], code);
    },
    /**
    * Parse an expression that performs visual encoding.
    */
    encode: (ctx, encode) => {
      const {marktype, channels} = encode;
      let code = 'var o=item,datum=o.datum,m=0,$;';
      for (const name in channels) {
        const o = 'o[' + vegaUtil.stringValue(name) + ']';
        code += `$=${channels[name].code};if(${o}!==$)${o}=$,m=1;`;
      }
      code += adjustSpatial(channels, marktype);
      code += 'return m;';
      return expression(ctx, ['item', '_'], code);
    },
    /**
    * Optimized code generators for access and comparison.
    */
    codegen: {
      get(path) {
        const ref = `[${path.map(vegaUtil.stringValue).join('][')}]`;
        const get = Function('_', `return _${ref};`);
        get.path = ref;
        return get;
      },
      comparator(fields, orders) {
        let t;
        const map = (f, i) => {
          const o = orders[i];
          let u, v;
          if (f.path) {
            u = `a${f.path}`;
            v = `b${f.path}`;
          } else {
            (t = t || ({}))['f' + i] = f;
            u = `this.f${i}(a)`;
            v = `this.f${i}(b)`;
          }
          return _compare(u, v, -o, o);
        };
        const fn = Function('a', 'b', 'var u, v; return ' + fields.map(map).join('') + '0;');
        return t ? fn.bind(t) : fn;
      }
    }
  };
  /**
  * Parse a dataflow operator.
  */
  function parseOperator(spec) {
    const ctx = this;
    if (isOperator(spec.type) || !spec.type) {
      ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
    } else {
      ctx.transform(spec, spec.type);
    }
  }
  /**
  * Parse and assign operator parameters.
  */
  function parseOperatorParameters(spec) {
    const ctx = this;
    if (spec.params) {
      const op = ctx.get(spec.id);
      if (!op) vegaUtil.error('Invalid operator id: ' + spec.id);
      ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
    }
  }
  /**
  * Parse a set of operator parameters.
  */
  function parseParameters(spec, params) {
    params = params || ({});
    const ctx = this;
    for (const key in spec) {
      const value = spec[key];
      params[key] = vegaUtil.isArray(value) ? value.map(v => parseParameter(v, ctx, params)) : parseParameter(value, ctx, params);
    }
    return params;
  }
  /**
  * Parse a single parameter.
  */
  function parseParameter(spec, ctx, params) {
    if (!spec || !vegaUtil.isObject(spec)) return spec;
    for (let i = 0, n = PARSERS.length, p; i < n; ++i) {
      p = PARSERS[i];
      if (vegaUtil.hasOwnProperty(spec, p.key)) {
        return p.parse(spec, ctx, params);
      }
    }
    return spec;
  }
  /** Reference parsers.*/
  var PARSERS = [{
    key: '$ref',
    parse: getOperator
  }, {
    key: '$key',
    parse: getKey
  }, {
    key: '$expr',
    parse: getExpression
  }, {
    key: '$field',
    parse: getField
  }, {
    key: '$encode',
    parse: getEncode
  }, {
    key: '$compare',
    parse: getCompare
  }, {
    key: '$context',
    parse: getContext
  }, {
    key: '$subflow',
    parse: getSubflow
  }, {
    key: '$tupleid',
    parse: getTupleId
  }];
  /**
  * Resolve an operator reference.
  */
  function getOperator(_, ctx) {
    return ctx.get(_.$ref) || vegaUtil.error('Operator not defined: ' + _.$ref);
  }
  /**
  * Resolve an expression reference.
  */
  function getExpression(_, ctx, params) {
    if (_.$params) {
      // parse expression parameters
      ctx.parseParameters(_.$params, params);
    }
    const k = 'e:' + _.$expr.code + '_' + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = vegaUtil.accessor(ctx.parameterExpression(_.$expr), _.$fields, _.$name));
  }
  /**
  * Resolve a key accessor reference.
  */
  function getKey(_, ctx) {
    const k = 'k:' + _.$key + '_' + !!_.$flat;
    return ctx.fn[k] || (ctx.fn[k] = vegaUtil.key(_.$key, _.$flat, ctx.expr.codegen));
  }
  /**
  * Resolve a field accessor reference.
  */
  function getField(_, ctx) {
    if (!_.$field) return null;
    const k = 'f:' + _.$field + '_' + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = vegaUtil.field(_.$field, _.$name, ctx.expr.codegen));
  }
  /**
  * Resolve a comparator function reference.
  */
  function getCompare(_, ctx) {
    // As of Vega 5.5.3, $tupleid sort is no longer used.
    // Keep here for now for backwards compatibility.
    const k = 'c:' + _.$compare + '_' + _.$order, c = vegaUtil.array(_.$compare).map(_ => _ && _.$tupleid ? vegaDataflow.tupleid : _);
    return ctx.fn[k] || (ctx.fn[k] = vegaUtil.compare(c, _.$order, ctx.expr.codegen));
  }
  /**
  * Resolve an encode operator reference.
  */
  function getEncode(_, ctx) {
    const spec = _.$encode, encode = {};
    for (const name in spec) {
      const enc = spec[name];
      encode[name] = vegaUtil.accessor(ctx.encodeExpression(enc.$expr), enc.$fields);
      encode[name].output = enc.$output;
    }
    return encode;
  }
  /**
  * Resolve a context reference.
  */
  function getContext(_, ctx) {
    return ctx;
  }
  /**
  * Resolve a recursive subflow specification.
  */
  function getSubflow(_, ctx) {
    const spec = _.$subflow;
    return function (dataflow, key, parent) {
      const subctx = ctx.fork().parse(spec), op = subctx.get(spec.operators[0].id), p = subctx.signals.parent;
      if (p) p.set(parent);
      op.detachSubflow = () => ctx.detach(subctx);
      return op;
    };
  }
  /**
  * Resolve a tuple id reference.
  */
  function getTupleId() {
    return vegaDataflow.tupleid;
  }
  /**
  * Parse an event stream specification.
  */
  function parseStream(spec) {
    var ctx = this, filter = spec.filter != null ? ctx.eventExpression(spec.filter) : undefined, stream = spec.stream != null ? ctx.get(spec.stream) : undefined, args;
    if (spec.source) {
      stream = ctx.events(spec.source, spec.type, filter);
    } else if (spec.merge) {
      args = spec.merge.map(_ => ctx.get(_));
      stream = args[0].merge.apply(args[0], args.slice(1));
    }
    if (spec.between) {
      args = spec.between.map(_ => ctx.get(_));
      stream = stream.between(args[0], args[1]);
    }
    if (spec.filter) {
      stream = stream.filter(filter);
    }
    if (spec.throttle != null) {
      stream = stream.throttle(+spec.throttle);
    }
    if (spec.debounce != null) {
      stream = stream.debounce(+spec.debounce);
    }
    if (stream == null) {
      vegaUtil.error('Invalid stream definition: ' + JSON.stringify(spec));
    }
    if (spec.consume) stream.consume(true);
    ctx.stream(spec, stream);
  }
  /**
  * Parse an event-driven operator update.
  */
  function parseUpdate(spec) {
    var ctx = this, srcid = vegaUtil.isObject(srcid = spec.source) ? srcid.$ref : srcid, source = ctx.get(srcid), target = null, update = spec.update, params = undefined;
    if (!source) vegaUtil.error('Source not defined: ' + spec.source);
    target = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);
    if (update && update.$expr) {
      if (update.$params) {
        params = ctx.parseParameters(update.$params);
      }
      update = ctx.handlerExpression(update.$expr);
    }
    ctx.update(spec, source, target, update, params);
  }
  const SKIP = {
    skip: true
  };
  function getState(options) {
    var ctx = this, state = {};
    if (options.signals) {
      var signals = state.signals = {};
      Object.keys(ctx.signals).forEach(key => {
        const op = ctx.signals[key];
        if (options.signals(key, op)) {
          signals[key] = op.value;
        }
      });
    }
    if (options.data) {
      var data = state.data = {};
      Object.keys(ctx.data).forEach(key => {
        const dataset = ctx.data[key];
        if (options.data(key, dataset)) {
          data[key] = dataset.input.value;
        }
      });
    }
    if (ctx.subcontext && options.recurse !== false) {
      state.subcontext = ctx.subcontext.map(ctx => ctx.getState(options));
    }
    return state;
  }
  function setState(state) {
    var ctx = this, df = ctx.dataflow, data = state.data, signals = state.signals;
    Object.keys(signals || ({})).forEach(key => {
      df.update(ctx.signals[key], signals[key], SKIP);
    });
    Object.keys(data || ({})).forEach(key => {
      df.pulse(ctx.data[key].input, df.changeset().remove(vegaUtil.truthy).insert(data[key]));
    });
    (state.subcontext || []).forEach((substate, i) => {
      const subctx = ctx.subcontext[i];
      if (subctx) subctx.setState(substate);
    });
  }
  /**
  * Context objects store the current parse state.
  * Enables lookup of parsed operators, event streams, accessors, etc.
  * Provides a 'fork' method for creating child contexts for subflows.
  */
  function context(df, transforms, functions, expr) {
    return new Context(df, transforms, functions, expr);
  }
  function Context(df, transforms, functions, expr) {
    this.dataflow = df;
    this.transforms = transforms;
    this.events = df.events.bind(df);
    (this.expr = expr || expressionCodegen, this.signals = {});
    this.scales = {};
    this.nodes = {};
    this.data = {};
    this.fn = {};
    if (functions) {
      this.functions = Object.create(functions);
      this.functions.context = this;
    }
  }
  function Subcontext(ctx) {
    this.dataflow = ctx.dataflow;
    this.transforms = ctx.transforms;
    this.events = ctx.events;
    this.expr = ctx.expr;
    this.signals = Object.create(ctx.signals);
    this.scales = Object.create(ctx.scales);
    this.nodes = Object.create(ctx.nodes);
    this.data = Object.create(ctx.data);
    this.fn = Object.create(ctx.fn);
    if (ctx.functions) {
      this.functions = Object.create(ctx.functions);
      this.functions.context = this;
    }
  }
  Context.prototype = Subcontext.prototype = {
    fork() {
      const ctx = new Subcontext(this);
      (this.subcontext || (this.subcontext = [])).push(ctx);
      return ctx;
    },
    detach(ctx) {
      this.subcontext = this.subcontext.filter(c => c !== ctx);
      // disconnect all nodes in the subcontext
      // wipe out targets first for better efficiency
      const keys = Object.keys(ctx.nodes);
      for (const key of keys) ctx.nodes[key]._targets = null;
      for (const key of keys) ctx.nodes[key].detach();
      ctx.nodes = null;
    },
    get(id) {
      return this.nodes[id];
    },
    set(id, node) {
      return this.nodes[id] = node;
    },
    add(spec, op) {
      const ctx = this, df = ctx.dataflow, data = spec.value;
      ctx.set(spec.id, op);
      if (isCollect(spec.type) && data) {
        if (data.$ingest) {
          df.ingest(op, data.$ingest, data.$format);
        } else if (data.$request) {
          df.preload(op, data.$request, data.$format);
        } else {
          df.pulse(op, df.changeset().insert(data));
        }
      }
      if (spec.root) {
        ctx.root = op;
      }
      if (spec.parent) {
        let p = ctx.get(spec.parent.$ref);
        if (p) {
          df.connect(p, [op]);
          op.targets().add(p);
        } else {
          (ctx.unresolved = ctx.unresolved || []).push(() => {
            p = ctx.get(spec.parent.$ref);
            df.connect(p, [op]);
            op.targets().add(p);
          });
        }
      }
      if (spec.signal) {
        ctx.signals[spec.signal] = op;
      }
      if (spec.scale) {
        ctx.scales[spec.scale] = op;
      }
      if (spec.data) {
        for (const name in spec.data) {
          const data = ctx.data[name] || (ctx.data[name] = {});
          spec.data[name].forEach(role => data[role] = op);
        }
      }
    },
    resolve() {
      (this.unresolved || []).forEach(fn => fn());
      delete this.unresolved;
      return this;
    },
    operator(spec, update) {
      this.add(spec, this.dataflow.add(spec.value, update));
    },
    transform(spec, type) {
      this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));
    },
    stream(spec, stream) {
      this.set(spec.id, stream);
    },
    update(spec, stream, target, update, params) {
      this.dataflow.on(stream, target, update, params, spec.options);
    },
    // expression parsing
    // expression parsing
    operatorExpression(expr) {
      return this.expr.operator(this, expr);
    },
    parameterExpression(expr) {
      return this.expr.parameter(this, expr);
    },
    eventExpression(expr) {
      return this.expr.event(this, expr);
    },
    handlerExpression(expr) {
      return this.expr.handler(this, expr);
    },
    encodeExpression(encode) {
      return this.expr.encode(this, encode);
    },
    // parse methods
    parse,
    parseOperator,
    parseOperatorParameters,
    parseParameters,
    parseStream,
    parseUpdate,
    // state methods
    getState,
    setState
  };
  exports.context = context;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-dataflow":"1Owpt"}],"4AZar":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-functions'), require('vega-event-selector'), require('vega-scale'), require('vega-dataflow')) : typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-functions', 'vega-event-selector', 'vega-scale', 'vega-dataflow'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.vega, global.vega));
})(this, function (exports, vegaUtil, vegaFunctions, vegaEventSelector, vegaScale, vegaDataflow) {
  "use strict";
  function parseAutosize(spec) {
    return vegaUtil.isObject(spec) ? spec : {
      type: spec || 'pad'
    };
  }
  const number = _ => +_ || 0;
  const paddingObject = _ => ({
    top: _,
    bottom: _,
    left: _,
    right: _
  });
  function parsePadding(spec) {
    return !vegaUtil.isObject(spec) ? paddingObject(number(spec)) : spec.signal ? spec : {
      top: number(spec.top),
      bottom: number(spec.bottom),
      left: number(spec.left),
      right: number(spec.right)
    };
  }
  const encoder = _ => vegaUtil.isObject(_) && !vegaUtil.isArray(_) ? vegaUtil.extend({}, _) : {
    value: _
  };
  function addEncode(object, name, value, set) {
    if (value != null) {
      const isEncoder = vegaUtil.isObject(value) && !vegaUtil.isArray(value) || vegaUtil.isArray(value) && value.length && vegaUtil.isObject(value[0]);
      // Always assign signal to update, even if the signal is from the enter block
      if (isEncoder) {
        object.update[name] = value;
      } else {
        object[set || 'enter'][name] = {
          value: value
        };
      }
      return 1;
    } else {
      return 0;
    }
  }
  function addEncoders(object, enter, update) {
    for (const name in enter) {
      addEncode(object, name, enter[name]);
    }
    for (const name in update) {
      addEncode(object, name, update[name], 'update');
    }
  }
  function extendEncode(encode, extra, skip) {
    for (const name in extra) {
      if (skip && vegaUtil.hasOwnProperty(skip, name)) continue;
      encode[name] = vegaUtil.extend(encode[name] || ({}), extra[name]);
    }
    return encode;
  }
  function has(key, encode) {
    return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
  }
  const MarkRole = 'mark';
  const FrameRole = 'frame';
  const ScopeRole = 'scope';
  const AxisRole = 'axis';
  const AxisDomainRole = 'axis-domain';
  const AxisGridRole = 'axis-grid';
  const AxisLabelRole = 'axis-label';
  const AxisTickRole = 'axis-tick';
  const AxisTitleRole = 'axis-title';
  const LegendRole = 'legend';
  const LegendBandRole = 'legend-band';
  const LegendEntryRole = 'legend-entry';
  const LegendGradientRole = 'legend-gradient';
  const LegendLabelRole = 'legend-label';
  const LegendSymbolRole = 'legend-symbol';
  const LegendTitleRole = 'legend-title';
  const TitleRole = 'title';
  const TitleTextRole = 'title-text';
  const TitleSubtitleRole = 'title-subtitle';
  function applyDefaults(encode, type, role, style, config) {
    const defaults = {}, enter = {};
    let update, key, skip, props;
    // if text mark, apply global lineBreak settings (#2370)
    key = 'lineBreak';
    if (type === 'text' && config[key] != null && !has(key, encode)) {
      applyDefault(defaults, key, config[key]);
    }
    // ignore legend and axis roles
    if (role == 'legend' || String(role).startsWith('axis')) {
      role = null;
    }
    // resolve mark config
    props = role === FrameRole ? config.group : role === MarkRole ? vegaUtil.extend({}, config.mark, config[type]) : null;
    for (key in props) {
      // do not apply defaults if relevant fields are defined
      skip = has(key, encode) || (key === 'fill' || key === 'stroke') && (has('fill', encode) || has('stroke', encode));
      if (!skip) applyDefault(defaults, key, props[key]);
    }
    // resolve styles, apply with increasing precedence
    vegaUtil.array(style).forEach(name => {
      const props = config.style && config.style[name];
      for (const key in props) {
        if (!has(key, encode)) {
          applyDefault(defaults, key, props[key]);
        }
      }
    });
    encode = vegaUtil.extend({}, encode);
    // defensive copy
    for (key in defaults) {
      props = defaults[key];
      if (props.signal) {
        (update = update || ({}))[key] = props;
      } else {
        enter[key] = props;
      }
    }
    encode.enter = vegaUtil.extend(enter, encode.enter);
    if (update) encode.update = vegaUtil.extend(update, encode.update);
    return encode;
  }
  function applyDefault(defaults, key, value) {
    defaults[key] = value && value.signal ? {
      signal: value.signal
    } : {
      value: value
    };
  }
  const scaleRef = scale => vegaUtil.isString(scale) ? vegaUtil.stringValue(scale) : scale.signal ? `(${scale.signal})` : field(scale);
  function entry(enc) {
    if (enc.gradient != null) {
      return gradient(enc);
    }
    let value = enc.signal ? `(${enc.signal})` : enc.color ? color(enc.color) : enc.field != null ? field(enc.field) : enc.value !== undefined ? vegaUtil.stringValue(enc.value) : undefined;
    if (enc.scale != null) {
      value = scale(enc, value);
    }
    if (value === undefined) {
      value = null;
    }
    if (enc.exponent != null) {
      value = `pow(${value},${property(enc.exponent)})`;
    }
    if (enc.mult != null) {
      value += `*${property(enc.mult)}`;
    }
    if (enc.offset != null) {
      value += `+${property(enc.offset)}`;
    }
    if (enc.round) {
      value = `round(${value})`;
    }
    return value;
  }
  const _color = (type, x, y, z) => `(${type}(${[x, y, z].map(entry).join(',')})+'')`;
  function color(enc) {
    return enc.c ? _color('hcl', enc.h, enc.c, enc.l) : enc.h || enc.s ? _color('hsl', enc.h, enc.s, enc.l) : enc.l || enc.a ? _color('lab', enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color('rgb', enc.r, enc.g, enc.b) : null;
  }
  function gradient(enc) {
    // map undefined to null; expression lang does not allow undefined
    const args = [enc.start, enc.stop, enc.count].map(_ => _ == null ? null : vegaUtil.stringValue(_));
    // trim null inputs from the end
    while (args.length && vegaUtil.peek(args) == null) args.pop();
    args.unshift(scaleRef(enc.gradient));
    return `gradient(${args.join(',')})`;
  }
  function property(property) {
    return vegaUtil.isObject(property) ? '(' + entry(property) + ')' : property;
  }
  function field(ref) {
    return resolveField(vegaUtil.isObject(ref) ? ref : {
      datum: ref
    });
  }
  function resolveField(ref) {
    let object, level, field;
    if (ref.signal) {
      object = 'datum';
      field = ref.signal;
    } else if (ref.group || ref.parent) {
      level = Math.max(1, ref.level || 1);
      object = 'item';
      while (level-- > 0) {
        object += '.mark.group';
      }
      if (ref.parent) {
        field = ref.parent;
        object += '.datum';
      } else {
        field = ref.group;
      }
    } else if (ref.datum) {
      object = 'datum';
      field = ref.datum;
    } else {
      vegaUtil.error('Invalid field reference: ' + vegaUtil.stringValue(ref));
    }
    if (!ref.signal) {
      field = vegaUtil.isString(field) ? vegaUtil.splitAccessPath(field).map(vegaUtil.stringValue).join('][') : resolveField(field);
    }
    return object + '[' + field + ']';
  }
  function scale(enc, value) {
    const scale = scaleRef(enc.scale);
    if (enc.range != null) {
      // pull value from scale range
      value = `lerp(_range(${scale}), ${+enc.range})`;
    } else {
      // run value through scale and/or pull scale bandwidth
      if (value !== undefined) value = `_scale(${scale}, ${value})`;
      if (enc.band) {
        value = (value ? value + '+' : '') + `_bandwidth(${scale})` + (+enc.band === 1 ? '' : '*' + property(enc.band));
        if (enc.extra) {
          // include logic to handle extraneous elements
          value = `(datum.extra ? _scale(${scale}, datum.extra.value) : ${value})`;
        }
      }
      if (value == null) value = '0';
    }
    return value;
  }
  function rule(enc) {
    let code = '';
    enc.forEach(rule => {
      const value = entry(rule);
      code += rule.test ? `(${rule.test})?${value}:` : value;
    });
    // if no else clause, terminate with null (#1366)
    if (vegaUtil.peek(code) === ':') {
      code += 'null';
    }
    return code;
  }
  function parseEncode(encode, type, role, style, scope, params) {
    const enc = {};
    params = params || ({});
    params.encoders = {
      $encode: enc
    };
    encode = applyDefaults(encode, type, role, style, scope.config);
    for (const key in encode) {
      enc[key] = parseBlock(encode[key], type, params, scope);
    }
    return params;
  }
  function parseBlock(block, marktype, params, scope) {
    const channels = {}, fields = {};
    for (const name in block) {
      if (block[name] != null) {
        // skip any null entries
        channels[name] = parse(expr(block[name]), scope, params, fields);
      }
    }
    return {
      $expr: {
        marktype,
        channels
      },
      $fields: Object.keys(fields),
      $output: Object.keys(block)
    };
  }
  function expr(enc) {
    return vegaUtil.isArray(enc) ? rule(enc) : entry(enc);
  }
  function parse(code, scope, params, fields) {
    const expr = vegaFunctions.parseExpression(code, scope);
    expr.$fields.forEach(name => fields[name] = 1);
    vegaUtil.extend(params, expr.$params);
    return expr.$expr;
  }
  const OUTER = 'outer', OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];
  function outerError(prefix, name) {
    vegaUtil.error(prefix + ' for "outer" push: ' + vegaUtil.stringValue(name));
  }
  function parseSignal(signal, scope) {
    const name = signal.name;
    if (signal.push === OUTER) {
      // signal must already be defined, raise error if not
      if (!scope.signals[name]) outerError('No prior signal definition', name);
      // signal push must not use properties reserved for standard definition
      OUTER_INVALID.forEach(prop => {
        if (signal[prop] !== undefined) outerError('Invalid property ', prop);
      });
    } else {
      // define a new signal in the current scope
      const op = scope.addSignal(name, signal.value);
      if (signal.react === false) op.react = false;
      if (signal.bind) scope.addBinding(name, signal.bind);
    }
  }
  function Entry(type, value, params, parent) {
    this.id = -1;
    this.type = type;
    this.value = value;
    this.params = params;
    if (parent) this.parent = parent;
  }
  function entry$1(type, value, params, parent) {
    return new Entry(type, value, params, parent);
  }
  function operator(value, params) {
    return entry$1('operator', value, params);
  }
  // -----
  function ref(op) {
    const ref = {
      $ref: op.id
    };
    // if operator not yet registered, cache ref to resolve later
    if (op.id < 0) (op.refs = op.refs || []).push(ref);
    return ref;
  }
  function fieldRef(field, name) {
    return name ? {
      $field: field,
      $name: name
    } : {
      $field: field
    };
  }
  const keyFieldRef = fieldRef('key');
  function compareRef(fields, orders) {
    return {
      $compare: fields,
      $order: orders
    };
  }
  function keyRef(fields, flat) {
    const ref = {
      $key: fields
    };
    if (flat) ref.$flat = true;
    return ref;
  }
  // -----
  const Ascending = 'ascending';
  const Descending = 'descending';
  function sortKey(sort) {
    return !vegaUtil.isObject(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);
  }
  function aggrField(op, field) {
    return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');
  }
  // -----
  const Scope = 'scope';
  const View = 'view';
  function isSignal(_) {
    return _ && _.signal;
  }
  function isExpr(_) {
    return _ && _.expr;
  }
  function hasSignal(_) {
    if (isSignal(_)) return true;
    if (vegaUtil.isObject(_)) for (const key in _) {
      if (hasSignal(_[key])) return true;
    }
    return false;
  }
  function value(specValue, defaultValue) {
    return specValue != null ? specValue : defaultValue;
  }
  function deref(v) {
    return v && v.signal || v;
  }
  const Timer = 'timer';
  function parseStream(stream, scope) {
    const method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : vegaUtil.error('Invalid stream specification: ' + vegaUtil.stringValue(stream));
    return method(stream, scope);
  }
  function eventSource(source) {
    return source === Scope ? View : source || View;
  }
  function mergeStream(stream, scope) {
    const list = stream.merge.map(s => parseStream(s, scope)), entry = streamParameters({
      merge: list
    }, stream, scope);
    return scope.addStream(entry).id;
  }
  function nestedStream(stream, scope) {
    const id = parseStream(stream.stream, scope), entry = streamParameters({
      stream: id
    }, stream, scope);
    return scope.addStream(entry).id;
  }
  function eventStream(stream, scope) {
    let id;
    if (stream.type === Timer) {
      id = scope.event(Timer, stream.throttle);
      stream = {
        between: stream.between,
        filter: stream.filter
      };
    } else {
      id = scope.event(eventSource(stream.source), stream.type);
    }
    const entry = streamParameters({
      stream: id
    }, stream, scope);
    return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
  }
  function streamParameters(entry, stream, scope) {
    let param = stream.between;
    if (param) {
      if (param.length !== 2) {
        vegaUtil.error('Stream "between" parameter must have 2 entries: ' + vegaUtil.stringValue(stream));
      }
      entry.between = [parseStream(param[0], scope), parseStream(param[1], scope)];
    }
    param = stream.filter ? [].concat(stream.filter) : [];
    if (stream.marktype || stream.markname || stream.markrole) {
      // add filter for mark type, name and/or role
      param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
    }
    if (stream.source === Scope) {
      // add filter to limit events from sub-scope only
      param.push('inScope(event.item)');
    }
    if (param.length) {
      entry.filter = vegaFunctions.parseExpression('(' + param.join(')&&(') + ')', scope).$expr;
    }
    if ((param = stream.throttle) != null) {
      entry.throttle = +param;
    }
    if ((param = stream.debounce) != null) {
      entry.debounce = +param;
    }
    if (stream.consume) {
      entry.consume = true;
    }
    return entry;
  }
  function filterMark(type, name, role) {
    const item = 'event.item';
    return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\'' + type + '\'' : '') + (role ? '&&' + item + '.mark.role===\'' + role + '\'' : '') + (name ? '&&' + item + '.mark.name===\'' + name + '\'' : '');
  }
  const OP_VALUE_EXPR = {
    code: '_.$value',
    ast: {
      type: 'Identifier',
      value: 'value'
    }
  };
  function parseUpdate(spec, scope, target) {
    const encode = spec.encode, entry = {
      target: target
    };
    let events = spec.events, update = spec.update, sources = [];
    if (!events) {
      vegaUtil.error('Signal update missing events specification.');
    }
    // interpret as an event selector string
    if (vegaUtil.isString(events)) {
      events = vegaEventSelector.selector(events, scope.isSubscope() ? Scope : View);
    }
    // separate event streams from signal updates
    events = vegaUtil.array(events).filter(s => s.signal || s.scale ? (sources.push(s), 0) : 1);
    // merge internal operator listeners
    if (sources.length > 1) {
      sources = [mergeSources(sources)];
    }
    // merge event streams, include as source
    if (events.length) {
      sources.push(events.length > 1 ? {
        merge: events
      } : events[0]);
    }
    if (encode != null) {
      if (update) vegaUtil.error('Signal encode and update are mutually exclusive.');
      update = 'encode(item(),' + vegaUtil.stringValue(encode) + ')';
    }
    // resolve update value
    entry.update = vegaUtil.isString(update) ? vegaFunctions.parseExpression(update, scope) : update.expr != null ? vegaFunctions.parseExpression(update.expr, scope) : update.value != null ? update.value : update.signal != null ? {
      $expr: OP_VALUE_EXPR,
      $params: {
        $value: scope.signalRef(update.signal)
      }
    } : vegaUtil.error('Invalid signal update specification.');
    if (spec.force) {
      entry.options = {
        force: true
      };
    }
    sources.forEach(source => scope.addUpdate(vegaUtil.extend(streamSource(source, scope), entry)));
  }
  function streamSource(stream, scope) {
    return {
      source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : parseStream(stream, scope)
    };
  }
  function mergeSources(sources) {
    return {
      signal: '[' + sources.map(s => s.scale ? 'scale("' + s.scale + '")' : s.signal) + ']'
    };
  }
  function parseSignalUpdates(signal, scope) {
    const op = scope.getSignal(signal.name);
    let expr = signal.update;
    if (signal.init) {
      if (expr) {
        vegaUtil.error('Signals can not include both init and update expressions.');
      } else {
        expr = signal.init;
        op.initonly = true;
      }
    }
    if (expr) {
      expr = vegaFunctions.parseExpression(expr, scope);
      op.update = expr.$expr;
      op.params = expr.$params;
    }
    if (signal.on) {
      signal.on.forEach(_ => parseUpdate(_, scope, op.id));
    }
  }
  const transform = name => (params, value, parent) => entry$1(name, value, params || undefined, parent);
  const Aggregate = transform('aggregate');
  const AxisTicks = transform('axisticks');
  const Bound = transform('bound');
  const Collect = transform('collect');
  const Compare = transform('compare');
  const DataJoin = transform('datajoin');
  const Encode = transform('encode');
  const Expression = transform('expression');
  const Facet = transform('facet');
  const Field = transform('field');
  const Key = transform('key');
  const LegendEntries = transform('legendentries');
  const Load = transform('load');
  const Mark = transform('mark');
  const MultiExtent = transform('multiextent');
  const MultiValues = transform('multivalues');
  const Overlap = transform('overlap');
  const Params = transform('params');
  const PreFacet = transform('prefacet');
  const Projection = transform('projection');
  const Proxy = transform('proxy');
  const Relay = transform('relay');
  const Render = transform('render');
  const Scale = transform('scale');
  const Sieve = transform('sieve');
  const SortItems = transform('sortitems');
  const ViewLayout = transform('viewlayout');
  const Values = transform('values');
  let FIELD_REF_ID = 0;
  const MULTIDOMAIN_SORT_OPS = {
    min: 'min',
    max: 'max',
    count: 'sum'
  };
  function initScale(spec, scope) {
    const type = spec.type || 'linear';
    if (!vegaScale.isValidScaleType(type)) {
      vegaUtil.error('Unrecognized scale type: ' + vegaUtil.stringValue(type));
    }
    scope.addScale(spec.name, {
      type,
      domain: undefined
    });
  }
  function parseScale(spec, scope) {
    const params = scope.getScale(spec.name).params;
    let key;
    params.domain = parseScaleDomain(spec.domain, spec, scope);
    if (spec.range != null) {
      params.range = parseScaleRange(spec, scope, params);
    }
    if (spec.interpolate != null) {
      parseScaleInterpolate(spec.interpolate, params);
    }
    if (spec.nice != null) {
      params.nice = parseScaleNice(spec.nice);
    }
    if (spec.bins != null) {
      params.bins = parseScaleBins(spec.bins, scope);
    }
    for (key in spec) {
      if (vegaUtil.hasOwnProperty(params, key) || key === 'name') continue;
      params[key] = parseLiteral(spec[key], scope);
    }
  }
  function parseLiteral(v, scope) {
    return !vegaUtil.isObject(v) ? v : v.signal ? scope.signalRef(v.signal) : vegaUtil.error('Unsupported object: ' + vegaUtil.stringValue(v));
  }
  function parseArray(v, scope) {
    return v.signal ? scope.signalRef(v.signal) : v.map(v => parseLiteral(v, scope));
  }
  function dataLookupError(name) {
    vegaUtil.error('Can not find data set: ' + vegaUtil.stringValue(name));
  }
  // -- SCALE DOMAIN ----
  function parseScaleDomain(domain, spec, scope) {
    if (!domain) {
      if (spec.domainMin != null || spec.domainMax != null) {
        vegaUtil.error('No scale domain defined for domainMin/domainMax to override.');
      }
      return;
    }
    return domain.signal ? scope.signalRef(domain.signal) : (vegaUtil.isArray(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
  }
  function explicitDomain(domain, spec, scope) {
    return domain.map(v => parseLiteral(v, scope));
  }
  function singularDomain(domain, spec, scope) {
    const data = scope.getData(domain.data);
    if (!data) dataLookupError(domain.data);
    return vegaScale.isDiscrete(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : vegaScale.isQuantile(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
  }
  function multipleDomain(domain, spec, scope) {
    const data = domain.data, fields = domain.fields.reduce((dom, d) => {
      d = vegaUtil.isString(d) ? {
        data: data,
        field: d
      } : vegaUtil.isArray(d) || d.signal ? fieldRef$1(d, scope) : d;
      dom.push(d);
      return dom;
    }, []);
    return (vegaScale.isDiscrete(spec.type) ? ordinalMultipleDomain : vegaScale.isQuantile(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
  }
  function fieldRef$1(data, scope) {
    const name = '_:vega:_' + FIELD_REF_ID++, coll = Collect({});
    if (vegaUtil.isArray(data)) {
      coll.value = {
        $ingest: data
      };
    } else if (data.signal) {
      const code = 'setdata(' + vegaUtil.stringValue(name) + ',' + data.signal + ')';
      coll.params.input = scope.signalRef(code);
    }
    scope.addDataPipeline(name, [coll, Sieve({})]);
    return {
      data: name,
      field: 'data'
    };
  }
  function ordinalMultipleDomain(domain, scope, fields) {
    const sort = parseSort(domain.sort, true);
    let a, v;
    // get value counts for each domain field
    const counts = fields.map(f => {
      const data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.countsRef(scope, f.field, sort);
    });
    // aggregate the results from each domain field
    const p = {
      groupby: keyFieldRef,
      pulse: counts
    };
    if (sort) {
      a = sort.op || 'count';
      v = sort.field ? aggrField(a, sort.field) : 'count';
      p.ops = [MULTIDOMAIN_SORT_OPS[a]];
      p.fields = [scope.fieldRef(v)];
      p.as = [v];
    }
    a = scope.add(Aggregate(p));
    // collect aggregate output
    const c = scope.add(Collect({
      pulse: ref(a)
    }));
    // extract values for combined domain
    v = scope.add(Values({
      field: keyFieldRef,
      sort: scope.sortRef(sort),
      pulse: ref(c)
    }));
    return ref(v);
  }
  function parseSort(sort, multidomain) {
    if (sort) {
      if (!sort.field && !sort.op) {
        if (vegaUtil.isObject(sort)) sort.field = 'key'; else sort = {
          field: 'key'
        };
      } else if (!sort.field && sort.op !== 'count') {
        vegaUtil.error('No field provided for sort aggregate op: ' + sort.op);
      } else if (multidomain && sort.field) {
        if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {
          vegaUtil.error('Multiple domain scales can not be sorted using ' + sort.op);
        }
      }
    }
    return sort;
  }
  function quantileMultipleDomain(domain, scope, fields) {
    // get value arrays for each domain field
    const values = fields.map(f => {
      const data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.domainRef(scope, f.field);
    });
    // combine value arrays
    return ref(scope.add(MultiValues({
      values: values
    })));
  }
  function numericMultipleDomain(domain, scope, fields) {
    // get extents for each domain field
    const extents = fields.map(f => {
      const data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.extentRef(scope, f.field);
    });
    // combine extents
    return ref(scope.add(MultiExtent({
      extents: extents
    })));
  }
  // -- SCALE BINS -----
  function parseScaleBins(v, scope) {
    return v.signal || vegaUtil.isArray(v) ? parseArray(v, scope) : scope.objectProperty(v);
  }
  // -- SCALE NICE -----
  function parseScaleNice(nice) {
    return vegaUtil.isObject(nice) ? {
      interval: parseLiteral(nice.interval),
      step: parseLiteral(nice.step)
    } : parseLiteral(nice);
  }
  // -- SCALE INTERPOLATION -----
  function parseScaleInterpolate(interpolate, params) {
    params.interpolate = parseLiteral(interpolate.type || interpolate);
    if (interpolate.gamma != null) {
      params.interpolateGamma = parseLiteral(interpolate.gamma);
    }
  }
  // -- SCALE RANGE -----
  function parseScaleRange(spec, scope, params) {
    const config = scope.config.range;
    let range = spec.range;
    if (range.signal) {
      return scope.signalRef(range.signal);
    } else if (vegaUtil.isString(range)) {
      if (config && vegaUtil.hasOwnProperty(config, range)) {
        spec = vegaUtil.extend({}, spec, {
          range: config[range]
        });
        return parseScaleRange(spec, scope, params);
      } else if (range === 'width') {
        range = [0, {
          signal: 'width'
        }];
      } else if (range === 'height') {
        range = vegaScale.isDiscrete(spec.type) ? [0, {
          signal: 'height'
        }] : [{
          signal: 'height'
        }, 0];
      } else {
        vegaUtil.error('Unrecognized scale range value: ' + vegaUtil.stringValue(range));
      }
    } else if (range.scheme) {
      params.scheme = vegaUtil.isArray(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
      if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
      if (range.count) params.schemeCount = parseLiteral(range.count, scope);
      return;
    } else if (range.step) {
      params.rangeStep = parseLiteral(range.step, scope);
      return;
    } else if (vegaScale.isDiscrete(spec.type) && !vegaUtil.isArray(range)) {
      return parseScaleDomain(range, spec, scope);
    } else if (!vegaUtil.isArray(range)) {
      vegaUtil.error('Unsupported range type: ' + vegaUtil.stringValue(range));
    }
    return range.map(v => (vegaUtil.isArray(v) ? parseArray : parseLiteral)(v, scope));
  }
  function parseProjection(proj, scope) {
    const config = scope.config.projection || ({}), params = {};
    for (const name in proj) {
      if (name === 'name') continue;
      params[name] = parseParameter(proj[name], name, scope);
    }
    // apply projection defaults from config
    for (const name in config) {
      if (params[name] == null) {
        params[name] = parseParameter(config[name], name, scope);
      }
    }
    scope.addProjection(proj.name, params);
  }
  function parseParameter(_, name, scope) {
    return vegaUtil.isArray(_) ? _.map(_ => parseParameter(_, name, scope)) : !vegaUtil.isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : vegaUtil.error('Unsupported parameter object: ' + vegaUtil.stringValue(_));
  }
  const Top = 'top';
  const Left = 'left';
  const Right = 'right';
  const Bottom = 'bottom';
  const Center = 'center';
  const Vertical = 'vertical';
  const Start = 'start';
  const Middle = 'middle';
  const End = 'end';
  const Index = 'index';
  const Label = 'label';
  const Offset = 'offset';
  const Perc = 'perc';
  const Perc2 = 'perc2';
  const Value = 'value';
  const GuideLabelStyle = 'guide-label';
  const GuideTitleStyle = 'guide-title';
  const GroupTitleStyle = 'group-title';
  const GroupSubtitleStyle = 'group-subtitle';
  const Symbols = 'symbol';
  const Gradient = 'gradient';
  const Discrete = 'discrete';
  const Size = 'size';
  const Shape = 'shape';
  const Fill = 'fill';
  const Stroke = 'stroke';
  const StrokeWidth = 'strokeWidth';
  const StrokeDash = 'strokeDash';
  const Opacity = 'opacity';
  // Encoding channels supported by legends
  // In priority order of 'canonical' scale
  const LegendScales = [Size, Shape, Fill, Stroke, StrokeWidth, StrokeDash, Opacity];
  const Skip = {
    name: 1,
    style: 1,
    interactive: 1
  };
  const zero = {
    value: 0
  };
  const one = {
    value: 1
  };
  const GroupMark = 'group';
  const RectMark = 'rect';
  const RuleMark = 'rule';
  const SymbolMark = 'symbol';
  const TextMark = 'text';
  function guideGroup(mark) {
    mark.type = GroupMark;
    mark.interactive = mark.interactive || false;
    return mark;
  }
  function lookup(spec, config) {
    const _ = (name, dflt) => value(spec[name], value(config[name], dflt));
    _.isVertical = s => Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
    _.gradientLength = () => value(spec.gradientLength, config.gradientLength || config.gradientWidth);
    _.gradientThickness = () => value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
    _.entryColumns = () => value(spec.columns, value(config.columns, +_.isVertical(true)));
    return _;
  }
  function getEncoding(name, encode) {
    const v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
    return v && v.signal ? v : v ? v.value : null;
  }
  function getStyle(name, scope, style) {
    const s = scope.config.style[style];
    return s && s[name];
  }
  function anchorExpr(s, e, m) {
    return `item.anchor === '${Start}' ? ${s} : item.anchor === '${End}' ? ${e} : ${m}`;
  }
  const alignExpr = anchorExpr(vegaUtil.stringValue(Left), vegaUtil.stringValue(Right), vegaUtil.stringValue(Center));
  function tickBand(_) {
    const v = _('tickBand');
    let offset = _('tickOffset'), band, extra;
    if (!v) {
      // if no tick band entry, fall back on other properties
      band = _('bandPosition');
      extra = _('tickExtra');
    } else if (v.signal) {
      // if signal, augment code to interpret values
      band = {
        signal: `(${v.signal}) === 'extent' ? 1 : 0.5`
      };
      extra = {
        signal: `(${v.signal}) === 'extent'`
      };
      if (!vegaUtil.isObject(offset)) {
        offset = {
          signal: `(${v.signal}) === 'extent' ? 0 : ${offset}`
        };
      }
    } else if (v === 'extent') {
      // if constant, simply set values
      band = 1;
      extra = true;
      offset = 0;
    } else {
      band = 0.5;
      extra = false;
    }
    return {
      extra,
      band,
      offset
    };
  }
  function extendOffset(value, offset) {
    return !offset ? value : !value ? offset : !vegaUtil.isObject(value) ? {
      value,
      offset
    } : Object.assign({}, value, {
      offset: extendOffset(value.offset, offset)
    });
  }
  function guideMark(mark, extras) {
    if (extras) {
      mark.name = extras.name;
      mark.style = extras.style || mark.style;
      mark.interactive = !!extras.interactive;
      mark.encode = extendEncode(mark.encode, extras, Skip);
    } else {
      mark.interactive = false;
    }
    return mark;
  }
  function legendGradient(spec, scale, config, userEncode) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let enter, start, stop, width, height;
    if (vertical) {
      start = [0, 1];
      stop = [0, 0];
      width = thickness;
      height = length;
    } else {
      start = [0, 0];
      stop = [1, 0];
      width = length;
      height = thickness;
    }
    const encode = {
      enter: enter = {
        opacity: zero,
        x: zero,
        y: zero,
        width: encoder(width),
        height: encoder(height)
      },
      update: vegaUtil.extend({}, enter, {
        opacity: one,
        fill: {
          gradient: scale,
          start: start,
          stop: stop
        }
      }),
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      stroke: _('gradientStrokeColor'),
      strokeWidth: _('gradientStrokeWidth')
    }, {
      // update
      opacity: _('gradientOpacity')
    });
    return guideMark({
      type: RectMark,
      role: LegendGradientRole,
      encode
    }, userEncode);
  }
  function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let u, v, uu, vv, adjust = '';
    vertical ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-') : (u = 'x', uu = 'x2', v = 'y', vv = 'height');
    const enter = {
      opacity: zero,
      fill: {
        scale: scale,
        field: Value
      }
    };
    enter[u] = {
      signal: adjust + 'datum.' + Perc,
      mult: length
    };
    enter[v] = zero;
    enter[uu] = {
      signal: adjust + 'datum.' + Perc2,
      mult: length
    };
    enter[vv] = encoder(thickness);
    const encode = {
      enter: enter,
      update: vegaUtil.extend({}, enter, {
        opacity: one
      }),
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      stroke: _('gradientStrokeColor'),
      strokeWidth: _('gradientStrokeWidth')
    }, {
      // update
      opacity: _('gradientOpacity')
    });
    return guideMark({
      type: RectMark,
      role: LegendBandRole,
      key: Value,
      from: dataRef,
      encode
    }, userEncode);
  }
  const alignExpr$1 = `datum.${Perc}<=0?"${Left}":datum.${Perc}>=1?"${Right}":"${Center}"`, baselineExpr = `datum.${Perc}<=0?"${Bottom}":datum.${Perc}>=1?"${Top}":"${Middle}"`;
  function legendGradientLabels(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = encoder(_.gradientThickness()), length = _.gradientLength();
    let overlap = _('labelOverlap'), enter, update, u, v, adjust = '';
    const encode = {
      enter: enter = {
        opacity: zero
      },
      update: update = {
        opacity: one,
        text: {
          field: Label
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      fill: _('labelColor'),
      fillOpacity: _('labelOpacity'),
      font: _('labelFont'),
      fontSize: _('labelFontSize'),
      fontStyle: _('labelFontStyle'),
      fontWeight: _('labelFontWeight'),
      limit: value(spec.labelLimit, config.gradientLabelLimit)
    });
    if (vertical) {
      enter.align = {
        value: 'left'
      };
      enter.baseline = update.baseline = {
        signal: baselineExpr
      };
      u = 'y';
      v = 'x';
      adjust = '1-';
    } else {
      enter.align = update.align = {
        signal: alignExpr$1
      };
      enter.baseline = {
        value: 'top'
      };
      u = 'x';
      v = 'y';
    }
    enter[u] = update[u] = {
      signal: adjust + 'datum.' + Perc,
      mult: length
    };
    enter[v] = update[v] = thickness;
    thickness.offset = value(spec.labelOffset, config.gradientLabelOffset) || 0;
    overlap = overlap ? {
      separation: _('labelSeparation'),
      method: overlap,
      order: 'datum.' + Index
    } : undefined;
    // type, role, style, key, dataRef, encode, extras
    return guideMark({
      type: TextMark,
      role: LegendLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: dataRef,
      encode,
      overlap
    }, userEncode);
  }
  function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
    const _ = lookup(spec, config), entries = userEncode.entries, interactive = !!(entries && entries.interactive), name = entries ? entries.name : undefined, height = _('clipHeight'), symbolOffset = _('symbolOffset'), valueRef = {
      data: 'value'
    }, xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`, yEncode = height ? encoder(height) : {
      field: Size
    }, index = `datum.${Index}`, ncols = `max(1, ${columns})`;
    let encode, enter, update, nrows, sort;
    yEncode.mult = 0.5;
    // -- LEGEND SYMBOLS --
    encode = {
      enter: enter = {
        opacity: zero,
        x: {
          signal: xSignal,
          mult: 0.5,
          offset: symbolOffset
        },
        y: yEncode
      },
      update: update = {
        opacity: one,
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero
      }
    };
    let baseFill = null, baseStroke = null;
    if (!spec.fill) {
      baseFill = config.symbolBaseFillColor;
      baseStroke = config.symbolBaseStrokeColor;
    }
    addEncoders(encode, {
      fill: _('symbolFillColor', baseFill),
      shape: _('symbolType'),
      size: _('symbolSize'),
      stroke: _('symbolStrokeColor', baseStroke),
      strokeDash: _('symbolDash'),
      strokeDashOffset: _('symbolDashOffset'),
      strokeWidth: _('symbolStrokeWidth')
    }, {
      // update
      opacity: _('symbolOpacity')
    });
    LegendScales.forEach(scale => {
      if (spec[scale]) {
        update[scale] = enter[scale] = {
          scale: spec[scale],
          field: Value
        };
      }
    });
    const symbols = guideMark({
      type: SymbolMark,
      role: LegendSymbolRole,
      key: Value,
      from: valueRef,
      clip: height ? true : undefined,
      encode
    }, userEncode.symbols);
    // -- LEGEND LABELS --
    const labelOffset = encoder(symbolOffset);
    labelOffset.offset = _('labelOffset');
    encode = {
      enter: enter = {
        opacity: zero,
        x: {
          signal: xSignal,
          offset: labelOffset
        },
        y: yEncode
      },
      update: update = {
        opacity: one,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      align: _('labelAlign'),
      baseline: _('labelBaseline'),
      fill: _('labelColor'),
      fillOpacity: _('labelOpacity'),
      font: _('labelFont'),
      fontSize: _('labelFontSize'),
      fontStyle: _('labelFontStyle'),
      fontWeight: _('labelFontWeight'),
      limit: _('labelLimit')
    });
    const labels = guideMark({
      type: TextMark,
      role: LegendLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: valueRef,
      encode
    }, userEncode.labels);
    // -- LEGEND ENTRY GROUPS --
    encode = {
      enter: {
        noBound: {
          value: !height
        },
        // ignore width/height in bounds calc
        width: zero,
        height: height ? encoder(height) : zero,
        opacity: zero
      },
      exit: {
        opacity: zero
      },
      update: update = {
        opacity: one,
        row: {
          signal: null
        },
        column: {
          signal: null
        }
      }
    };
    // annotate and sort groups to ensure correct ordering
    if (_.isVertical(true)) {
      nrows = `ceil(item.mark.items.length / ${ncols})`;
      update.row.signal = `${index}%${nrows}`;
      update.column.signal = `floor(${index} / ${nrows})`;
      sort = {
        field: ['row', index]
      };
    } else {
      update.row.signal = `floor(${index} / ${ncols})`;
      update.column.signal = `${index} % ${ncols}`;
      sort = {
        field: index
      };
    }
    // handle zero column case (implies infinite columns)
    update.column.signal = `(${columns})?${update.column.signal}:${index}`;
    // facet legend entries into sub-groups
    dataRef = {
      facet: {
        data: dataRef,
        name: 'value',
        groupby: Index
      }
    };
    return guideGroup({
      role: ScopeRole,
      from: dataRef,
      encode: extendEncode(encode, entries, Skip),
      marks: [symbols, labels],
      name,
      interactive,
      sort
    });
  }
  function legendSymbolLayout(spec, config) {
    const _ = lookup(spec, config);
    // layout parameters for legend entries
    return {
      align: _('gridAlign'),
      columns: _.entryColumns(),
      center: {
        row: true,
        column: false
      },
      padding: {
        row: _('rowPadding'),
        column: _('columnPadding')
      }
    };
  }
  const isL = 'item.orient === "left"', isR = 'item.orient === "right"', isLR = `(${isL} || ${isR})`, isVG = `datum.vgrad && ${isLR}`, baseline = anchorExpr('"top"', '"bottom"', '"middle"'), alignFlip = anchorExpr('"right"', '"left"', '"center"'), exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${alignExpr}`, exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`, exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`, exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline}) : "top"`;
  function legendTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config);
    const encode = {
      enter: {
        opacity: zero
      },
      update: {
        opacity: one,
        x: {
          field: {
            group: 'padding'
          }
        },
        y: {
          field: {
            group: 'padding'
          }
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      orient: _('titleOrient'),
      _anchor: _('titleAnchor'),
      anchor: {
        signal: exprAnchor
      },
      angle: {
        signal: exprAngle
      },
      align: {
        signal: exprAlign
      },
      baseline: {
        signal: exprBaseline
      },
      text: spec.title,
      fill: _('titleColor'),
      fillOpacity: _('titleOpacity'),
      font: _('titleFont'),
      fontSize: _('titleFontSize'),
      fontStyle: _('titleFontStyle'),
      fontWeight: _('titleFontWeight'),
      limit: _('titleLimit'),
      lineHeight: _('titleLineHeight')
    }, {
      // require update
      align: _('titleAlign'),
      baseline: _('titleBaseline')
    });
    return guideMark({
      type: TextMark,
      role: LegendTitleRole,
      style: GuideTitleStyle,
      from: dataRef,
      encode
    }, userEncode);
  }
  function clip(clip, scope) {
    let expr;
    if (vegaUtil.isObject(clip)) {
      if (clip.signal) {
        expr = clip.signal;
      } else if (clip.path) {
        expr = 'pathShape(' + param(clip.path) + ')';
      } else if (clip.sphere) {
        expr = 'geoShape(' + param(clip.sphere) + ', {type: "Sphere"})';
      }
    }
    return expr ? scope.signalRef(expr) : !!clip;
  }
  function param(value) {
    return vegaUtil.isObject(value) && value.signal ? value.signal : vegaUtil.stringValue(value);
  }
  function getRole(spec) {
    const role = spec.role || '';
    return !role.indexOf('axis') || !role.indexOf('legend') || !role.indexOf('title') ? role : spec.type === GroupMark ? ScopeRole : role || MarkRole;
  }
  function definition(spec) {
    return {
      marktype: spec.type,
      name: spec.name || undefined,
      role: spec.role || getRole(spec),
      zindex: +spec.zindex || undefined,
      aria: spec.aria,
      description: spec.description
    };
  }
  function interactive(spec, scope) {
    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
  }
  /**
  * Parse a data transform specification.
  */
  function parseTransform(spec, scope) {
    const def = vegaDataflow.definition(spec.type);
    if (!def) vegaUtil.error('Unrecognized transform type: ' + vegaUtil.stringValue(spec.type));
    const t = entry$1(def.type.toLowerCase(), null, parseParameters(def, spec, scope));
    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
    t.metadata = def.metadata || ({});
    return t;
  }
  /**
  * Parse all parameters of a data transform.
  */
  function parseParameters(def, spec, scope) {
    const params = {}, n = def.params.length;
    for (let i = 0; i < n; ++i) {
      const pdef = def.params[i];
      params[pdef.name] = parseParameter$1(pdef, spec, scope);
    }
    return params;
  }
  /**
  * Parse a data transform parameter.
  */
  function parseParameter$1(def, spec, scope) {
    const type = def.type, value = spec[def.name];
    if (type === 'index') {
      return parseIndexParameter(def, spec, scope);
    } else if (value === undefined) {
      if (def.required) {
        vegaUtil.error('Missing required ' + vegaUtil.stringValue(spec.type) + ' parameter: ' + vegaUtil.stringValue(def.name));
      }
      return;
    } else if (type === 'param') {
      return parseSubParameters(def, spec, scope);
    } else if (type === 'projection') {
      return scope.projectionRef(spec[def.name]);
    }
    return def.array && !isSignal(value) ? value.map(v => parameterValue(def, v, scope)) : parameterValue(def, value, scope);
  }
  /**
  * Parse a single parameter value.
  */
  function parameterValue(def, value, scope) {
    const type = def.type;
    if (isSignal(value)) {
      return isExpr$1(type) ? vegaUtil.error('Expression references can not be signals.') : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
    } else {
      const expr = def.expr || isField(type);
      return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? fieldRef(value.field, value.as) : isExpr$1(type) ? vegaFunctions.parseExpression(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? fieldRef(value) : isCompare(type) ? scope.compareRef(value) : value;
    }
  }
  /**
  * Parse parameter for accessing an index of another data set.
  */
  function parseIndexParameter(def, spec, scope) {
    if (!vegaUtil.isString(spec.from)) {
      vegaUtil.error('Lookup "from" parameter must be a string literal.');
    }
    return scope.getData(spec.from).lookupRef(scope, spec.key);
  }
  /**
  * Parse a parameter that contains one or more sub-parameter objects.
  */
  function parseSubParameters(def, spec, scope) {
    const value = spec[def.name];
    if (def.array) {
      if (!vegaUtil.isArray(value)) {
        // signals not allowed!
        vegaUtil.error('Expected an array of sub-parameters. Instead: ' + vegaUtil.stringValue(value));
      }
      return value.map(v => parseSubParameter(def, v, scope));
    } else {
      return parseSubParameter(def, value, scope);
    }
  }
  /**
  * Parse a sub-parameter object.
  */
  function parseSubParameter(def, value, scope) {
    const n = def.params.length;
    let pdef;
    // loop over defs to find matching key
    for (let i = 0; i < n; ++i) {
      pdef = def.params[i];
      for (const k in pdef.key) {
        if (pdef.key[k] !== value[k]) {
          pdef = null;
          break;
        }
      }
      if (pdef) break;
    }
    // raise error if matching key not found
    if (!pdef) vegaUtil.error('Unsupported parameter: ' + vegaUtil.stringValue(value));
    // parse params, create Params transform, return ref
    const params = vegaUtil.extend(parseParameters(pdef, value, scope), pdef.key);
    return ref(scope.add(Params(params)));
  }
  // -- Utilities -----
  const outerExpr = _ => _ && _.expr;
  const outerField = _ => _ && _.field;
  const isData = _ => _ === 'data';
  const isExpr$1 = _ => _ === 'expr';
  const isField = _ => _ === 'field';
  const isCompare = _ => _ === 'compare';
  function parseData(from, group, scope) {
    let facet, key, op, dataRef, parent;
    // if no source data, generate singleton datum
    if (!from) {
      dataRef = ref(scope.add(Collect(null, [{}])));
          // if faceted, process facet specification
} else // if faceted, process facet specification
    if (facet = from.facet) {
      if (!group) vegaUtil.error('Only group marks can be faceted.');
      // use pre-faceted source data, if available
      if (facet.field != null) {
        dataRef = parent = getDataRef(facet, scope);
      } else {
        // generate facet aggregates if no direct data specification
        if (!from.data) {
          op = parseTransform(vegaUtil.extend({
            type: 'aggregate',
            groupby: vegaUtil.array(facet.groupby)
          }, facet.aggregate), scope);
          op.params.key = scope.keyRef(facet.groupby);
          op.params.pulse = getDataRef(facet, scope);
          dataRef = parent = ref(scope.add(op));
        } else {
          parent = ref(scope.getData(from.data).aggregate);
        }
        key = scope.keyRef(facet.groupby, true);
      }
    }
    // if not yet defined, get source data reference
    if (!dataRef) {
      dataRef = getDataRef(from, scope);
    }
    return {
      key: key,
      pulse: dataRef,
      parent: parent
    };
  }
  function getDataRef(from, scope) {
    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
  }
  function DataScope(scope, input, output, values, aggr) {
    this.scope = scope;
    // parent scope object
    this.input = input;
    // first operator in pipeline (tuple input)
    this.output = output;
    // last operator in pipeline (tuple output)
    this.values = values;
    // operator for accessing tuples (but not tuple flow)
    // last aggregate in transform pipeline
    this.aggregate = aggr;
    // lookup table of field indices
    this.index = {};
  }
  DataScope.fromEntries = function (scope, entries) {
    const n = entries.length, values = entries[n - 1], output = entries[n - 2];
    let input = entries[0], aggr = null, i = 1;
    if (input && input.type === 'load') {
      input = entries[1];
    }
    // add operator entries to this scope, wire up pulse chain
    scope.add(entries[0]);
    for (; i < n; ++i) {
      entries[i].params.pulse = ref(entries[i - 1]);
      scope.add(entries[i]);
      if (entries[i].type === 'aggregate') aggr = entries[i];
    }
    return new DataScope(scope, input, output, values, aggr);
  };
  function fieldKey(field) {
    return vegaUtil.isString(field) ? field : null;
  }
  function addSortField(scope, p, sort) {
    const as = aggrField(sort.op, sort.field);
    let s;
    if (p.ops) {
      for (let i = 0, n = p.as.length; i < n; ++i) {
        if (p.as[i] === as) return;
      }
    } else {
      p.ops = ['count'];
      p.fields = [null];
      p.as = ['count'];
    }
    if (sort.op) {
      p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
      p.fields.push(scope.fieldRef(sort.field));
      p.as.push(as);
    }
  }
  function cache(scope, ds, name, optype, field, counts, index) {
    const cache = ds[name] || (ds[name] = {}), sort = sortKey(counts);
    let k = fieldKey(field), v, op;
    if (k != null) {
      scope = ds.scope;
      k = k + (sort ? '|' + sort : '');
      v = cache[k];
    }
    if (!v) {
      const params = counts ? {
        field: keyFieldRef,
        pulse: ds.countsRef(scope, field, counts)
      } : {
        field: scope.fieldRef(field),
        pulse: ref(ds.output)
      };
      if (sort) params.sort = scope.sortRef(counts);
      op = scope.add(entry$1(optype, undefined, params));
      if (index) ds.index[field] = op;
      v = ref(op);
      if (k != null) cache[k] = v;
    }
    return v;
  }
  DataScope.prototype = {
    countsRef(scope, field, sort) {
      const ds = this, cache = ds.counts || (ds.counts = {}), k = fieldKey(field);
      let v, a, p;
      if (k != null) {
        scope = ds.scope;
        v = cache[k];
      }
      if (!v) {
        p = {
          groupby: scope.fieldRef(field, 'key'),
          pulse: ref(ds.output)
        };
        if (sort && sort.field) addSortField(scope, p, sort);
        a = scope.add(Aggregate(p));
        v = scope.add(Collect({
          pulse: ref(a)
        }));
        v = {
          agg: a,
          ref: ref(v)
        };
        if (k != null) cache[k] = v;
      } else if (sort && sort.field) {
        addSortField(scope, v.agg.params, sort);
      }
      return v.ref;
    },
    tuplesRef() {
      return ref(this.values);
    },
    extentRef(scope, field) {
      return cache(scope, this, 'extent', 'extent', field, false);
    },
    domainRef(scope, field) {
      return cache(scope, this, 'domain', 'values', field, false);
    },
    valuesRef(scope, field, sort) {
      return cache(scope, this, 'vals', 'values', field, sort || true);
    },
    lookupRef(scope, field) {
      return cache(scope, this, 'lookup', 'tupleindex', field, false);
    },
    indataRef(scope, field) {
      return cache(scope, this, 'indata', 'tupleindex', field, true, true);
    }
  };
  function parseFacet(spec, scope, group) {
    const facet = spec.from.facet, name = facet.name, data = getDataRef(facet, scope);
    let op;
    if (!facet.name) {
      vegaUtil.error('Facet must have a name: ' + vegaUtil.stringValue(facet));
    }
    if (!facet.data) {
      vegaUtil.error('Facet must reference a data set: ' + vegaUtil.stringValue(facet));
    }
    if (facet.field) {
      op = scope.add(PreFacet({
        field: scope.fieldRef(facet.field),
        pulse: data
      }));
    } else if (facet.groupby) {
      op = scope.add(Facet({
        key: scope.keyRef(facet.groupby),
        group: ref(scope.proxy(group.parent)),
        pulse: data
      }));
    } else {
      vegaUtil.error('Facet must specify groupby or field: ' + vegaUtil.stringValue(facet));
    }
    // initialize facet subscope
    const subscope = scope.fork(), source = subscope.add(Collect()), values = subscope.add(Sieve({
      pulse: ref(source)
    }));
    subscope.addData(name, new DataScope(subscope, source, source, values));
    subscope.addSignal('parent', null);
    // parse faceted subflow
    op.params.subflow = {
      $subflow: subscope.parse(spec).toRuntime()
    };
  }
  function parseSubflow(spec, scope, input) {
    const op = scope.add(PreFacet({
      pulse: input.pulse
    })), subscope = scope.fork();
    subscope.add(Sieve());
    subscope.addSignal('parent', null);
    // parse group mark subflow
    op.params.subflow = {
      $subflow: subscope.parse(spec).toRuntime()
    };
  }
  function parseTrigger(spec, scope, name) {
    const remove = spec.remove, insert = spec.insert, toggle = spec.toggle, modify = spec.modify, values = spec.values, op = scope.add(operator());
    const update = 'if(' + spec.trigger + ',modify("' + name + '",' + [insert, remove, toggle, modify, values].map(_ => _ == null ? 'null' : _).join(',') + '),0)';
    const expr = vegaFunctions.parseExpression(update, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
  }
  function parseMark(spec, scope) {
    const role = getRole(spec), group = spec.type === GroupMark, facet = spec.from && spec.from.facet, overlap = spec.overlap;
    let layout = spec.layout || role === ScopeRole || role === FrameRole, ops, op, store, enc, name, layoutRef, boundRef;
    const nested = role === MarkRole || layout || facet;
    // resolve input data
    const input = parseData(spec.from, group, scope);
    // data join to map tuples to visual items
    op = scope.add(DataJoin({
      key: input.key || (spec.key ? fieldRef(spec.key) : undefined),
      pulse: input.pulse,
      clean: !group
    }));
    const joinRef = ref(op);
    // collect visual items
    op = store = scope.add(Collect({
      pulse: joinRef
    }));
    // connect visual items to scenegraph
    op = scope.add(Mark({
      markdef: definition(spec),
      interactive: interactive(spec.interactive, scope),
      clip: clip(spec.clip, scope),
      context: {
        $context: true
      },
      groups: scope.lookup(),
      parent: scope.signals.parent ? scope.signalRef('parent') : null,
      index: scope.markpath(),
      pulse: ref(op)
    }));
    const markRef = ref(op);
    // add visual encoders
    op = enc = scope.add(Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
      mod: false,
      pulse: markRef
    })));
    // monitor parent marks to propagate changes
    op.params.parent = scope.encode();
    // add post-encoding transforms, if defined
    if (spec.transform) {
      spec.transform.forEach(_ => {
        const tx = parseTransform(_, scope), md = tx.metadata;
        if (md.generates || md.changes) {
          vegaUtil.error('Mark transforms should not generate new data.');
        }
        if (!md.nomod) enc.params.mod = true;
        // update encode mod handling
        tx.params.pulse = ref(op);
        scope.add(op = tx);
      });
    }
    // if item sort specified, perform post-encoding
    if (spec.sort) {
      op = scope.add(SortItems({
        sort: scope.compareRef(spec.sort),
        pulse: ref(op)
      }));
    }
    const encodeRef = ref(op);
    // add view layout operator if needed
    if (facet || layout) {
      layout = scope.add(ViewLayout({
        layout: scope.objectProperty(spec.layout),
        legends: scope.legends,
        mark: markRef,
        pulse: encodeRef
      }));
      layoutRef = ref(layout);
    }
    // compute bounding boxes
    const bound = scope.add(Bound({
      mark: markRef,
      pulse: layoutRef || encodeRef
    }));
    boundRef = ref(bound);
    // if group mark, recurse to parse nested content
    if (group) {
      // juggle layout & bounds to ensure they run *after* any faceting transforms
      if (nested) {
        ops = scope.operators;
        ops.pop();
        if (layout) ops.pop();
      }
      scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
      facet ? parseFacet(spec, scope, input) : // explicit facet
      nested ? parseSubflow(spec, scope, input) : // standard mark group
      scope.parse(spec);
      // guide group, we can avoid nested scopes
      scope.popState();
      if (nested) {
        if (layout) ops.push(layout);
        ops.push(bound);
      }
    }
    // if requested, add overlap removal transform
    if (overlap) {
      boundRef = parseOverlap(overlap, boundRef, scope);
    }
    // render / sieve items
    const render = scope.add(Render({
      pulse: boundRef
    })), sieve = scope.add(Sieve({
      pulse: ref(render)
    }, undefined, scope.parent()));
    // if mark is named, make accessible as reactive geometry
    // add trigger updates if defined
    if (spec.name != null) {
      name = spec.name;
      scope.addData(name, new DataScope(scope, store, render, sieve));
      if (spec.on) spec.on.forEach(on => {
        if (on.insert || on.remove || on.toggle) {
          vegaUtil.error('Marks only support modify triggers.');
        }
        parseTrigger(on, scope, name);
      });
    }
  }
  function parseOverlap(overlap, source, scope) {
    const method = overlap.method, bound = overlap.bound, sep = overlap.separation;
    const params = {
      separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
      method: isSignal(method) ? scope.signalRef(method.signal) : method,
      pulse: source
    };
    if (overlap.order) {
      params.sort = scope.compareRef({
        field: overlap.order
      });
    }
    if (bound) {
      const tol = bound.tolerance;
      params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
      params.boundScale = scope.scaleRef(bound.scale);
      params.boundOrient = bound.orient;
    }
    return ref(scope.add(Overlap(params)));
  }
  function parseLegend(spec, scope) {
    const config = scope.config.legend, encode = spec.encode || ({}), _ = lookup(spec, config), legendEncode = encode.legend || ({}), name = legendEncode.name || undefined, interactive = legendEncode.interactive, style = legendEncode.style, scales = {};
    let scale = 0, entryLayout, params, children;
    // resolve scales and 'canonical' scale name
    LegendScales.forEach(s => spec[s] ? (scales[s] = spec[s], scale = scale || spec[s]) : 0);
    if (!scale) vegaUtil.error('Missing valid scale for legend.');
    // resolve legend type (symbol, gradient, or discrete gradient)
    const type = legendType(spec, scope.scaleType(scale));
    // single-element data source for legend group
    const datum = {
      title: spec.title != null,
      scales: scales,
      type: type,
      vgrad: type !== 'symbol' && _.isVertical()
    };
    const dataRef = ref(scope.add(Collect(null, [datum])));
    // encoding properties for legend entry sub-group
    const entryEncode = {
      enter: {
        x: {
          value: 0
        },
        y: {
          value: 0
        }
      }
    };
    // data source for legend values
    const entryRef = ref(scope.add(LegendEntries(params = {
      type: type,
      scale: scope.scaleRef(scale),
      count: scope.objectProperty(_('tickCount')),
      limit: scope.property(_('symbolLimit')),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    })));
    // continuous gradient legend
    if (type === Gradient) {
      children = [legendGradient(spec, scale, config, encode.gradient), legendGradientLabels(spec, config, encode.labels, entryRef)];
      // adjust default tick count based on the gradient length
      params.count = params.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);
          // discrete gradient legend
} else // discrete gradient legend
    if (type === Discrete) {
      children = [legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef), legendGradientLabels(spec, config, encode.labels, entryRef)];
          // symbol legend
} else // symbol legend
    {
      // determine legend symbol group layout
      entryLayout = legendSymbolLayout(spec, config);
      children = [legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))];
      // pass symbol size information to legend entry generator
      params.size = sizeExpression(spec, scope, children[0].marks);
    }
    // generate legend marks
    children = [guideGroup({
      role: LegendEntryRole,
      from: dataRef,
      encode: entryEncode,
      marks: children,
      layout: entryLayout,
      interactive
    })];
    // include legend title if defined
    if (datum.title) {
      children.push(legendTitle(spec, config, encode.title, dataRef));
    }
    // parse legend specification
    return parseMark(guideGroup({
      role: LegendRole,
      from: dataRef,
      encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip),
      marks: children,
      aria: _('aria'),
      description: _('description'),
      zindex: _('zindex'),
      name,
      interactive,
      style
    }), scope);
  }
  function legendType(spec, scaleType) {
    let type = spec.type || Symbols;
    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
      type = vegaScale.isContinuous(scaleType) ? Gradient : vegaScale.isDiscretizing(scaleType) ? Discrete : Symbols;
    }
    return type !== Gradient ? type : vegaScale.isDiscretizing(scaleType) ? Discrete : Gradient;
  }
  function scaleCount(spec) {
    return LegendScales.reduce((count, type) => count + (spec[type] ? 1 : 0), 0);
  }
  function buildLegendEncode(_, spec, config) {
    const encode = {
      enter: {},
      update: {}
    };
    addEncoders(encode, {
      orient: _('orient'),
      offset: _('offset'),
      padding: _('padding'),
      titlePadding: _('titlePadding'),
      cornerRadius: _('cornerRadius'),
      fill: _('fillColor'),
      stroke: _('strokeColor'),
      strokeWidth: config.strokeWidth,
      strokeDash: config.strokeDash,
      x: _('legendX'),
      y: _('legendY'),
      // accessibility support
      format: spec.format,
      formatType: spec.formatType
    });
    return encode;
  }
  function sizeExpression(spec, scope, marks) {
    const size = deref(getChannel('size', spec, marks)), strokeWidth = deref(getChannel('strokeWidth', spec, marks)), fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
    return vegaFunctions.parseExpression(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`, scope);
  }
  function getChannel(name, spec, marks) {
    return spec[name] ? `scale("${spec[name]}",datum)` : getEncoding(name, marks[0].encode);
  }
  function getFontSize(encode, scope, style) {
    return getEncoding('fontSize', encode) || getStyle('fontSize', scope, style);
  }
  const angleExpr = `item.orient==="${Left}"?-90:item.orient==="${Right}"?90:0`;
  function parseTitle(spec, scope) {
    spec = vegaUtil.isString(spec) ? {
      text: spec
    } : spec;
    const _ = lookup(spec, scope.config.title), encode = spec.encode || ({}), userEncode = encode.group || ({}), name = userEncode.name || undefined, interactive = userEncode.interactive, style = userEncode.style, children = [];
    // single-element data source for group title
    const datum = {}, dataRef = ref(scope.add(Collect(null, [datum])));
    // include title text
    children.push(buildTitle(spec, _, titleEncode(spec), dataRef));
    // include subtitle text
    if (spec.subtitle) {
      children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));
    }
    // parse title specification
    return parseMark(guideGroup({
      role: TitleRole,
      from: dataRef,
      encode: groupEncode(_, userEncode),
      marks: children,
      aria: _('aria'),
      description: _('description'),
      zindex: _('zindex'),
      name,
      interactive,
      style
    }), scope);
  }
  // provide backwards-compatibility for title custom encode;
  // the top-level encode block has been *deprecated*.
  function titleEncode(spec) {
    const encode = spec.encode;
    return encode && encode.title || vegaUtil.extend({
      name: spec.name,
      interactive: spec.interactive,
      style: spec.style
    }, encode);
  }
  function groupEncode(_, userEncode) {
    const encode = {
      enter: {},
      update: {}
    };
    addEncoders(encode, {
      orient: _('orient'),
      anchor: _('anchor'),
      align: {
        signal: alignExpr
      },
      angle: {
        signal: angleExpr
      },
      limit: _('limit'),
      frame: _('frame'),
      offset: _('offset') || 0,
      padding: _('subtitlePadding')
    });
    return extendEncode(encode, userEncode, Skip);
  }
  function buildTitle(spec, _, userEncode, dataRef) {
    const zero = {
      value: 0
    }, text = spec.text, encode = {
      enter: {
        opacity: zero
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      text: text,
      align: {
        signal: 'item.mark.group.align'
      },
      angle: {
        signal: 'item.mark.group.angle'
      },
      limit: {
        signal: 'item.mark.group.limit'
      },
      baseline: 'top',
      dx: _('dx'),
      dy: _('dy'),
      fill: _('color'),
      font: _('font'),
      fontSize: _('fontSize'),
      fontStyle: _('fontStyle'),
      fontWeight: _('fontWeight'),
      lineHeight: _('lineHeight')
    }, {
      // update
      align: _('align'),
      angle: _('angle'),
      baseline: _('baseline')
    });
    return guideMark({
      type: TextMark,
      role: TitleTextRole,
      style: GroupTitleStyle,
      from: dataRef,
      encode
    }, userEncode);
  }
  function buildSubTitle(spec, _, userEncode, dataRef) {
    const zero = {
      value: 0
    }, text = spec.subtitle, encode = {
      enter: {
        opacity: zero
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      text: text,
      align: {
        signal: 'item.mark.group.align'
      },
      angle: {
        signal: 'item.mark.group.angle'
      },
      limit: {
        signal: 'item.mark.group.limit'
      },
      baseline: 'top',
      dx: _('dx'),
      dy: _('dy'),
      fill: _('subtitleColor'),
      font: _('subtitleFont'),
      fontSize: _('subtitleFontSize'),
      fontStyle: _('subtitleFontStyle'),
      fontWeight: _('subtitleFontWeight'),
      lineHeight: _('subtitleLineHeight')
    }, {
      // update
      align: _('align'),
      angle: _('angle'),
      baseline: _('baseline')
    });
    return guideMark({
      type: TextMark,
      role: TitleSubtitleRole,
      style: GroupSubtitleStyle,
      from: dataRef,
      encode
    }, userEncode);
  }
  function parseData$1(data, scope) {
    const transforms = [];
    if (data.transform) {
      data.transform.forEach(tx => {
        transforms.push(parseTransform(tx, scope));
      });
    }
    if (data.on) {
      data.on.forEach(on => {
        parseTrigger(on, scope, data.name);
      });
    }
    scope.addDataPipeline(data.name, analyze(data, scope, transforms));
  }
  /**
  * Analyze a data pipeline, add needed operators.
  */
  function analyze(data, scope, ops) {
    const output = [];
    let source = null, modify = false, generate = false, upstream, i, n, t, m;
    if (data.values) {
      // hard-wired input data set
      if (isSignal(data.values) || hasSignal(data.format)) {
        // if either values is signal or format has signal, use dynamic loader
        output.push(load(scope, data));
        output.push(source = collect());
      } else {
        // otherwise, ingest upon dataflow init
        output.push(source = collect({
          $ingest: data.values,
          $format: data.format
        }));
      }
    } else if (data.url) {
      // load data from external source
      if (hasSignal(data.url) || hasSignal(data.format)) {
        // if either url or format has signal, use dynamic loader
        output.push(load(scope, data));
        output.push(source = collect());
      } else {
        // otherwise, request load upon dataflow init
        output.push(source = collect({
          $request: data.url,
          $format: data.format
        }));
      }
    } else if (data.source) {
      // derives from one or more other data sets
      source = upstream = vegaUtil.array(data.source).map(d => ref(scope.getData(d).output));
      output.push(null);
    }
    // scan data transforms, add collectors as needed
    for ((i = 0, n = ops.length); i < n; ++i) {
      t = ops[i];
      m = t.metadata;
      if (!source && !m.source) {
        output.push(source = collect());
      }
      output.push(t);
      if (m.generates) generate = true;
      if (m.modifies && !generate) modify = true;
      if (m.source) source = t; else if (m.changes) source = null;
    }
    if (upstream) {
      n = upstream.length - 1;
      output[0] = Relay({
        derive: modify,
        pulse: n ? upstream : upstream[0]
      });
      if (modify || n) {
        // collect derived and multi-pulse tuples
        output.splice(1, 0, collect());
      }
    }
    if (!source) output.push(collect());
    output.push(Sieve({}));
    return output;
  }
  function collect(values) {
    const s = Collect({}, values);
    s.metadata = {
      source: true
    };
    return s;
  }
  function load(scope, data) {
    return Load({
      url: data.url ? scope.property(data.url) : undefined,
      async: data.async ? scope.property(data.async) : undefined,
      values: data.values ? scope.property(data.values) : undefined,
      format: scope.objectProperty(data.format)
    });
  }
  const isX = orient => orient === Bottom || orient === Top;
  // get sign coefficient based on axis orient
  const getSign = (orient, a, b) => isSignal(orient) ? ifLeftTopExpr(orient.signal, a, b) : orient === Left || orient === Top ? a : b;
  // condition on axis x-direction
  const ifX = (orient, a, b) => isSignal(orient) ? ifXEnc(orient.signal, a, b) : isX(orient) ? a : b;
  // condition on axis y-direction
  const ifY = (orient, a, b) => isSignal(orient) ? ifYEnc(orient.signal, a, b) : isX(orient) ? b : a;
  const ifTop = (orient, a, b) => isSignal(orient) ? ifTopExpr(orient.signal, a, b) : orient === Top ? {
    value: a
  } : {
    value: b
  };
  const ifRight = (orient, a, b) => isSignal(orient) ? ifRightExpr(orient.signal, a, b) : orient === Right ? {
    value: a
  } : {
    value: b
  };
  const ifXEnc = ($orient, a, b) => ifEnc(`${$orient} === '${Top}' || ${$orient} === '${Bottom}'`, a, b);
  const ifYEnc = ($orient, a, b) => ifEnc(`${$orient} !== '${Top}' && ${$orient} !== '${Bottom}'`, a, b);
  const ifLeftTopExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Left}' || ${$orient} === '${Top}'`, a, b);
  const ifTopExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Top}'`, a, b);
  const ifRightExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Right}'`, a, b);
  const ifEnc = (test, a, b) => {
    // ensure inputs are encoder objects (or null)
    a = a != null ? encoder(a) : a;
    b = b != null ? encoder(b) : b;
    if (isSimple(a) && isSimple(b)) {
      // if possible generate simple signal expression
      a = a ? a.signal || vegaUtil.stringValue(a.value) : null;
      b = b ? b.signal || vegaUtil.stringValue(b.value) : null;
      return {
        signal: `${test} ? (${a}) : (${b})`
      };
    } else {
      // otherwise generate rule set
      return [vegaUtil.extend({
        test
      }, a)].concat(b || []);
    }
  };
  const isSimple = enc => enc == null || Object.keys(enc).length === 1;
  const ifExpr = (test, a, b) => ({
    signal: `${test} ? (${toExpr(a)}) : (${toExpr(b)})`
  });
  const ifOrient = ($orient, t, b, l, r) => ({
    signal: (l != null ? `${$orient} === '${Left}' ? (${toExpr(l)}) : ` : '') + (b != null ? `${$orient} === '${Bottom}' ? (${toExpr(b)}) : ` : '') + (r != null ? `${$orient} === '${Right}' ? (${toExpr(r)}) : ` : '') + (t != null ? `${$orient} === '${Top}' ? (${toExpr(t)}) : ` : '') + '(null)'
  });
  const toExpr = v => isSignal(v) ? v.signal : v == null ? null : vegaUtil.stringValue(v);
  const mult = (sign, value) => value === 0 ? 0 : isSignal(sign) ? {
    signal: `(${sign.signal}) * ${value}`
  } : {
    value: sign * value
  };
  const patch = (value, base) => {
    const s = value.signal;
    return s && s.endsWith('(null)') ? {
      signal: s.slice(0, -6) + base.signal
    } : value;
  };
  function fallback(prop, config, axisConfig, style) {
    let styleProp;
    if (config && vegaUtil.hasOwnProperty(config, prop)) {
      return config[prop];
    } else if (vegaUtil.hasOwnProperty(axisConfig, prop)) {
      return axisConfig[prop];
    } else if (prop.startsWith('title')) {
      switch (prop) {
        case 'titleColor':
          styleProp = 'fill';
          break;
        case 'titleFont':
        case 'titleFontSize':
        case 'titleFontWeight':
          styleProp = prop[5].toLowerCase() + prop.slice(6);
      }
      return style[GuideTitleStyle][styleProp];
    } else if (prop.startsWith('label')) {
      switch (prop) {
        case 'labelColor':
          styleProp = 'fill';
          break;
        case 'labelFont':
        case 'labelFontSize':
          styleProp = prop[5].toLowerCase() + prop.slice(6);
      }
      return style[GuideLabelStyle][styleProp];
    }
    return null;
  }
  function keys(objects) {
    const map = {};
    for (const obj of objects) {
      if (!obj) continue;
      for (const key in obj) map[key] = 1;
    }
    return Object.keys(map);
  }
  function axisConfig(spec, scope) {
    var config = scope.config, style = config.style, axis = config.axis, band = scope.scaleType(spec.scale) === 'band' && config.axisBand, orient = spec.orient, xy, or, key;
    if (isSignal(orient)) {
      const xyKeys = keys([config.axisX, config.axisY]), orientKeys = keys([config.axisTop, config.axisBottom, config.axisLeft, config.axisRight]);
      xy = {};
      for (key of xyKeys) {
        xy[key] = ifX(orient, fallback(key, config.axisX, axis, style), fallback(key, config.axisY, axis, style));
      }
      or = {};
      for (key of orientKeys) {
        or[key] = ifOrient(orient.signal, fallback(key, config.axisTop, axis, style), fallback(key, config.axisBottom, axis, style), fallback(key, config.axisLeft, axis, style), fallback(key, config.axisRight, axis, style));
      }
    } else {
      xy = orient === Top || orient === Bottom ? config.axisX : config.axisY;
      or = config['axis' + orient[0].toUpperCase() + orient.slice(1)];
    }
    const result = xy || or || band ? vegaUtil.extend({}, axis, xy, or, band) : axis;
    return result;
  }
  function axisDomain(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient;
    let enter, update;
    const encode = {
      enter: enter = {
        opacity: zero
      },
      update: update = {
        opacity: one
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      stroke: _('domainColor'),
      strokeCap: _('domainCap'),
      strokeDash: _('domainDash'),
      strokeDashOffset: _('domainDashOffset'),
      strokeWidth: _('domainWidth'),
      strokeOpacity: _('domainOpacity')
    });
    const pos0 = position(spec, 0);
    const pos1 = position(spec, 1);
    enter.x = update.x = ifX(orient, pos0, zero);
    enter.x2 = update.x2 = ifX(orient, pos1);
    enter.y = update.y = ifY(orient, pos0, zero);
    enter.y2 = update.y2 = ifY(orient, pos1);
    return guideMark({
      type: RuleMark,
      role: AxisDomainRole,
      from: dataRef,
      encode
    }, userEncode);
  }
  function position(spec, pos) {
    return {
      scale: spec.scale,
      range: pos
    };
  }
  function axisGrid(spec, config, userEncode, dataRef, band) {
    const _ = lookup(spec, config), orient = spec.orient, vscale = spec.gridScale, sign = getSign(orient, 1, -1), offset = offsetValue(spec.offset, sign);
    let enter, exit, update;
    const encode = {
      enter: enter = {
        opacity: zero
      },
      update: update = {
        opacity: one
      },
      exit: exit = {
        opacity: zero
      }
    };
    addEncoders(encode, {
      stroke: _('gridColor'),
      strokeCap: _('gridCap'),
      strokeDash: _('gridDash'),
      strokeDashOffset: _('gridDashOffset'),
      strokeOpacity: _('gridOpacity'),
      strokeWidth: _('gridWidth')
    });
    const tickPos = {
      scale: spec.scale,
      field: Value,
      band: band.band,
      extra: band.extra,
      offset: band.offset,
      round: _('tickRound')
    };
    const sz = ifX(orient, {
      signal: 'height'
    }, {
      signal: 'width'
    });
    const gridStart = vscale ? {
      scale: vscale,
      range: 0,
      mult: sign,
      offset: offset
    } : {
      value: 0,
      offset: offset
    };
    const gridEnd = vscale ? {
      scale: vscale,
      range: 1,
      mult: sign,
      offset: offset
    } : vegaUtil.extend(sz, {
      mult: sign,
      offset: offset
    });
    enter.x = update.x = ifX(orient, tickPos, gridStart);
    enter.y = update.y = ifY(orient, tickPos, gridStart);
    enter.x2 = update.x2 = ifY(orient, gridEnd);
    enter.y2 = update.y2 = ifX(orient, gridEnd);
    exit.x = ifX(orient, tickPos);
    exit.y = ifY(orient, tickPos);
    return guideMark({
      type: RuleMark,
      role: AxisGridRole,
      key: Value,
      from: dataRef,
      encode
    }, userEncode);
  }
  function offsetValue(offset, sign) {
    if (sign === 1) ; else if (!vegaUtil.isObject(offset)) {
      offset = isSignal(sign) ? {
        signal: `(${sign.signal}) * (${offset || 0})`
      } : sign * (offset || 0);
    } else {
      let entry = offset = vegaUtil.extend({}, offset);
      while (entry.mult != null) {
        if (!vegaUtil.isObject(entry.mult)) {
          entry.mult = isSignal(sign) ? // no offset if sign === 1
          {
            signal: `(${entry.mult}) * (${sign.signal})`
          } : entry.mult * sign;
          return offset;
        } else {
          entry = entry.mult = vegaUtil.extend({}, entry.mult);
        }
      }
      entry.mult = sign;
    }
    return offset;
  }
  function axisTicks(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, exit, update;
    const encode = {
      enter: enter = {
        opacity: zero
      },
      update: update = {
        opacity: one
      },
      exit: exit = {
        opacity: zero
      }
    };
    addEncoders(encode, {
      stroke: _('tickColor'),
      strokeCap: _('tickCap'),
      strokeDash: _('tickDash'),
      strokeDashOffset: _('tickDashOffset'),
      strokeOpacity: _('tickOpacity'),
      strokeWidth: _('tickWidth')
    });
    const tickSize = encoder(size);
    tickSize.mult = sign;
    const tickPos = {
      scale: spec.scale,
      field: Value,
      band: band.band,
      extra: band.extra,
      offset: band.offset,
      round: _('tickRound')
    };
    update.y = enter.y = ifX(orient, zero, tickPos);
    update.y2 = enter.y2 = ifX(orient, tickSize);
    exit.x = ifX(orient, tickPos);
    update.x = enter.x = ifY(orient, zero, tickPos);
    update.x2 = enter.x2 = ifY(orient, tickSize);
    exit.y = ifY(orient, tickPos);
    return guideMark({
      type: RuleMark,
      role: AxisTickRole,
      key: Value,
      from: dataRef,
      encode
    }, userEncode);
  }
  function flushExpr(scale, threshold, a, b, c) {
    return {
      signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'
    };
  }
  function axisLabels(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, scale = spec.scale, sign = getSign(orient, -1, 1), flush = deref(_('labelFlush')), flushOffset = deref(_('labelFlushOffset')), labelAlign = _('labelAlign'), labelBaseline = _('labelBaseline');
    let flushOn = flush === 0 || !!flush, update;
    const tickSize = encoder(size);
    tickSize.mult = sign;
    tickSize.offset = encoder(_('labelPadding') || 0);
    tickSize.offset.mult = sign;
    const tickPos = {
      scale: scale,
      field: Value,
      band: 0.5,
      offset: extendOffset(band.offset, _('labelOffset'))
    };
    const align = ifX(orient, flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : {
      value: 'center'
    }, ifRight(orient, 'left', 'right'));
    const baseline = ifX(orient, ifTop(orient, 'bottom', 'top'), flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : {
      value: 'middle'
    });
    const offsetExpr = flushExpr(scale, flush, `-(${flushOffset})`, flushOffset, 0);
    flushOn = flushOn && flushOffset;
    const enter = {
      opacity: zero,
      x: ifX(orient, tickPos, tickSize),
      y: ifY(orient, tickPos, tickSize)
    };
    const encode = {
      enter: enter,
      update: update = {
        opacity: one,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y,
        align,
        baseline
      },
      exit: {
        opacity: zero,
        x: enter.x,
        y: enter.y
      }
    };
    addEncoders(encode, {
      dx: !labelAlign && flushOn ? ifX(orient, offsetExpr) : null,
      dy: !labelBaseline && flushOn ? ifY(orient, offsetExpr) : null
    });
    addEncoders(encode, {
      angle: _('labelAngle'),
      fill: _('labelColor'),
      fillOpacity: _('labelOpacity'),
      font: _('labelFont'),
      fontSize: _('labelFontSize'),
      fontWeight: _('labelFontWeight'),
      fontStyle: _('labelFontStyle'),
      limit: _('labelLimit'),
      lineHeight: _('labelLineHeight')
    }, {
      align: labelAlign,
      baseline: labelBaseline
    });
    const bound = _('labelBound');
    let overlap = _('labelOverlap');
    // if overlap method or bound defined, request label overlap removal
    overlap = overlap || bound ? {
      separation: _('labelSeparation'),
      method: overlap,
      order: 'datum.index',
      bound: bound ? {
        scale,
        orient,
        tolerance: bound
      } : null
    } : undefined;
    if (update.align !== align) {
      update.align = patch(update.align, align);
    }
    if (update.baseline !== baseline) {
      update.baseline = patch(update.baseline, baseline);
    }
    return guideMark({
      type: TextMark,
      role: AxisLabelRole,
      style: GuideLabelStyle,
      key: Value,
      from: dataRef,
      encode,
      overlap
    }, userEncode);
  }
  function axisTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, update;
    const encode = {
      enter: enter = {
        opacity: zero,
        anchor: encoder(_('titleAnchor', null)),
        align: {
          signal: alignExpr
        }
      },
      update: update = vegaUtil.extend({}, enter, {
        opacity: one,
        text: encoder(spec.title)
      }),
      exit: {
        opacity: zero
      }
    };
    const titlePos = {
      signal: `lerp(range("${spec.scale}"), ${anchorExpr(0, 1, 0.5)})`
    };
    update.x = ifX(orient, titlePos);
    update.y = ifY(orient, titlePos);
    enter.angle = ifX(orient, zero, mult(sign, 90));
    enter.baseline = ifX(orient, ifTop(orient, Bottom, Top), {
      value: Bottom
    });
    update.angle = enter.angle;
    update.baseline = enter.baseline;
    addEncoders(encode, {
      fill: _('titleColor'),
      fillOpacity: _('titleOpacity'),
      font: _('titleFont'),
      fontSize: _('titleFontSize'),
      fontStyle: _('titleFontStyle'),
      fontWeight: _('titleFontWeight'),
      limit: _('titleLimit'),
      lineHeight: _('titleLineHeight')
    }, {
      // require update
      align: _('titleAlign'),
      angle: _('titleAngle'),
      baseline: _('titleBaseline')
    });
    autoLayout(_, orient, encode, userEncode);
    encode.update.align = patch(encode.update.align, enter.align);
    encode.update.angle = patch(encode.update.angle, enter.angle);
    encode.update.baseline = patch(encode.update.baseline, enter.baseline);
    return guideMark({
      type: TextMark,
      role: AxisTitleRole,
      style: GuideTitleStyle,
      from: dataRef,
      encode
    }, userEncode);
  }
  function autoLayout(_, orient, encode, userEncode) {
    const auto = (value, dim) => value != null ? (encode.update[dim] = patch(encoder(value), encode.update[dim]), false) : !has(dim, userEncode) ? true : false;
    const autoY = auto(_('titleX'), 'x'), autoX = auto(_('titleY'), 'y');
    encode.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient, encoder(autoX), encoder(autoY));
  }
  function parseAxis(spec, scope) {
    const config = axisConfig(spec, scope), encode = spec.encode || ({}), axisEncode = encode.axis || ({}), name = axisEncode.name || undefined, interactive = axisEncode.interactive, style = axisEncode.style, _ = lookup(spec, config), band = tickBand(_);
    // single-element data source for axis group
    const datum = {
      scale: spec.scale,
      ticks: !!_('ticks'),
      labels: !!_('labels'),
      grid: !!_('grid'),
      domain: !!_('domain'),
      title: spec.title != null
    };
    const dataRef = ref(scope.add(Collect({}, [datum])));
    // data source for axis ticks
    const ticksRef = ref(scope.add(AxisTicks({
      scale: scope.scaleRef(spec.scale),
      extra: scope.property(band.extra),
      count: scope.objectProperty(spec.tickCount),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    })));
    // generate axis marks
    const children = [];
    let size;
    // include axis gridlines if requested
    if (datum.grid) {
      children.push(axisGrid(spec, config, encode.grid, ticksRef, band));
    }
    // include axis ticks if requested
    if (datum.ticks) {
      size = _('tickSize');
      children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));
    }
    // include axis labels if requested
    if (datum.labels) {
      size = datum.ticks ? size : 0;
      children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));
    }
    // include axis domain path if requested
    if (datum.domain) {
      children.push(axisDomain(spec, config, encode.domain, dataRef));
    }
    // include axis title if defined
    if (datum.title) {
      children.push(axisTitle(spec, config, encode.title, dataRef));
    }
    // parse axis specification
    return parseMark(guideGroup({
      role: AxisRole,
      from: dataRef,
      encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip),
      marks: children,
      aria: _('aria'),
      description: _('description'),
      zindex: _('zindex'),
      name,
      interactive,
      style
    }), scope);
  }
  function buildAxisEncode(_, spec) {
    const encode = {
      enter: {},
      update: {}
    };
    addEncoders(encode, {
      orient: _('orient'),
      offset: _('offset') || 0,
      position: value(spec.position, 0),
      titlePadding: _('titlePadding'),
      minExtent: _('minExtent'),
      maxExtent: _('maxExtent'),
      range: {
        signal: `abs(span(range("${spec.scale}")))`
      },
      translate: _('translate'),
      // accessibility support
      format: spec.format,
      formatType: spec.formatType
    });
    return encode;
  }
  function parseScope(spec, scope, preprocessed) {
    const signals = vegaUtil.array(spec.signals), scales = vegaUtil.array(spec.scales);
    // parse signal definitions, if not already preprocessed
    if (!preprocessed) signals.forEach(_ => parseSignal(_, scope));
    // parse cartographic projection definitions
    vegaUtil.array(spec.projections).forEach(_ => parseProjection(_, scope));
    // initialize scale references
    scales.forEach(_ => initScale(_, scope));
    // parse data sources
    vegaUtil.array(spec.data).forEach(_ => parseData$1(_, scope));
    // parse scale definitions
    scales.forEach(_ => parseScale(_, scope));
    // parse signal updates
    (preprocessed || signals).forEach(_ => parseSignalUpdates(_, scope));
    // parse axis definitions
    vegaUtil.array(spec.axes).forEach(_ => parseAxis(_, scope));
    // parse mark definitions
    vegaUtil.array(spec.marks).forEach(_ => parseMark(_, scope));
    // parse legend definitions
    vegaUtil.array(spec.legends).forEach(_ => parseLegend(_, scope));
    // parse title, if defined
    if (spec.title) parseTitle(spec.title, scope);
    // parse collected lambda (anonymous) expressions
    scope.parseLambdas();
    return scope;
  }
  const rootEncode = spec => extendEncode({
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    },
    update: {
      width: {
        signal: 'width'
      },
      height: {
        signal: 'height'
      }
    }
  }, spec);
  function parseView(spec, scope) {
    const config = scope.config;
    // add scenegraph root
    const root = ref(scope.root = scope.add(operator()));
    // parse top-level signal definitions
    const signals = collectSignals(spec, config);
    signals.forEach(_ => parseSignal(_, scope));
    // assign description, event, legend, and locale configuration
    scope.description = spec.description || config.description;
    scope.eventConfig = config.events;
    scope.legends = scope.objectProperty(config.legend && config.legend.layout);
    scope.locale = config.locale;
    // store root group item
    const input = scope.add(Collect());
    // encode root group item
    const encode = scope.add(Encode(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole, spec.style, scope, {
      pulse: ref(input)
    })));
    // perform view layout
    const parent = scope.add(ViewLayout({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      autosize: scope.signalRef('autosize'),
      mark: root,
      pulse: ref(encode)
    }));
    scope.operators.pop();
    // parse remainder of specification
    scope.pushState(ref(encode), ref(parent), null);
    parseScope(spec, scope, signals);
    scope.operators.push(parent);
    // bound / render / sieve root item
    let op = scope.add(Bound({
      mark: root,
      pulse: ref(parent)
    }));
    op = scope.add(Render({
      pulse: ref(op)
    }));
    op = scope.add(Sieve({
      pulse: ref(op)
    }));
    // track metadata for root item
    scope.addData('root', new DataScope(scope, input, input, op));
    return scope;
  }
  function signalObject(name, value) {
    return value && value.signal ? {
      name,
      update: value.signal
    } : {
      name,
      value
    };
  }
  /**
  * Collect top-level signals, merging values as needed. Signals
  * defined in the config signals arrays are added only if that
  * signal is not explicitly defined in the specification.
  * Built-in signals (autosize, background, padding, width, height)
  * receive special treatment. They are initialized using the
  * top-level spec property, or, if undefined in the spec, using
  * the corresponding top-level config property. If this property
  * is a signal reference object, the signal expression maps to the
  * signal 'update' property. If the spec's top-level signal array
  * contains an entry that matches a built-in signal, that entry
  * will be merged with the built-in specification, potentially
  * overwriting existing 'value' or 'update' properties.
  */
  function collectSignals(spec, config) {
    const _ = name => value(spec[name], config[name]), signals = [signalObject('background', _('background')), signalObject('autosize', parseAutosize(_('autosize'))), signalObject('padding', parsePadding(_('padding'))), signalObject('width', _('width') || 0), signalObject('height', _('height') || 0)], pre = signals.reduce((p, s) => (p[s.name] = s, p), {}), map = {};
    // add spec signal array
    vegaUtil.array(spec.signals).forEach(s => {
      if (vegaUtil.hasOwnProperty(pre, s.name)) {
        // merge if built-in signal
        s = vegaUtil.extend(pre[s.name], s);
      } else {
        // otherwise add to signal list
        signals.push(s);
      }
      map[s.name] = s;
    });
    // add config signal array
    vegaUtil.array(config.signals).forEach(s => {
      if (!vegaUtil.hasOwnProperty(map, s.name) && !vegaUtil.hasOwnProperty(pre, s.name)) {
        // add to signal list if not already defined
        signals.push(s);
      }
    });
    return signals;
  }
  function Scope$1(config, options) {
    this.config = config || ({});
    this.options = options || ({});
    this.bindings = [];
    this.field = {};
    this.signals = {};
    this.lambdas = {};
    this.scales = {};
    this.events = {};
    this.data = {};
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this.eventConfig = null;
    this.locale = null;
    this._id = 0;
    this._subid = 0;
    this._nextsub = [0];
    this._parent = [];
    this._encode = [];
    this._lookup = [];
    this._markpath = [];
  }
  function Subscope(scope) {
    this.config = scope.config;
    this.options = scope.options;
    this.legends = scope.legends;
    this.field = Object.create(scope.field);
    this.signals = Object.create(scope.signals);
    this.lambdas = Object.create(scope.lambdas);
    this.scales = Object.create(scope.scales);
    this.events = Object.create(scope.events);
    this.data = Object.create(scope.data);
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this._id = 0;
    this._subid = ++scope._nextsub[0];
    this._nextsub = scope._nextsub;
    this._parent = scope._parent.slice();
    this._encode = scope._encode.slice();
    this._lookup = scope._lookup.slice();
    this._markpath = scope._markpath;
  }
  Scope$1.prototype = Subscope.prototype = {
    parse(spec) {
      return parseScope(spec, this);
    },
    fork() {
      return new Subscope(this);
    },
    isSubscope() {
      return this._subid > 0;
    },
    toRuntime() {
      this.finish();
      return {
        description: this.description,
        operators: this.operators,
        streams: this.streams,
        updates: this.updates,
        bindings: this.bindings,
        eventConfig: this.eventConfig,
        locale: this.locale
      };
    },
    id() {
      return (this._subid ? this._subid + ':' : 0) + this._id++;
    },
    add(op) {
      this.operators.push(op);
      op.id = this.id();
      // if pre-registration references exist, resolve them now
      if (op.refs) {
        op.refs.forEach(ref => {
          ref.$ref = op.id;
        });
        op.refs = null;
      }
      return op;
    },
    proxy(op) {
      const vref = op instanceof Entry ? ref(op) : op;
      return this.add(Proxy({
        value: vref
      }));
    },
    addStream(stream) {
      this.streams.push(stream);
      stream.id = this.id();
      return stream;
    },
    addUpdate(update) {
      this.updates.push(update);
      return update;
    },
    // Apply metadata
    // Apply metadata
    finish() {
      let name, ds;
      // annotate root
      if (this.root) this.root.root = true;
      // annotate signals
      for (name in this.signals) {
        this.signals[name].signal = name;
      }
      // annotate scales
      for (name in this.scales) {
        this.scales[name].scale = name;
      }
      // annotate data sets
      function annotate(op, name, type) {
        let data, list;
        if (op) {
          data = op.data || (op.data = {});
          list = data[name] || (data[name] = []);
          list.push(type);
        }
      }
      for (name in this.data) {
        ds = this.data[name];
        annotate(ds.input, name, 'input');
        annotate(ds.output, name, 'output');
        annotate(ds.values, name, 'values');
        for (const field in ds.index) {
          annotate(ds.index[field], name, 'index:' + field);
        }
      }
      return this;
    },
    // ----
    // ----
    pushState(encode, parent, lookup) {
      this._encode.push(ref(this.add(Sieve({
        pulse: encode
      }))));
      this._parent.push(parent);
      this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);
      this._markpath.push(-1);
    },
    popState() {
      this._encode.pop();
      this._parent.pop();
      this._lookup.pop();
      this._markpath.pop();
    },
    parent() {
      return vegaUtil.peek(this._parent);
    },
    encode() {
      return vegaUtil.peek(this._encode);
    },
    lookup() {
      return vegaUtil.peek(this._lookup);
    },
    markpath() {
      const p = this._markpath;
      return ++p[p.length - 1];
    },
    // ----
    // ----
    fieldRef(field, name) {
      if (vegaUtil.isString(field)) return fieldRef(field, name);
      if (!field.signal) {
        vegaUtil.error('Unsupported field reference: ' + vegaUtil.stringValue(field));
      }
      const s = field.signal;
      let f = this.field[s];
      if (!f) {
        const params = {
          name: this.signalRef(s)
        };
        if (name) params.as = name;
        this.field[s] = f = ref(this.add(Field(params)));
      }
      return f;
    },
    compareRef(cmp) {
      let signal = false;
      const check = _ => isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr(_) ? (signal = true, this.exprRef(_.expr)) : _;
      const fields = vegaUtil.array(cmp.field).map(check), orders = vegaUtil.array(cmp.order).map(check);
      return signal ? ref(this.add(Compare({
        fields: fields,
        orders: orders
      }))) : compareRef(fields, orders);
    },
    keyRef(fields, flat) {
      let signal = false;
      const check = _ => isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
      const sig = this.signals;
      fields = vegaUtil.array(fields).map(check);
      return signal ? ref(this.add(Key({
        fields: fields,
        flat: flat
      }))) : keyRef(fields, flat);
    },
    sortRef(sort) {
      if (!sort) return sort;
      // including id ensures stable sorting
      const a = aggrField(sort.op, sort.field), o = sort.order || Ascending;
      return o.signal ? ref(this.add(Compare({
        fields: a,
        orders: this.signalRef(o.signal)
      }))) : compareRef(a, o);
    },
    // ----
    // ----
    event(source, type) {
      const key = source + ':' + type;
      if (!this.events[key]) {
        const id = this.id();
        this.streams.push({
          id: id,
          source: source,
          type: type
        });
        this.events[key] = id;
      }
      return this.events[key];
    },
    // ----
    // ----
    hasOwnSignal(name) {
      return vegaUtil.hasOwnProperty(this.signals, name);
    },
    addSignal(name, value) {
      if (this.hasOwnSignal(name)) {
        vegaUtil.error('Duplicate signal name: ' + vegaUtil.stringValue(name));
      }
      const op = value instanceof Entry ? value : this.add(operator(value));
      return this.signals[name] = op;
    },
    getSignal(name) {
      if (!this.signals[name]) {
        vegaUtil.error('Unrecognized signal name: ' + vegaUtil.stringValue(name));
      }
      return this.signals[name];
    },
    signalRef(s) {
      if (this.signals[s]) {
        return ref(this.signals[s]);
      } else if (!vegaUtil.hasOwnProperty(this.lambdas, s)) {
        this.lambdas[s] = this.add(operator(null));
      }
      return ref(this.lambdas[s]);
    },
    parseLambdas() {
      const code = Object.keys(this.lambdas);
      for (let i = 0, n = code.length; i < n; ++i) {
        const s = code[i], e = vegaFunctions.parseExpression(s, this), op = this.lambdas[s];
        op.params = e.$params;
        op.update = e.$expr;
      }
    },
    property(spec) {
      return spec && spec.signal ? this.signalRef(spec.signal) : spec;
    },
    objectProperty(spec) {
      return !spec || !vegaUtil.isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
    },
    exprRef(code, name) {
      const params = {
        expr: vegaFunctions.parseExpression(code, this)
      };
      if (name) params.expr.$name = name;
      return ref(this.add(Expression(params)));
    },
    addBinding(name, bind) {
      if (!this.bindings) {
        vegaUtil.error('Nested signals do not support binding: ' + vegaUtil.stringValue(name));
      }
      this.bindings.push(vegaUtil.extend({
        signal: name
      }, bind));
    },
    // ----
    // ----
    addScaleProj(name, transform) {
      if (vegaUtil.hasOwnProperty(this.scales, name)) {
        vegaUtil.error('Duplicate scale or projection name: ' + vegaUtil.stringValue(name));
      }
      this.scales[name] = this.add(transform);
    },
    addScale(name, params) {
      this.addScaleProj(name, Scale(params));
    },
    addProjection(name, params) {
      this.addScaleProj(name, Projection(params));
    },
    getScale(name) {
      if (!this.scales[name]) {
        vegaUtil.error('Unrecognized scale name: ' + vegaUtil.stringValue(name));
      }
      return this.scales[name];
    },
    scaleRef(name) {
      return ref(this.getScale(name));
    },
    scaleType(name) {
      return this.getScale(name).params.type;
    },
    projectionRef(name) {
      return this.scaleRef(name);
    },
    projectionType(name) {
      return this.scaleType(name);
    },
    // ----
    // ----
    addData(name, dataScope) {
      if (vegaUtil.hasOwnProperty(this.data, name)) {
        vegaUtil.error('Duplicate data set name: ' + vegaUtil.stringValue(name));
      }
      return this.data[name] = dataScope;
    },
    getData(name) {
      if (!this.data[name]) {
        vegaUtil.error('Undefined data set name: ' + vegaUtil.stringValue(name));
      }
      return this.data[name];
    },
    addDataPipeline(name, entries) {
      if (vegaUtil.hasOwnProperty(this.data, name)) {
        vegaUtil.error('Duplicate data set name: ' + vegaUtil.stringValue(name));
      }
      return this.addData(name, DataScope.fromEntries(this, entries));
    }
  };
  function propertyLambda(spec) {
    return (vegaUtil.isArray(spec) ? arrayLambda : objectLambda)(spec);
  }
  function arrayLambda(array) {
    const n = array.length;
    let code = '[';
    for (let i = 0; i < n; ++i) {
      const value = array[i];
      code += (i > 0 ? ',' : '') + (vegaUtil.isObject(value) ? value.signal || propertyLambda(value) : vegaUtil.stringValue(value));
    }
    return code + ']';
  }
  function objectLambda(obj) {
    let code = '{', i = 0, key, value;
    for (key in obj) {
      value = obj[key];
      code += (++i > 1 ? ',' : '') + vegaUtil.stringValue(key) + ':' + (vegaUtil.isObject(value) ? value.signal || propertyLambda(value) : vegaUtil.stringValue(value));
    }
    return code + '}';
  }
  /**
  * Standard configuration defaults for Vega specification parsing.
  * Users can provide their own (sub-)set of these default values
  * by passing in a config object to the top-level parse method.
  */
  function defaults() {
    const defaultFont = 'sans-serif', defaultSymbolSize = 30, defaultStrokeWidth = 2, defaultColor = '#4c78a8', black = '#000', gray = '#888', lightGray = '#ddd';
    return {
      // default visualization description
      description: 'Vega visualization',
      // default padding around visualization
      padding: 0,
      // default for automatic sizing; options: 'none', 'pad', 'fit'
      // or provide an object (e.g., {'type': 'pad', 'resize': true})
      autosize: 'pad',
      // default view background color
      // covers the entire view component
      background: null,
      // default event handling configuration
      // preventDefault for view-sourced event types except 'wheel'
      events: {
        defaults: {
          allow: ['wheel']
        }
      },
      // defaults for top-level group marks
      // accepts mark properties (fill, stroke, etc)
      // covers the data rectangle within group width/height
      group: null,
      // defaults for basic mark types
      // each subset accepts mark properties (fill, stroke, etc)
      mark: null,
      arc: {
        fill: defaultColor
      },
      area: {
        fill: defaultColor
      },
      image: null,
      line: {
        stroke: defaultColor,
        strokeWidth: defaultStrokeWidth
      },
      path: {
        stroke: defaultColor
      },
      rect: {
        fill: defaultColor
      },
      rule: {
        stroke: black
      },
      shape: {
        stroke: defaultColor
      },
      symbol: {
        fill: defaultColor,
        size: 64
      },
      text: {
        fill: black,
        font: defaultFont,
        fontSize: 11
      },
      trail: {
        fill: defaultColor,
        size: defaultStrokeWidth
      },
      // style definitions
      style: {
        // axis & legend labels
        'guide-label': {
          fill: black,
          font: defaultFont,
          fontSize: 10
        },
        // axis & legend titles
        'guide-title': {
          fill: black,
          font: defaultFont,
          fontSize: 11,
          fontWeight: 'bold'
        },
        // headers, including chart title
        'group-title': {
          fill: black,
          font: defaultFont,
          fontSize: 13,
          fontWeight: 'bold'
        },
        // chart subtitle
        'group-subtitle': {
          fill: black,
          font: defaultFont,
          fontSize: 12
        },
        // defaults for styled point marks in Vega-Lite
        point: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: 'circle'
        },
        circle: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth
        },
        square: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: 'square'
        },
        // defaults for styled group marks in Vega-Lite
        cell: {
          fill: 'transparent',
          stroke: lightGray
        }
      },
      // defaults for title
      title: {
        orient: 'top',
        anchor: 'middle',
        offset: 4,
        subtitlePadding: 3
      },
      // defaults for axes
      axis: {
        minExtent: 0,
        maxExtent: 200,
        bandPosition: 0.5,
        domain: true,
        domainWidth: 1,
        domainColor: gray,
        grid: false,
        gridWidth: 1,
        gridColor: lightGray,
        labels: true,
        labelAngle: 0,
        labelLimit: 180,
        labelOffset: 0,
        labelPadding: 2,
        ticks: true,
        tickColor: gray,
        tickOffset: 0,
        tickRound: true,
        tickSize: 5,
        tickWidth: 1,
        titlePadding: 4
      },
      // correction for centering bias
      axisBand: {
        tickOffset: -0.5
      },
      // defaults for cartographic projection
      projection: {
        type: 'mercator'
      },
      // defaults for legends
      legend: {
        orient: 'right',
        padding: 0,
        gridAlign: 'each',
        columnPadding: 10,
        rowPadding: 2,
        symbolDirection: 'vertical',
        gradientDirection: 'vertical',
        gradientLength: 200,
        gradientThickness: 16,
        gradientStrokeColor: lightGray,
        gradientStrokeWidth: 0,
        gradientLabelOffset: 2,
        labelAlign: 'left',
        labelBaseline: 'middle',
        labelLimit: 160,
        labelOffset: 4,
        labelOverlap: true,
        symbolLimit: 30,
        symbolType: 'circle',
        symbolSize: 100,
        symbolOffset: 0,
        symbolStrokeWidth: 1.5,
        symbolBaseFillColor: 'transparent',
        symbolBaseStrokeColor: gray,
        titleLimit: 180,
        titleOrient: 'top',
        titlePadding: 5,
        layout: {
          offset: 18,
          direction: 'horizontal',
          left: {
            direction: 'vertical'
          },
          right: {
            direction: 'vertical'
          }
        }
      },
      // defaults for scale ranges
      range: {
        category: {
          scheme: 'tableau10'
        },
        ordinal: {
          scheme: 'blues'
        },
        heatmap: {
          scheme: 'yellowgreenblue'
        },
        ramp: {
          scheme: 'blues'
        },
        diverging: {
          scheme: 'blueorange',
          extent: [1, 0]
        },
        symbol: ['circle', 'square', 'triangle-up', 'cross', 'diamond', 'triangle-right', 'triangle-down', 'triangle-left']
      }
    };
  }
  function parse$1(spec, config, options) {
    if (!vegaUtil.isObject(spec)) {
      vegaUtil.error('Input Vega specification must be an object.');
    }
    config = vegaUtil.mergeConfig(defaults(), config, spec.config);
    return parseView(spec, new Scope$1(config, options)).toRuntime();
  }
  exports.AxisDomainRole = AxisDomainRole;
  exports.AxisGridRole = AxisGridRole;
  exports.AxisLabelRole = AxisLabelRole;
  exports.AxisRole = AxisRole;
  exports.AxisTickRole = AxisTickRole;
  exports.AxisTitleRole = AxisTitleRole;
  exports.DataScope = DataScope;
  exports.FrameRole = FrameRole;
  exports.LegendEntryRole = LegendEntryRole;
  exports.LegendLabelRole = LegendLabelRole;
  exports.LegendRole = LegendRole;
  exports.LegendSymbolRole = LegendSymbolRole;
  exports.LegendTitleRole = LegendTitleRole;
  exports.MarkRole = MarkRole;
  exports.Scope = Scope$1;
  exports.ScopeRole = ScopeRole;
  exports.config = defaults;
  exports.parse = parse$1;
  exports.signal = parseSignal;
  exports.signalUpdates = parseSignalUpdates;
  exports.stream = parseStream;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{"vega-util":"4BD5d","vega-functions":"4qZqy","vega-event-selector":"2twGG","vega-scale":"13AnI","vega-dataflow":"1Owpt"}],"2twGG":[function(require,module,exports) {
var define;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}));
})(this, function (exports) {
  "use strict";
  const VIEW = 'view', LBRACK = '[', RBRACK = ']', LBRACE = '{', RBRACE = '}', COLON = ':', COMMA = ',', NAME = '@', GT = '>', ILLEGAL = /[[\]{}]/, DEFAULT_MARKS = {
    '*': 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
  };
  let DEFAULT_SOURCE, MARKS;
  /**
  * Parse an event selector string.
  * Returns an array of event stream definitions.
  */
  function eventSelector(selector, source, marks) {
    DEFAULT_SOURCE = source || VIEW;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector);
  }
  function isMarkType(type) {
    return MARKS[type];
  }
  function find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0, c;
    for (; i < n; ++i) {
      c = s[i];
      if (!count && c === endChar) return i; else if (popChar && popChar.indexOf(c) >= 0) --count; else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }
    return i;
  }
  function parseMerge(s) {
    const output = [], n = s.length;
    let start = 0, i = 0;
    while (i < n) {
      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
      output.push(s.substring(start, i).trim());
      start = ++i;
    }
    if (output.length === 0) {
      throw 'Empty event selector: ' + s;
    }
    return output;
  }
  function parseSelector(s) {
    return s[0] === '[' ? parseBetween(s) : parseStream(s);
  }
  function parseBetween(s) {
    const n = s.length;
    let i = 1, b;
    i = find(s, i, RBRACK, LBRACK, RBRACK);
    if (i === n) {
      throw 'Empty between selector: ' + s;
    }
    b = parseMerge(s.substring(1, i));
    if (b.length !== 2) {
      throw 'Between selector must have two elements: ' + s;
    }
    s = s.slice(i + 1).trim();
    if (s[0] !== GT) {
      throw 'Expected \'>\' after between selector: ' + s;
    }
    b = b.map(parseSelector);
    const stream = parseSelector(s.slice(1).trim());
    if (stream.between) {
      return {
        between: b,
        stream: stream
      };
    } else {
      stream.between = b;
    }
    return stream;
  }
  function parseStream(s) {
    const stream = {
      source: DEFAULT_SOURCE
    }, source = [];
    let throttle = [0, 0], markname = 0, start = 0, n = s.length, i = 0, j, filter;
    // extract throttle from end
    if (s[n - 1] === RBRACE) {
      i = s.lastIndexOf(LBRACE);
      if (i >= 0) {
        try {
          throttle = parseThrottle(s.substring(i + 1, n - 1));
        } catch (e) {
          throw 'Invalid throttle specification: ' + s;
        }
        s = s.slice(0, i).trim();
        n = s.length;
      } else throw 'Unmatched right brace: ' + s;
      i = 0;
    }
    if (!n) throw s;
    // set name flag based on first char
    if (s[0] === NAME) markname = ++i;
    // extract first part of multi-part stream selector
    j = find(s, i, COLON);
    if (j < n) {
      source.push(s.substring(start, j).trim());
      start = i = ++j;
    }
    // extract remaining part of stream selector
    i = find(s, i, LBRACK);
    if (i === n) {
      source.push(s.substring(start, n).trim());
    } else {
      source.push(s.substring(start, i).trim());
      filter = [];
      start = ++i;
      if (start === n) throw 'Unmatched left bracket: ' + s;
    }
    // extract filters
    while (i < n) {
      i = find(s, i, RBRACK);
      if (i === n) throw 'Unmatched left bracket: ' + s;
      filter.push(s.substring(start, i).trim());
      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
      start = ++i;
    }
    // marshall event stream specification
    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) {
      throw 'Invalid event selector: ' + s;
    }
    if (n > 1) {
      stream.type = source[1];
      if (markname) {
        stream.markname = source[0].slice(1);
      } else if (isMarkType(source[0])) {
        stream.marktype = source[0];
      } else {
        stream.source = source[0];
      }
    } else {
      stream.type = source[0];
    }
    if (stream.type.slice(-1) === '!') {
      stream.consume = true;
      stream.type = stream.type.slice(0, -1);
    }
    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
  }
  function parseThrottle(s) {
    const a = s.split(COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map(_ => {
      const x = +_;
      if (x !== x) throw s;
      return x;
    });
  }
  exports.selector = eventSelector;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"7lQtw":[function(require,module,exports) {
var define;
// https://github.com/topojson/topojson-client v3.1.0 Copyright 2019 Mike Bostock
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.topojson = global.topojson || ({})));
})(this, function (exports) {
  "use strict";
  function identity(x) {
    return x;
  }
  function transform(transform) {
    if (transform == null) return identity;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function (input, i) {
      if (!i) x0 = y0 = 0;
      var j = 2, n = input.length, output = new Array(n);
      output[0] = (x0 += input[0]) * kx + dx;
      output[1] = (y0 += input[1]) * ky + dy;
      while (j < n) (output[j] = input[j], ++j);
      return output;
    };
  }
  function bbox(topology) {
    var t = transform(topology.transform), key, x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;
    function bboxPoint(p) {
      p = t(p);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
    function bboxGeometry(o) {
      switch (o.type) {
        case "GeometryCollection":
          o.geometries.forEach(bboxGeometry);
          break;
        case "Point":
          bboxPoint(o.coordinates);
          break;
        case "MultiPoint":
          o.coordinates.forEach(bboxPoint);
          break;
      }
    }
    topology.arcs.forEach(function (arc) {
      var i = -1, n = arc.length, p;
      while (++i < n) {
        p = t(arc[i], i);
        if (p[0] < x0) x0 = p[0];
        if (p[0] > x1) x1 = p[0];
        if (p[1] < y0) y0 = p[1];
        if (p[1] > y1) y1 = p[1];
      }
    });
    for (key in topology.objects) {
      bboxGeometry(topology.objects[key]);
    }
    return [x0, y0, x1, y1];
  }
  function reverse(array, n) {
    var t, j = array.length, i = j - n;
    while (i < --j) (t = array[i], array[i++] = array[j], array[j] = t);
  }
  function feature(topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection" ? {
      type: "FeatureCollection",
      features: o.geometries.map(function (o) {
        return feature$1(topology, o);
      })
    } : feature$1(topology, o);
  }
  function feature$1(topology, o) {
    var id = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = object(topology, o);
    return id == null && bbox == null ? {
      type: "Feature",
      properties: properties,
      geometry: geometry
    } : bbox == null ? {
      type: "Feature",
      id: id,
      properties: properties,
      geometry: geometry
    } : {
      type: "Feature",
      id: id,
      bbox: bbox,
      properties: properties,
      geometry: geometry
    };
  }
  function object(topology, o) {
    var transformPoint = transform(topology.transform), arcs = topology.arcs;
    function arc(i, points) {
      if (points.length) points.pop();
      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
        points.push(transformPoint(a[k], k));
      }
      if (i < 0) reverse(points, n);
    }
    function point(p) {
      return transformPoint(p);
    }
    function line(arcs) {
      var points = [];
      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
      if (points.length < 2) points.push(points[0]);
      // This should never happen per the specification.
      return points;
    }
    function ring(arcs) {
      var points = line(arcs);
      while (points.length < 4) points.push(points[0]);
      // This may happen if an arc has only two points.
      return points;
    }
    function polygon(arcs) {
      return arcs.map(ring);
    }
    function geometry(o) {
      var type = o.type, coordinates;
      switch (type) {
        case "GeometryCollection":
          return {
            type: type,
            geometries: o.geometries.map(geometry)
          };
        case "Point":
          coordinates = point(o.coordinates);
          break;
        case "MultiPoint":
          coordinates = o.coordinates.map(point);
          break;
        case "LineString":
          coordinates = line(o.arcs);
          break;
        case "MultiLineString":
          coordinates = o.arcs.map(line);
          break;
        case "Polygon":
          coordinates = polygon(o.arcs);
          break;
        case "MultiPolygon":
          coordinates = o.arcs.map(polygon);
          break;
        default:
          return null;
      }
      return {
        type: type,
        coordinates: coordinates
      };
    }
    return geometry(o);
  }
  function stitch(topology, arcs) {
    var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
    // Stitch empty arcs first, since they may be subsumed by other arcs.
    arcs.forEach(function (i, j) {
      var arc = topology.arcs[i < 0 ? ~i : i], t;
      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
        (t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t);
      }
    });
    arcs.forEach(function (i) {
      var e = ends(i), start = e[0], end = e[1], f, g;
      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;
        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;
        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });
    function ends(i) {
      var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
      if (topology.transform) (p1 = [0, 0], arc.forEach(function (dp) {
        (p1[0] += dp[0], p1[1] += dp[1]);
      })); else p1 = arc[arc.length - 1];
      return i < 0 ? [p1, p0] : [p0, p1];
    }
    function flush(fragmentByEnd, fragmentByStart) {
      for (var k in fragmentByEnd) {
        var f = fragmentByEnd[k];
        delete fragmentByStart[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function (i) {
          stitchedArcs[i < 0 ? ~i : i] = 1;
        });
        fragments.push(f);
      }
    }
    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function (i) {
      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
    });
    return fragments;
  }
  function mesh(topology) {
    return object(topology, meshArcs.apply(this, arguments));
  }
  function meshArcs(topology, object, filter) {
    var arcs, i, n;
    if (arguments.length > 1) arcs = extractArcs(topology, object, filter); else for ((i = 0, arcs = new Array(n = topology.arcs.length)); i < n; ++i) arcs[i] = i;
    return {
      type: "MultiLineString",
      arcs: stitch(topology, arcs)
    };
  }
  function extractArcs(topology, object, filter) {
    var arcs = [], geomsByArc = [], geom;
    function extract0(i) {
      var j = i < 0 ? ~i : i;
      (geomsByArc[j] || (geomsByArc[j] = [])).push({
        i: i,
        g: geom
      });
    }
    function extract1(arcs) {
      arcs.forEach(extract0);
    }
    function extract2(arcs) {
      arcs.forEach(extract1);
    }
    function extract3(arcs) {
      arcs.forEach(extract2);
    }
    function geometry(o) {
      switch ((geom = o, o.type)) {
        case "GeometryCollection":
          o.geometries.forEach(geometry);
          break;
        case "LineString":
          extract1(o.arcs);
          break;
        case "MultiLineString":
        case "Polygon":
          extract2(o.arcs);
          break;
        case "MultiPolygon":
          extract3(o.arcs);
          break;
      }
    }
    geometry(object);
    geomsByArc.forEach(filter == null ? function (geoms) {
      arcs.push(geoms[0].i);
    } : function (geoms) {
      if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
    });
    return arcs;
  }
  function planarRingArea(ring) {
    var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
    while (++i < n) (a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0]);
    return Math.abs(area);
  }
  function merge(topology) {
    return object(topology, mergeArcs.apply(this, arguments));
  }
  function mergeArcs(topology, objects) {
    var polygonsByArc = {}, polygons = [], groups = [];
    objects.forEach(geometry);
    function geometry(o) {
      switch (o.type) {
        case "GeometryCollection":
          o.geometries.forEach(geometry);
          break;
        case "Polygon":
          extract(o.arcs);
          break;
        case "MultiPolygon":
          o.arcs.forEach(extract);
          break;
      }
    }
    function extract(polygon) {
      polygon.forEach(function (ring) {
        ring.forEach(function (arc) {
          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
        });
      });
      polygons.push(polygon);
    }
    function area(ring) {
      return planarRingArea(object(topology, {
        type: "Polygon",
        arcs: [ring]
      }).coordinates[0]);
    }
    polygons.forEach(function (polygon) {
      if (!polygon._) {
        var group = [], neighbors = [polygon];
        polygon._ = 1;
        groups.push(group);
        while (polygon = neighbors.pop()) {
          group.push(polygon);
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
                if (!polygon._) {
                  polygon._ = 1;
                  neighbors.push(polygon);
                }
              });
            });
          });
        }
      }
    });
    polygons.forEach(function (polygon) {
      delete polygon._;
    });
    return {
      type: "MultiPolygon",
      arcs: groups.map(function (polygons) {
        var arcs = [], n;
        // Extract the exterior (unique) arcs.
        polygons.forEach(function (polygon) {
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                arcs.push(arc);
              }
            });
          });
        });
        // Stitch the arcs into one or more rings.
        arcs = stitch(topology, arcs);
        // If more than one ring is returned,
        // at most one of these rings can be the exterior;
        // choose the one with the greatest absolute area.
        if ((n = arcs.length) > 1) {
          for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
            if ((ki = area(arcs[i])) > k) {
              (t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki);
            }
          }
        }
        return arcs;
      }).filter(function (arcs) {
        return arcs.length > 0;
      })
    };
  }
  function bisect(a, x) {
    var lo = 0, hi = a.length;
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (a[mid] < x) lo = mid + 1; else hi = mid;
    }
    return lo;
  }
  function neighbors(objects) {
    var indexesByArc = {}, // arc index -> array of object indexes
    neighbors = objects.map(function () {
      return [];
    });
    function line(arcs, i) {
      arcs.forEach(function (a) {
        if (a < 0) a = ~a;
        var o = indexesByArc[a];
        if (o) o.push(i); else indexesByArc[a] = [i];
      });
    }
    function polygon(arcs, i) {
      arcs.forEach(function (arc) {
        line(arc, i);
      });
    }
    function geometry(o, i) {
      if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
        geometry(o, i);
      }); else if ((o.type in geometryType)) geometryType[o.type](o.arcs, i);
    }
    var geometryType = {
      LineString: line,
      MultiLineString: polygon,
      Polygon: polygon,
      MultiPolygon: function (arcs, i) {
        arcs.forEach(function (arc) {
          polygon(arc, i);
        });
      }
    };
    objects.forEach(geometry);
    for (var i in indexesByArc) {
      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
        for (var k = j + 1; k < m; ++k) {
          var ij = indexes[j], ik = indexes[k], n;
          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
        }
      }
    }
    return neighbors;
  }
  function untransform(transform) {
    if (transform == null) return identity;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function (input, i) {
      if (!i) x0 = y0 = 0;
      var j = 2, n = input.length, output = new Array(n), x1 = Math.round((input[0] - dx) / kx), y1 = Math.round((input[1] - dy) / ky);
      (output[0] = x1 - x0, x0 = x1);
      (output[1] = y1 - y0, y0 = y1);
      while (j < n) (output[j] = input[j], ++j);
      return output;
    };
  }
  function quantize(topology, transform) {
    if (topology.transform) throw new Error("already quantized");
    if (!transform || !transform.scale) {
      if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
      box = topology.bbox || bbox(topology);
      var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
      transform = {
        scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1],
        translate: [x0, y0]
      };
    } else {
      box = topology.bbox;
    }
    var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};
    function quantizePoint(point) {
      return t(point);
    }
    function quantizeGeometry(input) {
      var output;
      switch (input.type) {
        case "GeometryCollection":
          output = {
            type: "GeometryCollection",
            geometries: input.geometries.map(quantizeGeometry)
          };
          break;
        case "Point":
          output = {
            type: "Point",
            coordinates: quantizePoint(input.coordinates)
          };
          break;
        case "MultiPoint":
          output = {
            type: "MultiPoint",
            coordinates: input.coordinates.map(quantizePoint)
          };
          break;
        default:
          return input;
      }
      if (input.id != null) output.id = input.id;
      if (input.bbox != null) output.bbox = input.bbox;
      if (input.properties != null) output.properties = input.properties;
      return output;
    }
    function quantizeArc(input) {
      var i = 0, j = 1, n = input.length, p, output = new Array(n);
      // pessimistic
      output[0] = t(input[0], 0);
      while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p;
      // non-coincident points
      if (j === 1) output[j++] = [0, 0];
      // an arc must have at least two points
      output.length = j;
      return output;
    }
    for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);
    return {
      type: "Topology",
      bbox: box,
      transform: transform,
      objects: outputs,
      arcs: topology.arcs.map(quantizeArc)
    };
  }
  exports.bbox = bbox;
  exports.feature = feature;
  exports.merge = merge;
  exports.mergeArcs = mergeArcs;
  exports.mesh = mesh;
  exports.meshArcs = meshArcs;
  exports.neighbors = neighbors;
  exports.quantize = quantize;
  exports.transform = transform;
  exports.untransform = untransform;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

},{}],"4sloD":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
exports.default = {
  "type": "Topology",
  "objects": {
    "land": {
      "type": "GeometryCollection",
      "geometries": [{
        "type": "MultiPolygon",
        "arcs": [[[0]], [[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[10]], [[11]], [[12]], [[13]], [[14]], [[15]], [[16]], [[17]], [[18]], [[19]], [[20]], [[21]], [[22]], [[23]], [[24]], [[25]], [[26]], [[27]], [[28]], [[29]], [[30]], [[31]], [[32]], [[33]], [[34]], [[35]], [[36]], [[37]], [[38]], [[39]], [[40]], [[41]], [[42]], [[43]], [[44]], [[45]], [[46]], [[47]], [[48]], [[49]], [[50]], [[51]], [[52]], [[53]], [[54]], [[55]], [[56]], [[57]], [[58]], [[59]], [[60, 1383]], [[62]], [[63]], [[64]], [[65]], [[66]], [[67]], [[68]], [[69]], [[70]], [[71]], [[72]], [[73]], [[74]], [[75]], [[76]], [[77]], [[78]], [[79]], [[80]], [[81]], [[82]], [[83]], [[84]], [[85]], [[86]], [[87]], [[88]], [[89]], [[90]], [[91]], [[92]], [[93]], [[94]], [[95]], [[96]], [[97]], [[98]], [[99]], [[100]], [[101]], [[102]], [[103]], [[104]], [[105]], [[106]], [[107]], [[108]], [[109]], [[110]], [[111]], [[112]], [[113]], [[114]], [[115]], [[116]], [[117]], [[118]], [[119]], [[120]], [[121]], [[122]], [[123]], [[124]], [[125]], [[126]], [[127]], [[128]], [[129]], [[130]], [[131]], [[132]], [[133]], [[134]], [[135]], [[136]], [[137]], [[138, 1385], [1384]], [[140]], [[141]], [[142]], [[143]], [[144]], [[145]], [[146]], [[147]], [[148]], [[149]], [[150]], [[151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]], [[161]], [[162]], [[163]], [[164]], [[165]], [[166]], [[167]], [[168]], [[169]], [[170]], [[171]], [[172]], [[173]], [[174]], [[175]], [[176]], [[177]], [[178]], [[179]], [[180]], [[181]], [[182]], [[183]], [[184]], [[185]], [[186]], [[187]], [[188]], [[189]], [[190]], [[191]], [[192]], [[193]], [[194]], [[195]], [[196]], [[197]], [[198]], [[199]], [[200]], [[201]], [[202]], [[203]], [[204]], [[205]], [[206]], [[207]], [[208]], [[209]], [[210]], [[211]], [[212]], [[213]], [[214]], [[215]], [[216]], [[217]], [[218]], [[219]], [[220]], [[221]], [[222]], [[223]], [[224]], [[225]], [[226]], [[227]], [[228]], [[229]], [[230]], [[231]], [[232]], [[233]], [[234]], [[235]], [[236]], [[237]], [[238]], [[239]], [[240]], [[241]], [[242]], [[243]], [[244]], [[245]], [[246]], [[247]], [[248]], [[249]], [[250]], [[251]], [[252]], [[253]], [[254]], [[255]], [[256]], [[257]], [[258]], [[259]], [[260]], [[261]], [[262]], [[263]], [[264]], [[265]], [[266]], [[267]], [[268]], [[269]], [[270]], [[271]], [[272]], [[273]], [[274]], [[275]], [[276]], [[277]], [[278]], [[279]], [[280]], [[281]], [[282]], [[283]], [[284]], [[285]], [[286]], [[287]], [[288]], [[289]], [[290]], [[291]], [[292]], [[293]], [[294]], [[295]], [[296]], [[297]], [[298]], [[299]], [[300]], [[301]], [[302]], [[303]], [[304]], [[305]], [[306]], [[307]], [[308]], [[309]], [[310]], [[311]], [[312]], [[313]], [[314]], [[315]], [[316]], [[317]], [[318]], [[319]], [[320]], [[321]], [[322]], [[323]], [[324]], [[325]], [[326]], [[327]], [[328]], [[329]], [[330]], [[331]], [[332]], [[333]], [[334]], [[335]], [[336]], [[337]], [[338]], [[339]], [[340]], [[341]], [[342]], [[343]], [[344]], [[345]], [[346]], [[347]], [[348]], [[349]], [[350]], [[351]], [[352]], [[353]], [[354]], [[355]], [[356]], [[357]], [[358]], [[359]], [[360]], [[361]], [[362]], [[363]], [[364]], [[365]], [[366]], [[367]], [[368]], [[369]], [[370]], [[371]], [[372]], [[373]], [[374]], [[375]], [[376]], [[377]], [[378]], [[379]], [[380]], [[381]], [[382]], [[383]], [[384]], [[385]], [[386]], [[387]], [[388]], [[389]], [[390]], [[391]], [[392]], [[393]], [[394]], [[395]], [[396]], [[397]], [[398]], [[399]], [[400]], [[401]], [[402]], [[403]], [[404]], [[405]], [[406]], [[407]], [[408]], [[409]], [[410]], [[411]], [[412]], [[413]], [[414]], [[415]], [[416]], [[417]], [[418]], [[419]], [[420]], [[421]], [[422]], [[423]], [[424]], [[425]], [[426]], [[427]], [[428]], [[429]], [[430]], [[431]], [[432]], [[433]], [[434]], [[435]], [[436]], [[437]], [[438]], [[439]], [[440]], [[441]], [[442]], [[443]], [[444]], [[445]], [[446]], [[447]], [[448]], [[449]], [[450]], [[451]], [[452]], [[453]], [[454]], [[455]], [[456]], [[457]], [[458]], [[459]], [[460]], [[461]], [[462]], [[463]], [[464]], [[465]], [[466]], [[467]], [[468]], [[469]], [[470]], [[471]], [[472]], [[473]], [[474]], [[475]], [[476]], [[477]], [[478]], [[479]], [[480]], [[481]], [[482]], [[483]], [[484]], [[485]], [[486]], [[487]], [[488]], [[489]], [[490]], [[491]], [[492]], [[493]], [[494]], [[495]], [[496]], [[497]], [[498]], [[499]], [[500]], [[501]], [[502]], [[503]], [[504]], [[505]], [[506]], [[507]], [[508]], [[509]], [[510]], [[511]], [[512]], [[513]], [[514]], [[515]], [[516]], [[517]], [[518]], [[519]], [[520]], [[521]], [[522]], [[523]], [[524]], [[525]], [[526]], [[527]], [[528]], [[529]], [[530]], [[531]], [[532]], [[533]], [[534]], [[535]], [[536]], [[537]], [[538]], [[539]], [[540]], [[541]], [[542]], [[543]], [[544]], [[545]], [[546]], [[547]], [[548]], [[549]], [[550]], [[551]], [[552]], [[553]], [[554]], [[555]], [[556]], [[557]], [[558]], [[559]], [[560]], [[561]], [[562]], [[563]], [[564]], [[565]], [[566]], [[567]], [[568]], [[569]], [[570]], [[571]], [[572]], [[573]], [[574]], [[575]], [[576]], [[577]], [[578]], [[579]], [[580]], [[581]], [[582]], [[583]], [[584]], [[585]], [[586]], [[587]], [[588]], [[589]], [[590]], [[591]], [[592]], [[593]], [[594]], [[595]], [[596]], [[597]], [[598]], [[599]], [[600]], [[601]], [[602]], [[603]], [[604]], [[605]], [[606]], [[607]], [[608]], [[609]], [[610]], [[611]], [[612]], [[613]], [[614]], [[615]], [[616]], [[617]], [[618]], [[619]], [[620]], [[621]], [[622]], [[623]], [[624]], [[625]], [[626]], [[627]], [[628]], [[629]], [[630]], [[631]], [[632]], [[633]], [[634]], [[635]], [[636]], [[637]], [[638]], [[639]], [[640]], [[641]], [[642]], [[643]], [[644]], [[645]], [[646]], [[647]], [[648]], [[649]], [[650]], [[651]], [[652]], [[653]], [[654]], [[655]], [[656]], [[657]], [[658]], [[659]], [[660]], [[661]], [[662]], [[663]], [[664]], [[665]], [[666]], [[667]], [[668]], [[669]], [[670]], [[671]], [[672]], [[673]], [[674]], [[675]], [[676]], [[677]], [[678]], [[679]], [[680]], [[681]], [[682]], [[683]], [[684]], [[685]], [[686]], [[687]], [[688]], [[689]], [[690]], [[691]], [[692]], [[693]], [[694]], [[695]], [[696]], [[697]], [[698]], [[699]], [[700]], [[701]], [[702]], [[703]], [[704]], [[705]], [[706]], [[707]], [[708]], [[709]], [[710]], [[711]], [[712]], [[713]], [[714]], [[715]], [[716]], [[717]], [[718]], [[719]], [[720]], [[721]], [[722]], [[723]], [[724]], [[725]], [[726]], [[727]], [[728]], [[729]], [[730]], [[731]], [[732]], [[733]], [[734]], [[735]], [[736]], [[737]], [[738]], [[739]], [[740]], [[741]], [[742]], [[743]], [[744]], [[745]], [[746]], [[747]], [[748]], [[749]], [[750]], [[751]], [[752]], [[753]], [[754]], [[755]], [[756]], [[757]], [[758]], [[759]], [[760]], [[761]], [[762]], [[763]], [[764]], [[765]], [[766]], [[767]], [[768]], [[769]], [[770]], [[771]], [[772]], [[773]], [[774]], [[775]], [[776]], [[777]], [[778]], [[779]], [[780]], [[781]], [[782]], [[783]], [[784]], [[785]], [[786]], [[787]], [[788]], [[789]], [[790]], [[791]], [[792]], [[793]], [[794]], [[795]], [[796]], [[797]], [[798]], [[799]], [[800]], [[801]], [[802]], [[803]], [[804]], [[805]], [[806]], [[807]], [[808]], [[809]], [[810]], [[811]], [[812]], [[813]], [[814]], [[815]], [[816]], [[817]], [[818]], [[819]], [[820]], [[821]], [[822]], [[823]], [[824]], [[825]], [[826]], [[827]], [[828]], [[829]], [[830]], [[831]], [[832]], [[833]], [[834]], [[835]], [[836]], [[837]], [[838]], [[839]], [[840]], [[841]], [[842]], [[843]], [[844]], [[845]], [[846]], [[847]], [[848]], [[849]], [[850]], [[851]], [[852]], [[853]], [[854]], [[855]], [[856]], [[857]], [[858]], [[859]], [[860]], [[861]], [[862]], [[863]], [[864]], [[865]], [[866]], [[867]], [[868]], [[869]], [[870]], [[871]], [[872]], [[873]], [[874]], [[875]], [[876]], [[877]], [[878]], [[879]], [[880]], [[881]], [[882]], [[883]], [[884]], [[885]], [[886]], [[887]], [[888]], [[889]], [[890]], [[891]], [[892]], [[893]], [[894]], [[895]], [[896]], [[897]], [[898]], [[899]], [[900]], [[901]], [[902]], [[903]], [[904]], [[905]], [[906]], [[907]], [[908]], [[909]], [[910]], [[911]], [[912]], [[913]], [[914]], [[915]], [[916]], [[917]], [[918]], [[919]], [[920]], [[921]], [[922]], [[923]], [[924]], [[925]], [[926]], [[927]], [[928]], [[929]], [[930]], [[931]], [[932]], [[933]], [[934]], [[935]], [[936]], [[937]], [[938]], [[939]], [[940]], [[941]], [[942]], [[943]], [[944]], [[945]], [[946]], [[947]], [[948]], [[949]], [[950]], [[951]], [[952]], [[953]], [[954]], [[955]], [[956]], [[957]], [[958]], [[959]], [[960]], [[961]], [[962]], [[963]], [[964]], [[965]], [[966]], [[967]], [[968]], [[969]], [[970]], [[971]], [[972]], [[973]], [[974]], [[975]], [[976]], [[977]], [[978]], [[979]], [[980]], [[981]], [[982]], [[983]], [[984]], [[985]], [[986]], [[987]], [[988]], [[989]], [[990]], [[991]], [[992]], [[993]], [[994]], [[995]], [[996]], [[997]], [[998]], [[999]], [[1000]], [[1001]], [[1002]], [[1003]], [[1004]], [[1005]], [[1006]], [[1007]], [[1008]], [[1009]], [[1010]], [[1011]], [[1012]], [[1013]], [[1014]], [[1015]], [[1016]], [[1017]], [[1018]], [[1019]], [[1020]], [[1021]], [[1022]], [[1023]], [[1024]], [[1025]], [[1026]], [[1027]], [[1028]], [[1029]], [[1030]], [[1031]], [[1032]], [[1033]], [[1034]], [[1035]], [[1036]], [[1037]], [[1038]], [[1039]], [[1040]], [[1041]], [[1042]], [[1043]], [[1044]], [[1045]], [[1046]], [[1047]], [[1048]], [[1049]], [[1050]], [[1051]], [[1052]], [[1053]], [[1054]], [[1055]], [[1056]], [[1057]], [[1058]], [[1059]], [[1060]], [[1061]], [[1062]], [[1063]], [[1064]], [[1065]], [[1066]], [[1067]], [[1068]], [[1069]], [[1070]], [[1071]], [[1072]], [[1073]], [[1074]], [[1075]], [[1076]], [[1077]], [[1078]], [[1079]], [[1080]], [[1081]], [[1082]], [[1083]], [[1084]], [[1085]], [[1086]], [[1087]], [[1088]], [[1089]], [[1090]], [[1091]], [[1092]], [[1093]], [[1094]], [[1095]], [[1096]], [[1097]], [[1098]], [[1099]], [[1100]], [[1101]], [[1102]], [[1103]], [[1104]], [[1105]], [[1106]], [[1107]], [[1108]], [[1109]], [[1110]], [[1111]], [[1112]], [[1113]], [[1114]], [[1115]], [[1116]], [[1117]], [[1118]], [[1119]], [[1120]], [[1121]], [[1122]], [[1123]], [[1124]], [[1125]], [[1126]], [[1127]], [[1128]], [[1129]], [[1130]], [[1131]], [[1132]], [[1133]], [[1134]], [[1135]], [[1136]], [[1137]], [[1138]], [[1139]], [[1140]], [[1141]], [[1142]], [[1143]], [[1144]], [[1145]], [[1146]], [[1147]], [[1148]], [[1149]], [[1150]], [[1151]], [[1152]], [[1153]], [[1154]], [[1155]], [[1156]], [[1157]], [[1158]], [[1159]], [[1160]], [[1161]], [[1162]], [[1163]], [[1164]], [[1165]], [[1166]], [[1167]], [[1168]], [[1169]], [[1170]], [[1171]], [[1172]], [[1173]], [[1174]], [[1175]], [[1176]], [[1177]], [[1178]], [[1179]], [[1180]], [[1181]], [[1182]], [[1183]], [[1184]], [[1185]], [[1186]], [[1187]], [[1188]], [[1189]], [[1190]], [[1191]], [[1192]], [[1193]], [[1194]], [[1195]], [[1196]], [[1197]], [[1198]], [[1199]], [[1200]], [[1201]], [[1202]], [[1203]], [[1204]], [[1205]], [[1206]], [[1207]], [[1208]], [[1209]], [[1210]], [[1211]], [[1212]], [[1213]], [[1214]], [[1215]], [[1216]], [[1217]], [[1218]], [[1219]], [[1220]], [[1221]], [[1222]], [[1223]], [[1224]], [[1225]], [[1226]], [[1227]], [[1228]], [[1229]], [[1230]], [[1231]], [[1232]], [[1233]], [[1234]], [[1235]], [[1236]], [[1237]], [[1238]], [[1239]], [[1240]], [[1241]], [[1242]], [[1243]], [[1244]], [[1245]], [[1246]], [[1247]], [[1248]], [[1249]], [[1250]], [[1251]], [[1252]], [[1253]], [[1254]], [[1255]], [[1256]], [[1257]], [[1258]], [[1259]], [[1260]], [[1261]], [[1262]], [[1263]], [[1264]], [[1265]], [[1266]], [[1267]], [[1268]], [[1269]], [[1270]], [[1271]], [[1272]], [[1273]], [[1274]], [[1275]], [[1276]], [[1277]], [[1278]], [[1279]], [[1280]], [[1281]], [[1282]], [[1283]], [[1284]], [[1285]], [[1286]], [[1287]], [[1288]], [[1289]], [[1290]], [[1291]], [[1292]], [[1293]], [[1294]], [[1295]], [[1296]], [[1297]], [[1298]], [[1299]], [[1300]], [[1301]], [[1302]], [[1303]], [[1304]], [[1305]], [[1306]], [[1307]], [[1308]], [[1309]], [[1310]], [[1311]], [[1312]], [[1313]], [[1314]], [[1315]], [[1316]], [[1317]], [[1318]], [[1319]], [[1320]], [[1321]], [[1322]], [[1323]], [[1324]], [[1325]], [[1326]], [[1327]], [[1328]], [[1329]], [[1330]], [[1331]], [[1332]], [[1333]], [[1334]], [[1335]], [[1336]], [[1337]], [[1338]], [[1339]], [[1340]], [[1341]], [[1342]], [[1343]], [[1344]], [[1345]], [[1346]], [[1347]], [[1348]], [[1349]], [[1350]], [[1351]], [[1352]], [[1353]], [[1354]], [[1355]], [[1356]], [[1357]], [[1358]], [[1359]], [[1360]], [[1361]], [[1362]], [[1363]], [[1364]], [[1365]], [[1366]], [[1367]], [[1368]], [[1369]], [[1370]], [[1371]], [[1372]], [[1373]], [[1374]], [[1375]], [[1376]], [[1377]], [[1378]], [[1379]], [[1380]], [[1382], [1381]], [[1386]], [[1387]], [[1388]], [[1389]], [[1390]], [[1391]], [[1392]], [[1393]], [[1394]], [[1395]], [[1396]], [[1397]], [[1398]], [[1399]], [[1400]], [[1401]], [[1402]], [[1403]], [[1404]], [[1405]], [[1406]], [[1407]], [[1408]], [[1409]], [[1410]], [[1411]], [[1412]], [[1413]], [[1414]], [[1415]], [[1416]], [[1417]], [[1418]], [[1419]], [[1420]], [[1421]], [[1422]], [[1423]], [[1424]]]
      }]
    }
  },
  "arcs": [[[99999, 42529], [-42, -77], [-15, -39], [-13, -44], [-36, -47], [-15, -63], [1, -63], [36, 66], [40, 54], [12, 11], [13, 0], [-1, -19], [-6, -18], [-5, -48], [11, -45], [-30, 5], [-29, -4], [-35, -25], [-34, -11], [-13, -1], [-13, 9], [-8, 13], [-6, 29], [-6, 5], [-28, -1], [-40, -59], [-14, -49], [-16, -3], [-18, 11], [-23, -38], [-26, -14], [-12, 32], [-7, 40], [-10, 29], [-29, 7], [4, 36], [8, 15], [7, 21], [5, 24], [14, -16], [14, -9], [16, 18], [17, 1], [17, 53], [26, 33], [37, 26], [37, 19], [19, 3], [18, 11], [32, 50], [21, 25], [24, 15], [22, 9], [20, -8], [17, 5], [42, 35], [0, -9]], [[99231, 41965], [-15, -9], [8, 45], [8, 15], [5, 3], [9, 3], [-4, -32], [-11, -25]], [[85380, 52298], [-9, -18], [-9, 6], [-6, 24], [2, 18], [8, 11], [9, -8], [5, -33]], [[27407, 66042], [-9, -12], [-4, 4], [0, 17], [-11, 39], [0, 10], [27, -38], [1, -10], [-4, -10]], [[27547, 66130], [-5, 0], [2, 9], [11, 16], [4, -6], [0, -9], [-12, -10]], [[27600, 66188], [-7, -3], [11, 25], [3, -2], [-7, -20]], [[89771, 44956], [-7, -69], [-14, -55], [-1, -32], [3, -45], [22, -33], [18, -21], [10, -58], [31, -81], [-1, -56], [16, -69], [16, -137], [4, -121], [16, -80], [-10, -172], [11, -70], [15, -58], [18, -116], [13, -106], [19, -30], [38, -36], [41, 40], [28, 53], [31, 13], [43, 28], [31, -71], [17, -80], [74, -104], [42, -68], [32, -37], [30, -50], [-3, -50], [-7, -39], [7, -61], [4, -71], [-6, -86], [22, -130], [7, -103], [23, -101], [-2, -104], [-4, -40], [-3, -58], [18, -72], [17, -54], [24, -58], [33, -89], [23, -17], [20, -2], [-3, -90], [41, -179], [22, -147], [-15, -197], [-14, -114], [3, -56], [53, -137], [30, -25], [-6, -65], [-4, -101], [24, -78], [27, -58], [30, -35], [29, -28], [38, -28], [48, -12], [25, -44], [13, -35], [39, -12], [17, 7], [22, 14], [14, -24], [11, -31], [21, -86], [44, -85], [30, -14], [18, -43], [24, -11], [22, -6], [30, -33], [49, -75], [45, -13], [20, -21], [44, -83], [17, -44], [18, -66], [-22, -6], [-21, 13], [-13, -64], [29, -90], [35, -63], [41, -67], [40, -94], [10, -72], [11, -29], [13, -101], [35, -59], [2, -108], [18, -149], [19, -135], [14, -40], [17, -65], [18, 8], [14, 21], [28, -64], [15, -28], [8, 16], [-17, 123], [11, 72], [10, 9], [16, 2], [18, -58], [26, -62], [47, -55], [38, -52], [11, 2], [-4, 40], [1, 59], [15, 9], [14, -29], [25, -91], [5, -188], [0, -158], [17, -162], [24, -43], [16, -40], [28, -54], [18, -51], [23, -23], [74, -108], [20, -13], [32, -2], [40, -49], [19, -45], [43, -169], [20, -59], [43, -59], [19, -19], [29, -40], [10, -59], [3, -34], [17, -63], [25, -75], [38, -41], [34, -91], [2, -148], [18, -73], [12, -32], [27, -30], [11, -24], [-23, -195], [22, -391], [-12, -122], [22, -121], [52, -210], [12, -74], [7, -87], [34, -111], [-2, -169], [13, -80], [-3, -105], [-40, -112], [-31, -139], [-1, -118], [-20, -228], [-14, -62], [-10, -95], [-43, -230], [-2, -90], [6, -108], [-7, -103], [-11, -71], [-10, -130], [-44, -202], [-63, -150], [-4, -114], [-8, -50], [-13, -62], [-39, -69], [-23, -29], [-9, -40], [-22, 0], [0, -13], [15, -12], [-7, -21], [-58, -36], [-40, -47], [-40, -113], [-17, -60], [-21, -57], [-13, -27], [-6, -28], [-8, -72], [-21, -13], [-18, -21], [8, -68], [-9, -78], [-3, -53], [-10, -34], [-11, 12], [-10, -5], [-12, -19], [19, -5], [11, -9], [-39, -76], [-36, -78], [-10, -51], [-15, -65], [-14, -144], [-11, -83], [8, -58], [-2, -11], [-8, -4], [-5, 7], [-17, -20], [-4, -20], [7, -25], [4, -8], [-2, -12], [-6, -13], [-16, 0], [-19, -21], [-53, -213], [-23, -57], [-27, -87], [-10, -79], [-8, -86], [-10, -145], [-9, -103], [-21, -99], [-7, -71], [-3, -135], [10, -103], [-7, -54], [0, -52], [-8, -49], [-34, -11], [-28, -40], [-40, -65], [-23, -24], [-51, -18], [-99, 8], [-189, -24], [-37, -15], [-70, -45], [-68, -70], [-66, -94], [-149, -256], [-117, -28], [-22, 0], [-18, 7], [-21, -16], [0, -32], [19, -33], [14, -31], [25, 43], [11, -12], [4, -79], [1, -50], [-8, -27], [-15, -20], [-17, 13], [-2, 27], [-22, 65], [-26, 57], [-25, 18], [-14, -19], [-23, -20], [-20, 72], [-20, 63], [-28, 7], [-24, -1], [-19, 27], [-39, 43], [8, 33], [10, 35], [22, 13], [-6, 48], [-12, 39], [-30, 10], [-21, -7], [-12, -30], [-16, -54], [-64, -67], [-32, 37], [-36, 55], [18, -4], [36, 2], [30, 49], [13, 31], [15, 66], [-19, 46], [-18, 34], [-26, 30], [-98, -102], [-21, -15], [-19, -20], [34, -17], [20, 5], [21, -30], [-34, -42], [-26, -12], [-34, -25], [-63, -66], [-80, -136], [-35, -39], [-41, -32], [-56, 37], [-31, 8], [-40, 56], [-67, 38], [-63, 74], [-44, 38], [-31, 8], [-43, -16], [-73, 67], [-56, 7], [-36, -67], [-29, 5], [-18, 9], [-59, 110], [-56, 55], [-107, 28], [-66, 76], [-49, 146], [-94, 168], [-25, 61], [-12, 60], [-1, 47], [13, 90], [17, 89], [3, 50], [-35, 167], [-50, 159], [-23, 49], [-62, 106], [-57, 79], [-15, 42], [-4, 21], [27, -10], [12, 32], [19, 11], [14, -43], [17, -8], [0, 72], [10, 35], [-7, 15], [-5, 14], [-25, 16], [-28, -24], [-21, -31], [-28, -26], [-11, -28], [-29, -1], [-12, -7], [-58, -53], [-36, -1], [-57, 18], [18, 73], [23, 43], [19, 50], [30, 173], [-5, 151], [-15, 61], [-48, 125], [-22, 76], [-27, 80], [-13, -46], [-8, -49], [-26, -70], [-13, -157], [-50, -239], [-35, -3], [-30, 10], [-52, -28], [-35, -33], [-32, 0], [-18, -10], [-23, 8], [37, 187], [31, -5], [35, 7], [15, -3], [23, 2], [18, 86], [11, 96], [-7, 62], [-3, 64], [7, 73], [3, 53], [43, 174], [37, 89], [42, 72], [-5, 68], [-14, 85], [-4, 65], [20, 20], [19, 41], [-22, 187], [-14, 55], [-22, 55], [0, -71], [2, -70], [-30, -89], [-40, -64], [-26, -60], [-25, -136], [-32, -115], [-30, -43], [-27, -9], [-27, -18], [-42, -45], [-42, -39], [-30, -50], [-26, -27], [-86, -230], [-40, -76], [-8, -31], [-16, -26], [3, -37], [13, -24], [13, -102], [-8, -22], [-14, 11], [-35, 57], [-22, -21], [-18, -23], [-46, 105], [-20, 24], [-24, 42], [-26, 36], [-11, 5], [-19, -8], [2, 28], [13, 23], [11, 6], [21, -34], [24, -30], [14, -2], [6, 12], [-23, 118], [-15, 104], [-7, 30], [-19, 106], [-9, 30], [-40, 74], [-43, 88], [-11, 104], [-16, 67], [-20, 42], [-31, 38], [-85, 14], [-35, 107], [-21, 133], [16, 9], [19, 2], [7, 41], [-5, 64], [-84, 78], [-40, 83], [-34, 35], [-31, 14], [-42, -3], [-53, 3], [-126, 131], [-30, 4], [-90, -41], [-31, 7], [-137, 179], [-91, 86], [-30, 15], [-39, 15], [-32, -21], [-22, -19], [-46, -22], [-182, 14], [-156, -28], [-105, -19], [-67, -24], [-112, -107], [-133, -103], [-108, -49], [-99, -65], [-66, -19], [-84, -8], [-179, 32], [-61, -24], [-97, -120], [-29, -29], [-55, -33], [-141, -155], [-65, -33], [-42, -11], [-36, -32], [-32, -66], [-45, -183], [-27, -86], [-61, -138], [-39, -46], [-40, 6], [-44, -48], [-38, 51], [-31, 9], [-50, -4], [-174, -58], [-25, 68], [-32, 10], [-60, -3], [-90, 20], [-164, -25], [-79, -28], [-31, -25], [-58, 16], [-99, -23], [-35, -38], [-26, -35], [-51, -154], [-56, -51], [-47, -1], [-51, -12], [-105, -148], [-106, -144], [-36, -15], [-40, -24], [-52, -12], [-26, -13], [-122, 37], [-77, 4], [-97, 22], [-83, 71], [-64, 40], [-73, 155], [-44, 58], [-80, 70], [-23, -2], [-19, -19], [-33, 49], [-1, 64], [-9, 54], [1, 142], [5, 167], [29, -38], [23, -36], [49, 2], [44, 62], [25, 92], [21, 103], [-3, 110], [-15, 193], [10, 41], [15, 16], [5, 96], [4, 296], [-11, 111], [-68, 226], [-45, 197], [-32, 88], [-28, 143], [-23, 198], [-7, 100], [-7, 185], [8, 105], [-4, 61], [-28, 167], [-64, 156], [-10, 58], [0, 61], [-15, 71], [-51, 143], [-52, 123], [-9, 60], [-10, 249], [-19, 114], [-89, 287], [-104, 248], [-29, 102], [-13, 34], [8, 4], [11, -13], [13, -25], [7, -2], [6, 21], [-1, 47], [4, 26], [9, -14], [11, -53], [33, -138], [10, -70], [42, -21], [13, 18], [15, 36], [5, 97], [-21, 44], [-20, 19], [-32, 72], [-21, 115], [-33, 107], [0, 38], [15, 28], [25, -15], [23, -62], [25, -57], [-4, -100], [-4, -27], [2, -23], [9, -22], [12, -17], [13, 25], [11, 58], [7, -7], [18, -133], [14, -36], [27, -42], [24, 32], [11, 28], [-4, 94], [7, 91], [-4, 67], [-61, 177], [-56, 218], [-34, 109], [-28, 164], [-18, 56], [-24, 92], [-1, 104], [2, 71], [19, 151], [18, 79], [56, 181], [3, 78], [0, 59], [8, 90], [0, 63], [-8, 59], [-23, 100], [31, 177], [45, 226], [18, 33], [28, 31], [5, -47], [-13, -157], [19, -81], [-6, -92], [18, 15], [27, 18], [21, 48], [11, 46], [51, 184], [30, 69], [41, 50], [85, 61], [81, 80], [39, 77], [49, 66], [34, 73], [32, 49], [166, 183], [28, 34], [36, 4], [44, -6], [40, 10], [43, -42], [31, -5], [77, 46], [41, 40], [71, 89], [31, 25], [72, 28], [82, 37], [98, 154], [70, -10], [63, -15], [51, 46], [119, 28], [66, 39], [124, 102], [33, 35], [50, 73], [44, 91], [43, 123], [27, 110], [11, 57], [26, 90], [17, 71], [14, 34], [48, 48], [71, 135], [23, 28], [4, 43], [-15, 24], [-19, 15], [-13, 143], [-12, 99], [-1, 69], [5, 66], [28, 103], [19, 44], [28, 51], [25, 16], [21, 45], [34, 44], [15, 45], [21, 91], [19, 69], [15, -3], [28, -160], [19, -85], [35, -100], [32, -148], [27, -67], [13, -44], [10, -20], [3, 28], [-3, 33], [13, 112], [-6, 79], [2, 31], [6, 12], [13, -8], [25, -44], [13, -16], [9, 3], [-1, 72], [13, 45], [-5, 31], [-22, -2], [-9, 39], [-18, 44], [-21, 32], [-24, 74], [-8, 28], [10, 14], [15, -2], [13, 31], [5, 42], [-11, 69], [12, 25], [22, -7], [36, -109], [16, 11], [13, 44], [23, 12], [24, -8], [15, -31], [32, -32], [42, 4], [22, -8], [45, 6], [22, -10], [-4, 17], [-25, 20], [-27, 4], [-32, -2], [-14, 21], [-5, 55], [8, 40], [5, 17], [21, -7], [19, 2], [2, 53], [7, 48], [11, 39], [0, 37], [-12, -10], [-28, -86], [-14, 70], [-20, 53], [4, 77], [12, 76], [18, 10], [16, -12], [23, 45], [13, 34], [-3, 28], [3, 21], [16, -6], [62, -69], [12, -36], [13, 14], [4, 39], [-1, 39], [-14, -5], [-32, 3], [-7, 22], [3, 19], [-15, 46], [21, 29], [17, 2], [13, 20], [0, 27], [4, 12], [10, -17], [32, -7], [31, -35], [15, -8], [6, 19], [2, 41], [-39, 41], [-1, 40], [-17, 47], [0, 45], [24, 39], [5, 37], [15, 15], [27, 0], [19, 32], [21, 11], [6, 70], [-1, 48], [9, 12], [21, -20], [-6, -55], [0, -53], [-6, -29], [8, 2], [5, 12], [9, 35], [22, -14], [6, -37], [3, -37], [11, -12], [15, 56], [21, 15], [-1, 71], [8, 51], [2, 38], [13, 19], [3, 40], [-10, 28], [-6, 51], [18, 11], [18, -25], [13, -64], [8, -29], [11, 16], [7, 42], [22, 25], [22, -34], [24, -48], [31, 42], [28, 77], [-5, 47], [4, 49], [35, 26], [29, -19], [25, -52], [54, -39], [46, -56], [20, -36], [40, -58], [25, -60], [34, -107], [82, -131], [5, -23], [-11, -43], [-10, -56], [-12, -95], [-3, -139], [12, 10], [12, 50], [13, -10], [14, -32], [2, 31], [-9, 18], [-15, 64], [0, 34], [12, 28], [19, 32], [20, 22], [13, 18], [2, 24], [18, 23], [28, 8], [16, -4], [118, -59], [29, -60], [3, -73], [11, -26], [7, 46], [-2, 100], [10, 20], [31, -15], [22, -20], [30, -66], [6, -32], [13, -21], [4, 30], [-6, 43], [-4, 50], [6, 43], [36, 3], [23, 10], [-11, 16], [-15, 6], [-25, 40], [-17, 42], [27, 42], [-1, 10], [-25, -1], [-34, 40], [-29, 56], [22, 103], [45, 101], [25, 34], [2, 34], [12, 62], [8, 53], [2, 42], [11, 43], [28, 41], [37, 15], [18, 16], [18, 38], [16, 46], [-34, 90], [3, 50], [6, 59], [42, 43], [22, 112], [15, 17], [33, -3], [13, 10], [-2, 89], [3, 35], [14, 14], [18, -12], [11, -39], [25, -36], [9, 20], [-4, 39], [-3, 51], [23, 11], [19, 3], [1, 41], [-3, 33], [8, 14], [48, 7], [13, 34], [7, 29], [6, -16], [8, -66], [27, -38], [80, -1], [45, 27], [19, -16], [30, -13], [32, 31], [20, 24], [33, -31], [11, -32], [8, 69], [20, 24], [20, 14], [26, -12], [10, 4], [-23, 51], [1, 46], [-1, 69], [4, 62], [8, 45], [-55, 91], [-55, 14], [-40, -19], [-17, 15], [-36, 72], [-34, 27], [-2, 18], [41, 52], [16, -9], [24, -49], [14, -17], [12, 4], [7, 38], [11, 20], [20, -12], [62, -82], [34, -80], [18, 21], [31, 45], [29, -9], [17, -27], [25, -97], [20, -48], [48, -13], [24, -19], [25, -32], [33, 3], [70, -12], [65, -62], [27, -39], [32, -11], [18, -15], [34, -5], [53, 44], [24, -40], [11, -28], [48, -52], [53, -16], [37, 53], [55, 39], [38, 60], [28, 29], [27, 49], [10, -2], [-22, -46], [-2, -26], [17, -11], [-2, -14], [-23, -35], [-29, -56], [1, -34], [11, -18], [13, 8], [18, 28], [23, 16], [19, -23], [7, -80], [14, -53], [30, -7], [19, 0], [19, 74], [-10, 63], [-12, 14], [6, 23], [48, 104], [27, -3], [19, -102], [31, -53], [32, 4], [17, -14], [14, -61], [-114, -251], [-5, -28], [15, -45], [6, -53], [-37, -128], [-14, -6], [-13, 35], [-19, 22], [-18, -16], [-18, -9], [-66, -71], [0, -183], [17, -109], [-10, -71], [-19, -126], [-22, -47], [-17, -30], [-57, -172], [-18, -41], [-19, -59], [6, -56], [7, -39], [22, -44], [83, -92], [38, -64], [66, -76], [15, -53], [9, -43], [47, -49], [34, -30], [10, 8], [7, 10], [8, 0], [9, -6], [-2, -38], [-3, -21], [3, -27], [24, -34], [38, 1], [22, 8], [25, -36], [22, -24], [36, -48], [63, -58], [49, -38], [58, -140], [44, -81], [49, -59], [72, -41], [33, 7], [54, -48], [53, -22], [28, -66], [9, -50], [3, -39], [26, -92], [54, -30], [69, -92], [57, -41], [14, -24], [25, -29], [48, -1], [84, 46], [38, 47], [51, 74], [23, 128], [14, 103], [71, 212], [20, 105], [18, 140], [15, 87], [-5, 95], [16, 172], [36, 237], [13, 79], [-7, 118], [-22, 220], [10, 77], [10, 106], [-16, 77], [-16, 53], [-2, 75], [17, 140], [15, 74], [16, 96], [-9, 182], [34, 63], [13, 32], [26, 0], [12, -14], [3, 36], [-10, 34], [-4, 39], [-8, 20], [-16, 7], [-13, 21], [-19, 22], [3, 81], [33, 156], [18, 60], [11, -25], [14, -20], [2, 45], [-5, 46], [25, 152], [27, 207], [8, 188], [44, 36], [23, 47], [13, 55], [25, 0], [17, -24], [-11, -41], [-4, -31], [47, -79], [16, -60], [7, -57], [9, -54], [4, -72], [0, -115], [6, -109], [17, -34], [15, -22], [22, -3], [31, -18]], [[99521, 41836], [0, -26], [8, -11], [8, -2], [21, -48], [31, -42], [19, -32], [1, -28], [-6, -29], [8, -51], [4, -54], [14, -86], [-20, -16], [-30, -2], [-7, -15], [-11, 8], [-25, -6], [-25, -28], [-23, -38], [-27, 0], [-30, -8], [-30, 5], [-21, 21], [-38, 22], [-49, 19], [-21, 15], [-17, 25], [-16, 63], [-3, 31], [3, 30], [15, 10], [12, 15], [1, 19], [6, 14], [7, 5], [3, 9], [-5, 32], [-1, 29], [29, 53], [31, 45], [56, 42], [34, -4], [52, 33], [17, 15], [16, -10], [9, -24]], [[95611, 40180], [31, -36], [34, 15], [42, -57], [108, -172], [37, -37], [23, -14], [16, -28], [16, -40], [20, -28], [9, -26], [2, -36], [8, -22], [37, -57], [22, -50], [32, -26], [13, -30], [17, -14], [18, -31], [30, -24], [68, -88], [53, -84], [26, -52], [29, -46], [36, -37], [34, -42], [17, -99], [-9, -35], [-20, -18], [-18, -1], [-17, -12], [-56, 64], [-14, 9], [-15, -4], [-8, 14], [-6, 21], [-35, 24], [-32, 37], [-9, 26], [-5, 32], [-8, 19], [-45, 28], [-31, 31], [-22, 44], [-34, 31], [-54, 63], [-27, 20], [-24, 31], [-65, 115], [-23, 21], [-20, 51], [-55, 120], [-27, 50], [-29, 44], [-22, 52], [-17, 61], [-40, 88], [-5, 38], [2, 38], [-10, 25], [-16, 15], [-8, 26], [1, 35], [5, 18], [40, -60]], [[85480, 52331], [21, -13], [21, 4], [10, 26], [3, 33], [11, 62], [24, 42], [17, 7], [12, 18], [-2, 46], [1, 45], [18, 48], [57, 68], [31, 24], [42, 7], [5, -25], [-5, -37], [8, -56], [-4, -150], [-10, -21], [-42, -52], [-47, -42], [-13, -17], [-12, -42], [1, -41], [38, -54], [59, -52], [13, -24], [8, -40], [2, -45], [14, -21], [20, -10], [13, -22], [11, -30], [-100, 70], [-26, 31], [-32, 4], [-31, 9], [-32, 27], [-34, 6], [-16, -19], [-7, -38], [-4, -43], [8, -53], [-1, -32], [-6, -58], [25, -171], [31, -137], [45, -142], [23, -49], [25, -44], [-41, 13], [-12, 48], [-52, 47], [-10, 28], [-34, 135], [-10, 25], [-31, 46], [-14, 33], [-5, 46], [4, 48], [-2, 66], [1, 65], [7, 81], [-11, 28], [-15, 26], [-17, 62], [-5, 70], [1, 40], [7, 35], [10, 31], [2, 30], [-25, 44], [-25, 124], [-2, 65], [32, 124], [-1, 60], [7, 36], [3, 38], [17, 83], [28, 70], [47, 99], [18, 21], [20, 14], [2, -24], [-4, -21], [-34, -101], [-5, -22], [-1, -43], [17, -24], [18, -51], [3, -68], [1, -72], [-4, -73], [-7, -25], [-28, -73], [-65, -85], [-5, -21], [0, -24], [12, -29], [15, -22]], [[69217, 23554], [23, -4], [13, 6], [62, 76], [16, 2], [-2, -59], [16, -26], [-20, -6], [-38, 2], [-9, -33], [39, -42], [19, -6], [15, 0], [29, 10], [23, 15], [36, 36], [22, 14], [41, 0], [21, 34], [10, 10], [24, -1], [21, -13], [13, -31], [7, -37], [-5, -37], [-15, -36], [-26, -22], [6, -26], [-7, -13], [-13, -1], [-12, 6], [-16, 31], [-20, 16], [-48, -1], [-22, -2], [-3, -23], [-12, -18], [-12, -10], [-16, 4], [-3, -10], [9, -24], [21, -31], [36, -22], [21, -5], [3, 42], [26, 4], [23, -12], [16, -30], [-13, -10], [-12, -16], [-3, -21], [-23, -23], [-13, -2], [-44, 11], [-26, 25], [-6, 18], [-16, 7], [-18, -23], [-19, -5], [-37, 19], [-35, 31], [-22, 12], [-33, 8], [-19, -71], [-26, -30], [-33, -3], [-16, 6], [-9, 28], [2, 29], [5, 29], [11, 29], [6, 32], [-2, 30], [-12, 22], [6, 40], [-12, 30], [4, 23], [20, 16], [-9, 13], [-10, 4], [-7, 18], [-6, 22], [7, 41], [12, 39], [-2, 45], [19, 42], [17, 47], [12, 19], [15, 3], [7, -13], [3, -26], [-6, -17], [14, -7], [4, -55], [-9, -22], [-1, -22], [-19, -46], [5, -37], [37, -16]], [[67603, 98329], [-52, -2], [-51, 9], [-67, 29], [-67, 34], [20, 18], [63, 23], [82, 42], [139, 9], [67, 0], [67, 10], [19, 21], [13, 41], [12, 22], [15, 17], [74, 14], [63, -1], [63, -16], [40, -14], [38, -28], [20, -23], [-6, -28], [3, -23], [18, -21], [-122, -65], [-125, -36], [-326, -32]], [[66098, 97996], [-43, -11], [-113, 21], [-17, 11], [-14, 20], [-19, 78], [-1, 23], [-7, 16], [-28, 28], [-20, 13], [18, 15], [124, -11], [266, -6], [136, -28], [40, -16], [39, -26], [-238, -14], [-32, -12], [1, -29], [-9, -26], [-25, -3], [-58, -43]], [[42935, 92696], [10, -34], [1, -16], [-2, -14], [-6, -9], [-13, -9], [25, -22], [7, -15], [2, -12], [-16, -24], [-110, -31], [-31, -15], [-38, -37], [-47, -31], [-16, 0], [-18, 33], [-74, 24], [-139, -13], [-162, -30], [-58, -14], [-29, 7], [-9, 12], [0, 15], [19, 47], [8, 12], [37, 15], [25, 41], [-8, 44], [10, 62], [25, 10], [64, -22], [41, -5], [73, -3], [99, 8], [79, 25], [144, 71], [25, -1], [19, -25], [13, -12], [43, -20], [7, -12]], [[94374, 46501], [61, -92], [27, 8], [80, -2], [47, -66], [28, -30], [16, -59], [19, -14], [12, -30], [7, -55], [-5, -9], [-24, -20], [-18, -9], [-47, 20], [-44, 42], [-89, 5], [-41, 12], [-14, 17], [-13, 21], [-21, 51], [-17, 61], [-2, 35], [-2, 68], [5, 24], [17, 25], [18, -3]], [[82586, 56704], [-26, -42], [3, 52], [7, 49], [26, 99], [19, 31], [31, 78], [18, 38], [42, 75], [39, 82], [13, 6], [14, 1], [12, 9], [25, 45], [63, 147], [53, 110], [54, 139], [26, 41], [7, 15], [49, 128], [16, 18], [17, 14], [12, 17], [11, 22], [17, 56], [8, 65], [-5, 37], [-10, 54], [13, 74], [9, 34], [35, 150], [10, 31], [14, -19], [2, -27], [-7, -64], [0, -31], [8, -33], [-10, -53], [25, -142], [19, -89], [1, -30], [-26, -53], [-15, -16], [-33, -15], [-15, -15], [-23, -44], [-15, -57], [-4, -30], [-7, -23], [-68, -39], [-31, -25], [-15, -19], [-7, -31], [5, -55], [-57, -199], [-18, -51], [-19, -45], [-24, -31], [-33, -19], [-27, -39], [-18, -68], [-22, -61], [-28, -45], [-30, -40], [-28, -30], [-30, -20], [-9, -27], [-6, -33], [-14, -16], [-15, -8], [-28, -33]], [[84026, 58533], [32, -29], [32, 25], [31, -7], [26, -38], [-9, -24], [-1, -27], [57, 58], [16, -3], [-1, -54], [-3, -46], [-7, -44], [-12, -52], [-17, -46], [-21, -33], [-26, -21], [-12, -19], [-4, -28], [1, -35], [-6, -32], [-27, -14], [-42, -62], [-90, -40], [-25, -27], [-16, -36], [-17, -32], [-10, -8], [-4, 15], [-1, 13], [13, 84], [-3, 35], [-6, 33], [4, 66], [16, 62], [8, 68], [3, 132], [12, 182], [-1, 22], [-9, 25], [-35, 20], [-14, 19], [7, 36], [13, 25], [18, -1], [16, -23], [57, -48], [30, -40], [27, -51]], [[84202, 57064], [-18, -6], [-20, 3], [-13, 28], [-22, 122], [-26, 30], [-30, 22], [-15, 19], [-14, 23], [-42, 122], [-3, 74], [7, 42], [13, 38], [14, 10], [35, 1], [18, 5], [40, 56], [3, 22], [0, 92], [-4, 64], [-10, 62], [11, 29], [14, 28], [14, 55], [3, 39], [0, 41], [4, 29], [12, 14], [54, 45], [10, 3], [71, -41], [14, -62], [1, -20], [-11, -69], [-9, -46], [-24, -71], [-18, -77], [-13, -115], [-8, -38], [-22, -72], [-7, -40], [0, -86], [-4, -32], [0, -31], [44, -143], [4, -23], [0, -26], [-8, -32], [-18, -55], [-10, -19], [-17, -14]], [[84603, 58377], [20, -20], [22, 8], [27, 45], [30, -16], [18, -68], [9, -25], [5, -44], [-2, -106], [-7, -95], [6, -20], [14, -17], [12, -22], [10, -27], [7, -30], [2, -74], [18, -62], [2, -24], [-4, -25], [-29, 5], [-3, -21], [1, -27], [-10, 17], [-17, 60], [-16, 26], [5, -98], [5, -48], [1, -47], [-27, 36], [-33, 23], [-9, 19], [4, 61], [-1, 31], [-14, 64], [16, 140], [0, 29], [-3, 28], [-13, 57], [-21, 47], [-13, 0], [-32, -33], [-16, 11], [-9, 131], [-13, 127], [-9, 32], [-7, 34], [6, 28], [13, -11], [17, -34], [21, -19], [10, -16], [7, -30]], [[84788, 59059], [20, -47], [4, -34], [-2, -38], [9, -16], [16, -5], [20, -19], [15, -35], [-9, -32], [3, -46], [-16, -59], [2, -105], [9, -33], [1, -33], [-2, -36], [4, -28], [24, -96], [5, -32], [-8, -25], [-2, -24], [15, -2], [21, -40], [12, -53], [-3, -13], [-17, 41], [-13, 6], [-55, -11], [-33, 17], [-22, 2], [-21, 70], [-19, 12], [-15, 31], [-25, 79], [-8, 46], [18, 46], [5, 37], [-1, 36], [-17, -6], [-14, 12], [-17, 44], [-7, 25], [-13, 22], [-20, 50], [-30, 20], [-11, 14], [-24, 42], [-16, 53], [-17, 92], [-9, 95], [76, -25], [76, 5], [86, 22], [25, -26]], [[83528, 59607], [14, -5], [45, 18], [18, -9], [12, -33], [15, -10], [12, -17], [23, 29], [22, -33], [20, -63], [24, -44], [22, -33], [5, -25], [-14, -40], [-4, -50], [2, -55], [16, -114], [-5, -31], [-18, -44], [-12, -49], [1, -20], [-5, -16], [-1, -35], [-11, 7], [-9, -5], [-9, -16], [-15, -33], [-23, 10], [-10, 10], [-3, 29], [-7, 20], [-9, 12], [-24, 50], [-11, 38], [-1, 40], [-6, 37], [-12, 33], [-16, 26], [-6, 24], [-2, 29], [-1, 75], [-24, 92], [-8, 23], [-21, 22], [-18, 30], [-8, 29], [-7, 48], [-5, 7], [-14, -3], [-13, 7], [3, 35], [14, 25], [19, 3], [51, -14], [14, -11]], [[93321, 47991], [-7, -54], [-5, -9], [-7, 20], [-24, -20], [-11, -22], [-13, -17], [-28, 4], [-27, 15], [-26, 28], [-23, 35], [-23, 55], [-14, 57], [7, 66], [-9, 60], [-44, 43], [-10, 14], [-19, 59], [-19, 26], [-25, 52], [-6, 23], [-11, 66], [-3, 40], [9, 116], [-4, 58], [12, -5], [13, -23], [15, -16], [35, -11], [27, -46], [25, -90], [4, -30], [8, -21], [26, -38], [14, -25], [26, -98], [15, -21], [17, -9], [16, -14], [27, -43], [24, -49], [17, -51], [12, -55], [9, -70]], [[92490, 49103], [-21, -44], [-13, 41], [-16, 36], [-13, 36], [-17, 79], [0, 40], [4, 42], [1, 43], [-8, 87], [-19, 78], [-68, 189], [-21, 49], [-24, 44], [-16, 11], [-31, 11], [-14, 8], [-26, 31], [-24, 36], [-60, 106], [-31, 30], [-17, 37], [-94, 120], [-27, 28], [-34, 0], [-28, 24], [22, 15], [5, 40], [-5, 41], [47, -67], [50, -58], [14, -47], [25, -3], [45, -38], [30, -35], [29, -40], [33, -58], [62, -45], [9, -17], [32, -75], [42, -64], [14, -35], [177, -301], [30, -85], [2, -58], [-6, -22], [-19, -49], [1, -58], [-6, -51], [-16, -52]], [[88481, 47077], [-66, -76], [-87, 13], [-31, 2], [-51, -19], [-11, 15], [10, 71], [41, 190], [49, 168], [20, 43], [29, 41], [31, 33], [69, 34], [62, -7], [9, -13], [27, -56], [18, -44], [7, -63], [-27, -107], [-29, -102], [-49, -80], [-21, -43]], [[86042, 50192], [64, -64], [33, -9], [56, 8], [21, -6], [53, -82], [15, -56], [4, -48], [9, -46], [13, -11], [15, -5], [20, -66], [4, -21], [-15, -166], [-63, 63], [-60, 71], [-26, 27], [-69, 60], [-11, 21], [-8, 27], [-30, 37], [-60, 6], [-23, -1], [-9, -6], [2, -20], [0, -40], [-15, -12], [-37, 26], [-34, 9], [-29, 25], [-39, 14], [-4, 12], [3, 19], [-1, 18], [-9, 6], [-18, -3], [-17, -17], [-14, -21], [-20, -55], [-11, -21], [-34, -9], [-14, 5], [-13, 14], [-39, 101], [-13, 22], [-14, 18], [-14, 8], [-13, -16], [-8, -31], [-3, -37], [-4, -22], [-17, -59], [-13, -36], [-5, 6], [7, 57], [0, 32], [-9, 34], [-5, 35], [65, 165], [24, 40], [103, 13], [61, -8], [34, 4], [22, 12], [19, -5], [4, -33], [12, -24], [16, 2], [29, 25], [26, 40], [15, 17], [16, 3], [16, -3], [16, -9], [43, -34]], [[85238, 50064], [46, -45], [10, -29], [9, -35], [9, -20], [10, -15], [18, -31], [5, -46], [-4, -93], [-21, -8], [-19, -14], [-40, -54], [-20, -10], [-21, -4], [-15, -14], [-15, -6], [-39, 30], [-38, 35], [-54, 61], [-10, 15], [-9, 32], [-25, 59], [-6, 38], [-2, 106], [6, 25], [11, 13], [36, -25], [24, 26], [69, 22], [71, -2], [14, -11]], [[84106, 46882], [-40, -20], [-24, -20], [-23, -26], [-15, -5], [-27, -2], [-37, 5], [-26, -9], [-71, -66], [-28, -6], [-24, -16], [-8, 26], [-10, 19], [-24, 4], [-24, -1], [-24, -59], [-38, 13], [-15, -6], [-14, -12], [-14, -5], [-15, 4], [-56, 45], [-64, 27], [-64, -10], [-55, 25], [-30, -19], [-29, -28], [-8, 29], [-11, 26], [-9, 37], [0, 44], [3, 30], [8, 27], [5, 29], [3, 31], [12, -15], [12, 5], [38, 34], [37, 50], [34, 19], [20, 5], [16, -10], [17, 4], [18, 11], [28, -39], [11, -8], [38, -3], [34, -22], [30, -34], [44, -31], [27, -42], [20, -15], [15, -5], [13, 6], [18, 28], [20, 12], [18, 0], [32, 7], [14, 7], [15, 15], [15, -9], [13, -15], [54, -74], [17, -2], [30, 16], [10, 20], [4, 31], [9, 25], [11, 22], [14, 17], [40, 28], [28, 28], [19, 48], [-44, 20], [9, 34], [15, 20], [20, -7], [17, -27], [7, -102], [-14, -15], [-8, -15], [-6, -20], [-26, -38], [10, -46], [-7, -20], [-10, -9]], [[83336, 46442], [13, -25], [45, -50], [7, -21], [3, -35], [9, -26], [21, -4], [22, 5], [16, -16], [15, -26], [21, -50], [19, -56], [23, -31], [14, -46], [-8, -41], [-30, -57], [-16, -12], [-21, -4], [-35, -34], [-12, 18], [-39, 12], [-30, 24], [-26, 45], [-15, 47], [-19, 43], [-33, 28], [-58, 83], [-37, 7], [-15, -6], [-15, 0], [-77, 37], [-12, 22], [-9, 28], [-9, 27], [-5, 31], [10, 27], [10, 19], [43, 32], [31, 10], [35, -2], [53, 10], [51, -16], [15, 12], [25, 34], [9, -12], [11, -31]], [[82844, 47051], [14, -22], [13, 2], [26, 34], [16, 13], [17, 1], [17, -6], [16, -25], [6, -40], [6, -13], [10, 49], [13, 14], [14, 8], [22, -3], [17, -23], [16, -69], [-1, -60], [6, -22], [11, -17], [8, -23], [-7, -24], [-7, -11], [-21, -11], [-9, 4], [-9, 17], [-10, 6], [-23, -6], [-21, -13], [3, -22], [17, -10], [5, -11], [-1, -14], [-7, -3], [-22, 19], [-15, -3], [-54, -26], [-14, 1], [-9, 24], [1, 63], [-6, 17], [-40, -77], [-12, -19], [-17, -9], [-16, 3], [-59, -46], [-18, 6], [-18, 0], [-62, -50], [-33, -14], [-17, -1], [-17, 4], [-15, -4], [-14, -21], [-28, -17], [-28, 13], [-25, 18], [-23, 23], [-5, 29], [1, 35], [10, 48], [-7, 84], [5, 39], [9, 38], [15, 14], [18, 2], [31, 34], [28, 45], [16, -4], [37, -31], [22, -4], [37, 5], [15, -19], [6, -44], [8, -16], [11, -11], [26, -74], [24, 4], [21, -14], [38, 45], [28, -1], [8, 34], [-17, 37], [-20, 31], [-11, 6], [-12, -2], [-11, 5], [-45, 67], [-14, 37], [-8, 43], [5, 31], [31, 28], [15, 7], [55, -19], [9, -16], [14, -68], [11, -29]], [[82399, 46881], [-35, -120], [13, -19], [7, -18], [-58, -25], [-24, 13], [-14, -3], [-59, 22], [-42, 28], [-5, 21], [3, 26], [13, -8], [32, -4], [13, 11], [0, 77], [-5, 100], [44, 82], [24, 33], [27, 20], [68, -46], [11, -12], [9, -18], [4, -30], [-26, -130]], [[82068, 47145], [28, -31], [40, -89], [3, -25], [-12, -24], [-28, -38], [-63, -58], [-10, -28], [-14, -54], [-3, -23], [-4, -13], [-7, -9], [-14, -8], [-15, 12], [13, 34], [1, 42], [-10, 39], [-14, 32], [-29, 44], [-30, 40], [-31, 19], [-33, 9], [-12, 19], [-19, 49], [-6, 27], [-3, 28], [2, 27], [8, 1], [32, -6], [59, -32], [30, -2], [16, 7], [43, 62], [11, -1], [41, -27], [30, -23]], [[79456, 50881], [10, -40], [13, -35], [10, -39], [13, -185], [43, -159], [126, -63], [-21, -25], [-10, -23], [-8, -27], [-18, -110], [1, -24], [11, -37], [3, -41], [-16, 0], [-17, 10], [-15, 15], [-13, 20], [-14, 16], [-15, 10], [-26, 32], [-34, 22], [-36, 17], [-17, 47], [-8, 58], [9, 86], [-9, 24], [-13, 21], [-15, 62], [-6, 73], [-22, 28], [-30, 17], [-13, 14], [-58, -26], [-14, 6], [-12, 20], [-32, 21], [1, 40], [15, 32], [35, 33], [16, 27], [3, 36], [-6, 26], [3, 28], [11, 27], [13, 21], [34, 27], [16, -48], [7, -40], [10, -30], [14, 42], [-9, 72], [27, 16], [26, 1], [19, -20], [13, -31], [5, -44]], [[56282, 85611], [20, -14], [18, 4], [18, 10], [40, -9], [92, -71], [8, -19], [-54, -8], [-13, -22], [-13, -15], [-15, -5], [-27, -30], [-35, -29], [-8, -17], [-64, 3], [-35, -11], [-29, -33], [-11, -62], [-21, -49], [-21, -18], [-22, -3], [-6, 19], [3, 18], [46, 69], [10, 23], [-23, 10], [-20, 24], [-42, 28], [-8, 22], [10, 2], [10, 7], [11, 19], [5, 21], [-34, 64], [18, 10], [21, -2], [22, -19], [24, 22], [11, 3], [17, -8], [17, 42], [40, 14], [20, 13], [20, -3]], [[56002, 97117], [38, -14], [83, 3], [45, -98], [26, -103], [41, -8], [80, 15], [70, 7], [36, -8], [65, -30], [28, -21], [-24, -17], [-59, -19], [-10, -55], [59, -20], [98, -47], [56, -6], [98, 19], [93, -37], [92, -45], [-215, -56], [-19, -16], [-29, -42], [-32, -35], [-29, -20], [-64, -35], [-35, -13], [-78, 3], [-29, -14], [-27, -28], [-27, -21], [-69, -5], [-35, 28], [12, 9], [5, 17], [-13, 40], [66, 40], [15, 23], [-13, 8], [-18, -2], [-48, 12], [-14, 0], [-40, -24], [-55, -16], [-55, -4], [-224, -31], [-34, 11], [-15, 61], [91, 31], [14, 53], [23, 35], [26, 23], [50, 60], [12, 4], [-123, 48], [-48, 31], [-53, 61], [-17, 50], [-71, 42], [9, 54], [-52, -4], [-41, 38], [38, 21], [190, 24], [113, 24], [43, -1]], [[67268, 98406], [17, -23], [-10, -37], [-22, -27], [-10, -38], [-86, -9], [-24, -9], [-23, -29], [-87, -18], [-65, -49], [-91, 9], [-124, 34], [-105, -28], [-69, -8], [-85, 42], [-11, 10], [-5, 29], [5, 26], [23, 55], [30, 31], [15, 10], [12, 19], [34, 11], [105, 7], [39, -6], [12, -21], [57, 2], [94, 13], [137, 20], [79, 18], [70, -4], [70, -11], [18, -19]], [[63178, 98417], [127, -23], [95, 6], [29, -3], [28, -7], [28, -16], [38, -35], [0, -49], [-17, -2], [-161, 22], [-74, 51], [-20, 5], [-29, -13], [-25, -31], [-27, -8], [-31, -39], [-29, 5], [-15, -4], [-37, -27], [-93, 0], [-15, -12], [-30, -38], [-38, -10], [-66, -6], [-22, 21], [-10, 33], [-15, 17], [-92, -19], [-69, 13], [-67, 22], [-68, 8], [61, 23], [334, 48], [131, 12], [62, 34], [92, 22], [25, 0]], [[63966, 98460], [42, -10], [103, 2], [32, -14], [149, -84], [38, -2], [31, -30], [-154, -49], [-52, -36], [-189, -8], [-121, -17], [-26, -15], [12, -26], [-58, -29], [-191, -4], [-24, -9], [-37, -31], [3, -5], [65, -8], [10, -6], [9, -14], [5, -20], [-9, -26], [-24, -4], [-26, 3], [-60, 20], [-7, -7], [-6, -14], [-19, -28], [-22, -8], [-61, 21], [-20, -6], [-19, -13], [-24, -6], [-56, -4], [-29, 17], [25, 23], [70, 35], [-23, 15], [-70, 4], [-55, -9], [-28, -24], [-26, -5], [-72, 2], [-40, 31], [-30, 12], [-26, 25], [211, 83], [70, 32], [67, 16], [87, 9], [27, 10], [27, 4], [17, -6], [44, -29], [129, 5], [27, 24], [2, 56], [-13, 33], [27, 63], [74, 25], [171, 34], [43, 2]], [[63962, 91696], [5, -56], [-17, -23], [-16, -6], [-7, 35], [-13, 15], [-48, -41], [-22, -46], [-60, -66], [-123, -47], [-75, -20], [-68, -6], [-63, 42], [-35, 79], [-6, 24], [-4, 32], [1, 33], [4, 50], [7, 49], [26, 44], [60, 52], [59, 34], [31, 8], [75, 2], [214, -117], [48, -30], [27, -41]], [[66791, 92128], [9, -29], [-1, -53], [-11, -39], [-31, -6], [-31, -16], [-53, 17], [-29, -11], [-30, -1], [-24, 6], [-25, 8], [-16, 11], [1, 30], [-22, 43], [-34, 14], [-31, 5], [-35, 13], [-17, -6], [-22, -16], [-14, 5], [-76, 92], [-12, 21], [-8, 24], [-11, 15], [-26, 64], [13, 29], [26, 19], [18, 5], [32, 43], [59, 18], [12, -3], [11, -13], [61, -44], [33, -29], [28, -35], [30, -30], [89, -51], [60, -50], [61, -35], [16, -15]], [[69631, 93948], [-82, -27], [-22, -2], [-50, 7], [-22, -11], [-33, 27], [2, 24], [16, 25], [9, 31], [-6, 78], [42, 49], [56, 19], [164, 22], [23, -6], [33, -15], [25, -18], [33, -43], [26, -18], [40, -34], [12, -33], [-2, -30], [-75, -6], [-130, -25], [-59, -14]], [[75745, 97744], [-68, -5], [-80, 5], [-130, 61], [-85, 26], [-70, 40], [-15, 44], [44, 28], [54, 11], [91, 2], [117, -4], [116, -29], [247, -31], [90, -21], [-56, -51], [-61, -19], [-63, -27], [-64, -19], [-67, -11]], [[81496, 94700], [-10, -27], [-15, -21], [-11, -26], [-19, -19], [-59, -24], [-46, -54], [-8, -5], [-163, 30], [-26, 9], [-53, 33], [-75, 31], [-39, 46], [19, 8], [19, 4], [67, -6], [19, 14], [10, 39], [1, 23], [5, 18], [22, 13], [241, -40], [93, -23], [28, -23]], [[89169, 94469], [-140, -47], [-27, 2], [-63, 48], [-23, 103], [26, 31], [29, 11], [30, 6], [123, 4], [26, -5], [26, -13], [12, -19], [5, -24], [-14, -68], [-10, -29]], [[56625, 72312], [19, -4], [26, 1], [6, 3], [16, 34], [20, 1], [9, -34], [-20, -15], [-5, -9], [4, -7], [16, -13], [21, 5], [1, -26], [4, -22], [11, -13], [11, -2], [26, 4], [25, 8], [25, 17], [26, 9], [79, -9], [28, -36], [53, -5], [50, -19], [26, 13], [45, 12], [7, -13], [-6, -82], [3, -24], [13, -11], [12, 5], [16, 27], [37, 21], [39, 0], [33, 54], [10, 3], [-6, -26], [-5, -63], [-7, -37], [-3, -29], [-22, -15], [-33, -3], [-61, 6], [-60, -10], [-113, -28], [-113, -14], [-15, 9], [0, 37], [-3, 25], [-7, 18], [-35, 15], [-33, 26], [-130, 36], [-31, 14], [-50, -8], [-18, 1], [-13, 13], [-9, 22], [-4, 69], [7, 69], [10, 18], [5, -21], [13, -9], [12, 21], [0, 31], [6, 29], [9, -12], [7, -45], [16, -12]], [[56504, 74284], [15, -62], [15, -21], [31, -25], [15, -4], [52, -45], [62, -8], [8, -13], [7, -35], [13, -27], [3, -22], [-7, -23], [9, -72], [16, -68], [23, -33], [29, -10], [28, 1], [7, -14], [-3, -59], [-12, -24], [-9, -5], [-9, 6], [-7, 14], [-8, 7], [-16, 1], [-12, 24], [-29, 33], [-5, 19], [-1, 31], [-13, 22], [-11, 43], [-11, 11], [-6, 22], [-1, 9], [-43, 6], [-35, 0], [-30, 24], [-9, 63], [-18, 17], [-13, 18], [-11, 25], [-29, 45], [-31, 39], [-30, 25], [-32, 16], [-26, -19], [-15, 4], [-3, 13], [33, 27], [44, 50], [31, 16], [15, 2], [29, -44]], [[59573, 72346], [-145, -174], [-10, -52], [7, -35], [20, -44], [5, -11], [8, -33], [-32, -10], [-31, -3], [-18, 4], [-17, -1], [-51, -95], [-28, -32], [-33, -19], [-33, -11], [-17, -1], [-15, -12], [-10, -22], [0, -22], [-5, -17], [-18, 4], [-8, 34], [-13, 15], [-32, -8], [-16, 1], [-52, 33], [-16, 13], [-10, 28], [-27, 101], [-4, 75], [25, -19], [23, 23], [23, 38], [27, 15], [16, -7], [17, -6], [30, 12], [13, 56], [4, 65], [50, -19], [52, -9], [42, -4], [41, 11], [126, 69], [36, 41], [23, 14], [38, 34], [40, 19], [-25, -39]], [[55298, 85158], [-23, -14], [-13, -40], [-19, -7], [-17, -14], [-7, -128], [33, -49], [-18, -7], [-17, -14], [-11, -22], [-12, -47], [-45, -26], [-17, -19], [-25, -44], [-13, -63], [-25, -27], [-29, -6], [17, 52], [22, 42], [-21, 28], [-13, 46], [-16, 34], [13, 39], [-7, 63], [2, 62], [19, 32], [22, 25], [34, 59], [37, 42], [51, 19], [23, -17], [10, 38], [17, 9], [15, -9], [33, -37]], [[53491, 83977], [0, -58], [-7, -17], [-10, -11], [-28, -11], [-24, -17], [-22, -29], [-7, -41], [16, -30], [31, -16], [8, -58], [-26, -28], [-64, -28], [-7, -68], [2, -54], [-1, -39], [-5, -54], [-52, -24], [-34, 82], [0, 33], [-11, 38], [-1, 33], [-12, 52], [-50, 14], [-19, 2], [-27, -9], [-6, 3], [-33, 72], [6, 79], [-17, 40], [-3, 18], [1, 20], [-14, 16], [-18, 9], [-8, 44], [20, 11], [48, -5], [15, 3], [13, 9], [39, 73], [-1, 16], [4, 21], [42, 8], [19, -28], [-3, -46], [2, -57], [26, -16], [10, -3], [10, 43], [8, 21], [10, 12], [4, 39], [-6, 24], [-13, 17], [48, 49], [50, 38], [29, 2], [29, -9], [27, -13], [15, -11], [8, -18], [-18, -43], [-5, -23], [12, -77]], [[52956, 83876], [12, -30], [14, -64], [23, -72], [-10, -30], [7, -38], [-7, -41], [-44, -46], [-51, -2], [-52, 22], [-74, 44], [-6, 24], [-10, 13], [-20, 74], [1, 92], [37, 11], [81, 43], [18, -6], [20, -23], [23, -1], [32, 32], [6, -2]], [[50873, 74763], [27, -19], [28, 17], [15, -5], [15, -9], [3, -37], [-13, -41], [-18, -41], [-16, -45], [-13, -52], [-25, -31], [-23, -18], [-48, 38], [-28, 10], [-8, 14], [-7, 58], [-12, 18], [-19, 8], [-16, -14], [-21, -31], [-12, 31], [-17, 5], [-7, 19], [0, 23], [115, 139], [33, 31], [71, 36], [11, -5], [-9, -22], [0, -9], [9, -10], [-2, -17], [-9, -14], [-4, -27]], [[16512, 9357], [49, -58], [19, -38], [11, -39], [-199, -96], [-9, -10], [-9, -50], [5, -11], [8, -8], [1, -19], [-17, -6], [-340, -38], [-159, 35], [-22, 23], [-5, 36], [19, 7], [35, 5], [-9, 16], [-22, 29], [-2, 24], [48, 61], [23, 16], [-90, 57], [-11, 13], [-12, 4], [-44, -7], [-43, 3], [15, 23], [12, 38], [38, 32], [28, 5], [28, -3], [132, -2], [130, -17], [131, -12], [215, -11], [46, -2]], [[14908, 9627], [74, -16], [25, -25], [33, -18], [33, -10], [31, -27], [18, -48], [16, -15], [49, -32], [17, -28], [-3, -14], [-93, -11], [-31, 4], [-29, -9], [-9, -17], [1, -18], [16, -13], [34, -12], [34, 2], [63, 14], [28, -3], [32, -15], [32, -2], [84, 46], [21, 8], [21, -2], [115, -54], [24, -27], [-17, -15], [-14, -22], [6, -15], [55, -22], [23, -28], [14, -11], [-3, -24], [-8, -29], [1, -33], [-28, -18], [-13, 0], [-60, 18], [-187, 10], [-60, 15], [-92, 65], [-36, 4], [-37, 16], [-57, 46], [-99, 37], [-63, 45], [2, 38], [-9, 27], [-12, 11], [-12, 6], [-36, 10], [-35, -3], [-18, -11], [-29, -28], [-32, -5], [-25, 6], [-5, 6], [-1, 74], [-27, 10], [-23, 30], [-4, 40], [10, 37], [35, 45], [40, 5], [40, -7], [41, 10], [65, 6], [74, -4]], [[31618, 5715], [-26, -2], [-14, 4], [-14, 12], [-12, 46], [-137, 37], [-16, 21], [-9, 46], [-23, 18], [-178, 82], [-15, 17], [-10, 25], [33, 10], [70, -18], [127, -5], [28, -8], [26, -14], [142, -3], [72, -7], [40, -65], [81, -19], [11, -38], [10, -68], [-110, -50], [-25, -7], [-51, -14]], [[33931, 14945], [11, -8], [9, 4], [9, 8], [9, 19], [33, 27], [31, 3], [-10, -28], [74, -50], [-6, -39], [14, -32], [-30, -10], [-24, -33], [21, -13], [12, -28], [-25, -7], [-54, 17], [-28, -4], [3, 26], [-9, 10], [-33, -5], [-14, -57], [-10, -5], [-12, 9], [9, 37], [-14, 6], [-14, -1], [-42, -27], [-12, -1], [-25, 32], [79, 42], [-33, 21], [-7, 26], [5, 36], [-29, -5], [-28, -14], [-13, -2], [-11, 12], [4, 26], [23, 43], [18, 45], [36, 22], [21, 17], [28, 8], [12, 16], [26, 1], [15, -37], [-1, -22], [-12, -24], [-6, -61]], [[32450, 14706], [-27, -60], [40, 1], [28, 21], [29, 9], [25, -30], [-52, -23], [-50, -40], [-20, -21], [-22, -9], [-28, 3], [-28, -4], [-25, -39], [-26, -18], [-8, 15], [-10, 9], [-56, 14], [-26, 20], [-23, 14], [-25, 7], [13, 35], [15, 31], [85, 42], [-8, 13], [-6, 17], [67, 21], [2, 21], [-4, 24], [21, 16], [20, 24], [14, 7], [42, -3], [29, -33], [-12, -33], [26, -51]], [[29526, 11154], [43, -51], [-40, -40], [-142, -75], [-83, -29], [-84, -22], [-380, -69], [-27, 0], [-26, 9], [-15, 15], [-25, 57], [3, 29], [34, 27], [35, 18], [60, 16], [229, 36], [23, 12], [19, 27], [6, 31], [8, 24], [15, 11], [16, 0], [30, -23], [55, -93], [18, 13], [16, 25], [3, 80], [16, 6], [49, -22], [30, -23], [1, 45], [21, 14], [22, -5], [22, -10], [48, -33]], [[29170, 11677], [49, -14], [72, -63], [24, -32], [7, -19], [-6, -13], [-33, -15], [-25, -77], [-50, -27], [-116, 17], [-128, 31], [-10, 6], [-11, 27], [-2, 31], [14, 39], [22, 20], [95, 24], [7, 14], [14, 39], [24, 8], [11, -3], [42, 7]], [[22752, 10418], [-23, -61], [2, -60], [68, 4], [30, 114], [64, 21], [31, -68], [-30, -55], [15, -31], [18, -22], [32, -1], [29, 33], [13, 24], [11, 26], [19, 58], [61, 54], [135, 8], [71, -34], [-48, -86], [-115, -50], [-74, -52], [25, -14], [25, -7], [23, 2], [65, 27], [160, 50], [61, 37], [22, -6], [0, -62], [21, -42], [-12, -93], [-69, -17], [-71, -8], [18, -41], [-4, -17], [-6, -13], [-178, 17], [-31, -6], [-31, -12], [-31, 3], [-62, 30], [-32, 0], [-64, -15], [-65, -6], [-93, 1], [-68, 5], [-64, 33], [-67, 9], [-75, 1], [-79, 38], [-66, 15], [-95, 39], [-25, 15], [-25, 8], [-45, -3], [-346, 59], [-51, -1], [-33, -8], [-33, 4], [-67, 28], [-14, 31], [7, 29], [15, 13], [30, 13], [480, 69], [50, 19], [37, -2], [28, -59], [42, -61], [14, 1], [14, 6], [47, 51], [86, -16], [48, 23], [33, 45], [97, 52], [61, -10], [57, -22], [27, -54]], [[29346, 9735], [-40, -75], [-7, -8], [-40, -19], [14, -20], [11, -10], [7, -24], [23, -33], [28, -21], [-23, -59], [-34, -26], [-369, 160], [-28, 26], [-14, 19], [-11, 30], [-1, 30], [9, 24], [13, 14], [33, 17], [34, 1], [75, -32], [10, 5], [14, 28], [40, 1], [9, 24], [-55, 8], [-44, 24], [-29, 24], [-8, 19], [99, 33], [251, -42], [38, -14], [17, -19], [14, -26], [-36, -59]], [[31114, 12975], [-29, -37], [-23, -11], [-21, 10], [-21, 5], [-15, -14], [-16, -58], [-19, -29], [-20, -15], [-12, 6], [-12, 0], [-19, -13], [-24, -5], [-23, 6], [-22, 37], [-32, 44], [-6, 14], [-5, 36], [1, 37], [14, 28], [73, 98], [24, 44], [21, 50], [23, 45], [44, 80], [22, 29], [111, 84], [30, 19], [33, -5], [8, -44], [-16, -22], [-53, -56], [-11, -79], [1, -29], [5, -8], [20, -10], [14, -11], [18, -24], [21, -14], [-45, -41], [-30, -21], [-21, -26], [-40, -25], [-17, -16], [26, -6], [38, -21], [10, -18], [-5, -14]], [[0, 93051], [43, 8], [43, 15], [40, 3], [40, -9], [41, 2], [40, 15], [32, -2], [33, -9], [122, -21], [23, -7], [39, -27], [22, -10], [22, -16], [23, -27], [43, -29], [65, -34], [14, -10], [10, -26], [-7, -30], [-83, -57], [-67, -15], [-129, -15], [-175, -43], [-72, -12], [-25, 2], [-63, 28], [-74, 12]], [[0, 92737], [0, 314]], [[33652, 22309], [43, -33], [53, 11], [22, -9], [13, -28], [-7, -26], [-17, 4], [-15, -7], [3, -35], [10, -14], [56, -38], [10, -2], [-1, 15], [-10, 26], [-4, 28], [9, 24], [14, 7], [64, 11], [15, -11], [32, -66], [-30, -9], [-12, -28], [26, -12], [20, -19], [-11, -28], [-2, -14], [-46, -19], [-40, -13], [-19, -33], [-33, -24], [-96, -41], [11, -34], [1, -16], [-4, -44], [-133, 52], [-18, -5], [36, -90], [-26, -16], [-26, 10], [-24, -7], [-15, -65], [-38, 42], [-32, 58], [-1, 33], [32, 62], [-10, 26], [73, 83], [13, 25], [23, 14], [23, 5], [10, 11], [-1, 20], [-10, 35], [1, 57], [58, 77], [-8, 49], [18, 1]], [[39693, 20699], [27, -28], [22, 19], [22, -2], [12, -10], [12, -3], [16, -1], [27, -47], [-11, -41], [29, 8], [26, -35], [12, 3], [5, 14], [17, 16], [11, -22], [14, -41], [18, -12], [15, -44], [12, -55], [11, -8], [19, -1], [20, 8], [-8, -48], [3, -42], [32, -30], [-19, -17], [-20, -24], [-41, -19], [-11, 8], [-35, 42], [-17, 50], [-37, 71], [-8, 21], [-9, 13], [-34, 9], [-30, 17], [-24, 36], [-8, 22], [-10, 15], [-33, -1], [-21, 17], [-21, 23], [-94, 67], [-37, -7], [-17, 19], [0, 33], [20, 20], [-82, 8], [-29, 12], [20, 7], [114, 1], [43, 6], [3, -15], [38, -29], [36, -3]], [[29507, 26874], [-21, -12], [-19, -3], [-20, 9], [-35, -1], [-34, 22], [-32, 32], [-9, 19], [3, 26], [24, 61], [22, 116], [15, 166], [-12, 63], [1, 26], [6, 31], [2, 33], [-1, 32], [3, 30], [24, 64], [4, 29], [0, 31], [11, 64], [-3, 21], [-9, 18], [7, 16], [85, -47], [56, -11], [3, -49], [11, -38], [7, -68], [8, -16], [-4, -49], [-26, -21], [2, -45], [15, -42], [-22, -16], [-23, -9], [-6, -11], [-17, -10], [-20, -23], [6, -21], [26, -48], [29, -33], [16, -49], [21, -51], [-10, -33], [-19, -46], [-31, -31], [-27, -19], [3, -76], [-10, -31]], [[33253, 22199], [41, -11], [37, 40], [25, 13], [21, -9], [15, -24], [21, 4], [61, 25], [8, -9], [21, 29], [19, -13], [14, -25], [-7, -30], [-17, -19], [-10, -26], [-13, -21], [-21, -19], [-16, -31], [-40, -73], [-57, -94], [-19, -8], [-40, -6], [-17, 7], [-14, -2], [-12, -51], [-18, -38], [-9, -8], [-19, -4], [-8, -5], [-7, -14], [-50, 3], [-35, 24], [-41, 52], [55, 64], [48, -3], [39, 43], [32, 21], [13, 22], [14, 17], [0, 22], [-11, 10], [-14, -1], [-14, -10], [-34, -12], [-23, 25], [15, 10], [17, -1], [52, 24], [10, 10], [-16, 33], [-31, 21], [-26, 34], [-4, 13], [1, 20], [-14, 41], [15, 2], [19, -26], [44, -36]], [[29312, 23532], [2, -85], [-4, -85], [-11, -104], [2, -21], [12, -5], [4, -13], [-4, -55], [-7, -42], [-13, -35], [-7, -41], [-7, -9], [-30, -7], [-17, 4], [-13, 47], [-4, 29], [1, 38], [-16, 51], [-1, 19], [6, 34], [14, 16], [2, 52], [6, 15], [15, 21], [2, 9], [-1, 8], [-5, 1], [-61, -64], [-5, -18], [-3, -24], [-1, -84], [-10, -49], [-10, -9], [-28, -2], [-37, 5], [-42, 44], [-27, -12], [-6, 54], [14, 44], [51, -4], [8, 77], [-16, 18], [-18, 32], [-10, 28], [9, 21], [30, 31], [15, 3], [15, -17], [36, 13], [-2, 49], [-32, 22], [7, 37], [41, 35], [24, 36], [2, 41], [-10, 40], [3, 16], [20, 34], [29, 16], [13, -2], [26, -24], [24, -3], [5, -7], [5, -26], [15, -193]], [[29726, 26048], [-68, -46], [-33, 15], [-13, 34], [-7, 29], [-7, 48], [12, 26], [24, 37], [10, 24], [4, 28], [-2, 27], [4, 25], [14, 9], [50, -28], [52, -43], [18, -29], [3, -23], [-22, -52], [-15, -42], [-24, -39]], [[32833, 80122], [-117, -8], [-92, 36], [-69, 17], [-67, 31], [-146, 100], [-16, 35], [-14, 43], [-28, 39], [-30, 32], [-154, 98], [-13, 34], [31, 23], [36, 10], [31, -1], [104, -38], [130, -34], [56, -26], [64, -38], [62, -47], [140, -125], [24, -10], [63, -61], [23, -46], [11, -38], [-14, -19], [-15, -7]], [[33026, 78308], [9, -4], [38, 28], [20, -1], [-1, -20], [-32, -22], [-15, -17], [18, -15], [0, -10], [-22, -25], [-11, -27], [9, -26], [36, 26], [14, 0], [20, -6], [19, 8], [11, 13], [63, 99], [3, 13], [-68, -20], [-8, 13], [45, 61], [-4, 31], [23, 51], [20, 30], [15, 16], [22, 16], [15, -24], [5, -43], [37, 6], [37, -9], [26, -18], [5, -10], [0, -17], [-9, -29], [-15, -25], [30, -31], [-4, -13], [-48, -36], [-28, -35], [-25, -44], [-50, -51], [-80, -36], [-25, 0], [-30, 11], [-30, -3], [-29, -13], [-29, 1], [-13, -7], [-14, 1], [-11, 14], [-23, 41], [-12, 27], [-12, 130], [4, 68], [20, 63], [29, 43], [17, 34], [72, 200], [14, 45], [17, 39], [31, 39], [40, 64], [12, 14], [23, 6], [23, -4], [-7, -23], [2, -23], [26, -89], [0, -18], [-15, -71], [-27, -116], [-7, -63], [4, -19], [-11, -32], [-12, -25], [-47, -45], [-24, -11], [-22, -17], [-54, -58]], [[2371, 88502], [5, -14], [29, 2], [40, -6], [45, -14], [45, 5], [56, 43], [33, 11], [34, 6], [37, -10], [35, -23], [14, -13], [11, -24], [7, -28], [11, -21], [67, -25], [42, -10], [10, -14], [9, -19], [36, -14], [37, 5], [20, -5], [63, -1], [77, -21], [-12, -56], [-25, -24], [-72, 7], [-71, -8], [-29, -28], [-25, -37], [-3, -35], [-14, -16], [-15, -7], [-12, 19], [-17, 60], [-11, 16], [-12, 11], [-35, 19], [-35, 12], [-21, 1], [-15, 21], [-8, 30], [-14, 15], [-28, 22], [-29, 17], [-89, 38], [-29, 5], [-30, -4], [-32, -17], [-31, -26], [-31, -19], [-33, -4], [-32, 11], [-29, 25], [-15, 18], [-8, 30], [1, 30], [4, 29], [16, 71], [27, 14], [51, -50]], [[3851, 86626], [26, -29], [13, -1], [43, 8], [16, -6], [15, -12], [9, -19], [2, -33], [-7, -30], [2, -41], [-1, -18], [22, -24], [8, -32], [3, -34], [-49, -12], [-49, -2], [-43, -23], [-9, -17], [7, -26], [-11, -6], [-11, 5], [-21, 24], [-22, 11], [-79, 18], [-100, 69], [-42, 14], [-44, 50], [-39, 64], [25, 10], [26, 5], [116, -9], [14, 46], [15, 11], [36, 13], [35, 25], [15, 0], [16, -10], [32, 15], [17, 3], [14, -7]], [[4590, 83513], [27, -95], [12, -18], [17, -10], [24, -11], [15, -14], [12, -21], [2, -10], [-76, 38], [-48, -56], [-15, -7], [-136, -3], [-27, -10], [-18, -18], [-31, -52], [-16, -19], [-16, -12], [-36, -14], [-42, 2], [-22, 7], [-12, 24], [-11, 48], [0, 14], [5, 23], [38, 31], [12, 17], [49, 109], [14, 15], [16, 4], [41, -8], [36, 32], [77, 48], [17, 6], [55, 1], [16, -8], [11, -13], [10, -20]], [[28538, 62475], [34, -21], [35, -11], [15, 0], [14, -7], [32, -49], [26, -28], [97, -60], [33, -105], [6, -33], [-25, -19], [-32, -7], [-30, -1], [-28, 20], [-12, 16], [-29, 7], [7, 14], [-13, 7], [-16, -2], [-12, -40], [-14, -32], [-25, 3], [-10, 27], [-13, -12], [-11, -20], [-13, -75], [-21, 37], [-23, 31], [-28, 13], [-57, 2], [-28, 11], [-22, 63], [-9, 18], [-23, 17], [-22, 72], [-8, 10], [-62, 16], [-12, 40], [4, 36], [20, 44], [10, 12], [34, -1], [32, 13], [14, 19], [15, 12], [117, -32], [27, 0], [26, -5]], [[31630, 62468], [9, -12], [8, 2], [-6, 23], [6, 0], [53, -14], [34, -24], [35, -12], [3, -80], [-27, -32], [-18, -34], [-15, -41], [-38, -47], [-45, -15], [-31, -1], [-11, 1], [-11, 9], [-23, -8], [-29, 21], [-24, -5], [-48, 5], [-18, -19], [-18, -4], [-17, 4], [-14, 8], [-36, -1], [-15, 16], [6, 91], [1, 41], [-9, 35], [-10, 21], [-7, 25], [14, 17], [12, 24], [4, 37], [12, 9], [15, 4], [69, -17], [173, -10], [10, -3], [6, -14]], [[7528, 85151], [2, -31], [12, 3], [42, 33], [23, 10], [29, 1], [23, -15], [4, -11], [-2, -14], [-18, -27], [1, -18], [19, -33], [49, -18], [6, -10], [0, -12], [-34, -55], [-12, -12], [-9, -3], [-61, 9], [-55, 18], [-23, 3], [-8, -5], [-15, -17], [11, -5], [49, -4], [17, -25], [7, -18], [4, -20], [-10, -8], [-20, -6], [-25, 0], [-31, -22], [-17, -25], [-62, -7], [-47, -34], [-17, -17], [-6, -20], [-17, -15], [-41, -14], [24, -13], [4, -11], [1, -16], [-4, -13], [-31, -59], [-60, -48], [-15, 2], [-7, 6], [-5, 9], [-1, 9], [78, 98], [-3, 4], [-21, 4], [-34, 26], [-23, -17], [-5, 1], [6, 23], [15, 27], [-3, 8], [-8, 7], [-19, 4], [-31, 1], [-22, -6], [-15, -15], [-1, -6], [31, 2], [9, -7], [8, -14], [5, -16], [2, -17], [-7, -24], [-14, -30], [-22, 5], [-44, 67], [-20, 97], [-38, 75], [-2, 18], [11, 46], [38, 65], [42, 18], [29, 27], [28, 9], [18, -1], [24, -12], [10, -25], [-6, -12], [2, -6], [17, -15], [18, -52], [21, -47], [14, -19], [19, -12], [-19, 36], [-12, 44], [-5, 88], [-6, 23], [11, 6], [30, -3], [-1, 13], [-32, 29], [-19, 25], [-8, 19], [1, 17], [17, 25], [10, 7], [10, 3], [21, -5], [9, -8], [26, -56], [12, -17], [10, 0], [10, 9], [9, 18], [8, 12], [10, 3], [29, -8], [10, 3], [4, 14], [0, 25], [7, 9], [2, 18], [-16, 27], [18, 9], [61, -21], [25, -23], [-13, -42]], [[7662, 85460], [10, -4], [10, 34], [8, 1], [33, -29], [20, 6], [13, -35], [12, -4], [10, 5], [7, -3], [-2, -38], [-24, -38], [-12, -9], [-15, 9], [-6, 4], [-10, 17], [-8, 21], [-5, 1], [-18, -25], [0, -13], [8, -19], [-1, -11], [-20, -6], [-20, 3], [-24, -16], [-5, 10], [-4, 29], [-7, -4], [-12, -35], [-12, -22], [-22, -18], [-5, -9], [-17, -1], [-24, -12], [-15, 2], [-90, 38], [-21, 14], [74, 87], [39, 34], [22, -2], [22, -11], [12, 2], [1, 39], [-21, 29], [1, 12], [46, 19], [18, -3], [19, -10], [18, -16], [17, -23]], [[13617, 83806], [-10, -63], [-19, -65], [-29, -35], [-21, 8], [-15, 28], [-14, -1], [-15, 6], [-8, 23], [8, 30], [-7, 23], [-8, -20], [-13, -19], [-33, -24], [-23, -47], [-11, -30], [-13, 33], [-9, 78], [-1, 33], [24, 50], [31, 48], [6, 142], [99, 71], [9, -4], [32, -53], [35, -74], [8, -34], [1, -58], [-4, -46]], [[12898, 84296], [53, -12], [48, 1], [17, -24], [10, -25], [7, -24], [1, -22], [-1, -15], [-6, -17], [2, -5], [94, -55], [44, -58], [18, -30], [10, -26], [19, -64], [39, -74], [21, -23], [11, -22], [-6, 0], [-28, 16], [-60, 50], [-5, -2], [-5, -27], [-9, -24], [-14, -17], [11, -5], [48, 11], [41, -49], [15, -8], [16, -35], [0, -14], [-9, -26], [-6, -10], [2, -7], [11, -4], [45, 7], [8, -12], [-7, -101], [6, -37], [0, -17], [-5, -22], [0, -19], [4, -19], [1, -18], [-12, -45], [-12, -8], [-19, 0], [-15, 13], [-22, 39], [-21, 60], [-8, 9], [-27, 9], [-5, 7], [-17, 1], [-13, 25], [2, 33], [-11, 33], [1, 15], [-12, 6], [-10, -9], [6, -33], [-6, -25], [-22, 11], [-36, 80], [-41, 65], [-17, 15], [5, 19], [20, 10], [17, -1], [3, 11], [-34, 63], [1, 18], [12, 31], [-15, 13], [-43, -9], [-15, 6], [-13, 26], [-7, 21], [-37, 4], [-14, -2], [-24, 33], [-12, 21], [5, 11], [22, 18], [13, -2], [25, -20], [10, 0], [25, 27], [4, 24], [18, 20], [-3, 21], [-10, 35], [-23, 10], [-46, -21], [-41, -32], [-16, 12], [-3, 20], [43, 55], [19, 30], [-4, 17], [-14, 23], [-1, 58], [9, 13]], [[12954, 84679], [18, -18], [10, 19], [19, -1], [35, -17], [20, -25], [12, -29], [1, -17], [-3, -40], [2, -40], [-1, -20], [-5, -18], [-8, -13], [-8, -2], [-27, 36], [-31, 65], [-24, 20], [-1, -7], [7, -18], [19, -35], [3, -21], [14, -26], [6, -19], [3, -26], [0, -22], [-4, -19], [-6, -12], [-9, -6], [-47, 6], [-28, -13], [-33, 7], [-8, 11], [-5, 19], [-2, 46], [-9, 66], [2, 50], [-21, 46], [-18, 27], [-26, 25], [-18, 24], [5, 20], [27, 14], [44, -3], [95, -34]], [[12508, 84879], [24, -63], [17, -49], [15, -59], [26, -122], [12, -46], [3, -26], [3, -66], [-4, -14], [-7, -13], [-2, -19], [7, -50], [1, -77], [-7, -43], [-8, -7], [-19, 14], [-15, 24], [-12, 24], [-28, 77], [-9, 36], [0, 25], [4, 19], [9, 12], [17, 31], [-3, 5], [-12, -7], [-25, -4], [-22, 24], [-17, 13], [3, 45], [-4, 12], [-34, -13], [-13, 12], [-3, 17], [1, 25], [6, 21], [32, 55], [-3, 11], [-15, 2], [-21, 19], [-9, 61], [-22, 35], [-14, -3], [-29, -99], [-15, -22], [-42, -14], [9, 28], [4, 25], [-15, 74], [-1, 29], [10, 21], [30, 9], [15, 13], [13, 20], [3, 20], [23, 53], [10, 10], [29, 0], [60, -59], [18, -8], [26, -38]], [[12589, 85346], [70, -13], [52, 3], [47, -86], [29, -70], [17, -49], [10, -47], [13, -45], [-1, -7], [-28, 31], [-19, 62], [-10, 24], [-10, 11], [-10, 23], [-21, 59], [0, 17], [-9, 16], [-11, 6], [-12, -3], [-4, -5], [2, -41], [9, -46], [51, -99], [34, -57], [7, -18], [5, -52], [-15, -23], [18, -48], [-1, -9], [-4, -9], [-48, -21], [-45, -89], [-48, -52], [-23, -8], [-10, 9], [-11, 20], [-6, 26], [-1, 33], [12, 21], [24, 109], [0, 35], [-30, 50], [-18, 40], [-9, 57], [-17, 149], [-7, 48], [-11, 39], [-14, 32], [-10, 35], [-8, 38], [3, 15], [24, -20], [29, -55], [15, -36]], [[12297, 85393], [40, -56], [0, -13], [-8, -38], [-22, -11], [6, -15], [17, -12], [11, 10], [42, 54], [13, 11], [8, 1], [51, -16], [44, -26], [13, -20], [8, -36], [-12, -79], [-37, -13], [-17, 1], [-18, 12], [-30, -28], [25, -20], [75, -5], [23, -44], [6, -34], [-16, -62], [-43, 17], [-37, 36], [-77, 51], [-19, 3], [-12, -9], [-4, -31], [1, -68], [-20, -34], [-61, 15], [-24, 51], [-22, 80], [-84, 96], [-23, 19], [-30, 57], [12, 45], [4, 26], [16, 7], [23, 20], [14, 44], [21, -36], [28, -34], [1, 32], [13, 26], [28, -1], [13, 5], [18, 24], [26, 12], [16, -14]], [[14291, 82338], [13, -184], [-1, -59], [-19, -38], [-13, -65], [-15, -29], [-15, 39], [-1, 64], [-4, 51], [-5, 24], [6, 95], [-6, -7], [-18, -41], [-19, -3], [-34, 47], [-17, 38], [-3, 40], [-22, 42], [-3, 15], [2, 16], [19, 42], [7, 28], [7, 58], [7, 23], [18, -3], [31, -27], [33, -28], [30, -39], [22, -99]], [[13151, 83022], [26, -34], [61, 22], [11, -4], [12, -13], [12, -28], [14, -42], [3, -46], [-5, -17], [-11, -18], [-98, -73], [-2, -7], [2, -7], [9, -7], [19, 1], [77, 18], [5, 13], [5, 57], [11, 31], [0, 23], [-7, 55], [1, 22], [54, 5], [33, 20], [35, 38], [8, -1], [-5, -68], [-5, -21], [-33, -84], [-19, -73], [-9, -73], [-2, -120], [-8, -41], [-15, -25], [-93, -43], [-48, 2], [-43, 40], [-20, 27], [15, 33], [10, 2], [30, -7], [24, -12], [10, 0], [-2, 7], [-66, 63], [-49, 28], [-14, 32], [-1, 24], [-4, 14], [-38, 86], [-8, 34], [-5, 48], [0, 49], [10, 80], [4, 8], [16, -1], [27, -9], [66, -8]], [[13402, 82485], [28, -53], [8, -48], [-3, -56], [-45, -22], [-23, 17], [-11, -3], [-15, -17], [19, -7], [26, -28], [23, -36], [32, -6], [44, -25], [-33, -45], [-5, -26], [41, -72], [4, -18], [13, -4], [30, 6], [4, -6], [0, -15], [-19, -42], [2, -8], [17, -7], [32, 0], [8, -41], [-30, -38], [-55, 49], [-25, 48], [-14, 45], [-17, 25], [-52, 57], [-78, 121], [-21, 18], [-20, 48], [-6, 23], [1, 15], [7, 9], [24, 5], [0, 24], [-90, 42], [-10, 8], [-12, 30], [7, 4], [49, -5], [53, 14], [33, 11], [13, 13], [27, 17], [11, -1], [28, -20]], [[32274, 78610], [8, -8], [13, 15], [15, 47], [41, -12], [22, -21], [12, 4], [12, -2], [23, -28], [44, -22], [46, 4], [70, 13], [8, 5], [72, 11], [72, 5], [25, -12], [9, -12], [5, -14], [-41, -38], [-41, -44], [-58, -44], [-7, -21], [4, -39], [-1, -40], [11, -3], [7, -14], [-15, -13], [-59, -6], [-17, 4], [-21, 16], [-7, 39], [-25, -6], [-7, 5], [35, 32], [-16, 42], [-18, -3], [-11, 19], [1, 27], [16, 13], [5, 14], [-22, -13], [-17, -24], [-21, -9], [-22, -22], [33, -6], [-17, -17], [-17, -3], [-81, 32], [-20, 12], [-26, 34], [-19, 45], [11, 2], [3, 8], [-2, 7], [-28, 6], [-45, -2], [-25, 12], [1, 79], [-8, 22], [-28, 18], [-42, 5], [-4, 30], [13, 44], [21, 39], [16, 37], [18, 31], [46, 62], [-1, -46], [4, -40], [-30, -79], [52, -79], [6, -17], [5, -21], [-4, -19], [-8, -18], [20, -8], [6, -15]], [[29858, 75452], [-20, -37], [18, -4], [16, 11], [14, 22], [34, 30], [29, 13], [9, 3], [13, -21], [28, 17], [28, 9], [-121, -96], [-25, -11], [-36, -28], [-33, -21], [-24, -7], [-120, -71], [-10, -2], [-10, 7], [-99, -36], [-40, -5], [-37, -12], [27, 29], [1, 11], [-7, 9], [-14, -3], [-15, -30], [-24, -10], [-5, 33], [8, 26], [11, 24], [24, 38], [34, 24], [17, 21], [12, -18], [2, 25], [10, 14], [10, 8], [24, 0], [12, 4], [10, 8], [9, 2], [27, -12], [25, 4], [21, 15], [22, 5], [56, 4], [57, 11], [23, 21], [47, 56], [28, 16], [-43, -66], [-23, -30]], [[92198, 49368], [14, -12], [42, 60], [22, -42], [28, -20], [30, -12], [-12, -86], [4, -40], [7, -40], [-1, -59], [-13, -52], [-26, -76], [-12, -15], [-13, -8], [-43, -6], [-8, -40], [3, -43], [23, -57], [18, -63], [-18, -59], [-30, -40], [-29, -21], [-47, 12], [-50, -5], [-10, -22], [0, -37], [-7, -28], [-9, -25], [-25, -53], [-29, -46], [-38, -45], [-13, -10], [-35, -7], [-31, -26], [-13, -25], [-15, -20], [-33, -22], [-32, -43], [-12, -8], [-66, -7], [-95, -2], [-28, -5], [-27, 6], [-15, 17], [-32, 79], [-28, 26], [-30, 0], [-41, -28], [-8, 6], [-80, 116], [-25, 28], [-26, 21], [-32, 15], [-30, 23], [-18, 55], [2, 72], [24, 42], [37, -21], [14, 0], [14, 12], [16, -4], [17, -10], [60, 15], [34, -22], [34, -29], [32, -6], [32, 6], [43, 33], [14, -4], [42, 0], [36, 44], [14, 177], [9, 60], [13, 14], [9, -4], [13, -30], [-17, -38], [-8, -29], [-2, -71], [9, -69], [22, -54], [32, -7], [29, 36], [32, 7], [30, -35], [30, 6], [14, 23], [16, 10], [16, 4], [14, 13], [20, 60], [13, 67], [19, 52], [52, 88], [15, 11], [17, 6], [37, -4], [27, 32], [2, 70], [-4, 72], [-31, 167], [-2, 27], [4, 30], [9, 27], [31, 0], [32, -9], [13, -26], [14, -20]], [[85359, 46990], [-50, -92], [-56, -76], [-34, -23], [-35, -15], [-27, -29], [-23, -46], [-29, -26], [-32, -9], [-28, -14], [-26, -27], [-35, -46], [-14, -5], [-15, 1], [-29, -17], [-91, -67], [-55, -73], [-59, -93], [-10, -58], [-34, -54], [-37, -89], [-29, -46], [-26, -53], [-23, -36], [-28, -13], [-42, -7], [-56, -65], [-32, -28], [-31, -2], [-28, 21], [-11, 24], [2, 31], [10, 28], [12, 22], [7, 29], [-33, 37], [-2, 27], [12, 75], [9, 76], [12, 52], [46, 93], [28, 46], [62, 68], [104, 58], [20, 22], [17, 32], [51, 53], [38, 63], [25, 88], [17, 34], [40, 33], [16, 9], [118, 48], [28, 3], [74, -1], [100, 10], [24, 7], [32, 21], [31, 26], [16, 21], [18, 14], [25, -18], [44, -14], [11, -13], [11, -17]], [[90289, 28348], [32, -2], [18, 14], [16, -2], [19, -33], [22, -18], [16, 3], [13, -6], [12, -24], [30, -20], [14, -13], [11, -20], [13, -16], [81, -54], [57, -26], [71, 12], [21, 15], [21, 22], [17, -20], [17, -32], [-3, 34], [6, 30], [17, 23], [20, 15], [32, -2], [31, 7], [14, 13], [14, 2], [19, -17], [19, -9], [13, 22], [21, 51], [12, 18], [55, -16], [15, 0], [27, 53], [17, -1], [51, -42], [22, -53], [-3, -97], [2, -34], [4, -34], [2, -67], [-6, -67], [-1, -52], [3, -52], [-3, -98], [8, -64], [-4, -44], [0, -21], [7, -19], [4, -22], [-3, -28], [3, -32], [-3, -27], [-11, 4], [-4, 21], [2, 26], [-2, 22], [-6, 19], [-20, 22], [6, 13], [10, 12], [-7, 29], [-13, -24], [-8, -33], [5, -11], [-8, -9], [-17, -38], [-12, -51], [-5, -50], [1, -52], [-10, -40], [-14, -39], [-3, -49], [1, -91], [11, -83], [7, -113], [-10, -15], [-30, -7], [-14, -15], [-24, 57], [-15, 58], [11, 24], [24, -14], [8, 13], [2, 16], [-2, 15], [-30, 32], [-33, 15], [-11, -19], [4, -55], [-3, -13], [-24, -21], [-12, 80], [-31, 60], [1, -29], [13, -50], [-1, -21], [-5, -29], [-13, -10], [-5, -23], [0, -32], [-5, -51], [-20, -23], [-48, 57], [-4, -19], [1, -17], [25, -33], [-12, -25], [-8, -29], [-14, -76], [-23, -64], [-11, -4], [-37, 10], [-42, 54], [-38, -6], [-62, 4], [-40, -20], [-9, 59], [-8, 21], [3, 18], [32, 13], [33, -1], [-6, 23], [-8, 8], [-15, -5], [-41, 19], [-29, -8], [-19, 28], [-34, 96], [-20, 45], [-12, 18], [-13, 9], [-9, 14], [-61, 221], [-8, 51], [-11, 129], [48, -62], [18, -39], [9, -50], [16, 61], [-3, 19], [-43, 73], [-6, 21], [-2, 25], [-10, -25], [-17, -3], [7, 51], [-6, 51], [-51, 111], [-39, 105], [-38, 130], [-3, 16], [-1, 28], [-18, 87], [-10, 65], [-4, 56], [17, 114], [3, 64], [27, -29], [63, -37]], [[76812, 98545], [10, -26], [36, -21], [18, -21], [183, -67], [80, -8], [36, -17], [10, -20], [-3, -37], [-31, 0], [-22, -12], [-124, -15], [-30, -22], [-24, -45], [13, -9], [12, -13], [37, -77], [10, -12], [37, -11], [-33, -29], [-35, -19], [-366, -37], [-249, -15], [-83, -16], [-27, 2], [-65, -29], [-127, -38], [-61, 0], [-181, 53], [-222, 45], [-31, 25], [-55, 15], [-71, 12], [-31, 51], [45, 35], [58, 34], [97, 12], [92, 20], [69, 49], [43, 48], [78, 51], [-135, -13], [-51, 7], [5, 17], [28, 36], [15, 12], [49, 19], [35, 36], [81, 25], [39, 4], [38, -1], [70, 12], [70, 18], [66, 10], [65, 5], [63, 14], [62, 28], [27, 48], [179, 5], [28, -11], [22, -29], [26, -10], [31, -6], [79, -48], [15, -14]], [[77131, 98017], [64, -37], [31, -41], [-30, -11], [-28, -28], [-13, -34], [-37, -27], [-10, -43], [17, -8], [20, 12], [41, 41], [53, 28], [58, -16], [23, 6], [40, 39], [-7, 33], [16, 20], [18, 5], [75, -4], [119, -17], [21, -17], [29, -10], [17, -16], [53, -13], [26, -12], [35, -28], [32, -42], [-40, -22], [-22, -40], [-9, -9], [-7, -15], [-3, -35], [-6, -30], [-7, -13], [-5, -17], [5, -45], [-12, -35], [-40, -27], [-41, -1], [-61, 18], [-18, -1], [-17, -7], [76, -38], [56, -56], [65, -13], [18, -6], [23, -52], [8, -26], [-108, -62], [-28, -11], [-172, -9], [-113, -18], [-36, 4], [-63, 15], [-42, -6], [-60, 10], [-37, 0], [-85, 23], [-88, 38], [-17, 18], [-18, 12], [-105, 10], [-23, 8], [-153, -9], [-26, 6], [-47, 50], [-27, 1], [-84, -29], [-31, 2], [-64, 19], [-38, 24], [-6, 8], [-4, 29], [-38, 15], [-46, 52], [-27, 54], [-128, 28], [-77, 7], [-58, -2], [-56, 21], [93, 78], [123, 41], [53, 31], [61, 42], [25, 65], [103, 40], [27, 14], [36, 31], [12, 4], [81, -38], [16, 7], [15, 17], [29, 19], [100, 3], [85, -8], [32, 8], [39, -3], [195, 28], [130, 8], [24, -5]], [[78578, 97496], [-27, -45], [-11, -40], [-83, -133], [-10, -23], [49, 20], [44, 45], [27, 38], [30, 24], [34, 0], [35, 9], [65, 31], [66, 14], [36, -1], [34, -15], [22, -35], [24, -28], [87, -21], [13, -7], [8, -24], [-7, -25], [50, -25], [69, 11], [37, -7], [36, -14], [17, -22], [14, -27], [15, -39], [9, -41], [-8, -55], [-134, -84], [-25, -8], [-62, 6], [-61, -9], [-161, -44], [-199, -1], [-57, -39], [-17, 1], [-17, 7], [-16, 13], [-121, -11], [-136, -7], [-136, -1], [-45, -28], [-139, -55], [-127, -42], [-66, -10], [-96, 11], [-30, 14], [-29, 21], [42, 27], [30, 54], [37, 32], [94, 61], [11, 24], [18, 51], [11, 20], [15, 18], [11, 22], [2, 33], [6, 28], [37, 42], [27, 20], [29, 6], [71, -8], [22, 3], [-16, 13], [-11, 50], [2, 16], [10, 31], [18, 15], [18, 10], [11, 42], [-5, 15], [27, 20], [13, 27], [32, 16], [65, 13], [3, 34], [10, 21], [14, 7], [33, 6], [18, -1], [24, -34], [26, -28], [34, -6], [34, 2], [-20, 33], [1, 35], [12, 22], [16, 10], [34, 2], [107, -24], [70, -35], [16, -18], [-13, -10], [-31, -6], [-16, -10]], [[88902, 95523], [28, -11], [34, 7], [32, -15], [30, -61], [14, -16], [15, -11], [15, -5], [45, -2], [20, 12], [15, 28], [-1, 28], [-4, 29], [0, 39], [7, 35], [10, 21], [13, 14], [74, 43], [52, 42], [71, -16], [72, -38], [127, -80], [59, -23], [71, -21], [72, -8], [35, 5], [69, 22], [35, 2], [436, -160], [15, -13], [14, -19], [-94, -24], [-61, -42], [-21, -29], [24, -24], [20, -32], [-133, -96], [-53, -25], [-54, -8], [-110, 23], [-64, -1], [-62, 20], [-69, 58], [-29, 29], [-25, 40], [-8, 64], [10, 55], [37, 16], [32, 35], [5, 15], [-17, 31], [-108, 5], [-68, -17], [-61, -18], [18, -117], [13, -37], [18, -27], [98, -123], [22, -17], [65, -24], [55, -53], [-97, -59], [-43, -17], [-42, -10], [-26, 5], [-26, 12], [-28, 28], [-24, 30], [-31, 23], [-66, -5], [-61, -20], [-61, -14], [-180, -24], [-55, -15], [-55, -5], [-71, 28], [-70, 39], [-22, 1], [-20, -11], [-17, -24], [-9, -38], [-23, -51], [-29, -36], [-31, -16], [-32, -2], [-33, 10], [-32, 16], [-215, 56], [-25, 17], [-24, 25], [-65, 79], [-32, 19], [-33, 8], [-64, 40], [-59, 64], [-12, 20], [-4, 32], [10, 23], [51, -11], [34, 1], [-21, 119], [15, 112], [25, 19], [97, -13], [-31, 37], [-26, 49], [16, 27], [18, 19], [42, 15], [56, 7], [17, 12], [16, 19], [31, 20], [62, 8], [107, 40], [29, -1], [27, -21], [26, -30], [28, -16], [88, -39], [60, -35], [85, -71]], [[89495, 94409], [69, -25], [57, -28], [196, -135], [18, -28], [15, -35], [8, -123], [-11, -9], [-72, -6], [-98, 14], [-70, 5], [-68, 0], [-60, 17], [-147, 16], [-115, 45], [-120, 33], [-25, 4], [-75, -10], [-102, -43], [-28, -3], [-39, 0], [-27, 40], [65, 14], [65, 5], [63, 14], [59, 47], [29, 38], [51, 85], [28, 31], [28, 20], [30, 6], [33, -3], [103, 19], [70, 6], [70, -11]], [[90776, 95259], [73, -4], [107, 43], [14, 1], [260, -15], [22, -15], [2, -30], [-8, -15], [-4, -22], [32, -21], [84, -4], [53, 19], [156, -10], [128, -14], [49, -32], [38, -17], [31, -20], [23, 12], [22, 20], [18, 4], [18, -4], [-49, -122], [-18, -14], [-69, -30], [-137, -42], [-67, -13], [-152, 0], [-209, 16], [-57, 15], [-34, 18], [-64, 43], [-31, 16], [-103, 14], [-32, 8], [-60, 37], [-62, 30], [-154, 49], [10, 56], [20, 56], [24, 50], [26, 45], [28, 13], [59, -41], [-1, -47], [14, -33]], [[98129, 31719], [5, -26], [15, 18], [11, 30], [19, 30], [-3, -48], [10, -11], [61, -34], [13, -28], [13, -8], [7, 16], [9, 8], [22, -18], [50, -49], [4, -17], [-2, -25], [2, -27], [7, -21], [17, -5], [22, 31], [10, 4], [15, -45], [6, -25], [-3, 1], [10, -25], [12, -25], [22, -74], [-3, -26], [-6, -23], [20, -68], [-13, -5], [-40, 12], [1, -14], [23, -50], [20, -70], [15, -43], [55, -132], [-8, -47], [1, -31], [-7, -26], [19, -70], [-12, -22], [-8, -72], [-8, -12], [1, -26], [22, -7], [13, -11], [12, -21], [7, 25], [10, 7], [26, -34], [55, -34], [15, -13], [8, -27], [5, -67], [11, -29], [21, -6], [23, 9], [7, 25], [-5, 65], [-16, 104], [0, 34], [2, 33], [-3, 34], [-9, 32], [-8, 24], [-12, 21], [4, 32], [17, 14], [10, -27], [9, -32], [42, -97], [26, 7], [2, -40], [17, -41], [10, -47], [12, -143], [19, -133], [35, -59], [4, -28], [-21, 15], [-7, -9], [2, -14], [20, -25], [23, -13], [14, 2], [14, -9], [90, -87], [43, -34], [109, -56], [31, -4], [17, 2], [33, 19], [29, 34], [25, 52], [22, 59], [23, 28], [27, 23], [14, 21], [14, 15], [73, -7], [25, -30], [32, -24], [16, -18], [-5, -38], [-19, -56], [-15, -61], [-13, -138], [-9, -141], [-13, -61], [-24, -48], [-27, -34], [-30, -17], [-12, -79], [-6, -93], [1, -24], [10, -18], [4, -28], [-16, -56], [-9, 8], [-13, 47], [-12, 19], [-36, 15], [-37, 7], [-32, -5], [-31, -19], [-47, -41], [-14, -21], [-13, -25], [-21, -58], [-5, -71], [1, -38], [7, -28], [40, -40], [-39, -136], [-35, -143], [-20, -40], [-23, -38], [-21, -85], [-38, -74], [-25, -56], [-20, -59], [-17, -62], [-37, -88], [-16, -58], [-22, -48], [-40, -61], [-42, -53], [-67, -73], [-18, -24], [-20, -18], [-24, 21], [-5, 23], [-6, 50], [-5, 18], [-31, 15], [-41, -24], [-7, 5], [-2, 11], [0, 73], [7, 20], [-9, 12], [-10, -5], [-3, -18], [6, -16], [-23, -20], [-25, -1], [-7, 8], [-2, 13], [6, 22], [8, 20], [45, 91], [47, 122], [40, 130], [11, 67], [15, 125], [-12, 51], [-16, 49], [-40, 94], [-55, 53], [-35, 7], [-33, 20], [-31, 45], [-29, 53], [-56, 43], [-60, 34], [-34, 48], [-8, 29], [-5, 33], [0, 30], [5, 32], [6, 24], [11, 17], [63, 62], [67, 35], [12, -1], [12, 6], [17, 21], [30, 48], [8, 33], [6, 104], [10, 102], [17, 116], [26, 73], [9, 44], [-11, 73], [10, 27], [12, 17], [13, 9], [-23, 69], [-26, 104], [-6, 32], [4, 32], [7, 31], [-17, 8], [-10, 30], [-24, 101], [7, 16], [14, -11], [20, -73], [4, 38], [16, 23], [16, 12], [18, 2], [-40, 82], [-14, -4], [-18, -12], [-19, -8], [-18, 7], [-17, 18], [-8, 34], [-11, 66], [-7, 24], [-53, 135], [16, 4], [43, -67], [8, 21], [7, 31], [-3, 35], [-10, 26], [-15, 17], [-1, 30], [12, 28], [-1, 20], [-24, 40], [-10, 4], [-5, -18], [7, -28], [-6, -3], [-61, 73], [-18, 58], [-15, 65], [-2, -26], [2, -37], [24, -74], [39, -82], [7, -22], [-6, -29], [-14, -8], [-11, 18], [-18, 71], [-13, 35], [-148, 365], [19, 48], [29, 41], [7, 18], [5, 22], [-13, 3], [-11, -10], [-13, -18], [-11, -22], [-15, -47], [-7, -11], [-17, 33], [-7, 20], [0, 24], [-4, 16], [-13, 5], [-19, 48], [-12, 24], [20, 47], [1, 62], [-21, 65], [-24, 60], [-47, 96], [-43, 102], [47, 13], [47, 2], [-22, -61], [10, -35], [15, -30], [32, -91], [3, -27], [16, -26], [8, -21]], [[98087, 28064], [32, -3], [29, 43], [31, 34], [32, 28], [49, 66], [12, 9], [32, 13], [14, 15], [15, 4], [-14, -39], [-17, -13], [-3, -14], [10, -22], [-15, -31], [0, -39], [-18, -46], [28, 18], [10, 30], [-5, 17], [12, 34], [18, 16], [-7, 25], [0, 20], [23, -7], [11, 0], [9, 8], [16, 4], [4, -23], [21, 3], [-8, -28], [-16, -33], [-4, -20], [-27, -33], [-18, -14], [28, -4], [40, 44], [24, 39], [-1, -48], [-19, -44], [-17, -28], [-19, -8], [-18, -23], [-9, -36], [1, -25], [5, -19], [19, -32], [-21, -63], [24, 8], [13, -12], [18, -36], [-11, -42], [-8, -22], [-47, -88], [-20, -44], [-24, -29], [1, -47], [-14, -34], [-70, -117], [-12, -25], [-55, -186], [-35, -78], [-20, -27], [-21, -22], [-51, -36], [-23, -43], [-25, -35], [-26, -8], [1, -15], [17, -9], [13, -23], [-10, -26], [-19, -16], [-19, -5], [-10, -17], [46, 12], [13, -13], [3, -29], [5, -26], [11, -34], [39, -21], [35, -10], [7, -16], [5, -54], [-6, -27], [-8, -18], [-12, -6], [-28, -3], [-29, 12], [-19, 33], [-54, -11], [-15, -7], [-7, 6], [30, 35], [-16, 19], [-13, 8], [-14, -12], [-9, -18], [-3, -30], [-10, -17], [-15, -5], [-21, 25], [-21, 35], [-30, 36], [4, -22], [24, -54], [12, -36], [-28, -29], [-28, -22], [-25, -13], [-22, -20], [-27, -32], [-15, -11], [-39, -1], [-21, -10], [-7, -42], [-15, -27], [-34, -5], [12, -8], [8, -14], [-23, -126], [-5, -53], [-4, -89], [-14, -83], [-41, 0], [6, -15], [31, -23], [-6, -36], [-34, -64], [-14, -38], [-14, -90], [-20, -84], [-32, -95], [0, -17], [11, -24], [13, -21], [1, -30], [-4, -16], [-15, -4], [-13, -10], [-71, -26], [-24, -29], [-19, -53], [-22, -45], [-74, -100], [-44, -83], [-9, -24], [-12, -18], [-95, -39], [-68, -6], [-37, 10], [-36, 20], [-19, 7], [-38, -12], [-16, -14], [-30, 13], [-23, -10], [-7, 10], [-9, 25], [5, 32], [-6, 24], [-15, 17], [-10, 19], [-12, 13], [-31, 6], [-49, -9], [-16, 1], [-34, 80], [-11, 20], [-39, 25], [-14, -3], [-21, -43], [-13, -7], [-74, -5], [-75, 14], [-28, 16], [-5, 37], [57, 102], [-17, -14], [-35, -41], [-22, 6], [21, 45], [2, 20], [-4, 23], [-30, -38], [-33, -5], [-4, 35], [3, 41], [7, 11], [89, 22], [33, 14], [14, 22], [-54, 7], [-3, 31], [7, 25], [46, 41], [-33, -11], [-38, 4], [3, 43], [9, 34], [40, 1], [-13, 23], [-1, 33], [11, 2], [39, -44], [29, -16], [-12, 33], [2, 21], [7, 9], [24, 7], [-7, 6], [-22, 8], [-26, 25], [-3, 26], [1, 31], [28, 42], [17, -25], [20, 7], [-15, 19], [-9, 30], [6, 19], [60, 78], [15, -75], [4, 25], [1, 24], [-7, 20], [1, 21], [7, 18], [25, 17], [34, 58], [25, 26], [20, -17], [13, -23], [-2, 23], [-9, 19], [-3, 53], [45, 81], [49, 78], [48, 82], [25, 29], [54, 34], [34, -14], [9, 3], [51, 58], [21, 16], [19, -21], [12, -8], [-12, 54], [10, 24], [42, 44], [54, 45], [40, 19], [30, 30], [18, 1], [-3, 23], [3, 22], [16, -2], [5, 9], [-14, 12], [44, 44], [24, 48], [13, 11], [11, 14], [14, 34], [17, 11], [15, -5], [11, -17], [-6, 28], [-20, 15], [22, 24], [22, 16], [21, -12], [21, -19], [-21, 30], [-3, 18], [25, 21], [14, 6], [19, -39], [-2, 31], [4, 28], [28, 45], [36, 75], [11, -26], [2, -31], [-2, -39], [8, 14], [2, 34], [-5, 61], [45, 113], [8, 12], [10, 8], [16, 3], [-5, 17], [-12, 17], [12, 57], [8, 65], [10, 63], [17, 62], [18, 102], [14, 22], [38, 7], [16, 15], [28, 37], [32, 67], [18, 54], [23, 140], [13, 147], [37, 108], [54, 79], [48, 60], [19, 12], [33, 4], [32, -17], [-59, -14], [-6, -36], [-2, -35], [7, -33], [11, -28], [28, -27], [33, -16], [15, -61], [3, -72], [5, -62], [13, -54]], [[85001, 57212], [22, -35], [30, 9], [-1, -87], [5, -26], [27, -74], [4, -61], [-16, -59], [-12, -27], [-22, -40], [0, -18], [9, -20], [31, -12], [23, -32], [4, -91], [22, -71], [-1, -31], [-9, -128], [3, -54], [16, -44], [14, -19], [8, -27], [6, -75], [-1, -128], [-2, -44], [-10, -42], [-30, -94], [-40, -75], [-22, 5], [-6, -22], [13, -68], [-5, -145], [-9, -100], [-13, 51], [-9, 53], [-9, 140], [-10, 64], [-16, 57], [-7, 52], [-16, 48], [-22, 125], [-14, -7], [-23, -34], [-5, -23], [-3, -36], [-6, -32], [-27, -51], [-22, -60], [-17, -67], [-6, -61], [15, -47], [15, -20], [21, -42], [7, -20], [23, -139], [-1, -141], [-17, -63], [-42, -119], [-30, -37], [-17, 19], [-13, 72], [-2, 29], [9, 68], [1, 62], [-10, 21], [-12, -4], [-4, -9], [-27, -81], [-12, -21], [-17, -2], [-13, 5], [-81, 71], [-66, 70], [-51, 65], [-38, 99], [-8, 74], [0, 77], [-17, 113], [-2, 38], [2, 37], [16, 70], [20, 35], [12, 25], [9, 28], [6, 37], [-2, 37], [-7, 23], [-32, 82], [-27, 50], [-57, 45], [-13, 24], [-14, 19], [-16, 8], [-16, 0], [-16, -14], [-5, -29], [2, -27], [-2, -26], [-24, -148], [-30, 32], [-29, 38], [-7, 26], [-4, 32], [-5, 21], [-6, 19], [-14, -49], [-16, -39], [-20, -10], [-21, 0], [-7, 17], [-7, 94], [-22, 30], [-27, -7], [-33, -52], [-6, -19], [-7, -45], [-36, -127], [-19, -98], [-21, -96], [-9, -31], [-13, -21], [-19, 9], [-18, 23], [-17, 61], [6, 72], [19, 45], [15, 49], [19, 171], [1, 61], [4, 26], [31, 77], [26, 48], [13, 10], [57, 28], [23, 23], [36, 0], [30, 13], [24, 37], [2, 38], [-2, 40], [6, 24], [9, 21], [12, 27], [15, 20], [40, 15], [14, 17], [10, 26], [16, 50], [17, -12], [18, -20], [33, -16], [28, -42], [19, -66], [3, -32], [5, -108], [-7, -25], [-28, -51], [13, -5], [36, 46], [19, 18], [45, 24], [11, 16], [7, 24], [16, 66], [12, 71], [9, 29], [13, 23], [13, 4], [47, -48], [31, 23], [8, 73], [7, 106], [6, 29], [17, 28], [21, -9], [28, -38], [27, -13], [9, 31], [10, 61], [10, -1], [36, -20], [34, 13], [10, 73], [-7, 78], [-27, 226], [16, 51], [14, 1], [34, -60], [65, -81], [22, -50], [14, -61]], [[83638, 62566], [43, -30], [94, -108], [34, -27], [36, -20], [28, -5], [26, 24], [10, 25], [20, 67], [20, 8], [13, -24], [9, -33], [5, -47], [-6, -50], [-20, -44], [-12, -54], [-8, -177], [0, -53], [7, -51], [17, -81], [9, -23], [26, -29], [7, -22], [1, -39], [4, -35], [17, -13], [14, -18], [-5, -38], [-9, -39], [-12, -97], [-55, -223], [-3, -48], [-22, -96], [-45, -16], [-52, -46], [-28, -36], [-25, -47], [-10, -62], [8, -28], [5, -30], [0, -32], [-8, -27], [-25, -65], [-10, -54], [-11, -24], [-6, -29], [2, -33], [10, -29], [30, -125], [33, -121], [7, -14], [2, -16], [-19, -32], [1, -58], [5, -58], [29, -142], [4, -38], [10, -31], [14, -30], [17, -24], [46, -42], [18, -9], [19, -1], [4, 28], [17, 10], [-4, 28], [-20, 38], [0, 21], [10, 16], [13, 9], [28, 42], [29, 34], [38, -3], [37, -19], [27, -19], [22, -37], [22, -62], [16, -69], [-1, -33], [-3, -33], [0, -33], [12, -22], [36, -1], [18, 51], [3, 58], [-13, 22], [6, 28], [11, 22], [16, -19], [15, -36], [56, -39], [14, -1], [11, -7], [25, -28], [12, -21], [-14, -45], [-56, -10], [-16, -34], [17, -68], [26, -55], [17, -45], [15, -49], [0, -45], [-9, -46], [24, 3], [23, -9], [32, -40], [10, -3], [10, 6], [-1, -141], [-22, -129], [-27, 16], [-23, 54], [4, 67], [15, 64], [-8, 14], [-15, -6], [-17, -14], [-19, -5], [-30, 8], [-62, 70], [-26, 7], [-6, 31], [2, 67], [-25, 80], [-4, 28], [-8, 23], [-74, 86], [-9, 15], [-23, 69], [-52, 98], [-14, 10], [-16, 3], [-5, -25], [7, -38], [3, -33], [-1, -35], [2, -27], [25, -54], [3, -26], [17, -70], [2, -82], [-21, -34], [-24, 38], [-1, 31], [-4, 29], [-25, 74], [-8, 16], [-48, 74], [-37, 80], [-82, 86], [-9, 5], [-15, -7], [-13, -10], [-40, -43], [-14, -29], [-1, -46], [-28, -36], [-39, -5], [-30, 23], [-25, 45], [-21, 2], [-25, 71], [-31, 9], [-26, -55], [-5, 109], [0, 111], [7, 33], [13, 27], [65, 116], [8, 38], [-3, 50], [-15, 40], [-23, 25], [-27, 10], [-19, 23], [-15, 38], [-11, -67], [10, -98], [2, -65], [-9, -24], [-17, 0], [-16, 7], [-11, 23], [-9, 67], [-23, 43], [-9, 63], [-10, 9], [-21, -5], [-16, 29], [-10, 74], [-2, 78], [-9, 66], [-13, 64], [-7, 52], [-12, 235], [-2, 21], [-6, 18], [-15, 27], [-11, 32], [-2, 27], [3, 115], [5, 28], [11, 13], [16, -22], [12, -28], [15, -14], [14, -17], [25, -69], [10, -10], [31, 2], [18, 8], [9, 25], [5, 30], [1, 35], [-18, 103], [-6, 74], [0, 67], [5, 67], [24, 112], [3, 77], [-2, 104], [4, 61], [-1, 36], [-14, 55], [-4, 60], [41, 302], [13, 58], [9, 61], [4, 80], [31, 22], [29, 33], [15, -3], [15, -8], [36, 17], [13, 1]], [[87075, 51424], [70, -8], [35, 5], [34, -7], [14, -15], [24, -44], [-7, -29], [-4, -60], [13, -58], [20, -58], [16, -62], [3, -30], [-6, -65], [-5, -31], [-20, -53], [-11, -58], [7, -71], [4, -71], [-1, -66], [4, -65], [10, -65], [47, -180], [27, -122], [9, 68], [-2, 76], [9, 27], [14, 15], [17, -16], [4, -30], [2, -67], [14, -131], [19, -6], [21, 20], [3, -40], [-1, -74], [10, -59], [8, -23], [34, -48], [15, -9], [44, -12], [33, -3], [32, 17], [21, 44], [18, 47], [65, 110], [18, 53], [18, 80], [7, 18], [63, 87], [8, 31], [9, 59], [14, 58], [10, 30], [62, 28], [64, 16], [64, 53], [27, 46], [2, 30], [-14, 53], [-1, 23], [15, 23], [56, 67], [66, 69], [53, 47], [29, 0], [27, -42], [28, -34], [150, -101], [24, -31], [21, -42], [30, -29], [33, -14], [31, -27], [28, -35], [64, -64], [86, -79], [21, -5], [80, 4], [14, -15], [13, -21], [12, -5], [91, -14], [14, -15], [13, -21], [8, -57], [99, -3], [22, -9], [140, -125], [41, -50], [14, -12], [14, -1], [14, -5], [62, -70], [94, -69], [99, -67], [31, -14], [31, -6], [69, -23], [37, -21], [53, -82], [27, -25], [25, -46], [35, -50], [15, -12], [15, -6], [35, -2], [35, 9], [15, -4], [14, -9], [13, -17], [6, -33], [22, -47], [31, -20], [29, -42], [27, -50], [19, -50], [22, -43], [34, -18], [35, -2], [120, -253], [6, -39], [1, -165], [-13, -129], [30, -40], [40, -15], [58, -28], [55, -41], [175, -174], [24, -15], [35, -6], [36, 3], [13, -9], [26, -32], [14, -20], [24, -57], [21, -61], [9, -17], [11, -14], [6, -33], [9, -103], [-3, -64], [-9, -24], [-28, -11], [-99, -11], [-65, 12], [-46, -65], [-2, -28], [4, -27], [40, -137], [23, -121], [20, -50], [29, -40], [26, -48], [24, -54], [50, -95], [27, -36], [31, -21], [53, -74], [7, -33], [16, -103], [6, -69], [1, -29], [4, -26], [46, -63], [11, -18], [20, -140], [16, -65], [27, -24], [31, 2], [85, 42], [12, 1], [16, -10], [14, -23], [4, -63], [-13, -66], [-4, -64], [17, -52], [43, -41], [16, -12], [78, -13], [30, -11], [30, -17], [11, -16], [-8, -28], [-15, -14], [-18, -6], [-29, -20], [1, -36], [16, -38], [15, -45], [12, -17], [14, -11], [33, -15], [33, -22], [22, -22], [22, -15], [48, -10], [36, -29], [51, 12], [-44, -47], [-15, -11], [-53, 17], [-10, -18], [22, -50], [32, -34], [12, -19], [-9, -23], [-37, -46], [-16, -6], [-29, -4], [-50, 20], [-35, 25], [-9, 34], [-10, 20], [-31, 49], [-23, 26], [-28, 9], [-30, -1], [-53, 28], [-116, 20], [-27, 12], [-35, 39], [-16, 6], [-18, -12], [-44, -8], [-13, 3], [-32, 33], [-33, 12], [-14, -9], [-14, -3], [-44, 24], [-34, 10], [-28, 33], [-15, 30], [-17, 28], [-16, 70], [-24, 67], [-31, 54], [-65, 89], [-13, 22], [-25, 81], [1, 54], [9, 54], [-14, -19], [-16, 3], [-44, 36], [-18, 42], [-30, 116], [-19, 62], [-44, 108], [-13, 64], [-18, 56], [-12, 21], [-9, 24], [-9, 32], [-12, 21], [-62, 49], [-11, 15], [-12, 8], [-46, 5], [-26, 8], [-50, 39], [-26, 12], [-31, 7], [-30, 15], [-15, 15], [-10, 25], [-6, 59], [-25, -7], [-25, 10], [-24, 21], [-24, 13], [-17, -18], [-5, -47], [-8, -2], [-14, 9], [-7, -5], [-16, -22], [-12, -29], [-23, 4], [-47, 30], [-21, 18], [-18, 34], [-15, 38], [-16, 29], [-19, 22], [24, -51], [56, -228], [-14, -4], [-14, 6], [13, -44], [-15, -6], [-15, 0], [-32, 19], [-31, 6], [-10, -9], [7, -16], [11, -49], [9, -50], [-46, -23], [-46, -14], [-52, -27], [-53, -2], [-27, 16], [-28, 9], [-26, -9], [-25, -20], [-21, 3], [-14, 36], [-6, 27], [-8, 23], [-20, -4], [-19, -12], [33, -2], [10, -30], [8, -36], [23, -32], [29, 19], [61, -5], [60, -57], [14, -7], [13, -11], [31, -56], [24, -51], [19, -59], [4, -23], [-1, -61], [-6, -30], [-39, -43], [-41, -33], [-61, -63], [-59, -73], [-31, 15], [-28, 38], [-10, 10], [-29, 21], [-18, 7], [-69, -16], [-70, -8], [-30, 1], [-28, 12], [-32, 23], [-31, -11], [-21, -26], [-23, -4], [-58, 78], [-39, 64], [-34, 74], [-23, 68], [-25, 62], [-108, 184], [-27, 61], [-6, 16], [3, 16], [12, 32], [22, 92], [-23, -57], [-27, -45], [-40, -3], [-39, -11], [-37, -27], [-37, -10], [-18, 14], [-11, 34], [-6, 35], [-3, 36], [-15, -59], [-31, -33], [-41, -69], [-12, 14], [-7, 27], [-3, 27], [8, 29], [6, 31], [8, 73], [19, 44], [12, 84], [8, 30], [4, 30], [-11, 34], [-18, 12], [-13, 20], [-15, 57], [-9, 20], [-16, 23], [-13, 28], [14, 20], [19, 8], [15, -1], [27, -13], [13, 0], [31, 21], [-17, -7], [-18, 1], [-57, 37], [-35, 38], [-33, 77], [0, 15], [23, 14], [51, 16], [-16, 39], [-23, 34], [-8, 61], [-15, 38], [-34, 61], [-23, 64], [-19, 129], [-20, 98], [5, 35], [17, 25], [-26, 3], [-23, 19], [12, 47], [27, 28], [-25, -7], [-23, -14], [-11, -2], [-11, 4], [-6, 19], [-1, 27], [3, 48], [-4, 46], [-21, 22], [-17, 33], [-10, 13], [-13, -1], [-12, 22], [-10, 32], [-126, 139], [-8, 40], [-11, -18], [-12, -8], [-14, 23], [-16, 15], [-16, -2], [-15, 12], [-16, 7], [-17, 1], [-66, 43], [-63, 68], [-51, 29], [-31, 38], [-33, 31], [-73, 30], [-74, 20], [-27, 1], [-22, -7], [-22, 2], [-122, 147], [-21, 67], [2, 39], [6, 33], [50, 9], [-36, 9], [-14, -4], [-29, -27], [-16, -2], [-22, 18], [-21, 22], [-35, -20], [-17, 34], [-7, 35], [-9, 17], [-13, -2], [-17, -13], [-18, 2], [-11, 25], [-8, 32], [-12, 23], [-15, 17], [-24, 42], [-12, 56], [1, 98], [4, 36], [24, 57], [16, 54], [-20, 6], [-19, -25], [-8, -25], [-3, -31], [-2, -103], [-15, -30], [-22, 2], [6, -60], [-9, -57], [-26, -67], [-2, -31], [4, -33], [-6, -32], [-42, -94], [-14, -5], [-32, 1], [-32, -15], [-15, 22], [-13, 28], [-9, 34], [-13, 70], [-10, 71], [32, 88], [-11, 80], [-21, 68], [-55, 94], [-57, 90], [-26, 18], [-43, 8], [-13, 9], [-13, 33], [-10, 39], [26, 17], [46, 46], [26, -3], [70, -24], [21, -23], [20, -13], [48, 75], [38, 99], [24, 21], [20, 7], [20, -9], [41, -34], [32, -16], [23, -4], [12, -30], [13, -14], [3, 46], [12, 54], [22, 17], [12, 3], [8, 14], [-2, 50], [-30, 6], [17, 43], [14, 21], [5, 21], [1, 26], [-59, -50], [-62, -21], [-36, 5], [-37, 1], [-73, -33], [-27, 1], [-65, 13], [-36, 17], [-27, -13], [-27, -1], [-28, 38], [-23, 48], [-12, 34], [-16, 25], [-7, 33], [-17, 126], [-2, 89], [-27, 2], [-28, 9], [-121, 85], [-15, -21], [-17, -11], [-17, -4], [-17, 5], [-17, 13], [1, 23], [13, 58], [12, 21], [17, 17], [11, 30], [18, 92], [1, 31], [-2, 32], [1, 24], [11, 12], [46, 30], [95, 45], [24, 27], [20, 43], [24, 26], [10, 27], [12, 21], [74, 57], [32, 4], [32, -6], [65, -34], [61, -54], [53, -72], [57, -52]], [[84691, 52416], [-53, -98], [-17, -47], [-14, -51], [-21, -56], [-24, -50], [-12, -15], [-29, -27], [-17, -10], [-32, -4], [-97, -39], [-31, -5], [-32, 2], [-60, 10], [-12, 5], [-24, 51], [-27, 40], [-24, 5], [-24, -4], [-175, -3], [-61, -8], [-61, -18], [-33, 8], [-33, 21], [-24, 7], [-25, -2], [-115, -31], [-29, 3], [-58, 39], [-34, 8], [-33, -10], [-31, -36], [-11, -23], [-32, -81], [-18, -58], [-14, -73], [-11, -75], [-7, -61], [0, -64], [5, -72], [9, -71], [10, -55], [39, -126], [8, -17], [44, -36], [25, -45], [25, -126], [17, -65], [17, 0], [19, 4], [33, -8], [33, -17], [32, 39], [17, 73], [18, 55], [43, 103], [25, 48], [15, 15], [16, -6], [13, -28], [16, -22], [32, -11], [33, 7], [34, 34], [12, 20], [11, 26], [29, 22], [69, 0], [36, -8], [64, 9], [-1, 19], [-12, 20], [-4, 16], [12, 11], [41, 23], [42, 17], [31, -12], [27, -33], [11, -34], [4, -41], [-10, -105], [-5, -25], [-22, -12], [-20, 14], [-21, 54], [-28, 20], [-41, -16], [-14, -16], [-13, -22], [-23, -56], [-19, -64], [-41, -100], [-48, -86], [-23, -33], [-26, -23], [-83, -57], [-22, -42], [-17, -55], [-19, -19], [-22, -6], [-16, 10], [-33, 31], [-11, -25], [-2, -39], [16, -14], [27, -43], [20, -61], [13, -13], [29, -20], [12, -19], [22, -52], [34, -122], [12, -66], [19, -53], [58, -91], [3, -26], [-3, -30], [4, -27], [21, -52], [5, -34], [-23, -43], [-1, -62], [-14, -83], [-3, -28], [0, -26], [10, -24], [11, -18], [16, -10], [14, -17], [26, -65], [14, -17], [8, -23], [0, -36], [12, -20], [11, -37], [16, -9], [8, 10], [6, 16], [14, -6], [8, -25], [4, -33], [2, -37], [-1, -69], [-7, -24], [-15, 1], [-27, 28], [-1, -20], [2, -20], [-14, -7], [-16, 3], [-40, -3], [-73, -42], [-26, -26], [-17, -46], [-1, -31], [6, -68], [-9, -23], [-34, -9], [-47, 18], [-28, 18], [-16, 15], [-21, 45], [-8, 58], [16, 172], [4, 22], [7, 19], [8, 31], [2, 37], [-22, 45], [-34, 18], [-29, 37], [-111, 209], [-6, 21], [0, 34], [4, 33], [37, 114], [4, 22], [5, 91], [-1, 74], [-4, 75], [-17, 46], [-31, 15], [-32, 2], [-31, -15], [-30, -37], [-57, -79], [-22, -46], [-2, -60], [13, -58], [17, -54], [8, -58], [13, -207], [-1, -23], [-14, -60], [-6, -135], [6, -190], [10, -116], [-4, -63], [-26, -136], [-8, -75], [-1, -31], [31, -142], [7, -56], [4, -58], [-33, 28], [-15, -1], [-16, -9], [-34, -9], [-35, -1], [-12, -11], [-25, -38], [-15, -15], [-13, -3], [-44, 47], [-27, 52], [-24, 56], [-4, 63], [8, 66], [12, 70], [24, 116], [-1, 78], [8, 64], [14, 62], [5, 58], [3, 224], [-3, 20], [-33, 133], [-4, 22], [0, 36], [3, 34], [1, 31], [-7, 24], [-14, 22], [-16, 9], [-34, -9], [-68, -36], [-20, 31], [-15, 49], [-10, 68], [-5, 71], [2, 67], [10, 65], [-8, 45], [-12, 49], [0, 25], [7, 23], [12, 18], [15, 11], [14, 19], [37, 66], [12, 58], [1, 72], [10, 68], [19, 63], [22, 58], [7, 60], [-11, 96], [5, 43], [-4, 51], [0, 50], [13, 95], [42, 194], [40, 103], [16, 27], [21, -47], [16, -57], [1, 51], [-5, 50], [-16, 117], [-14, 228], [4, 21], [14, -3], [15, 20], [7, 36], [-15, 84], [0, 30], [28, 119], [24, 43], [10, 27], [6, 73], [12, 27], [16, 20], [20, 50], [11, 63], [7, 5], [8, 2], [12, -55], [14, -22], [28, -18], [24, 21], [7, 27], [9, 24], [14, 25], [12, 28], [14, 66], [18, 59], [12, 21], [15, 13], [16, 8], [16, 1], [35, -37], [21, -7], [20, 2], [14, -6], [10, -17], [9, -34], [11, -29], [10, -14], [12, -7], [76, 12], [67, -33], [91, -8], [32, -19], [30, -26], [36, -44], [14, -10], [15, 2], [19, 42], [14, 10], [15, 1], [59, -8], [158, -52], [23, 8], [96, 99], [38, 93], [34, 26], [11, 43], [7, 51], [12, 13], [29, 15], [11, 15], [21, 62], [24, 56], [11, 16], [34, -8], [15, -25], [19, -81], [-3, -14], [-22, -40], [-7, -17], [-25, -115], [-17, -56], [-21, -50]], [[79825, 48382], [28, -66], [25, -35], [29, -19], [30, -2], [30, -8], [35, -25], [35, -11], [17, 4], [16, 13], [11, 1], [10, -12], [25, -56], [27, -51], [6, -26], [18, -123], [20, -35], [29, -10], [33, 0], [33, -5], [77, -29], [30, 4], [27, 29], [24, -19], [65, -34], [32, -8], [36, 10], [37, 2], [17, -10], [17, -15], [14, -6], [15, 1], [26, 29], [18, 52], [14, 67], [11, 69], [7, 30], [10, 26], [14, 17], [14, 11], [38, -7], [8, -16], [42, -118], [8, -10], [45, -8], [12, 4], [27, 24], [16, 2], [28, -29], [13, -25], [13, -18], [70, -19], [28, -50], [13, -7], [49, 6], [34, -5], [29, -13], [13, -72], [11, -73], [7, -25], [28, -25], [12, -23], [-3, -73], [3, -70], [61, -60], [65, -35], [69, -4], [70, 12], [35, 15], [45, 26], [9, 0], [87, -80], [8, -12], [9, -60], [0, -62], [-16, -149], [-1, -41], [1, -41], [18, -89], [9, -25], [31, -47], [1, -25], [-4, -24], [-35, 17], [-21, 20], [-12, 33], [-17, 19], [-33, -7], [-61, 34], [-69, 52], [-122, 110], [-33, -1], [-32, -14], [-33, -28], [-35, -20], [-26, -7], [-26, 5], [-65, 27], [-66, 17], [-168, 11], [-47, 25], [-79, 12], [-63, 22], [-62, 30], [-158, 149], [-51, 36], [-159, 71], [-24, 6], [-58, -5], [-36, 21], [-32, 0], [-47, -23], [-15, -17], [-18, -35], [-33, 2], [-32, 7], [-84, 33], [-31, 21], [-30, 30], [-28, 40], [-14, 14], [-72, 41], [-60, 14], [-122, 18], [-27, 12], [-22, 15], [-12, 33], [1, 42], [9, 36], [12, 36], [8, 34], [-89, 73], [-71, 40], [-30, 7], [-31, 0], [-34, -8], [-34, 4], [-16, 11], [-17, 5], [-16, -9], [-13, 3], [-4, 33], [9, 28], [17, 32], [10, 6], [4, -50], [5, -10], [16, -11], [6, 3], [27, 64], [8, 31], [13, 85], [14, -16], [14, 10], [8, 13], [23, 196], [19, 58], [26, 47], [12, 12], [26, -29], [51, -11], [30, -20], [31, -2], [29, -10], [42, -34], [15, 3], [14, 11], [23, 38], [9, 60], [32, -31], [48, -12], [11, -17]], [[76803, 54855], [34, -5], [63, 31], [35, -3], [32, -23], [30, -13], [72, 17], [14, -5], [13, -13], [11, -20], [33, -75], [56, -92], [16, -59], [9, -67], [6, -15], [63, -127], [7, -54], [-9, -73], [19, -59], [61, -55], [36, -40], [8, -24], [5, -29], [21, -44], [25, -28], [78, -74], [103, -156], [59, -74], [48, -112], [18, -54], [14, -58], [29, -84], [50, -105], [13, -31], [13, -46], [16, -43], [19, -39], [22, -30], [22, -10], [37, -75], [20, -24], [-3, 59], [-17, 51], [0, 32], [3, 27], [14, 24], [16, 6], [31, -21], [49, -89], [21, -52], [16, -72], [13, -75], [20, -37], [27, -13], [31, -5], [28, -23], [65, -104], [22, -48], [16, -57], [12, -68], [7, -71], [4, -16], [42, -85], [22, -36], [27, -18], [78, -19], [28, -30], [23, -49], [10, -50], [-17, -44], [-61, -68], [-66, -47], [64, 16], [32, 20], [30, 31], [30, 39], [46, 55], [17, 11], [21, -4], [18, -16], [28, -53], [26, -57], [20, -66], [12, -73], [-22, -39], [-33, -28], [-45, -71], [-4, -28], [9, -18], [-11, -52], [25, -32], [4, -28], [-22, -39], [2, -24], [26, -103], [13, -24], [40, -52], [60, -53], [34, -25], [38, -19], [17, 1], [28, 8], [6, -20], [12, -102], [6, -64], [9, -137], [11, -57], [-1, -69], [15, -59], [30, -38], [32, -31], [15, -30], [0, -45], [-5, -36], [-11, -28], [-33, -60], [-6, -25], [-5, -65], [6, -30], [13, -2], [10, 16], [40, 87], [11, 16], [15, 12], [15, 8], [72, 0], [31, -13], [27, -29], [25, -36], [88, -228], [40, -126], [3, -31], [1, -33], [-7, -25], [-37, -86], [-4, -23], [-12, -94], [2, -67], [13, -29], [9, -30], [0, -28], [-25, -139], [-2, -23], [15, -226], [1, -61], [-3, -77], [2, -124], [-19, -384], [-4, -23], [-15, -59], [-20, 1], [-16, 10], [-12, 22], [-6, 28], [-9, 23], [-48, 71], [-13, -12], [-49, -88], [-13, -13], [-16, 11], [-25, 26], [-81, 93], [-5, -30], [-1, -40], [16, -101], [2, -44], [-15, -9], [-8, 2], [-33, 59], [-31, 65], [-35, 87], [-26, 42], [-23, 46], [-66, 177], [-17, 27], [-101, 124], [-20, 30], [-26, 51], [-28, 46], [-61, 72], [-106, 184], [-46, 105], [-51, 170], [-17, 43], [-86, 128], [-47, 77], [-20, 44], [-45, 155], [-14, 52], [-16, 46], [-28, 37], [-24, 44], [-49, 140], [-15, 55], [-11, 61], [2, 120], [-103, 366], [-26, 114], [-23, 158], [-6, 16], [-56, 142], [-19, 45], [-24, 43], [-20, 50], [-38, 162], [-15, 45], [-20, 33], [-73, 61], [-27, 34], [-22, 48], [-13, 62], [-14, 131], [-35, 199], [-38, 267], [-26, 119], [-30, 94], [-9, 21], [-133, 169], [-22, 25], [-24, 15], [-34, 11], [-27, 43], [-10, 78], [-6, 105], [-7, 63], [-7, 35], [-56, 75], [-21, 58], [-18, 65], [-17, 50], [-61, 172], [-21, 45], [-26, 32], [-76, 33], [-23, 29], [-37, 98], [-22, 50], [-67, 109], [-114, 230], [-23, 57], [-18, 60], [-14, 64], [-48, 177], [3, 36], [8, 37], [-1, 31], [-6, 31], [1, 27], [15, 16], [32, 21], [34, -2], [31, -9], [30, -17], [29, -38], [51, -94], [30, -33], [33, -15], [67, -22]], [[82446, 55697], [-6, -49], [7, 1], [28, 30], [29, 79], [17, 69], [14, 30], [28, -17], [6, -12], [-2, -49], [3, -29], [11, -61], [24, -37], [33, -24], [31, -34], [10, -22], [6, -27], [7, -45], [0, -44], [-22, -44], [10, -71], [-2, -41], [-7, -35], [-33, -33], [88, 33], [22, 18], [30, 47], [16, -41], [15, -69], [-12, -18], [-38, -26], [-2, -10], [13, -36], [16, 3], [31, 24], [29, 38], [14, 0], [15, -8], [29, -24], [16, -20], [13, -26], [9, -53], [33, -19], [68, -75], [12, -7], [14, -1], [35, 9], [13, -10], [9, -27], [3, -34], [-1, -36], [-4, -27], [-8, -22], [-25, -34], [-61, -45], [-66, -34], [-34, 2], [-47, 29], [-17, -3], [-17, -14], [-21, -92], [39, -92], [66, -96], [9, -24], [-2, -29], [-11, -18], [-14, -9], [-37, -16], [-38, -11], [-30, -17], [-31, -21], [-31, 7], [-43, 43], [-12, 3], [-13, -22], [-13, -60], [-11, -22], [-19, -16], [-9, -33], [27, -51], [1, -34], [21, -30], [24, -46], [1, -16], [9, -21], [4, -25], [-17, -26], [-24, -5], [-17, 24], [-16, 30], [-4, -37], [-13, -21], [-45, 6], [-32, 0], [-32, -10], [16, -5], [14, -12], [50, -96], [11, -35], [-17, -70], [8, -29], [19, -16], [24, -35], [17, -4], [12, -19], [0, -34], [7, -32], [-19, -12], [19, -8], [17, -16], [-9, -16], [-7, -20], [7, -10], [23, -19], [10, -16], [6, -45], [22, -73], [41, -95], [9, -34], [0, -32], [-6, -27], [-24, -32], [-19, -42], [-2, -15], [-26, -20], [12, -14], [9, -19], [18, -59], [42, -95], [22, -35], [87, -129], [46, -57], [60, -128], [31, -30], [6, -36], [-26, -54], [-38, -28], [-62, -15], [-62, 20], [-32, 15], [-28, 32], [-22, 63], [-29, 35], [12, -39], [7, -39], [-4, -43], [-11, -33], [-20, -25], [-21, -20], [-9, -14], [-53, -224], [-9, -60], [-16, -252], [0, -71], [24, -133], [2, -69], [5, -30], [-4, -25], [-11, -15], [-46, -41], [-32, -34], [-26, -48], [-21, -59], [-19, -44], [-25, -20], [-18, 3], [-14, 20], [-10, 38], [-6, 42], [-4, -31], [1, -30], [8, -33], [4, -34], [-5, -35], [-11, -28], [-29, -30], [-16, -26], [-2, -46], [-8, -26], [-11, -20], [-40, -46], [-9, -18], [-7, -24], [22, 4], [19, -4], [2, -45], [6, -34], [-8, -75], [-30, -50], [15, -11], [14, -16], [30, -12], [10, -53], [-4, -64], [-6, -58], [-21, -16], [-14, 11], [-14, -1], [-10, -17], [-2, -30], [19, 15], [-1, -75], [-5, -72], [-7, -40], [-11, -33], [-18, -10], [-16, 24], [-4, -28], [5, -24], [24, -58], [-15, -13], [-10, -20], [-5, -29], [-26, -66], [-11, -49], [-5, -52], [-12, -41], [-194, -180], [-156, -151], [-12, 10], [-7, 23], [-6, 235], [-19, 121], [-3, 68], [-22, -61], [-14, 6], [-15, 16], [-11, 19], [0, 26], [11, 75], [-14, -41], [-16, -31], [-16, 3], [-14, 16], [-5, 24], [-7, 4], [-35, -67], [-45, -35], [-25, 0], [-20, 21], [1, 50], [-2, 50], [-5, 29], [-13, 10], [-11, -4], [-32, -25], [-12, 3], [-7, -13], [-85, 180], [-18, -146], [-59, -78], [-44, -45], [-43, 17], [-45, 29], [-44, -35], [-47, -86], [-13, -13], [-14, 1], [-10, 11], [3, 65], [1, 64], [-4, 145], [-4, 28], [-13, 40], [-18, 28], [-11, -21], [-9, -28], [-36, 1], [-35, 23], [-30, -13], [-60, -58], [-32, -8], [-17, 12], [-11, 31], [6, 29], [14, 21], [-25, -17], [-21, -29], [-9, -19], [-10, 10], [-26, 65], [-54, -24], [-8, -8], [-13, -22], [-13, 11], [-7, 24], [-2, 136], [-28, 262], [-7, 134], [-6, 31], [-32, 49], [1, 69], [16, 57], [4, 68], [-5, 73], [-10, 71], [-12, 54], [-18, 46], [-24, 52], [-30, 39], [-63, 43], [-33, -4], [-13, 17], [-8, 23], [3, 43], [12, 30], [15, 7], [2, 17], [-33, 35], [-26, 48], [-9, 28], [-2, 31], [0, 73], [8, 46], [4, 25], [8, 76], [18, 24], [-3, 14], [-8, 10], [-11, 25], [-9, 29], [-20, 49], [-36, 60], [-6, 102], [-5, 150], [3, 68], [11, 128], [21, 40], [16, 12], [12, 17], [-10, 2], [-9, -6], [-15, -4], [12, 114], [6, 33], [25, 64], [30, 57], [12, 67], [17, 58], [70, 61], [18, -80], [7, -18], [40, -54], [33, -27], [36, -11], [37, -2], [15, 4], [14, 10], [14, -11], [76, -88], [30, -15], [31, 6], [13, -8], [44, -67], [13, -8], [22, 5], [-28, 30], [-18, 22], [-8, 41], [4, 44], [18, 29], [12, 31], [5, 94], [8, 48], [14, 46], [5, 43], [-16, 34], [-4, 57], [3, 47], [10, 33], [15, -22], [15, -19], [15, 2], [11, 7], [2, 25], [-3, 43], [1, 78], [19, 63], [31, 43], [29, 21], [108, 35], [172, 89], [51, 35], [19, 18], [15, 25], [27, 80], [50, 125], [35, 103], [74, 151], [59, 139], [8, 26], [9, 76], [1, 36], [-2, 36], [8, 17], [12, 10], [34, -1], [34, 10], [35, 30], [33, 37], [28, 43], [27, 47], [27, 38], [43, 44], [15, -4], [0, -31], [-6, -36], [32, 0], [65, 19], [14, 21], [26, 46], [10, 26], [7, 58], [-32, 34], [-12, 44], [-1, 48], [38, 88], [13, 21], [6, -31], [17, -8], [15, -1], [16, 2], [22, 44], [12, 64], [39, 91], [14, 70], [8, 72], [99, 226], [12, 36], [59, 227], [7, 7], [16, -22], [4, -72], [-2, -31], [-9, -47]], [[68823, 95758], [-111, -44], [-66, -30], [-65, -21], [-66, -15], [-104, -36], [-184, -46], [-116, -37], [-127, -30], [-134, -39], [-134, -27], [-33, -2], [-96, -38], [-75, -16], [-272, -85], [-125, -63], [-36, -5], [-36, 3], [-30, -20], [-28, -33], [-59, -34], [-30, -31], [-30, -24], [-18, -8], [-34, 2], [-16, -2], [-55, -27], [-10, -22], [59, -14], [13, -24], [-17, -16], [-38, -23], [-22, -23], [-40, -23], [-27, -7], [-65, 1], [-4, -29], [11, -18], [-6, -16], [-22, -15], [-21, 2], [-99, 45], [-16, -15], [-7, -32], [-3, -34], [-13, -25], [-17, -13], [-31, -13], [-109, 21], [-9, -20], [17, -25], [23, -54], [5, -22], [-13, -36], [-49, -56], [-187, -67], [3, -23], [21, -44], [5, -27], [-8, -26], [-24, -21], [-28, 0], [-15, 4], [-43, 29], [-37, 7], [-7, -14], [49, -39], [21, -51], [-23, -27], [-90, -61], [-47, -80], [-92, -35], [-57, -5], [-56, 10], [-53, 18], [-135, 7], [-75, 20], [-76, 36], [-66, -3], [-56, -18], [-74, -39], [-47, 75], [20, 35], [-101, 90], [-22, 40], [25, 19], [31, 13], [59, 36], [59, 29], [61, 9], [10, 5], [25, 43], [27, 35], [25, 20], [28, 33], [89, 134], [21, 10], [184, 26], [16, 8], [-53, 27], [-54, -1], [-25, 9], [-14, 19], [-8, 22], [21, 16], [71, 81], [84, 58], [78, 35], [-19, 9], [-25, 23], [-95, -6], [-37, 32], [-12, 19], [-3, 19], [31, 25], [32, 15], [35, -4], [35, -13], [28, -15], [27, -24], [23, 1], [85, 84], [-13, 19], [-5, 29], [9, 14], [41, 13], [27, 5], [59, -6], [85, -18], [7, 9], [21, 56], [21, 30], [86, 50], [-5, 15], [-4, 25], [100, 33], [65, 33], [63, 45], [32, 9], [32, 2], [65, 19], [121, 22], [71, 22], [23, 48], [45, 17], [90, 7], [35, -3], [20, -20], [39, 1], [15, 11], [16, 17], [-5, 29], [-1, 37], [34, 23], [13, 5], [102, 9], [60, -4], [125, -28], [65, -7], [87, 9], [52, -5], [154, 42], [261, 39], [68, 28], [67, 33], [34, 7], [35, 2], [31, 11], [61, 28], [30, 7], [33, 0], [30, 20], [26, 43], [29, 33], [79, 43], [134, 60], [121, 23], [75, 25], [32, 2], [102, -12], [130, -33], [59, -36], [49, -47], [10, -17], [9, -30], [-14, -28], [-9, -28], [11, -22], [-95, -71], [-93, -78], [-16, -17], [-111, -27]], [[65366, 94071], [130, -23], [97, -7], [59, -18], [22, -14], [-9, -36], [-17, -14], [-41, -47], [-6, -28], [7, -45], [-6, -33], [-13, -24], [-11, -10], [-73, 0], [-27, -13], [-1, -26], [-5, -29], [-24, -42], [-48, -13], [-11, -16], [4, -27], [-17, -21], [1, -32], [9, -18], [2, -37], [33, -54], [-6, -22], [-26, -43], [-8, -53], [-21, -46], [48, -38], [21, -50], [19, -53], [57, -105], [62, -94], [114, -137], [122, -104], [48, -29], [116, -48], [20, -16], [19, -21], [-49, -39], [-51, -14], [-5, -18], [-28, -10], [-138, 34], [-7, 5], [-15, 24], [-16, 18], [-35, 3], [-35, -11], [21, -22], [23, -7], [40, -41], [-17, -16], [-18, -2], [-82, 55], [-7, -7], [-8, -16], [-40, 18], [-10, -13], [-31, -6], [-25, 15], [0, 19], [-5, 10], [-125, -15], [-52, 0], [-51, 7], [-61, 36], [-11, -16], [-2, -19], [-23, 8], [-51, 29], [-37, 12], [-133, 28], [-94, 34], [24, 16], [40, 8], [1, 21], [-7, 29], [-1, 29], [23, 20], [52, -9], [-7, 32], [25, 6], [47, -18], [18, 11], [-75, 41], [-82, 58], [8, 21], [-29, 5], [-30, -1], [-25, 34], [4, 45], [22, 31], [-13, 6], [-127, -27], [-64, 6], [-72, 18], [-66, -26], [-67, -9], [-35, 9], [-34, 20], [-28, 26], [-22, 45], [-20, 74], [-3, 28], [4, 62], [11, 27], [28, 52], [19, 16], [43, 25], [22, 6], [51, -12], [51, -1], [22, 14], [21, 25], [15, 32], [35, 18], [10, 10], [11, 20], [12, 31], [2, 27], [10, 26], [32, 39], [-12, 24], [5, 16], [21, 29], [-64, 7], [-22, 13], [-21, 19], [6, 18], [8, 13], [64, 48], [28, 15], [31, 7], [31, 0], [33, -5], [32, 7], [-34, 33], [-3, 22], [-13, 53], [3, 25], [14, 21], [30, 24], [43, 8], [34, 12], [33, 19], [31, 3], [63, -12], [31, 2], [34, 11], [97, 40], [36, 11], [38, -3], [50, -15], [55, -28]], [[89655, 83175], [60, -145], [2, -32], [-5, -33], [-11, -42], [-4, -44], [7, -39], [-5, -10], [49, -176], [35, -111], [11, -45], [7, -48], [11, -99], [2, -151], [-3, -50], [-8, -49], [-8, -29], [-18, -20], [-8, -54], [-4, -153], [9, -80], [17, -56], [12, -60], [2, -64], [5, -29], [27, -36], [11, -28], [3, -40], [2, -59], [4, -13], [13, -18], [56, -426], [22, -129], [64, -223], [26, -135], [17, -64], [11, -68], [9, -69], [19, -76], [25, -74], [49, -67], [22, -37], [5, -30], [2, -103], [-11, 22], [-14, 79], [-24, 45], [-35, 54], [-35, 48], [-44, 80], [-21, 23], [-23, 16], [-41, 18], [-24, 2], [-98, -12], [-40, -16], [-37, -37], [-21, -54], [-16, -108], [-89, -386], [-21, -101], [-8, -108], [3, -85], [6, -31], [26, -84], [21, -49], [15, -21], [18, -14], [11, -17], [10, -23], [18, -57], [23, -128], [25, -91], [11, -28], [28, 7], [18, -1], [18, -8], [10, -23], [15, -101], [11, -98], [1, -26], [-20, -75], [-5, -32], [-3, -34], [-5, -27], [-9, -23], [-3, 111], [-14, 79], [-5, 68], [-19, 47], [-65, 20], [-61, 7], [-9, 9], [-14, 29], [-15, 23], [-16, 3], [-16, -9], [-27, -33], [-21, -51], [-15, -55], [-13, -59], [-27, -155], [-16, -51], [-20, -48], [-17, 26], [-15, 30], [-9, 43], [-4, 48], [-24, 161], [10, 140], [41, 194], [7, 63], [-6, 60], [-9, 60], [-6, 113], [1, 25], [14, 65], [17, 62], [20, 54], [9, 64], [-13, 159], [-29, 108], [-37, 102], [-7, 28], [-2, 27], [32, 128], [11, 62], [13, 134], [12, 74], [9, 74], [3, 373], [-3, 55], [-20, 117], [-1, 67], [9, 84], [13, 65], [17, 63], [0, 129], [-32, 119], [-24, 52], [-37, 63], [-28, 35], [-14, 27], [14, 9], [10, 21], [-24, 33], [-15, 50], [-2, 196], [6, 49], [18, 55], [16, 59], [14, 137], [5, 141], [-9, 57], [-4, 116], [8, 29], [31, 38], [49, 23], [11, -7], [38, -45], [14, -2], [15, 5], [29, 21], [16, 52], [-21, 29], [12, 37], [35, 13], [3, 32], [-13, 4], [11, 46], [7, 45], [-10, 42], [-57, 104], [-36, 76], [60, -1], [18, 14], [14, 32], [7, 33], [19, -13]], [[89950, 77256], [35, -3], [16, 2], [26, -8], [106, -88], [32, -11], [33, -1], [23, 7], [20, 24], [64, 106], [67, 97], [8, -4], [0, -27], [-5, -29], [-30, -89], [-33, -119], [-7, -60], [11, -59], [20, -49], [17, -66], [19, -93], [26, -11], [14, -2], [27, 28], [25, 35], [22, 4], [22, -6], [-30, -24], [-28, -30], [-24, -57], [-9, -10], [-28, 3], [-16, -2], [-32, -24], [-29, -27], [-27, -33], [-30, -17], [-32, -4], [-49, -27], [-32, -2], [-59, 23], [-29, -6], [-63, -53], [-58, -77], [-50, -86], [-42, -104], [-17, -54], [-10, -60], [-2, -40], [-4, -38], [-9, -27], [-12, -22], [-35, 13], [-57, 55], [-110, 81], [-117, 123], [-66, 62], [-123, -19], [-117, -118], [-11, 10], [-44, 81], [-22, 32], [-26, 9], [-19, -1], [-19, -6], [-26, -41], [-10, -30], [-7, -34], [-2, -24], [3, -24], [25, -53], [31, -40], [13, -8], [30, 3], [14, -4], [49, -80], [55, -74], [12, -25], [-20, -26], [-22, -13], [-26, 3], [-25, 10], [-44, 32], [-18, -27], [-29, -56], [-16, -60], [-13, -28], [-32, -36], [-34, -19], [-17, 6], [-14, 23], [-7, 27], [-4, 32], [7, 69], [17, 62], [7, 63], [-14, 89], [-9, 18], [-36, 53], [-17, 50], [-4, 63], [2, 35], [9, 77], [9, 39], [16, 13], [18, 8], [28, 27], [30, 36], [29, 41], [29, 51], [15, 55], [-25, 68], [-5, 40], [4, 38], [26, 20], [27, -15], [55, -56], [11, -5], [37, -3], [51, -12], [30, 3], [14, 8], [22, 46], [10, 59], [-4, 75], [0, 75], [14, 61], [43, 99], [12, 57], [4, 141], [16, 62], [12, 64], [6, 135], [-17, 129], [-18, 64], [-20, 60], [3, 58], [16, 53], [0, 16], [4, 14], [31, 11], [14, 11], [14, 26], [16, 15], [12, -15], [10, -26], [43, -65], [68, -116], [80, -176], [50, -86], [53, -78], [59, -79], [63, -69], [39, -32], [29, -52], [18, -8]], [[89229, 75675], [11, -11], [52, 29], [-10, -88], [-5, -89], [4, -148], [4, -67], [9, -65], [22, -46], [29, -33], [42, -105], [23, -129], [16, -63], [11, -66], [4, -30], [0, -30], [-3, -41], [4, -33], [-5, -105], [-19, -121], [-2, -62], [-16, -12], [-10, -29], [-9, -13], [-9, -10], [-14, -3], [-9, -11], [-4, -33], [-6, -31], [-12, -28], [-9, -31], [-8, -75], [-3, -77], [-11, -54], [-28, -14], [-32, 1], [-40, -25], [-9, -15], [-32, -94], [-9, -56], [0, -59], [9, -73], [12, -72], [9, -133], [-10, -203], [-9, -65], [-20, -44], [-16, -20], [-13, -25], [-17, -66], [-29, -132], [-2, -34], [0, -34], [-8, -45], [-5, -44], [5, -51], [9, -48], [38, -123], [15, -36], [17, -34], [-65, -36], [-12, -17], [-39, -70], [-12, -67], [1, -73], [-7, -27], [-10, -23], [-12, -15], [-43, -34], [-28, -33], [-27, -52], [-11, -28], [-21, 9], [-13, 24], [12, 31], [-3, 35], [6, 93], [-7, 37], [22, 28], [10, 45], [24, 35], [16, 32], [3, 26], [-15, 28], [-15, 20], [-22, 0], [-21, -6], [-13, -27], [-5, -36], [1, -16], [-2, -15], [-32, -49], [4, -52], [10, -26], [12, -13], [-4, -17], [-15, -42], [-11, -4], [-20, 58], [-25, 32], [-31, 0], [-31, -12], [-25, -39], [-8, -32], [-5, -33], [2, -81], [-10, -68], [-19, -59], [-10, -22], [-23, -40], [-17, -5], [-12, 18], [-9, 28], [12, 101], [-1, 57], [28, 29], [-23, 41], [-28, 16], [-39, -21], [-11, -25], [-8, -33], [-21, -41], [-24, -39], [-26, -66], [-18, -79], [-58, 26], [-32, 6], [-32, -2], [-57, 9], [-63, -16], [-71, -30], [4, 22], [59, 47], [2, 14], [-6, 26], [-14, 1], [-35, -9], [-18, 4], [-8, 28], [-12, 12], [-7, -12], [2, -54], [-9, -7], [-11, 14], [4, 42], [-8, 61], [-1, 39], [12, 32], [-12, 14], [-14, -5], [-17, -16], [-14, -22], [-32, -112], [-12, -64], [23, -52], [63, -72], [10, -17], [1, -31], [-8, -32], [-17, -15], [-69, -24], [-59, -46], [-18, -47], [-54, -183], [-43, -125], [-62, -43], [-67, 39], [-16, 43], [-14, 54], [-25, 48], [-22, 53], [-13, 63], [2, 101], [-10, 61], [9, 16], [37, 37], [12, 21], [21, 48], [8, 27], [1, 41], [-17, 21], [-44, -1], [-43, -13], [-31, 18], [-41, 49], [-12, 11], [-43, 3], [-31, -9], [-31, -18], [-32, -6], [-11, -9], [-37, -60], [-29, -38], [-26, -19], [-55, -5], [-28, -12], [-29, -20], [-8, 1], [-30, -27], [-35, -24], [-19, -24], [-34, 16], [-68, -43], [-33, -5], [-34, 23], [-31, 38], [-30, -16], [-21, -56], [-10, -113], [-12, -50], [-4, -61], [-15, 10], [-91, 109], [-6, 4], [-74, -19], [-19, -9], [-23, -22], [-25, -10], [-23, 16], [-22, 26], [-21, -8], [-22, -18], [-8, 165], [4, 21], [14, 29], [14, 25], [36, 9], [36, -9], [25, 12], [22, 32], [23, 47], [26, 37], [35, 30], [34, 34], [30, 48], [28, 52], [26, 39], [28, 32], [43, 77], [57, 87], [22, 64], [13, 18], [49, 35], [65, 28], [31, -2], [30, -56], [17, 8], [16, 14], [34, 8], [34, -9], [34, 0], [33, 7], [65, 19], [34, 22], [33, 29], [118, 20], [82, 48], [12, -3], [13, -11], [1, -36], [-10, -39], [10, -24], [16, -14], [76, -5], [22, -8], [32, 26], [30, 33], [31, 44], [22, 49], [-20, 61], [-4, 67], [17, 73], [24, 62], [30, 37], [27, 42], [54, 121], [40, 98], [14, 121], [-8, 142], [34, 106], [33, 18], [66, 49], [34, 14], [5, -21], [-1, -28], [-51, -89], [-30, -36], [-17, -12], [-16, -16], [-7, -31], [26, -53], [7, -38], [-2, -37], [1, -34], [30, -36], [34, -12], [14, 0], [13, 10], [39, 89], [8, 15], [111, 65], [55, 50], [30, 13], [28, 26], [64, 100], [23, 46], [21, 51], [18, 59], [13, 64], [18, 40], [101, 95], [32, 52], [11, 25], [12, 73], [9, 75], [12, 59], [16, 56], [22, 57], [25, 52], [15, 54], [21, 128], [10, 72], [7, 25], [11, 22], [9, 27], [7, 31], [3, 30], [5, 93], [-3, 72], [-16, 61], [-14, 17], [-15, 1], [-23, -5], [-19, 24], [4, 22], [20, 4], [13, 12], [9, 21], [18, 66], [11, 71], [1, 31], [-14, 58], [-11, 69], [0, 37], [12, 43], [17, 34], [16, 9], [17, 2], [15, 13], [14, 20], [8, 21], [13, 59], [4, 33], [-7, 90], [8, 24], [11, 15], [16, -11], [15, -2], [19, 3], [17, -9], [4, -23], [11, -151], [6, -21], [13, -16], [14, 3], [13, 23], [8, 32], [17, 6], [51, -34], [18, 24], [11, 37], [11, 66], [-5, 60], [-13, 21], [-12, -4], [-11, -16], [-13, -9], [-75, -31], [1, 66], [16, 99], [9, 31], [12, 15], [32, -17], [15, -11], [34, -48]], [[87321, 71576], [38, -24], [39, 6], [0, -105], [5, -35], [11, -32], [-5, -46], [18, -16], [-53, -52], [-48, -70], [-20, -47], [-17, -50], [-11, -53], [-6, -58], [-16, 23], [-46, 93], [-29, 26], [-47, 13], [-15, -3], [-96, -87], [-13, -63], [-26, -96], [-12, -32], [-14, -9], [-10, -16], [-11, -82], [-30, -51], [-18, -1], [-31, 14], [-14, -8], [19, 81], [-30, 9], [-30, -1], [0, 52], [-18, 30], [13, 39], [0, 31], [8, 18], [3, 25], [-1, 22], [-18, 6], [-12, 16], [2, 57], [-10, 2], [-26, -10], [-54, -44], [-15, 0], [23, 31], [48, 43], [21, 25], [48, 69], [29, 33], [16, 58], [5, 36], [10, 31], [9, 49], [15, 17], [27, 43], [15, -4], [17, -53], [23, -40], [16, 3], [30, 21], [14, 5], [34, -3], [30, 26], [13, 30], [4, 37], [-11, 63], [15, -6], [14, 3], [33, 40], [34, 23], [35, 6], [40, -22], [39, -36]], [[86437, 71199], [37, -17], [16, -1], [14, 7], [23, 23], [23, 17], [17, -9], [14, -20], [8, -28], [-4, -30], [-26, -63], [-22, -68], [50, -13], [50, 1], [-12, -42], [-1, -36], [15, -18], [13, -23], [-4, -21], [-7, -21], [27, -32], [-2, -21], [-7, -22], [-68, -145], [-20, -73], [-13, -81], [-13, -59], [-9, -61], [-8, -66], [-12, -68], [4, -61], [-4, -62], [-34, -153], [-25, 3], [-30, 18], [-19, -3], [-10, -34], [17, -70], [-54, -83], [-60, -56], [-1, 26], [6, 20], [9, 16], [6, 19], [9, 66], [-5, 65], [-18, 83], [-1, 29], [12, 12], [9, 4], [4, 11], [1, 27], [-6, 21], [-17, 6], [-17, 1], [-11, -31], [-16, -59], [-8, -59], [3, -33], [7, -29], [22, -49], [-6, -29], [-9, -22], [-77, 50], [-17, 4], [-14, 11], [-15, 67], [32, 16], [9, 8], [3, 22], [5, 65], [-15, 55], [-12, 19], [-11, 23], [7, 46], [-4, 58], [-1, 81], [6, 14], [29, 16], [21, 44], [19, 49], [27, 87], [22, 94], [-21, 5], [-18, 17], [19, 45], [-6, 56], [-29, 69], [-17, 81], [-26, 36], [-14, 13], [-17, -19], [-14, -23], [13, -53], [-1, -46], [2, -47], [13, -2], [16, 11], [13, -8], [7, -24], [2, -32], [-5, -31], [-12, -15], [-15, 1], [-14, 17], [-12, 24], [-27, 13], [-28, -28], [-28, -58], [-23, -29], [11, 42], [5, 47], [-11, 32], [-27, 54], [-6, 31], [-2, 38], [5, 37], [28, -43], [14, -53], [20, -23], [25, -1], [-19, 79], [-7, 20], [-28, 35], [-37, 59], [-23, 29], [8, 62], [14, 12], [12, -3], [39, -22], [4, 31], [-6, 16], [-3, 20], [26, 26], [42, 22], [9, 11], [8, 22], [10, 11], [30, 0], [25, 21], [20, 58], [5, 31], [8, 27], [51, 46], [13, 7], [34, -6], [32, -26], [16, -55], [13, -60], [33, -40]], [[83613, 64873], [-17, -68], [-14, -71], [-6, -68], [1, -69], [-4, -63], [-7, -62], [-27, 18], [-15, 44], [-3, 73], [-20, 88], [-7, 26], [-28, 49], [-26, 25], [-20, 36], [3, -3], [-15, 49], [-11, 52], [-23, 148], [-8, 36], [-10, 32], [-3, 33], [3, 36], [10, 53], [6, 54], [-5, 74], [2, 73], [8, 32], [130, 443], [36, 94], [22, 47], [18, 52], [17, 66], [22, 60], [15, 19], [75, 54], [23, 52], [19, 16], [21, -1], [14, -25], [12, -29], [13, -16], [33, -28], [15, -28], [6, -48], [-20, -45], [-10, -41], [-2, -45], [4, -61], [0, -61], [-25, -143], [-27, -90], [-7, -44], [-9, -111], [-16, -111], [-13, -140], [-22, -145], [-13, -61], [-16, -58], [-37, -109], [-42, -90]], [[80802, 63359], [13, -26], [9, -37], [8, -68], [4, -63], [-28, -40], [-25, -16], [-50, -154], [-11, -48], [-8, -21], [-3, -21], [1, -21], [-13, -74], [-12, -91], [-7, -37], [-14, -28], [-19, -15], [-11, -2], [-11, -8], [-27, -49], [-30, -38], [5, -17], [0, -16], [-13, -18], [-14, 3], [-42, -14], [-16, -28], [-16, -51], [-6, -7], [-25, -12], [-20, -5], [-33, 36], [-16, 11], [-44, 15], [-43, 24], [-30, 28], [-61, 69], [-7, 123], [-11, 67], [0, 24], [4, 206], [4, 22], [8, 20], [27, 46], [31, 37], [44, 76], [33, 35], [27, 50], [-16, -2], [-12, 6], [12, 43], [12, 23], [14, 12], [29, -9], [27, 9], [19, 38], [19, 8], [71, -12], [49, 17], [24, 35], [12, 2], [36, -10], [14, -37], [-1, 25], [1, 23], [7, -2], [47, -45], [0, 55], [3, 15], [15, 23], [7, -1], [19, -44], [17, -26], [23, -13]], [[72217, 57495], [26, -3], [29, 2], [20, -8], [34, -89], [93, -159], [51, -162], [4, -35], [7, -30], [12, -9], [11, -14], [50, -156], [6, -31], [-1, -34], [3, -25], [14, -13], [16, -6], [11, -24], [14, -124], [0, -39], [3, -17], [64, -193], [4, -24], [-1, -18], [2, -15], [12, -34], [20, -92], [9, -21], [12, -81], [1, -154], [-4, -69], [-12, -84], [-14, -81], [-16, -59], [-21, -50], [-71, -106], [-21, -22], [-93, -66], [-68, -63], [-64, -17], [-63, 34], [-48, 83], [-24, 122], [-17, 127], [-25, 141], [-18, 435], [-9, 122], [-15, 155], [2, 67], [10, 64], [0, -141], [9, -17], [7, 18], [7, 146], [5, 62], [25, 161], [1, 29], [-5, 61], [1, 30], [38, 113], [9, 66], [5, 67], [-2, 73], [-7, 72], [31, -23], [17, -25], [17, -17], [14, 9], [16, 0], [-11, 39], [-36, 36], [-59, 22], [-18, 29], [-7, 25], [3, 29], [5, 11]], [[63760, 44681], [13, -60], [15, -58], [46, -140], [20, -53], [17, -57], [8, -114], [30, -178], [28, -266], [8, -273], [9, -126], [21, -118], [36, -122], [11, -136], [-21, -140], [-32, -132], [-8, -25], [-15, -34], [-6, 1], [-26, 34], [-20, 56], [-26, 132], [-10, 66], [-10, 11], [-31, -6], [-22, -41], [-4, -27], [5, -74], [8, -66], [4, -68], [0, -85], [9, -26], [12, -22], [12, -55], [3, -133], [-8, -67], [-22, -58], [2, -32], [8, -32], [-8, -20], [-29, -25], [-11, -22], [-16, -59], [-25, -120], [-3, -61], [16, -186], [-5, -132], [-32, -252], [-18, -119], [-26, -143], [-40, -189], [-39, -237], [-34, -243], [-25, -147], [-28, -144], [-38, -255], [-33, -258], [-48, -285], [-68, -317], [-7, -41], [-14, -163], [-15, -140], [-18, -140], [-37, -230], [-5, -71], [-8, -68], [-36, -144], [-16, -54], [-10, -57], [-6, -72], [-11, -70], [-27, -129], [-39, -110], [-27, -40], [-58, -59], [-30, -11], [-65, -2], [-64, -33], [-66, -64], [-63, -73], [-25, -35], [-27, -20], [-83, -4], [-26, 16], [-84, 120], [-32, 20], [-62, 17], [-18, 10], [-17, 16], [-25, 62], [-50, 54], [-12, 16], [-7, 37], [-5, 39], [-13, 45], [-10, 84], [-16, 59], [-45, 104], [-5, 33], [-4, 110], [2, 75], [-5, 136], [5, 65], [16, 58], [-6, 62], [-17, 66], [-6, 68], [-13, 62], [-48, 112], [-11, 55], [-8, 57], [-18, 178], [-2, 62], [3, 130], [7, 68], [11, 47], [3, 35], [8, 30], [11, 24], [7, 28], [18, 168], [23, 37], [33, 21], [27, 44], [16, 59], [15, 121], [42, 121], [15, 63], [34, 96], [30, 135], [9, 64], [7, 65], [8, 143], [5, 71], [-1, 70], [-17, 72], [-41, 132], [-1, 24], [3, 98], [-4, 70], [-15, 71], [-19, 66], [-19, 124], [-10, 205], [2, 74], [-5, 65], [-14, 63], [10, 109], [123, 397], [4, 47], [-5, 121], [2, 71], [5, 26], [9, 15], [21, 7], [99, 18], [13, 12], [25, 33], [34, 65], [15, 19], [14, -7], [8, -28], [11, -15], [40, 29], [16, 1], [16, -5], [7, 27], [4, 36], [6, 26], [11, 14], [51, 8], [33, 11], [43, 25], [9, -5], [34, -91], [11, -8], [13, -4], [12, 17], [-28, 48], [-4, 26], [1, 31], [15, 65], [25, 50], [56, 76], [57, 88], [17, 6], [14, -14], [11, -103], [-1, -17], [9, -3], [10, 13], [10, 42], [0, 34], [-7, 34], [-4, 28], [0, 26], [29, 61], [23, 58], [10, 70], [10, 32], [24, 36], [7, -6], [6, -29], [3, -31], [-6, -31], [-9, -31], [-4, -40], [14, -8], [13, 10], [19, 73], [21, 70], [13, 36], [16, 25], [27, -5], [26, -15], [-43, 73], [-10, 101], [50, 174], [1, 37], [7, 11], [3, 14], [-26, 59], [-5, 29], [4, 44], [12, 40], [12, 27], [16, 11], [13, -15], [28, -49], [19, -7], [23, 46], [18, 58], [28, 40], [32, 25], [49, 91], [32, 191], [2, 56], [-7, 67], [-11, 65], [-19, 80], [5, 18], [27, -11], [9, 11], [28, 71], [48, 136], [16, 0], [13, -25], [5, -37], [10, -28], [32, -65], [16, -48]], [[64752, 74195], [-3, -27], [-15, 81], [-7, 89], [9, 26], [11, -2], [-10, -32], [15, -135]], [[63939, 77681], [-9, -17], [-15, 3], [-28, 61], [8, 62], [10, 13], [14, 8], [2, -13], [-20, -28], [-2, -35], [17, -39], [23, -15]], [[63975, 77748], [-10, -8], [-6, 37], [11, 31], [15, 4], [-5, -49], [-5, -15]], [[5819, 5871], [-347, -22], [-141, 19], [-294, 63], [-403, 114], [-110, 36], [-72, 31], [-70, 39], [-16, 43], [10, 62], [13, 51], [21, 32], [86, 38], [43, 42], [87, 44], [25, 33], [37, 2], [70, -4], [69, -9], [65, -11], [63, -19], [144, -62], [100, -61], [144, -72], [143, -81], [80, -30], [77, -45], [74, -61], [14, -21], [31, -27], [19, -26], [19, -22], [19, -11], [15, -24], [-3, -26], [-12, -15]], [[30462, 5944], [-60, -2], [-120, 5], [-120, 20], [-31, 10], [-44, 32], [-14, 17], [-12, 21], [-1, 33], [32, 114], [59, 68], [56, 39], [174, 92], [23, 10], [159, 43], [62, 23], [97, 48], [534, 186], [122, 27], [55, -20], [31, -19], [-16, -22], [-72, -53], [-34, -32], [-87, -65], [-188, -109], [-133, -82], [-171, -113], [-40, -40], [-81, -95], [15, -42], [-27, -58], [-107, -28], [-61, -8]], [[37438, 6445], [36, -2], [146, 6], [146, -2], [89, -7], [26, -16], [23, -32], [26, -50], [24, -55], [27, -45], [16, -79], [25, -29], [43, -73], [6, -59], [-13, -128], [-21, -52], [-56, -50], [-64, 5], [-29, -2], [-28, -10], [-11, -7], [-4, -10], [74, -43], [9, -16], [1, -19], [-10, -13], [-10, -7], [-1573, -260], [-61, -14], [-61, -27], [-20, -23], [-20, -18], [-1219, -49], [-11, 3], [-11, 10], [-31, 50], [-6, 79], [7, 31], [61, 30], [23, 17], [103, 117], [53, 55], [25, 46], [13, -3], [47, -27], [35, -8], [68, 11], [67, 33], [29, 18], [29, -6], [5, -28], [12, -9], [162, 88], [147, 98], [144, 111], [73, 66], [18, 19], [12, 28], [-10, 28], [-13, 25], [-12, 10], [-12, 4], [-75, 18], [23, 29], [22, 35], [14, 39], [5, 47], [-3, 24], [3, 18], [34, 15], [23, 24], [16, 28], [-26, 9], [-12, 21], [23, 49], [21, 52], [21, 28], [56, 55], [163, 138], [59, 74], [17, 27], [386, 119], [63, 12], [121, 17], [56, 3], [158, -12], [74, -12], [128, -32], [189, -61], [71, -27], [71, -34], [68, -43], [67, -52], [13, -16], [6, -29], [2, -28], [-3, -27], [-18, -56], [-26, -39], [-311, -37], [-41, -15], [-22, -30], [-16, -30], [36, -11]], [[33407, 5562], [-11, -124], [1, -56], [-16, -45], [-28, -23], [-55, -39], [-40, -23], [-87, -38], [-400, 34], [-180, 31], [-75, 40], [-12, 18], [-23, 61], [-21, 19], [-159, -13], [-97, -19], [-17, -10], [-26, -38], [-14, -8], [-259, 81], [-273, 95], [-113, 49], [-39, 22], [-11, 15], [25, 19], [26, 12], [29, 9], [30, 1], [22, -7], [22, -14], [14, -51], [14, -8], [38, -14], [961, 7], [80, 2], [166, 15], [89, 21], [33, 29], [-80, 7], [-32, 22], [-27, 41], [-6, 38], [9, 28], [106, 14], [16, 10], [-28, 16], [1, 37], [63, 14], [25, 31], [124, 39], [196, -21], [47, -56], [-13, -36], [-9, -37], [-1, -57], [80, -8], [25, -21], [24, -26], [-29, -1], [-28, -6], [-23, -27], [-20, -35], [-14, -16]], [[30541, 11987], [-8, -70], [46, 25], [17, -5], [40, -26], [81, -151], [18, -48], [33, -139], [40, -105], [100, -183], [49, -100], [26, -58], [3, -78], [31, -22], [7, -32], [10, -107], [7, -124], [7, -238], [-4, -55], [-43, -89], [-18, -63], [-23, -42], [-27, -30], [-141, -125], [-17, -62], [-237, -53], [-134, -22], [-52, 24], [-53, 6], [-66, -8], [-191, -7], [-144, -18], [-19, 7], [-13, 23], [-14, 16], [-38, -3], [-31, 9], [-30, 19], [-33, 36], [-14, 21], [-8, 23], [64, 60], [33, 13], [33, 4], [67, -13], [67, -20], [147, -16], [204, -4], [56, 6], [67, 19], [62, 55], [-30, 21], [-31, 13], [-30, 3], [-30, -4], [-84, -34], [-65, -20], [-65, -12], [-69, 20], [-64, 56], [-2, 18], [220, 43], [20, 7], [40, 27], [13, 24], [6, 23], [-148, 40], [-31, -1], [-30, -7], [-67, 17], [-64, 47], [-59, 57], [-22, 5], [-21, -17], [-143, -150], [-12, -1], [-54, 11], [-68, 30], [-62, 10], [-40, -8], [-15, -12], [39, -34], [33, -30], [10, -24], [-101, -75], [-27, -10], [-43, 7], [-16, 9], [-31, 40], [-30, 10], [-65, -8], [-34, 3], [-34, 18], [-32, 26], [-30, 14], [-36, 29], [-26, 20], [-8, 29], [3, 28], [11, 16], [2, 15], [-8, 27], [5, 19], [12, 18], [54, 34], [65, 7], [63, -43], [42, -13], [19, -1], [7, 2], [5, 12], [-1, 22], [-12, 42], [-1, 29], [14, 24], [19, 9], [20, 6], [13, 3], [41, -15], [29, -16], [59, -46], [49, -32], [19, -3], [14, 11], [13, 18], [-59, 46], [-6, 30], [3, 26], [36, 15], [22, 2], [104, -27], [56, -9], [55, -3], [114, 31], [-61, 35], [-132, 30], [-25, 21], [-18, 34], [97, 31], [99, -1], [177, -40], [59, 19], [55, 58], [32, 15], [125, -5], [101, 27], [16, -3], [15, -8], [97, -97], [13, 5], [10, 19], [3, 34], [1, 34], [-3, 35], [-12, 22], [-16, -3], [-17, -10], [-28, 9], [-28, 18], [-29, 8], [-100, 11], [-71, 18], [-37, 14], [-34, 28], [-5, 31], [36, 71], [138, 76], [65, 25], [66, 6], [32, -5], [76, -32], [12, 2], [11, 8], [-73, 53], [-65, 41], [-33, 31], [-26, 12], [-109, 12], [-57, -31], [-27, -5], [-27, 3], [-160, 74], [-9, 8], [-23, 28], [-12, 21], [-7, 35], [3, 35], [5, 23], [24, 91], [13, 72], [-7, 59], [-25, 32], [-36, 22], [-33, 35], [-9, 24], [-6, 28], [-1, 36], [9, 32], [14, 34], [18, 17], [34, 17], [133, 39], [270, 49], [30, -25], [43, -52], [14, -21], [15, -104], [0, -29]], [[30787, 21504], [24, -4], [80, 57], [9, -3], [28, -29], [8, -12], [16, -25], [65, -118], [17, -48], [10, -56], [-26, 35], [-27, -20], [-13, -34], [-12, -36], [0, -26], [9, -23], [27, -19], [64, -7], [5, -7], [37, -141], [19, -32], [22, -25], [51, -72], [49, -77], [58, -74], [62, -57], [57, -42], [54, -53], [58, -73], [63, -54], [67, -37], [69, -32], [105, 13], [32, -4], [20, -23], [-20, -64], [-26, -51], [-35, -21], [-36, -8], [-34, 1], [-33, 10], [-31, -6], [-29, -21], [-31, -11], [-32, -2], [-31, -18], [-32, -13], [-32, 11], [-84, 51], [-55, 12], [-185, 20], [-59, 12], [-59, 18], [-31, 0], [-45, -11], [-35, 1], [-10, -11], [-41, 0], [-12, -13], [-66, -19], [-112, 29], [-28, 27], [-38, 58], [-13, -16], [-36, -25], [-36, -19], [-30, -2], [-28, 24], [-6, 12], [-6, 3], [-60, -34], [-66, 34], [-53, 21], [-84, 12], [-59, 43], [-109, -4], [-19, 14], [-7, 42], [6, 20], [23, 11], [6, 24], [24, -6], [30, -31], [9, 1], [20, 29], [30, 26], [11, 3], [54, -32], [22, 4], [32, 14], [5, 12], [5, 22], [9, 13], [28, 6], [27, -12], [3, -38], [-4, -41], [36, -11], [43, 1], [30, -15], [4, 25], [-48, 65], [-20, 40], [-26, 24], [-35, 12], [-28, 75], [1, 66], [-3, 64], [62, 36], [-14, 55], [21, 41], [25, 16], [24, -153], [18, -54], [-23, -11], [-47, 1], [27, -76], [43, -25], [37, -56], [1, -41], [20, -18], [50, -1], [34, 8], [16, 27], [19, 9], [33, -34], [57, -25], [15, -17], [11, -30], [0, -31], [3, -16], [17, 8], [23, 42], [12, 15], [14, 7], [8, 10], [1, 12], [-42, 31], [-220, 141], [-28, 56], [-18, 71], [1, 73], [16, 23], [39, 29], [72, 41], [84, 58], [10, 11], [-1, 37], [-10, 25], [-33, 18], [-35, 4], [-33, -1], [-33, -8], [-60, -39], [-34, 2], [-32, 21], [-24, 42], [-13, 57], [0, 36], [5, 33], [15, 35], [19, 14], [18, -2], [17, 8], [10, 12], [8, 16], [-3, 13], [-6, 12], [-27, 24], [-10, 23], [-23, 38], [12, 10], [41, 6], [28, -26], [26, -30], [16, 0], [15, 13], [33, 38], [28, 49], [25, 56], [21, 34], [23, 3], [69, -105]], [[27267, 65185], [73, -26], [59, 7], [28, 16], [-3, -16], [26, -40], [10, -3], [38, 20], [99, 8], [10, -11], [18, -39], [25, -24], [26, -18], [28, -5], [27, 8], [26, -4], [32, -37], [10, -5], [28, 10], [-8, -34], [48, -49], [36, -95], [25, -39], [28, -35], [23, -24], [25, -11], [79, 5], [18, -3], [17, -14], [15, -5], [9, 5], [151, -149], [48, -79], [30, -41], [63, -59], [25, -13], [14, 7], [-3, 14], [-18, 33], [-3, 12], [24, -11], [43, -67], [12, -24], [21, -23], [22, -17], [-11, -26], [-17, -3], [-34, 11], [27, -43], [5, -31], [12, -3], [19, 35], [11, 29], [48, -75], [25, -34], [-6, -20], [-2, -20], [28, 18], [11, -2], [10, -11], [12, -32], [26, -7], [27, 1], [55, -27], [51, -54], [49, -11], [49, -2], [24, -28], [11, -39], [-12, -27], [-7, -28], [18, -35], [-39, -15], [-6, -21], [2, -23], [8, -12], [23, 11], [33, -10], [51, -8], [35, 7], [71, -24], [21, -13], [42, -44], [19, -30], [42, -79], [35, -31], [31, -8], [11, 5], [10, -8], [9, -11], [8, -35], [-5, -37], [-17, -29], [-10, -22], [-44, -2], [-62, -10], [-60, -32], [-29, -26], [-14, -17], [-31, -15], [-2, 13], [0, 17], [-8, 31], [-7, -28], [-12, -21], [-19, -17], [-73, -1], [-29, 23], [-30, 17], [-109, 16], [-27, -1], [-73, -18], [-73, -9], [-31, -11], [-30, -16], [-59, 0], [-70, -18], [-70, -4], [45, 131], [95, 125], [17, 27], [13, 35], [3, 26], [-4, 23], [-23, 39], [-4, 29], [-7, 19], [-33, 17], [-33, 10], [-35, 0], [-73, 13], [-39, 1], [-33, 27], [-55, 96], [-26, 26], [-13, 22], [-10, 24], [-13, 140], [-11, 68], [-17, 58], [-25, 45], [-27, 15], [-101, -38], [-24, 5], [-23, 13], [-154, 91], [-63, 50], [-26, 25], [-22, 35], [-23, 58], [-25, 52], [0, -21], [-4, -14], [-129, -6], [-20, 12], [-13, 14], [-10, 21], [-7, 42], [-12, 35], [-4, -38], [-6, -34], [-17, -20], [-20, -3], [-24, 46], [-104, 10], [-9, 8], [-34, 44], [-30, 56], [29, 19], [60, 26], [13, 18], [8, 21], [-5, 33], [-12, 24], [-13, 14], [-13, 9], [-18, 4], [-232, 5], [-13, -17], [-21, -37], [-41, -46], [-28, -49], [-10, -25], [-12, -18], [-29, -30], [-24, -46], [-30, -21], [-16, 13], [-16, 0], [-11, -12], [-13, -5], [-59, -6], [-9, -11], [-8, -34], [-10, -64], [-9, -21], [-30, -8], [-28, -18], [-58, -62], [-15, -9], [3, 45], [-3, 44], [-16, 2], [-19, -7], [-15, -13], [-29, -32], [-14, -9], [-14, 17], [3, 21], [95, 79], [11, 6], [17, -6], [17, 3], [13, 22], [-16, 105], [6, 71], [22, 55], [45, 83], [21, 27], [219, 174], [22, 9], [142, 35], [22, 12], [66, 51], [69, 21], [73, -16]], [[55804, 98069], [28, -6], [153, 2], [30, -14], [11, -34], [24, -12], [32, -3], [81, -42], [28, -6], [24, 23], [19, 58], [0, 68], [-7, 33], [9, 21], [27, 8], [34, -2], [34, 12], [29, 21], [31, 3], [67, -16], [18, -13], [-18, -25], [-7, -37], [-31, -75], [66, -4], [93, 15], [24, 22], [50, 35], [53, -5], [25, 4], [13, 15], [5, 18], [29, -3], [40, -34], [19, -6], [34, 9], [13, 0], [34, -14], [157, -25], [54, -14], [24, -12], [23, -8], [167, 1], [118, -9], [43, -20], [37, -38], [14, -88], [-33, -24], [-239, -108], [-60, -35], [-29, -32], [-48, -70], [-24, -21], [-112, -34], [-26, -3], [-84, 16], [-25, -2], [-102, -36], [-36, -22], [-34, -27], [-51, -13], [-53, 7], [-237, 14], [-32, 20], [-26, 37], [47, 48], [-265, -18], [-292, 10], [-15, 6], [-13, 19], [-100, 12], [-75, 15], [-64, 26], [-62, 33], [20, 15], [20, 9], [54, 4], [48, -4], [85, 0], [20, 33], [34, 10], [27, 24], [-90, 15], [-94, 2], [-62, -20], [-73, -9], [-66, -1], [-127, 6], [-60, 14], [-83, 36], [-28, 21], [-11, 16], [-9, 24], [95, 21], [36, 17], [36, 24], [-142, 13], [-60, 19], [-59, 29], [48, 16], [192, 13], [51, -11], [50, -21], [56, -12], [53, 27], [-50, 12], [-46, 45], [-9, 22], [6, 17], [23, 3], [18, -7], [67, -42], [51, -14], [14, 39], [2, 19], [-9, 15], [-24, 28], [-21, 35], [33, 9], [33, -4], [70, -24], [71, -17], [32, -16], [61, -42], [56, -29]], [[54662, 97872], [15, -1], [14, 6], [10, 16], [11, 9], [71, -11], [99, -32], [30, -16], [41, -33], [34, -55], [-27, -40], [-35, -37], [-12, -21], [13, -30], [-6, -29], [-13, -26], [54, 29], [114, 94], [17, 6], [18, -3], [51, -19], [46, -48], [11, -16], [8, -20], [5, -24], [-3, -28], [-4, -19], [-25, -12], [-11, -12], [26, -1], [30, -15], [27, -31], [31, -13], [111, 11], [73, -17], [39, -52], [62, 12], [0, 27], [13, 12], [82, -9], [43, -13], [43, -27], [-74, -45], [61, -43], [103, -31], [61, -33], [12, -14], [10, -18], [-40, -24], [-41, -13], [-104, -2], [-93, -17], [-172, -12], [-26, -7], [-6, -7], [-10, -21], [-66, -47], [-64, -58], [-26, -35], [-20, -49], [-8, -29], [15, -29], [-4, -30], [-48, -23], [-31, 0], [-38, 4], [-38, -13], [-2, -20], [2, -28], [-9, -85], [-12, -65], [-18, -59], [-19, -33], [-25, -9], [-81, -5], [-62, -57], [-50, -100], [-26, -39], [-55, -62], [10, -22], [17, -24], [-30, -43], [-46, -48], [1, -19], [16, -34], [7, -35], [-35, -30], [-66, -16], [-66, 17], [-32, 21], [-30, 32], [-32, 22], [-33, 13], [-127, 72], [-117, 114], [-108, 45], [-69, 21], [-34, 20], [-33, 28], [-28, 31], [-27, 39], [-12, 24], [-3, 36], [9, 21], [12, 11], [85, 9], [31, -5], [30, -19], [27, -7], [63, 94], [357, 54], [115, 9], [115, 0], [-18, 25], [-15, 33], [-17, 7], [-87, -18], [-133, -19], [-65, 0], [-67, 13], [-67, -7], [-69, -28], [-69, -17], [-68, -7], [-143, 3], [-35, 14], [-48, 33], [-11, 17], [-10, 21], [-9, 63], [10, 17], [14, 9], [15, 6], [32, 1], [31, -11], [72, -36], [-17, 39], [208, 46], [96, 40], [49, 6], [50, -2], [-11, 21], [0, 20], [35, 16], [25, 7], [77, 8], [174, -2], [62, 11], [47, 28], [-50, -10], [-50, -2], [-23, 6], [-53, 24], [-24, 31], [68, 63], [24, 30], [-70, -5], [-23, -10], [-80, -58], [-60, -26], [-73, -12], [-73, 1], [-16, 8], [-22, 39], [-7, 20], [3, 11], [23, 31], [12, 34], [-2, 29], [-17, 5], [-27, -28], [-25, -39], [-33, -20], [-35, 6], [-15, 15], [-13, 23], [-13, 9], [-15, 0], [-31, -9], [-31, -18], [11, -25], [3, -29], [-14, -23], [-10, -28], [32, -17], [26, -28], [-39, -13], [-38, -18], [-34, -29], [-36, -23], [-56, -2], [-70, -12], [-141, -5], [-66, 37], [-12, 17], [-13, 12], [-44, 19], [-63, 57], [-50, 64], [-33, 6], [-49, 21], [-27, 19], [-25, 24], [-8, 29], [3, 26], [29, 12], [-69, 29], [-68, 39], [25, 13], [25, 6], [202, -46], [14, 6], [22, 23], [-8, 7], [-34, 5], [-46, 0], [-11, 5], [-18, 24], [-16, 30], [-6, 20], [-3, 23], [34, 35], [19, 32], [-29, 14], [-83, -1], [-28, -4], [10, -45], [-26, -31], [-51, -25], [-36, 12], [-28, 60], [-37, 41], [-14, 26], [-10, 38], [-15, 27], [-27, 33], [-3, 20], [3, 16], [20, 34], [-15, 28], [-19, 25], [-1, 14], [18, 18], [16, 6], [17, -2], [51, -21], [28, -25], [9, 2], [19, 38], [25, 8], [100, 12], [111, -48], [29, -10], [23, -4], [-12, 21], [-7, 28], [17, 10], [89, -24], [42, 1], [98, 33], [163, 16], [62, -25], [3, -14], [-2, -18], [-3, -5], [-36, -22], [-206, -17], [-134, -66], [183, 10], [33, -7], [14, -55], [13, -5], [48, -8], [32, -16], [32, -31], [34, -21], [21, 3], [7, 22], [-8, 27], [-5, 30], [3, 33], [5, 27], [39, 19], [56, 62], [59, 42], [66, -19], [62, -53], [55, -74], [53, -80], [60, -99], [29, -35], [27, -8], [121, -103], [13, -3], [-25, 78], [-62, 133], [-43, 102], [-9, 39], [-7, 54], [3, 16], [5, 14], [31, 59], [40, 28], [-12, 40], [10, 31], [42, 24], [39, 2], [38, -19], [73, -65]], [[52675, 75392], [14, -37], [31, -151], [3, -32], [-6, -34], [-8, -23], [-31, -76], [5, -63], [11, -39], [2, -43], [-6, -54], [-19, -328], [-9, -58], [-6, -50], [-21, -16], [-28, 17], [-34, 28], [-16, -2], [-16, -10], [-13, 9], [-13, 16], [-9, -113], [-16, -46], [-23, -29], [-23, -2], [-23, 10], [-19, 0], [-15, 21], [-12, 38], [-18, 47], [-19, 55], [-2, 49], [-3, 109], [5, 24], [8, 23], [4, 49], [-3, 43], [6, 15], [11, -15], [8, 5], [-1, 22], [3, 40], [-15, 34], [-24, 11], [-2, 35], [2, 35], [13, 23], [4, 30], [1, 94], [-18, 34], [-6, 52], [-9, 33], [-16, 34], [-18, 27], [-12, 26], [-2, 69], [6, 58], [6, 24], [6, -3], [18, -29], [15, -6], [29, -7], [29, 9], [35, 26], [34, 31], [49, 93], [30, 18], [16, 25], [5, 33], [13, 8], [15, -32], [19, -3], [29, -26], [12, -26], [11, -30], [10, -13], [11, -8], [2, -7], [-9, -7], [-10, -35], [6, -10], [16, -19]], [[52633, 76500], [-7, -84], [5, -25], [10, -18], [5, -19], [8, -225], [-2, -18], [-34, -91], [-7, -26], [-2, -113], [-6, -30], [-12, -30], [-21, -96], [-19, -43], [-51, 53], [-30, 22], [-14, 25], [-10, 17], [6, 23], [14, 23], [2, 19], [-32, 21], [-15, 14], [0, 24], [11, 38], [-5, 32], [-18, -2], [-15, 5], [-1, 17], [10, 21], [14, 27], [-1, 30], [-16, 13], [-15, 25], [-6, 33], [12, 23], [18, 15], [-13, 34], [-10, 1], [-7, 7], [6, 16], [14, 24], [21, 71], [28, 33], [50, 22], [14, 9], [12, 25], [14, 16], [16, -2], [16, -9], [9, -11], [8, 11], [6, 31], [-4, 27], [2, 75], [9, 42], [15, 3], [13, -24], [-1, -20], [5, -49], [1, -32]], [[54326, 73859], [-19, -66], [-9, -25], [-67, -160], [-7, -37], [-5, -40], [-7, -35], [-9, -34], [-9, -42], [1, -48], [4, -23], [8, -16], [13, -14], [10, -22], [-16, -21], [18, -40], [14, -24], [2, -24], [0, -24], [-30, -46], [-12, -24], [-8, -31], [-3, -31], [3, -28], [-1, -28], [-30, 4], [-32, 17], [-31, -8], [-45, 33], [-16, 5], [-15, 13], [-38, 100], [-30, 43], [-32, 33], [-33, 2], [-33, -4], [-29, 20], [-59, 68], [-63, 55], [-27, 35], [-12, 24], [-14, 16], [-36, 16], [-33, 37], [-14, 2], [-32, -4], [-16, 2], [-16, 13], [-32, 44], [-20, 60], [-5, 26], [14, 69], [17, 65], [15, 19], [17, 13], [11, 20], [9, 23], [32, -68], [15, -17], [14, 4], [26, 24], [2, 27], [29, 35], [36, 0], [17, -6], [9, -31], [14, -9], [16, -5], [53, -59], [15, -9], [15, -2], [41, 25], [31, 9], [66, -13], [36, 15], [25, 1], [36, 23], [28, 38], [15, 9], [15, 3], [38, -2], [38, -9], [16, 9], [13, 25], [16, 11], [17, -8], [44, 43], [19, 2], [18, -16], [-16, -27]], [[35352, 92133], [93, -47], [98, -32], [9, -15], [8, -22], [2, -12], [-3, -11], [-6, -10], [7, -12], [21, -16], [2, -19], [-25, -31], [-34, -35], [-183, -72], [-64, -13], [-160, -49], [-49, 2], [-11, 2], [-30, 22], [-42, 20], [-19, 16], [-17, 23], [7, 14], [30, 5], [44, 0], [65, 16], [-18, 15], [-17, 9], [-12, 19], [-27, -3], [-20, 11], [-38, 7], [-101, 7], [-66, 19], [-20, 11], [-17, 20], [-15, 28], [22, 109], [15, 27], [34, 9], [84, -24], [11, 11], [-92, 40], [-33, 23], [-10, 19], [-6, 28], [0, 16], [4, 16], [8, 17], [23, 22], [92, 35], [102, -12], [175, -43], [22, -10], [54, -37], [103, -113]], [[14667, 81013], [138, -72], [138, -35], [102, -42], [62, -13], [22, -9], [15, -15], [17, -36], [29, -85], [23, -55], [46, -94], [37, -67], [8, -27], [-8, -8], [1, -16], [28, -65], [52, -59], [41, -28], [86, -45], [53, -45], [16, -30], [23, -30], [9, -21], [19, -76], [35, -73], [36, -139], [7, 11], [4, 42], [4, 9], [8, 5], [7, -17], [6, -36], [23, -87], [-7, -26], [-7, -2], [-31, 11], [-10, -15], [-15, -32], [-10, -13], [-6, 6], [-90, 31], [-55, 29], [-72, 45], [-87, 47], [-50, 33], [-41, 33], [-29, 29], [-5, 24], [1, 11], [56, 77], [23, 42], [9, 31], [5, 34], [-3, 41], [-3, -3], [-5, -40], [-8, -34], [-10, -28], [-6, -9], [-67, -14], [-54, 4], [-27, -33], [-8, -4], [-15, 11], [-33, 44], [-47, 36], [5, 9], [31, 19], [16, 26], [-3, 5], [-11, -2], [-10, 6], [-19, 34], [-10, 10], [-23, -16], [-10, -1], [-9, 23], [13, 53], [1, 13], [-24, -20], [-8, 7], [-7, 17], [-7, 7], [-19, -3], [-21, 15], [-7, -6], [-3, -23], [-7, -6], [-31, 39], [-8, 1], [-15, -29], [-5, -2], [-9, 13], [-4, 71], [2, 21], [4, 7], [28, 16], [79, 18], [7, 13], [-60, -7], [-15, 10], [-17, 24], [-17, 0], [-9, 8], [-10, 18], [-25, 64], [-17, 17], [-29, 10], [-15, 12], [-6, -5], [-6, -19], [-9, -11], [-19, -7], [-19, 5], [-14, 18], [-8, 22], [-4, 25], [8, 33], [0, 14], [-3, 15], [-7, 12], [-9, 10], [-5, -5], [-1, -20], [-5, -14], [-17, -11], [-13, 19], [-9, 27], [-11, 19], [-57, 0], [-27, -25], [-13, -2], [-13, 6], [-2, 13], [12, 35], [-3, 47], [-3, 12], [-27, 7], [-4, 12], [15, 57], [9, 11], [12, 4], [53, 4], [17, -8], [26, -34], [-1, 13], [-9, 39], [-2, 24], [18, 26], [-17, 8], [-63, 6], [1, -17], [5, -24], [-37, -21], [-28, -4], [-26, 4], [-21, 12], [-37, 51], [-23, 51], [1, 27], [13, 29], [16, 19], [39, 18], [51, 1], [57, -23], [143, -104]], [[30012, 63203], [34, -14], [15, 12], [12, 10], [8, 34], [11, 31], [14, 17], [17, 10], [32, -1], [44, -27], [13, 1], [43, 24], [35, 14], [34, -16], [13, -21], [28, -33], [14, -10], [43, 1], [12, -3], [37, -55], [30, -22], [18, -1], [32, 21], [16, -1], [18, -47], [4, -67], [15, -61], [24, -39], [115, 16], [25, -32], [-8, -27], [-17, -14], [-54, 6], [-24, -3], [-5, -26], [0, -25], [32, -6], [31, -12], [32, -20], [33, -13], [36, -9], [36, -14], [61, -49], [66, -109], [18, -25], [12, -34], [-6, -43], [-24, -69], [-13, -22], [-20, -14], [-13, -28], [-13, -49], [-8, -4], [-9, 2], [-16, 28], [-12, 42], [-32, 39], [-38, -5], [-56, 24], [-34, -12], [-34, -2], [-35, 12], [-35, 4], [-35, -15], [-34, -25], [-12, -17], [-22, -39], [-12, -15], [-82, -20], [-24, 29], [-22, 40], [-32, 5], [-46, -30], [-28, -11], [-12, -14], [-3, -14], [0, -56], [-7, -33], [-45, -127], [-25, -90], [-10, -28], [-12, -6], [-23, 52], [-14, 19], [-17, 9], [-7, 27], [0, 39], [-5, 38], [-10, 29], [-16, 20], [-23, 46], [-26, 38], [-16, 15], [-16, 10], [-123, -5], [-14, -7], [-11, -12], [-11, -6], [-34, -12], [-34, -2], [-79, 31], [-31, 16], [-31, 10], [-36, -3], [-36, -10], [-29, -22], [-21, -40], [-4, -36], [-13, -10], [-29, 59], [-27, 41], [-30, 31], [-62, 45], [-12, 27], [-5, 32], [26, 101], [28, 19], [16, 3], [35, -12], [35, -23], [31, -15], [49, -6], [27, -25], [187, -38], [35, -12], [14, 4], [12, 15], [10, 27], [12, 21], [56, 4], [11, 9], [8, 29], [0, 29], [-33, 40], [-51, 86], [-45, 103], [20, 34], [-8, 63], [8, 58], [10, 57], [-44, 49], [-53, 49], [-73, 15], [-22, 13], [-12, 36], [11, 49], [23, 28], [27, 16], [28, 12], [67, 14], [67, -16], [57, -50], [59, -40], [73, -13]], [[36214, 51711], [26, -3], [37, 11], [24, 27], [28, 5], [27, -3], [92, -30], [55, -9], [20, -9], [20, -14], [14, -15], [4, -32], [-14, -51], [-10, -53], [-9, -75], [-7, -16], [-12, 4], [7, -67], [-2, -27], [-6, -26], [-15, -54], [-22, -69], [-7, -14], [-17, -24], [-14, -31], [3, -29], [7, -29], [-8, -36], [-27, -53], [-16, -13], [-14, -6], [-14, 6], [-23, 53], [-3, -42], [-6, -42], [-8, -24], [-31, 3], [-17, 23], [-28, 25], [-5, -69], [-18, -47], [-17, -15], [-27, -10], [-16, -20], [-30, 16], [-27, 31], [-16, 3], [-12, -25], [-63, -5], [-29, -26], [-18, 8], [-26, 52], [-5, 34], [-15, 70], [-14, 84], [-10, 75], [8, 66], [17, -3], [20, -9], [4, 4], [1, 21], [-4, 18], [-32, -3], [-21, 39], [-3, 60], [4, 124], [2, 26], [15, 36], [4, 31], [-3, 34], [6, 61], [13, 52], [52, 67], [59, 24], [172, -65]], [[49136, 85550], [2, -47], [-3, -15], [-7, -17], [-21, -33], [-55, -47], [-101, -108], [-60, -54], [-8, -26], [-4, -36], [35, -7], [14, -12], [-8, -18], [-53, -63], [-16, -58], [41, 2], [33, 11], [67, 36], [62, 27], [30, 1], [59, -21], [13, -1], [25, 10], [25, 1], [170, -6], [47, 12], [32, -15], [26, -37], [25, -68], [-1, -11], [-15, -31], [-28, -39], [-24, -54], [-7, -29], [-4, -32], [-8, -29], [-47, -138], [-47, -76], [-20, -55], [-26, -43], [-24, -27], [-26, -18], [-76, -20], [-21, -13], [-25, -24], [-27, -12], [31, 2], [31, 13], [56, 5], [65, -46], [-6, -37], [-26, -30], [-59, -5], [-55, -65], [-25, -20], [-26, -10], [-33, 3], [-60, 17], [-26, 18], [24, -29], [26, -16], [156, -37], [9, 4], [49, 39], [66, 0], [126, -71], [36, -55], [52, -78], [28, -31], [21, -28], [12, -41], [25, -138], [27, -134], [37, -146], [16, -40], [22, -28], [110, -66], [24, -21], [43, -63], [41, -67], [38, -51], [41, -41], [-20, -22], [-14, -34], [11, -46], [16, -44], [33, -71], [30, -77], [-11, 12], [-11, 6], [-16, -1], [-15, 3], [-28, 24], [-27, 30], [-53, -12], [-29, 5], [-26, 0], [49, -17], [53, -2], [117, -129], [40, -76], [23, -101], [-16, -46], [-25, -29], [-23, -34], [-22, -38], [65, -56], [14, 2], [15, 8], [13, 19], [24, 46], [12, 16], [40, 6], [34, -3], [34, -10], [30, 3], [60, -20], [30, -18], [77, -80], [16, -44], [8, -57], [1, -63], [-13, -58], [-15, -52], [-9, -67], [-6, -25], [-9, -18], [-41, -54], [-27, -21], [-11, 9], [-12, -1], [-1, -13], [12, -27], [1, -33], [-24, -24], [-25, -10], [-40, 13], [-57, -45], [41, -23], [8, -25], [-10, -43], [-25, -20], [-29, -8], [-29, -2], [-24, -11], [-23, -20], [29, 11], [20, -10], [13, -36], [11, -11], [57, -15], [34, 0], [68, 9], [32, -1], [12, -6], [0, -30], [-5, -75], [-9, -15], [-89, -62], [-19, -44], [-5, -26], [-52, 4], [-24, -27], [-43, -19], [-32, -20], [-32, -25], [-27, -7], [-113, 30], [-69, -3], [-93, -26], [-24, 5], [-35, 24], [-37, 17], [-42, 7], [-37, 23], [23, -44], [-51, -42], [-23, -8], [-24, 1], [-50, -12], [-46, 6], [7, -30], [12, -26], [-9, -11], [-11, -3], [-87, 20], [-13, -4], [-10, -18], [-32, 9], [-31, 31], [-33, 21], [-34, 10], [-28, -4], [-112, -48], [-23, -49], [-11, -69], [-16, -61], [-27, -47], [-31, -7], [-30, 33], [-56, 36], [-20, 25], [-6, 1], [-6, -9], [-22, -11], [-23, 0], [-35, -10], [-62, -29], [-25, -20], [-53, -55], [-11, -15], [-19, -55], [-30, -10], [-27, 35], [-31, 13], [-32, -13], [-20, -18], [-9, 15], [-1, 31], [24, 38], [64, 28], [55, 74], [28, 45], [10, 25], [14, 16], [17, 6], [9, 28], [77, 112], [7, 25], [4, 46], [6, 44], [63, 29], [30, 93], [8, 7], [88, 17], [65, -1], [65, -18], [33, -2], [33, 7], [26, 25], [45, 90], [25, 40], [29, 36], [27, 41], [44, 76], [-30, -26], [-36, -42], [-20, -24], [-66, -24], [-28, -25], [-50, -56], [-9, -5], [-75, 14], [-56, 72], [-35, 30], [-15, 4], [-15, -9], [-33, -9], [-33, 1], [17, 34], [23, 19], [-51, 13], [-15, 10], [-16, 23], [-40, 4], [-19, -6], [-33, -31], [-51, -33], [-62, 46], [-12, 20], [0, 39], [-9, 31], [-17, 10], [22, 40], [26, 27], [58, 27], [89, 62], [49, 27], [46, 46], [19, 28], [14, 39], [13, 47], [20, 39], [-19, 9], [-9, 29], [3, 29], [8, 26], [-7, 33], [-14, 34], [1, 26], [3, 29], [-35, -2], [-36, -9], [-32, -20], [-31, -27], [-27, -5], [0, 22], [12, 27], [31, 38], [34, 32], [12, 25], [9, 28], [17, 23], [44, 43], [83, 48], [13, 3], [33, -6], [32, 7], [28, 18], [29, 4], [63, -51], [-19, 78], [28, 18], [41, -70], [15, -7], [32, 10], [-13, 12], [-14, 1], [-19, 10], [-15, 23], [-27, 71], [2, 42], [17, 44], [20, 41], [-16, 8], [-14, 15], [-3, 41], [5, 35], [35, 32], [10, 48], [5, 53], [-6, 24], [-35, -4], [-17, -10], [-15, -16], [-16, 1], [-43, 59], [-25, 44], [-44, 93], [-6, 56], [35, 120], [55, 77], [64, 27], [-12, 5], [-98, 1], [-33, -10], [-30, -31], [-17, -10], [-17, -3], [-17, -16], [-15, -22], [-17, -14], [-33, 4], [-16, -5], [-11, 13], [-9, 21], [-13, 5], [-14, -6], [-29, -28], [-30, -17], [-36, 18], [-48, 33], [-9, -12], [-11, -31], [-6, -47], [-33, 41], [-29, 56], [-10, 34], [0, 39], [15, 16], [17, -14], [25, 93], [50, 121], [18, 35], [12, 46], [-2, 31], [-11, 25], [-46, 58], [0, 48], [5, 53], [13, 32], [5, 6], [62, -1], [-24, 17], [-48, 48], [1, 17], [11, 45], [-5, -5], [-10, -20], [-20, -50], [-12, -12], [-34, -12], [-6, -24], [-6, -7], [-17, -2], [-5, -23], [-4, -2], [-5, 25], [0, 41], [7, 38], [13, 29], [49, 67], [-24, -21], [-55, -62], [-28, -40], [-7, -14], [-3, -12], [0, -13], [13, -72], [-4, -33], [-47, -219], [-9, -22], [-8, -11], [-8, -3], [-23, 4], [-11, 17], [0, 18], [5, 28], [19, 104], [9, 29], [13, 27], [27, 47], [0, 3], [-19, -9], [-8, 3], [-5, 9], [3, 139], [15, 46], [6, 67], [13, 57], [15, 42], [12, 53], [17, 24], [5, 36], [19, 39], [15, 41], [-8, -4], [-96, -106], [-25, -20], [-33, 5], [-26, 12], [-20, 26], [-9, 48], [-24, 1], [-21, 9], [0, 6], [27, 27], [44, 9], [41, 42], [-37, 29], [3, 9], [32, 24], [40, 82], [9, 75], [-20, 35], [-7, 23], [-38, 26], [-7, 33], [5, 18], [12, 18], [19, 14], [30, 14], [-27, 14], [-10, 17], [-8, 24], [0, 15], [14, 63], [8, 26], [16, 33], [72, -2], [8, 15], [8, 1], [37, -14], [-6, 15], [-60, 79], [-5, 15], [17, 42], [1, 19], [-2, 21], [5, 15], [19, 8], [58, -1], [14, 7], [-6, 21], [-14, 27], [-2, 22], [3, 20], [1, 41], [2, 17], [14, 27], [11, 8], [15, 5], [32, -9], [12, -11], [14, -26], [10, 3], [40, 27], [12, 4], [16, -32], [68, 26], [91, 11], [55, 17], [58, 6], [54, 19], [57, -9], [2, -11], [-3, -15], [-14, -42]], [[48005, 83557], [22, -5], [20, 19], [23, 59], [16, 3], [18, -4], [35, 7], [62, 27], [28, 1], [39, -14], [29, 0], [26, -42], [14, -66], [32, -66], [43, -57], [1, -34], [-15, -19], [-32, -23], [1, -25], [20, 13], [18, 5], [44, -5], [15, -26], [10, -37], [6, -31], [-4, -34], [-11, 11], [-12, 30], [-13, 14], [-16, 7], [7, -41], [-3, -56], [7, -5], [21, -1], [-14, -56], [-28, -16], [-33, -6], [-8, -20], [-6, -26], [-17, -38], [-22, -22], [-28, 4], [-28, 18], [12, -21], [5, -21], [-20, -7], [-22, 4], [-10, -14], [-1, -26], [8, -34], [14, -24], [11, -55], [10, -60], [14, -37], [3, -45], [-2, -22], [3, -40], [-6, -14], [4, -38], [18, -78], [7, -43], [5, -94], [-12, -36], [-16, -33], [-11, -40], [-8, -43], [-5, -70], [-36, -81], [-15, -20], [-18, -13], [39, -56], [-32, -26], [-34, -8], [-38, 14], [-23, -1], [-22, -19], [-8, -11], [-7, 6], [-14, 46], [-11, -48], [-22, -15], [-37, 3], [-62, -13], [-24, -14], [-10, -21], [-8, -25], [-10, -14], [-11, -8], [-48, -18], [-9, -8], [-23, -40], [-29, -23], [-24, -7], [-21, 23], [-9, 14], [-10, 8], [-33, -2], [10, -7], [7, -16], [3, -32], [-4, -31], [-16, -15], [-19, -3], [-31, -32], [-41, -9], [-22, -30], [-134, -50], [-7, 0], [-19, 13], [-20, 5], [-20, -4], [-56, -28], [-28, 6], [35, 69], [47, 35], [5, 10], [-16, 4], [-88, -24], [-31, -21], [-31, -6], [14, 32], [40, 43], [21, 21], [14, 8], [14, 25], [42, 29], [-135, -59], [-35, 7], [-8, 16], [-28, -7], [-10, 40], [40, 61], [24, 26], [29, 14], [27, 20], [10, 25], [-13, 8], [-82, -6], [-39, 5], [2, 20], [8, 22], [40, 37], [22, 6], [20, -4], [19, -9], [15, -13], [46, 8], [-19, 23], [-3, 49], [-15, 16], [19, 22], [21, 14], [36, 47], [13, 7], [71, 11], [76, 24], [76, 34], [-39, 19], [-19, 25], [-30, -51], [-21, -19], [-61, -10], [-19, 6], [-27, 15], [-9, -6], [-8, -12], [-40, -24], [-42, -6], [49, 45], [62, 76], [14, 25], [20, 42], [-6, 18], [-13, 11], [45, 87], [16, 15], [29, 3], [22, 14], [9, 0], [8, 5], [19, 26], [-29, 16], [-29, 9], [-92, -9], [-12, 2], [-12, 8], [-7, 11], [-6, 30], [-6, 6], [-21, 0], [-20, -9], [-15, 1], [-14, 13], [23, 30], [-29, 7], [-29, -6], [-25, 9], [0, 19], [11, 19], [-15, 18], [-3, 23], [16, 11], [16, -4], [35, 17], [43, 8], [-37, 16], [-15, 14], [-1, 22], [3, 18], [44, 32], [46, 13], [-4, 21], [4, 22], [-47, 7], [-46, -16], [5, 43], [11, 38], [2, 25], [-2, 27], [-22, -11], [-3, 38], [-9, 26], [-32, -18], [1, 35], [9, 24], [17, 11], [17, -5], [30, 0], [30, 19], [43, 4], [69, -5], [47, -52], [12, 9], [19, 33], [9, 3], [71, -14], [44, -18], [12, 6], [-7, 35], [-15, 25], [19, 33], [23, 22], [16, 11], [36, 14], [15, 13], [11, 42], [16, 35], [-90, -18], [-85, 41], [14, 29], [18, 17], [31, 13], [3, 15], [15, 13], [26, 33], [-9, 43], [5, 32], [19, 21], [6, 30], [8, 22], [38, 8], [37, 20], [13, -2], [43, 5], [15, -8], [-4, 36], [27, 4], [10, -7], [5, -25], [12, -17], [3, -28], [-8, -22], [-13, -17], [12, -17], [-19, -31], [21, 13], [29, 31], [-1, 25], [-5, 31], [-9, 28], [4, 31], [17, 20], [43, 10], [-18, 35], [16, 3], [18, -7], [25, -28], [26, -21], [28, -17], [-27, -35], [-32, -23], [-13, -26], [11, -21]], [[0, 91580], [56, -25], [56, -20], [23, 6], [12, -2], [32, -35], [21, -16], [113, -41], [51, -45], [42, -52], [-21, 10], [-38, 34], [4, -39], [12, -27], [61, -26], [64, -20], [40, -24], [14, -21], [8, -38], [-10, -33], [37, 12], [35, 30], [-18, 23], [-117, 81], [-25, 27], [34, -14], [158, -103], [43, -39], [-18, -8], [-13, -23], [14, -10], [19, 8], [31, 4], [31, -13], [35, -27], [73, -32], [434, -254], [10, -44], [12, -21], [7, -26], [2, -43], [-39, -51], [61, 5], [9, 6], [16, 21], [17, 14], [24, -17], [19, -34], [-6, -46], [-17, -38], [-2, -63], [15, -54], [15, -22], [13, -26], [3, -76], [-27, -34], [-15, -59], [17, -6], [52, -5], [18, -11], [30, -27], [7, -26], [7, -36], [9, -34], [7, -16], [8, 3], [30, 46], [14, 14], [34, 12], [19, -53], [-13, -88], [11, 0], [8, 10], [11, 23], [15, 14], [19, 32], [16, 39], [-19, 31], [-21, 20], [-51, 10], [-26, 24], [-10, 29], [26, 12], [22, 21], [15, 52], [-4, 28], [-6, 27], [-12, 39], [-19, 23], [-36, 11], [-16, 22], [-25, -1], [-25, 6], [-9, 8], [1, 16], [28, 7], [157, 2], [57, 22], [25, -6], [26, -16], [94, -21], [-3, -10], [-16, -10], [-27, -46], [-6, -26], [-1, -34], [24, -6], [24, 14], [-12, 27], [-3, 33], [10, 14], [13, 3], [24, -24], [27, -8], [89, -10], [26, 3], [8, 13], [-18, 14], [-116, 33], [-2, 17], [108, -22], [48, -20], [48, -15], [67, 5], [66, -24], [63, -65], [58, -82], [59, -49], [61, -36], [103, -99], [13, -8], [10, -14], [-19, -16], [-17, -25], [34, 17], [33, 12], [17, -3], [15, -12], [10, -21], [5, -20], [-14, -18], [99, -4], [30, -12], [14, -49], [-28, -34], [-17, 5], [-16, 14], [-15, 1], [-44, -14], [-67, -46], [-38, -37], [-7, -24], [6, -65], [-5, -31], [-29, -20], [-64, 12], [-29, 13], [-33, 17], [-31, 24], [-41, 39], [-12, 4], [-8, -10], [13, -24], [28, -31], [47, -40], [22, -45], [-14, -23], [-18, -5], [-13, 1], [-41, 14], [-29, 3], [-90, -13], [-32, -8], [-11, 7], [-3, 19], [-48, 15], [-29, 2], [-13, 6], [-11, 21], [-32, 30], [-48, 11], [-31, 2], [-17, -7], [63, -39], [56, -67], [-11, -13], [-7, -14], [31, -1], [21, 4], [5, -17], [-16, -71], [-11, -15], [-98, -16], [25, -12], [25, -3], [29, 3], [26, -13], [17, -44], [3, -46], [-25, -27], [-27, -21], [-53, -33], [-56, -14], [-29, 3], [-28, -7], [-19, -17], [-5, -17], [24, 11], [28, -6], [27, -21], [-3, -17], [-26, -18], [-5, -14], [9, -24], [-3, -20], [13, -11], [30, -4], [36, -14], [36, -20], [14, -16], [12, -24], [4, -24], [-6, -11], [-82, -4], [-12, 3], [-5, 28], [-10, 22], [-31, 16], [-12, -11], [9, -79], [-12, -24], [-14, -18], [-41, -10], [-33, 6], [-28, 37], [0, 32], [19, 19], [0, 26], [-6, 30], [-18, -35], [-23, -29], [-35, -37], [-18, -4], [-17, 4], [-47, 26], [-29, 23], [-56, 74], [-32, 34], [-70, 46], [-72, 34], [-57, 22], [-31, -3], [-30, -9], [-39, 5], [-13, 8], [-11, 19], [-11, 10], [-54, 46], [-38, 37], [-2, 25], [8, 30], [-7, 73], [-18, 69], [-48, 68], [-126, 44], [-104, 31], [-37, 7], [-33, -6], [-87, -57], [-59, -8], [-170, -3], [-28, 6], [-26, 24], [-6, 33], [8, 59], [-1, 25], [-7, 9], [-9, -1], [-33, 24], [-31, 40], [-25, 41], [-16, 56], [22, 3], [31, -14], [5, 13], [10, 51], [21, 24], [9, 18], [14, 68], [2, 49], [-24, -26], [-39, -68], [-18, -20], [-14, -9], [-13, -4], [-30, 13], [-22, 17], [-1, 65], [-10, 17], [-10, -12], [-4, -24], [-28, -4], [-13, -10], [7, -39], [-3, -33], [-27, -13], [-53, -7], [-19, 32], [-16, -45], [-12, -51], [-2, -67], [17, -56], [25, -27], [53, -40], [23, -28], [6, -37], [-2, -33], [-28, -42], [-18, -34], [-33, -81], [-19, -33], [-82, -69]], [[0, 89324], [0, 2256]], [[45682, 89993], [32, -3], [52, 20], [22, 13], [53, 45], [32, 13], [49, -3], [23, 3], [1, -5], [-30, -18], [-24, -6], [-35, -27], [-32, -62], [-25, -30], [1, -13], [29, -24], [32, -13], [30, 12], [13, -5], [12, -17], [6, -18], [2, -17], [-6, -36], [-17, -37], [-24, -30], [3, -10], [19, -5], [92, 20], [10, -1], [5, -10], [1, -19], [5, -16], [9, -15], [-3, -15], [-40, -48], [48, 30], [37, 9], [65, -15], [26, -18], [15, -30], [23, 10], [9, -1], [15, -17], [0, -18], [-10, -27], [-4, -24], [-11, -10], [-21, -7], [-6, -9], [9, -18], [14, -18], [19, -1], [3, -9], [1, -10], [-3, -12], [-6, -8], [-10, -4], [-13, -13], [48, -29], [6, -10], [1, -16], [-4, -17], [-8, -18], [-15, -11], [-34, -2], [-22, -12], [7, -20], [0, -26], [-6, -29], [-28, -46], [-26, -24], [-25, -15], [-45, 5], [-24, 12], [2, -39], [-25, -24], [5, -20], [9, -10], [-5, -26], [-11, -26], [-20, -27], [-23, -17], [-45, -21], [-38, -35], [-26, -14], [-65, 1], [-67, -22], [-93, -47], [-64, -38], [-48, -43], [-65, -69], [-48, -30], [-27, -7], [-54, -7], [-45, -19], [-150, -35], [-50, -19], [-7, -18], [-21, -27], [-1, -9], [9, -8], [2, -9], [-19, -32], [-37, -22], [-17, 0], [-21, 20], [-10, -1], [-3, -3], [0, -6], [12, -24], [-23, -10], [-97, -28], [-166, 20], [-65, 22], [-81, 33], [-49, 9], [-68, 2], [-56, 47], [-26, 29], [-2, 12], [3, 14], [5, 9], [9, 5], [19, 0], [2, 5], [-14, 23], [-14, -8], [-36, -33], [-16, 2], [-21, 16], [-1, 16], [-41, 6], [-36, 20], [-36, 28], [-5, 11], [17, 16], [-3, 3], [-13, 3], [-26, -5], [-39, -36], [-17, -9], [-257, -8], [-65, -4], [-13, -5], [-11, 23], [-10, 53], [-4, 34], [3, 17], [9, 20], [14, -4], [13, -15], [12, -23], [14, -11], [89, 28], [37, 18], [15, 18], [18, 29], [20, 16], [9, 14], [18, 46], [13, 21], [14, 16], [18, 10], [40, 7], [-27, 11], [-24, 0], [-85, -48], [-28, 0], [1, 7], [12, 14], [29, 24], [-20, 1], [-8, 11], [-1, 22], [15, 37], [69, 47], [24, 7], [7, 10], [-9, 7], [-14, 5], [-70, -49], [-50, -17], [-15, 3], [-26, 19], [-8, 9], [-12, 22], [2, 13], [24, 38], [-4, 8], [-17, 3], [-44, 36], [-71, -4], [-174, 21], [-36, -9], [-59, -30], [-36, -10], [-16, 6], [-15, 16], [-14, 22], [-12, 27], [5, 19], [23, 11], [17, 5], [47, -6], [58, 19], [37, 4], [10, 3], [22, 20], [11, 5], [16, -7], [8, -14], [59, 22], [20, 10], [2, 7], [9, 8], [28, -12], [24, 0], [29, 8], [52, 3], [115, 2], [18, 18], [8, 15], [10, 39], [-4, 8], [-73, -36], [-16, 1], [-84, 19], [-30, 21], [10, 18], [44, 37], [46, 30], [67, 32], [16, 13], [2, 15], [-45, 26], [-85, -7], [-22, 31], [-70, 19], [-47, -12], [-25, 19], [-61, -26], [-134, -38], [-54, -27], [-28, -8], [-33, 21], [-57, 25], [-64, 7], [-6, 14], [37, 44], [26, 8], [26, -4], [49, -30], [34, -10], [-43, 45], [1, 17], [-3, 26], [-13, 11], [-13, 29], [5, 9], [17, 4], [34, -10], [82, -50], [40, 9], [22, 18], [29, 14], [-8, 7], [-70, 1], [-38, 10], [-19, 14], [-17, 25], [6, 11], [20, 10], [60, -3], [-40, 43], [-27, 24], [-3, 12], [2, 15], [3, 10], [6, 5], [69, -25], [15, -1], [-14, 16], [-30, 24], [-2, 9], [13, 7], [6, 14], [1, 11], [21, 9], [21, 1], [21, -9], [66, -46], [10, -13], [3, -17], [-3, -22], [2, -8], [26, 7], [21, -9], [10, 2], [26, 32], [17, -7], [11, -15], [3, -14], [2, -18], [-5, -39], [1, -5], [18, 22], [31, 1], [4, 11], [1, 41], [-3, 34], [-3, 7], [-101, 48], [-17, 11], [-22, 24], [5, 11], [19, 11], [30, 4], [68, -1], [7, 5], [-13, 13], [-32, 8], [-7, 7], [-4, 14], [-38, -8], [-42, 0], [-40, 8], [-1, 11], [16, 15], [33, 26], [15, 7], [46, -5], [46, 8], [37, -9], [29, -26], [42, -45], [57, -29], [5, -9], [30, -24], [60, -63], [60, -37], [3, -10], [-10, -11], [-23, -13], [5, -7], [31, -9], [21, -25], [2, -11], [-20, -78], [-10, -16], [-13, -9], [-56, 15], [14, -25], [40, -26], [9, -15], [-6, -14], [4, -4], [15, 8], [6, -8], [-3, -24], [-6, -20], [-10, -16], [3, -7], [16, 2], [14, -4], [23, -22], [19, -67], [9, -21], [7, 19], [8, 49], [8, 25], [7, 1], [7, 8], [5, 15], [11, 55], [38, 41], [18, 12], [16, 3], [9, -5], [28, -43], [17, -7], [9, 2], [12, 29], [15, 56], [3, 63], [-8, 69], [5, 49], [18, 30], [23, 9], [29, -12], [22, -18], [42, -68], [34, -36], [29, -39], [15, -12], [29, -7], [7, 3], [6, 9], [2, 15], [-6, 98], [8, 31], [12, 22], [53, 12], [28, 14], [28, 22], [22, 12], [19, 2], [19, -9], [19, -19], [31, -37], [39, -61], [50, -46], [26, -73], [5, -13], [6, -1], [7, 9], [4, 14], [1, 32], [-14, 43], [-46, 109], [-1, 20], [6, 17], [33, 1], [75, -9], [25, -17], [51, -66], [15, -16], [8, -5], [4, 9], [20, 12], [13, 15], [23, 36], [51, 66], [10, 2], [15, -5], [26, -18], [12, -13], [24, -11], [25, 4], [35, 23], [38, 14], [14, 32], [2, 15], [-31, 97], [13, 20], [68, 24], [59, 2], [14, -7], [38, -47], [25, -23], [13, -19], [3, -42], [15, -16], [29, -17]], [[31987, 62401], [-21, -5], [-28, 27], [22, 10], [15, -6], [12, -26]], [[99603, 81748], [-17, -10], [-10, 25], [-1, 15], [10, 15], [17, -9], [10, -15], [-9, -21]], [[53975, 72596], [-16, -9], [-17, 17], [-4, 11], [23, 9], [12, -8], [4, -15], [-2, -5]], [[53871, 75291], [-12, -5], [-7, 6], [-4, 9], [5, 22], [25, -13], [-1, -12], [-6, -7]], [[53347, 73016], [-13, -6], [-18, 19], [-1, 28], [3, 9], [22, -13], [6, -26], [1, -11]], [[51759, 82667], [-39, -20], [-10, 4], [3, 6], [34, 12], [12, -2]], [[51647, 82637], [-55, -9], [-19, 7], [-3, 6], [15, 4], [47, 1], [14, -6], [1, -3]], [[51419, 82550], [-52, -42], [-4, 6], [33, 37], [23, -1]], [[51479, 82595], [-26, -5], [-12, 8], [63, 23], [39, 7], [7, -3], [-71, -30]], [[281, 41487], [-8, -8], [-6, 2], [-7, 9], [-4, 16], [9, 14], [13, -16], [3, -17]], [[344, 41339], [-3, -10], [-15, 17], [-6, 12], [16, 9], [8, -3], [0, -25]], [[486, 41501], [-16, -6], [-14, 25], [9, 26], [13, -7], [7, -25], [1, -13]], [[7926, 42247], [-5, -4], [-6, 10], [-2, 16], [2, 26], [13, -17], [6, -11], [-8, -20]], [[8385, 41736], [-9, -15], [-11, 11], [-5, 14], [-2, 15], [2, 19], [26, -3], [8, -8], [-9, -33]], [[16581, 71442], [-14, -1], [-23, 6], [8, 13], [12, 10], [4, -7], [13, -21]], [[16823, 70977], [-13, -1], [-17, 5], [-8, 31], [13, 2], [13, -4], [10, -24], [2, -9]], [[31229, 19648], [-10, -1], [-25, 11], [-36, 4], [-5, 5], [0, 8], [4, 9], [20, 7], [60, -6], [8, -4], [2, -7], [-10, -19], [-8, -7]], [[30583, 59015], [1, -16], [-13, 9], [-17, 35], [-17, 27], [4, 29], [4, 10], [18, -27], [17, -50], [3, -17]], [[31885, 58125], [-15, -13], [-27, 13], [-14, 18], [9, 21], [22, 0], [21, -25], [4, -14]], [[29776, 62659], [-5, -40], [-71, 48], [-57, 61], [2, 33], [30, 7], [28, -20], [41, -40], [32, -49]], [[43048, 73133], [-2, -11], [-15, 5], [-20, -4], [-11, 31], [10, 13], [22, 3], [11, -14], [5, -23]], [[54625, 76610], [51, -16], [38, 8], [34, -10], [21, -19], [5, -9], [-28, -1], [-31, 8], [-35, -19], [-31, 10], [-12, 12], [-8, 15], [-4, 21]], [[54776, 76685], [-20, -6], [-123, 4], [-36, 12], [-40, 31], [-9, 9], [41, 9], [37, -9], [12, -22], [101, -18], [37, -10]], [[54662, 76768], [-44, -1], [-38, 10], [-19, 18], [2, 15], [6, 25], [42, -3], [65, -18], [15, -21], [-4, -9], [-25, -16]], [[49302, 80353], [-10, -38], [-26, 13], [-2, 10], [29, 22], [6, 0], [3, -7]], [[49439, 80202], [2, -29], [-12, -7], [-10, 10], [-21, 0], [-20, -6], [5, 52], [38, -7], [18, -13]], [[90474, 62651], [-9, -22], [-7, 16], [-2, 31], [13, -3], [4, -6], [1, -16]], [[90475, 61255], [-6, -4], [-9, 2], [-6, 9], [-2, 15], [18, 1], [7, -12], [-2, -11]], [[90350, 59998], [-13, -27], [-10, 6], [-6, 9], [-2, 15], [22, 15], [10, -5], [-1, -13]], [[33392, 77153], [-37, -20], [-32, 1], [-22, 19], [-1, 8], [51, -8], [19, 5], [39, 32], [-17, -37]], [[23051, 67915], [-6, -1], [14, 47], [2, 19], [22, 59], [12, 9], [5, -25], [-23, -42], [-26, -66]], [[25308, 68958], [-15, -30], [1, 12], [11, 30], [8, 11], [-5, -23]], [[25400, 69248], [-3, -6], [-25, 12], [-15, 11], [-2, 11], [41, -20], [4, -8]], [[25535, 69269], [-24, -12], [-36, 1], [-8, 4], [15, 8], [43, 11], [10, -12]], [[32496, 62237], [-3, -15], [-18, 13], [-10, 13], [3, 16], [14, 14], [11, -2], [4, -5], [-1, -34]], [[31826, 62272], [-22, -3], [-14, 4], [-5, 17], [27, 16], [30, -2], [18, -10], [2, -6], [-36, -16]], [[32630, 61705], [-14, -12], [-12, 17], [3, 40], [11, 1], [11, -18], [1, -28]], [[32112, 62479], [-7, -4], [-5, 1], [-1, 8], [5, 23], [28, 2], [-20, -30]], [[32039, 62415], [-19, -15], [-12, 2], [-5, 6], [10, 18], [26, -11]], [[32057, 62443], [-22, -2], [-6, 7], [12, 18], [23, 2], [6, -4], [-13, -21]], [[32009, 62093], [24, -26], [28, 0], [-30, -25], [-56, -3], [1, 41], [33, 13]], [[28514, 66252], [-31, -12], [-23, 11], [-5, 10], [9, 16], [21, 13], [34, 1], [15, -15], [2, -7], [-22, -17]], [[27487, 66080], [-12, -13], [-13, 10], [14, 13], [43, 15], [-16, -18], [-16, -7]], [[81730, 64637], [-7, -9], [-19, 42], [-1, 14], [15, 2], [16, -19], [0, -17], [-4, -13]], [[28737, 71805], [-6, -1], [-11, 6], [-15, 12], [-4, 9], [15, -3], [21, -23]], [[1344, 39648], [4, 0], [4, 17], [15, 7], [-1, -19], [-21, -59], [-12, 23], [-37, 38], [-8, 29], [13, 23], [-2, -18], [6, -8], [21, -4], [19, -15], [-12, -6], [11, -8]], [[64633, 78001], [-5, -6], [-18, 16], [-12, 26], [15, 31], [14, -5], [9, -33], [-3, -29]], [[63328, 78045], [-4, -10], [-13, 53], [-1, 32], [8, 17], [11, -54], [-1, -38]], [[33767, 21882], [1, -50], [-22, 16], [-8, 24], [12, 17], [11, -1], [6, -6]], [[61830, 60658], [-9, -13], [-2, 23], [5, 50], [9, 14], [7, -37], [-4, -20], [-6, -17]], [[61132, 61107], [9, -56], [-27, 21], [-5, 12], [12, 22], [3, 13], [8, -12]], [[60250, 66464], [-7, 0], [-20, 39], [-11, 29], [-12, 19], [-53, 39], [-8, 25], [9, 25], [5, -25], [10, -14], [44, -36], [49, -76], [9, -7], [-15, -18]], [[60165, 66654], [-3, -8], [-12, 21], [1, 44], [10, 25], [-1, -34], [5, -35], [0, -13]], [[78143, 53564], [-14, -10], [0, 15], [2, 21], [10, 20], [5, -12], [-3, -34]], [[87420, 48070], [-15, -6], [-8, 48], [13, 12], [14, -29], [-4, -25]], [[84332, 50861], [-19, -4], [-13, 17], [1, 85], [12, 18], [5, -3], [4, -25], [5, -23], [10, -21], [-5, -44]], [[85208, 71626], [5, -27], [-22, 5], [-12, 26], [1, 23], [14, 3], [14, -30]], [[92467, 95691], [-27, -20], [-64, 33], [24, 18], [43, 12], [10, -6], [8, -13], [6, -24]], [[68706, 91894], [-22, -50], [-46, 3], [-14, 11], [-6, 9], [52, 54], [32, -2], [4, -25]], [[68488, 92477], [3, -23], [-15, 8], [-19, 26], [-11, 32], [-4, 64], [7, 17], [6, 9], [6, -2], [-1, -40], [28, -91]], [[65410, 98083], [-79, -27], [-40, 1], [-20, 16], [32, 23], [41, 17], [31, -5], [23, -8], [12, -17]], [[55115, 85846], [-12, -6], [-6, 2], [7, 27], [6, 11], [19, 11], [5, -2], [-19, -43]], [[55165, 86100], [-7, -19], [-7, 23], [3, 5], [4, 23], [14, 12], [21, -7], [0, -6], [-20, -19], [-8, -12]], [[15874, 79034], [-3, -11], [-4, 1], [-8, 23], [-1, 16], [7, 12], [10, -34], [-1, -7]], [[79367, 45798], [-8, -41], [-14, 23], [-17, 7], [3, 30], [14, 5], [7, 1], [10, 11], [5, -36]], [[25994, 61277], [-44, -45], [-14, 1], [20, 35], [33, 30], [28, 14], [23, -6], [-46, -29]], [[95548, 8736], [-37, 0], [-22, 18], [-7, 39], [1, 13], [72, 48], [58, 12], [-31, -72], [-11, -12], [-23, -46]], [[95786, 12937], [-24, -16], [-15, 5], [-15, 34], [16, 53], [-6, 69], [3, 17], [39, -39], [7, -21], [16, -32], [3, -17], [-16, -32], [-8, -21]], [[96566, 6830], [-34, -43], [-39, -19], [-123, 16], [-86, -36], [-95, -13], [-45, 19], [-20, 35], [-10, 47], [0, 17], [27, 7], [127, -33], [53, -29], [29, 1], [76, 38], [63, 48], [16, 23], [21, 8], [27, -17], [13, -52], [0, -17]], [[95361, 13351], [-5, -35], [-14, 8], [-20, 28], [-20, 69], [18, 7], [23, -12], [9, -34], [8, -18], [1, -13]], [[96411, 7303], [105, -42], [275, 4], [229, -39], [21, -40], [-65, -21], [-101, -53], [-65, -17], [-55, 0], [-112, 22], [-146, -3], [-31, -31], [-71, -31], [-82, -54], [-22, 44], [-33, 42], [-82, 89], [-6, 13], [45, 17], [22, 29], [47, 39], [-5, 24], [-39, 26], [-15, 22], [26, 36], [58, 16], [75, -15], [34, -48], [-6, -21], [-1, -8]], [[97178, 9444], [-38, -12], [-51, 37], [-12, 12], [50, 70], [-4, 23], [7, 19], [19, 14], [12, -2], [29, -77], [20, -32], [-28, -31], [-4, -21]], [[95268, 8313], [-50, -74], [-35, 2], [-20, 14], [36, 41], [34, 18], [21, 5], [14, -6]], [[78050, 14010], [-121, -14], [-10, 15], [-45, 2], [-16, 12], [-6, 28], [15, 47], [24, 32], [37, 33], [18, 7], [76, 11], [55, -15], [39, -40], [11, -32], [-6, -21], [-71, -65]], [[73839, 13275], [-48, -15], [-8, 8], [-1, 9], [-72, 55], [-12, 45], [7, 31], [59, -3], [70, -27], [37, -69], [-32, -34]], [[75722, 13935], [-37, -8], [-38, 8], [-19, 27], [-4, 12], [15, 19], [54, 3], [38, -17], [8, -17], [2, -8], [-19, -19]], [[74039, 13382], [-32, -14], [-25, 3], [-29, 31], [12, 21], [30, 13], [38, -7], [10, -11], [26, -7], [-30, -29]], [[73702, 13472], [-30, -18], [-24, 3], [-16, 19], [-3, 12], [15, 38], [12, -2], [8, -20], [38, -32]], [[69421, 10415], [-35, -74], [-13, 2], [-15, 43], [13, 27], [16, 16], [28, -8], [6, -6]], [[69016, 10195], [-14, 0], [7, 23], [37, 41], [28, 50], [17, 8], [31, -44], [-7, -37], [-41, -27], [-58, -14]], [[76836, 13804], [32, -15], [57, 2], [20, -22], [4, -25], [-1, -14], [-23, -21], [-150, -14], [-24, 22], [26, 61], [28, 20], [31, 6]], [[70000, 11156], [-20, 0], [-25, 6], [-32, 42], [-18, 30], [-7, 31], [3, 61], [16, 30], [26, 12], [11, -28], [4, -32], [8, -21], [33, -30], [16, -25], [5, -14], [6, -29], [-5, -20], [-21, -13]], [[95169, 13549], [-15, -27], [-13, 3], [-58, 69], [7, 30], [-8, 25], [1, 23], [2, 8], [71, -105], [13, -26]], [[77851, 13700], [-37, -8], [-14, 15], [-2, 9], [27, 33], [33, 11], [-3, -39], [-4, -21]], [[77456, 13554], [-26, -7], [-27, 16], [-13, 31], [-3, 10], [42, 8], [56, -30], [-29, -28]], [[78721, 14144], [-17, -14], [-45, 8], [-10, 12], [-4, 55], [-3, 16], [-17, 15], [-73, 28], [-8, 40], [10, 18], [27, 4], [67, -35], [15, -27], [-2, -41], [1, -13], [21, -27], [33, -28], [5, -11]], [[9003, 7690], [3, -8], [-42, 6], [-63, 32], [-12, 11], [28, 11], [36, -10], [33, -20], [17, -22]], [[9656, 8230], [-31, -3], [-53, 14], [-140, 46], [-30, 23], [21, 23], [50, 16], [38, -5], [95, -43], [29, -31], [17, -23], [4, -17]], [[9276, 7510], [-104, -25], [-27, 7], [9, 36], [-16, 25], [-4, 12], [9, 17], [61, 0], [172, -27], [23, -37], [-123, -8]], [[13225, 8961], [-44, -32], [-86, 21], [7, 23], [78, 20], [53, -13], [-8, -19]], [[8723, 7484], [-116, -7], [-64, 15], [-16, 44], [18, 9], [148, -20], [54, -11], [20, -13], [-10, -12], [-34, -5]], [[8518, 7651], [113, -8], [74, 6], [77, -14], [18, -16], [-14, -13], [-83, -4], [-40, -22], [-47, -3], [-71, 16], [-64, 35], [37, 23]], [[13592, 8880], [-31, -12], [-116, 29], [-68, 6], [-31, 17], [-20, 15], [-6, 14], [-32, 22], [62, 44], [49, 14], [47, -3], [10, -22], [90, -26], [70, -1], [7, -24], [-3, -34], [-28, -39]], [[16792, 9152], [-58, -6], [-18, 1], [-18, 13], [-5, 9], [30, 30], [29, 13], [9, 10], [-40, 101], [37, 3], [43, 20], [83, -2], [72, -18], [13, -15], [9, -25], [-31, -51], [-19, -18], [-108, -45], [-28, -20]], [[17572, 9121], [-136, -16], [-37, 18], [-10, 22], [6, 23], [277, 125], [49, -17], [14, -8], [-83, -62], [-37, -22], [-6, -7], [20, -9], [6, -7], [-16, -17], [-47, -23]], [[14620, 8857], [-42, -10], [-83, 38], [-27, 18], [-24, 31], [-19, 7], [-7, 6], [-11, 80], [25, 9], [53, -11], [102, -42], [71, -12], [24, -32], [-24, -56], [-38, -26]], [[8550, 7294], [81, -29], [-142, 9], [-62, 41], [40, 15], [40, -3], [35, -21], [8, -12]], [[5002, 3963], [-87, -13], [-206, 26], [-54, 21], [-30, 22], [-56, 20], [-14, 11], [0, 24], [-9, 14], [-19, 13], [-9, 13], [-17, 8], [277, -12], [108, -20], [20, -14], [195, -60], [-53, -9], [-46, -44]], [[8269, 7617], [-118, -8], [-48, 16], [-12, 15], [10, 13], [183, 13], [20, -16], [6, -10], [-41, -23]], [[9253, 7922], [-57, -8], [-71, 36], [-54, 29], [-18, 25], [-3, 8], [0, 10], [16, 6], [115, -21], [72, -85]], [[9225, 7699], [-33, -46], [-87, 24], [-37, 30], [21, 39], [40, 12], [52, -14], [19, -5], [25, -40]], [[5426, 4844], [-29, -5], [-745, 67], [-143, 22], [-34, 12], [-14, 11], [-3, 8], [6, 22], [17, 16], [185, 25], [207, -19], [250, -48], [172, -38], [89, -34], [37, -26], [5, -13]], [[8223, 7275], [-22, -2], [-241, 44], [-47, 13], [82, 27], [54, 4], [146, -66], [39, -8], [-11, -12]], [[7241, 5741], [-51, -2], [-65, 6], [-50, 14], [-114, 20], [-29, 38], [-134, 31], [-62, 10], [21, 37], [142, -49], [175, -49], [141, -30], [26, -26]], [[8547, 7418], [-17, -9], [-121, 5], [-25, 8], [-11, 9], [-168, 13], [-76, 41], [-15, 13], [30, 20], [57, 12], [23, 16], [145, 14], [23, -8], [13, -22], [66, -43], [17, -27], [7, -18], [36, -8], [16, -16]], [[6115, 4547], [-25, -4], [-22, 31], [-108, 63], [-64, 42], [-42, 33], [-18, 23], [21, 0], [158, -70], [24, -27], [118, -48], [-42, -43]], [[48362, 11202], [-73, -34], [-6, 15], [-24, 20], [-48, 56], [54, 4], [49, 24], [27, -10], [6, -6], [15, -69]], [[50843, 11176], [-94, -15], [-21, 17], [-11, 34], [13, 20], [123, 68], [33, -6], [11, -6], [8, -26], [-11, -41], [-14, -20], [-37, -25]], [[49179, 10821], [-30, -13], [-39, 3], [-30, 17], [-21, 34], [-5, 13], [3, 22], [-2, 11], [38, 6], [14, -14], [6, -11], [66, -68]], [[50360, 11373], [-24, -73], [-15, 2], [-15, 43], [-31, 46], [-11, 32], [-1, 43], [22, 25], [80, 16], [27, -10], [13, -55], [-45, -69]], [[49296, 11078], [30, -19], [47, 3], [45, -15], [-7, -20], [-26, -26], [-22, -56], [-22, -26], [-66, -56], [-49, -15], [-11, 31], [1, 32], [4, 25], [2, 18], [-46, 24], [-3, 33], [-9, 19], [-134, 66], [-23, 19], [10, 12], [138, 5], [81, -12], [60, -42]], [[51257, 11244], [-45, -13], [-51, 29], [-14, 20], [-15, 53], [-2, 20], [12, 13], [40, 15], [66, -6], [25, -24], [9, -43], [-8, -37], [-17, -27]], [[63484, 13373], [-46, -14], [-21, 6], [-2, 14], [-1, 13], [2, 15], [16, 12], [78, 1], [31, -10], [9, -7], [1, -21], [-3, -6], [-64, -3]], [[54506, 11516], [-18, -37], [-87, 51], [-51, 16], [-13, 9], [-12, 32], [-3, 12], [10, 20], [28, 32], [59, 26], [93, 13], [91, -10], [15, -16], [-86, -54], [-26, -94]], [[57460, 11301], [-18, -22], [-51, 4], [-39, -21], [-31, 8], [-98, 35], [-11, 45], [-3, 20], [8, 35], [88, 73], [35, 7], [50, -10], [22, -21], [14, -41], [39, -83], [-5, -29]], [[41355, 5876], [38, -12], [40, 28], [-6, 26], [23, 45], [33, -49], [219, -52], [71, -50], [-29, -12], [-22, 2], [-64, -5], [-109, -43], [-117, 41], [-209, 29], [-63, 22], [-49, 68], [88, 56], [21, -6], [135, -88]], [[40573, 6151], [-32, -21], [-675, 36], [-33, 7], [9, 43], [92, 7], [52, 8], [72, 19], [53, 33], [18, 1], [317, -77], [111, -32], [13, -15], [3, -9]], [[49088, 11213], [-45, -1], [-13, 16], [-2, 11], [58, 83], [32, 21], [62, 16], [40, -5], [26, -18], [8, -33], [0, -49], [-15, -26], [-151, -15]], [[44275, 9281], [-13, -125], [4, -27], [11, -26], [49, -70], [4, -52], [-2, -20], [-20, -29], [-69, 7], [-22, 15], [-8, 10], [-36, 122], [-21, 29], [-32, 25], [-123, 23], [-118, -8], [29, 28], [178, 39], [45, 29], [28, 34], [13, 52], [31, 65], [49, 30], [31, 3], [16, -53], [0, -50], [-24, -51]], [[45526, 9977], [-19, -14], [-40, 1], [-38, 28], [-16, 41], [-1, 29], [17, 33], [27, 9], [15, -11], [36, -71], [19, -45]], [[46525, 10268], [-22, -13], [-37, 5], [-47, 29], [-15, 22], [-5, 20], [13, 29], [11, 8], [24, -4], [42, -37], [29, -40], [7, -19]], [[41016, 5948], [-48, -6], [-19, 15], [23, 38], [34, 33], [63, 3], [60, -22], [-6, -21], [-13, -2], [-94, -38]], [[37300, 16980], [61, -14], [31, -21], [8, -24], [36, -9], [5, -5], [7, -14], [4, -15], [-1, -20], [-62, 48], [-86, 3], [-20, 34], [-44, -20], [-5, 13], [0, 17], [6, 24], [28, -10], [32, 13]], [[34980, 16532], [-12, -5], [-19, 22], [-3, 13], [20, 26], [20, 35], [7, 4], [-5, -70], [-8, -25]], [[31316, 6075], [-48, -28], [-202, 13], [-69, 9], [-39, 15], [36, 60], [27, 20], [25, 8], [56, 33], [88, 8], [67, -6], [113, -26], [-29, -25], [-19, -9], [-18, -38], [12, -34]], [[34676, 16577], [-37, -16], [-13, 22], [-7, 37], [-19, 23], [14, 20], [199, -26], [-11, -13], [-96, -17], [-30, -30]], [[34575, 15452], [17, -15], [70, 1], [16, -4], [14, -25], [9, -43], [-23, -17], [-121, 10], [-44, 22], [-22, -1], [-49, -24], [-21, -24], [-82, -32], [-23, 12], [-11, 34], [-1, 14], [8, 9], [4, 9], [-1, 11], [22, 29], [95, 44], [126, 16], [17, -16], [0, -10]], [[34480, 15244], [-24, -26], [-61, 39], [-16, 25], [7, 19], [98, 17], [26, -9], [12, -40], [-42, -25]], [[34100, 14650], [-24, -2], [-30, 17], [-4, 30], [0, 16], [23, 13], [14, 2], [81, 47], [36, 12], [-16, -29], [2, -26], [-13, -23], [-69, -57]], [[33656, 15954], [-62, -26], [-32, 27], [-7, 10], [38, 26], [20, -6], [8, -9], [23, -2], [12, -20]], [[33895, 16179], [35, -16], [31, 11], [17, -12], [12, -33], [-1, -12], [-47, 5], [-43, -38], [-51, 8], [-7, -31], [11, -17], [-14, -14], [-44, 30], [-35, -11], [-11, -51], [-16, -10], [-8, -2], [-14, 13], [-29, 4], [-2, 7], [-18, 20], [-51, -22], [13, 26], [68, 69], [8, 21], [79, 40], [37, -9], [80, 24]], [[32791, 14932], [-26, -2], [7, 31], [23, 21], [38, 14], [-24, -35], [-7, -16], [-11, -13]], [[32778, 11680], [-24, -4], [-24, 53], [-13, 82], [-77, 119], [-20, 62], [14, 15], [21, 5], [56, -17], [34, -23], [38, -49], [46, -44], [9, -37], [-7, -42], [-29, -11], [1, -31], [-17, -60], [-8, -18]], [[32412, 14480], [-44, -26], [-23, 0], [27, 64], [26, 2], [41, 36], [11, -5], [-22, -30], [-16, -41]], [[32687, 14732], [-20, -23], [-16, -4], [-15, 10], [-20, -35], [-40, 11], [-16, 9], [10, 5], [7, 15], [22, 31], [38, 79], [7, 25], [-31, 41], [-5, 13], [7, 24], [11, 17], [26, 19], [34, 0], [17, -16], [0, -29], [58, -27], [-10, -56], [-22, -35], [-3, -42], [-33, -19], [-6, -13]], [[32607, 15512], [-12, -2], [5, 24], [31, 62], [58, 29], [-7, -25], [-19, -31], [-56, -57]], [[33503, 15872], [-38, -4], [-26, 33], [-12, 23], [51, 2], [23, -9], [12, -26], [-10, -19]], [[34427, 15507], [-55, -54], [-26, 2], [-54, 41], [-15, 21], [-3, 9], [34, 37], [97, -14], [22, -4], [1, -3], [2, -21], [-3, -14]], [[33159, 15806], [14, -7], [121, 13], [38, -40], [43, 2], [-103, -75], [-28, 22], [-9, 16], [-7, 36], [-67, -9], [-22, 7], [-27, -24], [-55, -10], [-19, 0], [-24, 26], [-1, 26], [49, -1], [38, 33], [11, 34], [19, -9], [29, -40]], [[34062, 15087], [4, -10], [56, 6], [15, -15], [-31, -20], [-8, 4], [-27, -6], [-76, 15], [-18, 23], [67, 13], [18, -10]], [[33011, 11534], [-42, -1], [-19, 16], [-7, 10], [5, 23], [16, 21], [49, -16], [12, -41], [-14, -12]], [[33151, 12230], [-11, -16], [-35, 10], [-20, 11], [-34, 28], [19, 17], [37, -4], [30, -20], [14, -26]], [[33127, 11111], [-23, 0], [-20, 12], [-17, 35], [-5, 17], [9, 38], [16, 9], [92, 5], [28, -20], [1, -34], [-10, -25], [-71, -37]], [[33180, 10914], [-28, -4], [-38, 10], [-33, 20], [-11, 23], [16, 19], [30, 12], [47, -4], [22, -24], [5, -22], [-6, -23], [-4, -7]], [[33193, 15571], [-14, -6], [-18, 5], [0, -10], [15, -13], [-16, -5], [-19, 13], [-14, 27], [10, 25], [19, 6], [37, -42]], [[33152, 15053], [-35, -20], [-21, 6], [-33, 24], [45, 7], [4, 70], [22, 27], [43, -15], [-26, -37], [-9, -28], [9, -24], [1, -10]], [[23945, 9838], [-47, 0], [-31, 21], [-10, 14], [19, 21], [11, 2], [57, -36], [12, -15], [-11, -7]], [[24677, 9687], [-51, -14], [-46, 6], [17, 132], [26, 33], [-7, 24], [-47, 66], [-33, 75], [16, 17], [86, 27], [99, -5], [39, -32], [12, -40], [-5, -29], [-32, -53], [33, -18], [7, -36], [-7, -44], [-32, -52], [-30, -31], [-45, -26]], [[20961, 9696], [-33, -26], [-62, 6], [-48, 43], [-19, 58], [-2, 20], [13, 15], [31, 14], [120, -130]], [[23603, 9985], [-53, -3], [-15, 13], [16, 28], [128, 47], [52, 28], [8, -4], [7, -9], [22, -56], [2, -14], [-167, -30]], [[30084, 11367], [14, -17], [60, 16], [21, -17], [4, -12], [-27, -42], [-32, -28], [-37, -2], [-27, 71], [-3, 18], [27, 13]], [[30004, 11694], [-60, -24], [-40, 19], [-120, 36], [-50, 66], [5, 35], [23, 21], [36, 11], [73, -22], [37, -23], [96, -119]], [[29478, 9586], [-27, -11], [-17, 6], [-31, 29], [4, 23], [14, 15], [10, 17], [60, 62], [44, 7], [36, -13], [-39, -59], [-10, -41], [-44, -35]], [[31709, 13915], [-60, -22], [-31, 8], [-2, 23], [8, 31], [29, 16], [-5, 46], [18, 19], [9, 35], [38, 26], [54, -12], [-8, -45], [-1, -16], [-32, -12], [-8, -7], [-7, -30], [1, -43], [-3, -17]], [[31501, 13709], [-62, -65], [-9, 4], [-5, 7], [1, 11], [20, 24], [4, 70], [41, 26], [16, -9], [-14, -30], [9, -26], [-1, -12]], [[31292, 12807], [-55, -11], [-41, 12], [1, 44], [-11, 5], [-4, 10], [52, 33], [39, 8], [47, -5], [20, -14], [7, -15], [-36, -36], [-6, -14], [-13, -17]], [[31288, 13309], [-13, -4], [-31, 2], [-20, 13], [26, 41], [-3, 28], [23, 11], [26, -10], [18, -35], [3, -15], [-29, -31]], [[0, 42174], [30, 49], [9, 7], [10, -45], [-12, -49], [-30, -43], [-7, -22], [0, 103]], [[0, 42344], [16, 28], [12, 5], [-8, -27], [0, -14], [-20, -21], [0, 29]], [[99999, 42071], [-21, -21], [-8, 21], [10, 50], [19, 52], [0, -42], [0, -60]], [[28084, 56609], [-6, -24], [-13, 54], [2, 14], [-1, 49], [13, 13], [9, 1], [7, -7], [5, -58], [-4, -26], [-12, -16]], [[93002, 80248], [-27, -25], [-28, 15], [0, 50], [59, 153], [21, -9], [-5, -37], [-22, -57], [7, -69], [-5, -21]], [[66475, 98677], [-60, -7], [-105, 12], [-30, 14], [7, 13], [68, 18], [54, 4], [57, -19], [26, -23], [-17, -12]], [[65115, 98198], [-39, -30], [-129, 32], [11, 16], [14, 6], [0, 16], [-12, 12], [5, 24], [83, -18], [8, -7], [56, -12], [9, -24], [-6, -15]], [[66983, 98473], [-87, -12], [-141, 15], [-73, 17], [6, 8], [19, 10], [122, 41], [242, 9], [30, -30], [-26, -23], [-92, -35]], [[64866, 98032], [-184, -7], [-62, 4], [-8, 7], [-15, 6], [-58, 6], [-36, 29], [16, 8], [85, 12], [29, 12], [10, 17], [38, 31], [92, 6], [40, -6], [5, -20], [39, -25], [101, -32], [-20, -23], [-35, -3], [-37, -22]], [[65855, 98128], [12, -20], [-1, -71], [-13, -31], [2, -26], [-26, -13], [-218, 3], [-108, 6], [-25, 10], [61, 34], [19, 23], [-6, 67], [10, 12], [175, -6], [14, 19], [66, 1], [38, -8]], [[66580, 97900], [-100, -19], [-35, 6], [-10, 9], [-19, 9], [-50, 12], [7, 33], [16, 7], [150, 37], [72, -21], [30, -51], [-61, -22]], [[31535, 20029], [-22, -25], [-16, 1], [-6, 9], [-1, 12], [3, 12], [7, 11], [16, 14], [5, 2], [24, -14], [-10, -22]], [[29155, 25984], [-7, -9], [-9, 3], [-7, 18], [-5, 31], [10, 12], [7, 0], [9, -17], [4, -26], [-2, -12]], [[29025, 23753], [-32, -1], [-7, 103], [36, 149], [3, 56], [-12, 43], [-5, 35], [3, 14], [47, 30], [14, -32], [18, -83], [33, -119], [-1, -114], [-18, -28], [-58, -29], [-21, -24]], [[29082, 22649], [-7, -53], [-23, 5], [-7, 13], [-4, 34], [-7, 16], [9, 34], [7, 37], [-2, 29], [34, -2], [41, -7], [11, -8], [-12, -25], [-12, -16], [-25, -9], [-3, -48]], [[29337, 21357], [5, -5], [10, 1], [16, -9], [58, -11], [52, -27], [27, -26], [35, -7], [29, -33], [13, -8], [15, -2], [39, -60], [2, -7], [44, -47], [2, -7], [-25, -3], [-51, 22], [-25, 1], [-19, 7], [-4, 4], [-4, 27], [-5, 13], [-49, 63], [-21, 14], [-35, 12], [-40, -8], [-28, 8], [-9, -3], [-40, 50], [-40, 42], [-17, 50], [-25, 38], [-1, 11], [12, 9], [27, -22], [27, -37], [15, -14], [10, -36]], [[30638, 20207], [223, -57], [68, 35], [55, -1], [16, -48], [-55, -49], [-5, -16], [8, -13], [57, -8], [14, -16], [13, -20], [-11, -31], [-1, -14], [6, -14], [42, -46], [18, -24], [9, -23], [3, -40], [-1, -32], [-9, -4], [-21, 10], [-20, 18], [-18, 46], [-12, 10], [-36, 9], [-35, 22], [-28, -1], [-25, 10], [-23, -9], [-8, 16], [-10, 30], [0, 14], [12, 48], [0, 13], [-7, 1], [-26, -10], [-11, 7], [-29, 35], [-11, 7], [-29, 3], [-17, -62], [-1, -16], [17, -39], [33, -61], [-17, -1], [-47, 19], [-13, 11], [-14, 31], [-28, 18], [-10, 11], [-3, 13], [-1, 40], [-6, 6], [-40, -11], [-8, 10], [-3, 17], [-6, 9], [-26, 16], [-2, 9], [11, 12], [7, 28], [10, 104], [51, -22]], [[29137, 23711], [-3, -46], [-41, -88], [-35, -52], [-32, -41], [-21, 0], [-17, 20], [19, 33], [24, 32], [-8, 42], [-7, 13], [-10, 4], [-17, 22], [5, 33], [10, 15], [14, 12], [12, -7], [54, 23], [17, 18], [32, 4], [4, -37]], [[33302, 22237], [-38, 0], [-8, 19], [1, 47], [28, 4], [29, -20], [-2, -20], [-10, -30]], [[42704, 18182], [1, -33], [-43, 30], [-10, 14], [14, 19], [27, 0], [7, -11], [4, -19]], [[64934, 59122], [17, -7], [26, 20], [74, 3], [90, -65], [-17, -16], [-10, -24], [-39, -21], [-40, -49], [-114, -24], [-33, 13], [-28, 48], [-51, 62], [20, 40], [5, 18], [7, 17], [29, 30], [29, -4], [35, -41]], [[64814, 65816], [-21, -3], [-18, 22], [39, 29], [11, 13], [11, 27], [9, -23], [-10, -36], [-7, -16], [-14, -13]], [[66311, 63489], [-17, -8], [-6, 4], [1, 73], [40, 91], [27, 106], [19, -94], [-33, -53], [-17, -91], [-14, -28]], [[64615, 65834], [-5, -4], [-4, 31], [0, 9], [13, 15], [7, -26], [-11, -25]], [[65607, 67350], [-26, -69], [-39, -58], [-17, 18], [-12, 0], [-28, -23], [-20, -3], [-37, -40], [-33, -20], [-23, 2], [-8, 4], [-5, 27], [0, 10], [15, -5], [51, 36], [64, 58], [6, 26], [-10, 43], [3, 9], [41, -21], [46, 42], [39, 11], [19, -29], [-26, -18]], [[64979, 65770], [0, -20], [-28, 6], [-7, -10], [-24, 5], [-22, 14], [15, 24], [40, 28], [17, -26], [9, -21]], [[61663, 61471], [21, -3], [-9, 19], [-2, 9], [10, 26], [30, -55], [-1, -64], [-2, -15], [-8, 14], [-6, 13], [-2, 15], [-8, 16], [-30, -10], [-18, 17], [-27, 55], [-7, 39], [11, 8], [12, 19], [7, 31], [-7, 32], [16, -5], [9, -33], [1, -75], [3, -16], [-5, -17], [12, -20]], [[61150, 60884], [11, -30], [8, 3], [7, 10], [4, 21], [44, -42], [-3, -29], [-26, -1], [-30, 12], [-28, -4], [-33, 12], [-8, 48], [21, -23], [11, 6], [2, 6], [-15, 33], [-21, 6], [1, 26], [10, 10], [6, 12], [-13, 36], [24, -9], [15, -21], [10, -25], [3, -57]], [[61876, 59737], [-18, -18], [12, 46], [13, 9], [4, -2], [-11, -35]], [[64057, 66752], [-9, -44], [-9, 16], [-21, 76], [6, 53], [-10, 76], [5, 22], [26, 11], [6, -4], [-8, -24], [15, -43], [2, -70], [-3, -69]], [[61885, 59891], [-4, -13], [-5, 3], [-17, 31], [19, 34], [10, -32], [-3, -23]], [[63409, 68907], [-16, -13], [-10, 6], [-11, 31], [-17, 77], [10, 29], [-1, 12], [2, 9], [5, 6], [6, 36], [7, 12], [12, -25], [33, -88], [0, -37], [-2, -14], [-18, -41]], [[99839, 41839], [-10, -16], [-4, 79], [9, 0], [7, -8], [4, -20], [-6, -35]], [[99818, 41415], [-2, -5], [-24, 46], [0, 19], [5, 16], [9, 15], [9, -26], [7, -44], [-4, -21]], [[99673, 41630], [-14, -10], [-8, 35], [11, 35], [12, 4], [6, -36], [-7, -28]], [[96790, 42177], [8, -8], [-4, -24], [-39, 27], [-30, -10], [-9, 1], [-9, 22], [-7, 44], [3, 30], [13, 22], [5, 3], [10, -26], [8, -18], [9, -8], [19, -43], [23, -12]], [[96748, 42432], [-32, -6], [-44, 18], [-18, 25], [-8, 25], [15, 19], [23, 9], [27, 57], [10, -22], [10, -64], [11, -20], [6, -19], [0, -22]], [[96790, 41738], [27, -82], [11, -7], [-17, -59], [-34, -5], [-41, 15], [15, 20], [-8, 23], [-13, 5], [-14, -11], [-6, 4], [9, 38], [23, 53], [6, 4], [6, 1], [6, -5], [30, 6]], [[96641, 42951], [-19, -26], [-34, 2], [-13, 15], [42, 80], [49, 17], [-25, -88]], [[96317, 43302], [18, -191], [21, 1], [11, 10], [12, 45], [5, 70], [11, 10], [14, -8], [-6, -22], [4, -56], [10, -31], [7, -6], [14, -146], [6, -31], [-1, -25], [-29, -54], [-44, 1], [-30, -33], [-19, 3], [0, 37], [-17, 29], [-19, 63], [5, 112], [-33, 208], [-1, 52], [12, 68], [11, 3], [15, -56], [23, -53]], [[96725, 42643], [-5, -1], [-4, 27], [-16, 141], [10, 126], [7, -27], [23, -221], [-3, -36], [-12, -9]], [[96718, 43013], [-5, -36], [-11, 41], [-7, 175], [3, 16], [6, 1], [14, -121], [0, -76]], [[96503, 42571], [12, -13], [7, 0], [4, -28], [40, -56], [11, 2], [9, -31], [17, -15], [5, -31], [12, -32], [-21, -38], [-41, 10], [-24, -44], [-21, 11], [-4, 23], [3, 8], [-13, 58], [-5, 90], [-9, 52], [-9, 23], [-20, -20], [-8, -3], [-18, 43], [9, 87], [4, 25], [15, 5], [23, -23], [22, -103]], [[96449, 42785], [-5, -15], [-30, 37], [7, 36], [32, -12], [-4, -46]], [[94410, 46927], [0, -14], [-37, 48], [-28, 59], [-81, 64], [-17, 33], [-15, 4], [-41, 54], [-41, 36], [-25, 47], [-6, 19], [-15, 11], [-25, 51], [-25, 34], [-9, 62], [-24, 43], [-6, 19], [77, -35], [36, -68], [30, -38], [11, -28], [27, -38], [25, -4], [24, -38], [23, -10], [18, -20], [114, -172], [-14, -46], [15, -33], [9, -40]], [[93745, 47620], [9, -20], [-21, -35], [-29, 19], [-6, 19], [0, 11], [-20, -7], [-40, 17], [-54, 82], [-58, 156], [-56, 86], [-11, 26], [-1, 45], [8, 17], [34, -19], [45, -71], [74, -73], [20, -38], [12, -90], [13, -27], [40, -69], [21, -16], [11, -3], [9, -10]], [[92682, 49481], [-2, -13], [-17, 15], [14, 30], [6, 2], [-1, -34]], [[83655, 55342], [15, -41], [19, 11], [30, -12], [6, -22], [-1, -14], [-32, -40], [-21, 42], [-38, -29], [-18, 17], [-24, -15], [-15, 33], [6, 31], [39, 51], [34, -12]], [[81780, 47733], [-4, -22], [-14, 5], [-13, 38], [6, 10], [8, 4], [9, -4], [8, -31]], [[87319, 71706], [-5, -11], [-5, 3], [-18, -26], [-4, 25], [-13, 17], [-2, 13], [40, 9], [13, -7], [-6, -23]], [[29135, 24286], [-20, -7], [-3, 19], [-18, 31], [16, 21], [31, 21], [24, -2], [22, -17], [3, -19], [-38, -25], [-9, -14], [-8, -8]], [[29258, 26723], [-39, -10], [-9, 17], [0, 15], [7, 12], [20, 7], [13, -9], [7, -15], [2, -12], [-1, -5]], [[29546, 26024], [-9, -7], [-8, 1], [-8, 20], [-3, 26], [-18, 39], [-5, 18], [0, 22], [10, 32], [16, 9], [10, -2], [13, -37], [3, -40], [4, -42], [-5, -39]], [[29287, 23852], [-6, -14], [-34, 9], [-59, -15], [-25, 52], [-11, 83], [-8, 18], [-14, 47], [-8, 31], [-15, 48], [-6, 51], [-3, 16], [13, 30], [62, 29], [22, 48], [19, -6], [-5, -98], [11, -33], [22, -28], [3, -11], [4, -35], [11, -53], [13, -26], [4, -15], [0, -13], [-5, -19], [15, -96]], [[32069, 20324], [31, -13], [61, 10], [32, 0], [14, -5], [6, -7], [42, 11], [18, -1], [-5, -25], [-38, -24], [-16, 10], [-82, -2], [-36, -25], [-15, 0], [-36, -36], [-26, 23], [-7, 21], [18, 29], [18, 1], [12, 12], [9, 21]], [[32812, 29278], [3, -36], [-15, 4], [-34, 35], [-12, 33], [-2, 14], [35, -15], [16, -14], [9, -21]], [[33421, 21755], [-18, -11], [-5, 5], [-5, 22], [-1, 28], [-2, 12], [12, -4], [20, -22], [-1, -30]], [[33050, 22012], [20, -8], [20, 3], [-11, -59], [-9, -28], [-24, 2], [-23, 39], [-8, 20], [26, 15], [9, 16]], [[29743, 21035], [8, -46], [4, -9], [20, 7], [34, 4], [57, -17], [6, -6], [24, -51], [19, -22], [28, -47], [-28, -32], [-17, -45], [-1, -23], [-11, -13], [-17, -14], [-26, -27], [-31, -3], [-31, -14], [-15, -12], [-8, -1], [-10, 7], [-11, 13], [-4, 15], [22, 14], [28, 50], [5, 52], [-30, 9], [-18, -7], [-14, 0], [-15, 16], [-9, -24], [-4, -24], [4, -36], [-3, -11], [-10, -7], [-26, 14], [-26, 24], [-2, 14], [6, 48], [-1, 25], [-5, 37], [-3, 3], [-10, 0], [-31, -7], [-31, 46], [-16, 49], [-57, 14], [44, 69], [67, 10], [22, -35], [74, -24], [-4, 37], [1, 13], [10, 16], [6, 2], [9, -12], [14, -5], [7, -11], [6, -23]], [[31366, 20072], [-8, -22], [-17, -29], [-24, -23], [-23, -6], [-16, 12], [-9, 20], [-4, 21], [-5, 11], [-9, 2], [-11, 0], [-14, -8], [-29, -29], [-13, -8], [-9, -2], [-84, 22], [-8, 9], [-10, 19], [-11, 59], [-35, 52], [54, 29], [65, 0], [125, -22], [49, -5], [39, -50], [6, -30], [1, -22]], [[30280, 20237], [13, -37], [4, -6], [35, -15], [15, 9], [37, 4], [23, 14], [32, 7], [38, -90], [-4, -28], [-30, -30], [-20, -6], [-19, 9], [2, 15], [-4, 13], [-13, 17], [-12, -1], [-19, -13], [-10, 2], [-19, 14], [-35, 10], [-7, 13], [0, 19], [-7, 9], [-36, 31], [-23, 25], [-20, 4], [-7, -3], [-7, -13], [-17, -11], [-5, 2], [-6, 9], [-3, 14], [7, 29], [11, 3], [49, -6], [30, -13], [27, 0]], [[31308, 19713], [-10, -4], [-7, 10], [-12, 8], [-46, 16], [-1, 10], [5, 14], [9, 12], [18, 13], [14, 32], [7, -3], [6, -13], [11, -44], [14, -32], [-2, -11], [-6, -8]], [[29289, 22305], [-1, -48], [-8, -15], [-8, -5], [-20, 15], [-11, 1], [-18, -25], [-16, -13], [-23, 3], [-31, 17], [-27, -72], [-13, -25], [-27, -33], [-3, 39], [17, 60], [8, 40], [16, 60], [31, -22], [44, 22], [41, 41], [34, 1], [12, -23], [3, -18]], [[29151, 22870], [-54, -46], [-16, 19], [-39, 0], [10, 50], [4, 37], [6, 14], [2, 32], [12, 58], [32, -19], [24, -6], [33, -19], [36, -12], [10, -51], [-34, -23], [-26, -34]], [[29216, 22102], [11, -112], [9, -16], [28, -8], [31, -57], [1, -16], [-37, -96], [-8, -69], [-43, 5], [-19, 68], [-27, 66], [-10, 77], [-15, 66], [27, 38], [26, -8], [1, 50], [25, 12]], [[29497, 26597], [6, -29], [-13, -4], [-19, 5], [-10, -23], [-5, -4], [-45, 20], [-7, 9], [1, 29], [48, 3], [31, 19], [4, -3], [9, -22]], [[30169, 20718], [62, -46], [40, 0], [0, -28], [5, -49], [-6, -20], [-16, -20], [-9, -29], [-7, -5], [-45, 35], [-47, 48], [-24, -9], [-31, 12], [-25, -3], [-16, -27], [-36, -14], [-7, 54], [-33, 51], [-33, 41], [18, 63], [22, 10], [20, 21], [81, -22], [42, -19], [45, -44]], [[29405, 21928], [-9, -6], [-30, 14], [-16, 12], [-24, 30], [-3, 31], [-11, 38], [7, 0], [25, -15], [10, -11], [13, -24], [40, -34], [5, -10], [-1, -13], [-6, -12]], [[29518, 26270], [-14, -25], [-22, -4], [-33, -29], [-4, -25], [-1, -30], [23, -37], [11, -43], [14, -64], [10, -61], [-1, -19], [2, -31], [17, -50], [1, -22], [-1, -22], [-7, -41], [-5, -5], [-17, -4], [-1, -25], [-4, -8], [-46, -3], [-23, 12], [2, 74], [-29, 30], [-20, 49], [-23, 85], [-19, 27], [-22, 67], [-33, 58], [38, 36], [-6, 64], [22, 22], [33, 23], [25, -18], [22, 6], [10, 16], [-3, 65], [7, 52], [25, 26], [26, 3], [10, -29], [13, -28], [32, -23], [-1, -29], [-8, -40]], [[29357, 25523], [-15, -26], [-27, -12], [-27, 20], [-32, -9], [-3, 43], [12, 36], [24, 43], [18, 58], [-2, 81], [14, 18], [8, 29], [31, 18], [7, -61], [-8, -107], [20, -64], [3, -21], [-4, -24], [-19, -22]], [[29565, 78034], [-22, -11], [-36, 11], [-41, -15], [-11, 0], [30, 42], [46, 27], [46, 80], [13, 2], [-18, -91], [-3, -33], [-4, -12]], [[29529, 78102], [-34, -12], [-11, 5], [37, 56], [42, 13], [-34, -62]], [[33066, 78046], [-12, -4], [-2, 8], [-18, 24], [-1, 12], [15, 11], [32, -6], [-12, -30], [-2, -15]], [[32801, 79080], [10, -11], [18, 1], [12, -4], [-17, -21], [-33, -3], [-16, 9], [23, 110], [27, 26], [56, 71], [22, 22], [21, 9], [21, -5], [-22, -43], [-30, -2], [-28, -35], [-18, -40], [-23, -22], [-15, -27], [-8, -35]], [[32081, 79427], [-7, -42], [-25, -36], [-12, -2], [-5, 3], [6, 23], [0, 40], [20, 6], [7, -4], [16, 12]], [[32090, 79469], [-32, -30], [14, 45], [6, 11], [5, 5], [5, -4], [2, -27]], [[30270, 78843], [-25, -5], [6, 20], [35, 36], [25, 20], [15, 0], [-24, -44], [-32, -27]], [[31590, 77357], [-14, -21], [4, 20], [17, 51], [11, 7], [-18, -57]], [[30938, 77301], [-11, -11], [-11, 3], [0, 29], [3, 9], [4, 5], [6, -8], [9, -27]], [[31455, 77581], [-38, -31], [15, 78], [12, 24], [15, -8], [-2, -47], [-2, -16]], [[31059, 77380], [-16, -11], [-18, 4], [0, -30], [-2, -11], [-19, 16], [-8, 10], [1, 40], [17, 38], [14, 15], [17, -10], [13, -43], [1, -18]], [[81623, 47750], [-6, -9], [-47, 5], [-30, -47], [-21, -14], [-76, 0], [-9, 6], [-7, 0], [-4, -10], [-24, 7], [-77, 42], [-10, 38], [12, 42], [27, 58], [56, 12], [252, 4], [27, -51], [3, -16], [-55, -35], [-11, -32]], [[94132, 20328], [-9, -23], [-3, 26], [17, 114], [17, 20], [-3, -60], [-19, -77]], [[1680, 41106], [-11, -34], [-5, 0], [-12, 20], [-5, 13], [19, 40], [10, 3], [12, -13], [0, -12], [-8, -17]], [[7942, 42120], [-11, 0], [-10, 9], [2, 59], [3, 12], [15, -20], [13, -52], [-12, -8]], [[6294, 52912], [46, -67], [-20, -5], [-48, 32], [-44, 66], [13, 15], [7, -24], [20, -22], [12, 46], [7, 11], [-35, 48], [14, -3], [33, -32], [-5, -65]], [[11382, 46258], [42, -30], [13, 3], [-13, -29], [-42, -16], [-14, -15], [-16, 10], [-9, 34], [39, 43]], [[11372, 46122], [-20, -45], [-1, 48], [8, 6], [7, 0], [6, -9]], [[11486, 45785], [-10, -9], [-1, 61], [13, -12], [5, -9], [-2, -17], [-5, -14]], [[8522, 41653], [40, -27], [7, -44], [-8, -29], [-21, 7], [-10, 16], [-14, 52], [-39, -12], [-27, 11], [-15, 67], [0, 31], [6, 19], [29, 20], [36, -15], [13, -38], [3, -58]], [[11091, 46710], [-27, -14], [-13, 3], [-10, 47], [3, 29], [5, 9], [46, -11], [4, -22], [-1, -20], [-7, -21]], [[11090, 46413], [-6, -11], [-11, 35], [-2, 14], [20, 18], [11, -9], [-12, -47]], [[2130, 44086], [31, -54], [12, -72], [-13, -69], [-30, 17], [-42, -15], [-15, 5], [-34, 85], [-23, 38], [-10, 35], [30, -4], [44, 24], [50, 10]], [[290, 41893], [-7, -20], [-6, 7], [8, 33], [1, 15], [-12, 17], [-1, 12], [3, 8], [15, -20], [9, -15], [1, -8], [-2, -15], [-9, -14]], [[5739, 54103], [22, -49], [-4, -24], [-16, 2], [-7, 8], [12, 5], [2, 9], [-6, 14], [-7, 10], [-5, 0], [-2, -20], [-8, 16], [5, 15], [6, 10], [8, 4]], [[2374, 43751], [-76, 0], [-38, 26], [-13, 0], [-33, 55], [-5, 28], [17, 19], [36, 10], [70, -41], [11, -37], [16, -4], [13, -16], [3, -26], [-1, -14]], [[2576, 43576], [-12, -5], [-14, 27], [28, 21], [8, 11], [34, -6], [-20, -8], [-24, -40]], [[2832, 40850], [-28, -31], [-12, 37], [11, 48], [13, 12], [8, 2], [11, -45], [-3, -23]], [[1066, 44162], [-4, -4], [-5, 22], [7, 34], [6, 12], [6, -26], [-10, -38]], [[1413, 39573], [-2, -87], [-13, 40], [-2, 18], [14, 27], [3, 2]], [[87387, 56095], [-17, -12], [-8, 44], [3, 51], [11, 39], [12, 13], [2, 4], [12, 51], [3, -28], [-8, -93], [-9, -37], [-1, -32]], [[90493, 62257], [-14, -13], [17, 57], [5, 10], [8, -21], [-16, -33]], [[90486, 60560], [-1, -15], [-14, 4], [-4, 6], [8, 52], [20, 24], [10, 5], [-9, -25], [-2, -27], [-8, -24]], [[90205, 59480], [-12, -1], [-10, 20], [-3, 13], [-1, 66], [40, 57], [13, 55], [10, -5], [10, -9], [8, -16], [-44, -92], [-11, -88]], [[90461, 60466], [-12, -29], [-8, 45], [-1, 19], [10, 17], [7, -1], [4, -51]], [[88372, 57315], [-21, -47], [-1, 16], [6, 28], [9, 32], [8, 19], [11, 6], [8, -27], [-9, -23], [-11, -4]], [[99579, 40913], [0, -25], [-36, -16], [-12, 20], [-8, 4], [-21, -36], [-6, -15], [-2, -11], [-6, -6], [-39, -17], [-17, 17], [12, 12], [14, 23], [14, -3], [15, 22], [14, 33], [21, 8], [14, 13], [24, -10], [19, -13]], [[96550, 43628], [-11, -29], [-32, 9], [-7, 8], [2, 48], [8, 17], [19, 15], [25, -24], [-4, -44]], [[96524, 43832], [-4, -6], [-7, 4], [-16, 70], [4, 23], [21, 22], [18, -38], [2, -22], [0, -18], [-3, -16], [-13, -6], [-2, -13]], [[97192, 40214], [-9, -31], [-15, 0], [-20, 22], [4, 29], [22, 5], [6, -2], [12, -23]], [[97080, 40587], [-15, -63], [-25, 15], [-24, 45], [-12, 40], [8, 75], [12, 14], [13, -5], [6, -74], [37, -47]], [[97036, 40932], [-12, -27], [-12, 3], [-72, 64], [3, 27], [-3, 67], [8, 37], [20, 15], [15, -8], [10, -54], [22, -22], [-16, -18], [27, -41], [10, -43]], [[96669, 39498], [13, -10], [22, 1], [-5, -98], [-32, -16], [-11, 1], [-7, 21], [-18, 14], [1, 33], [-18, 76], [31, 11], [17, 20], [0, -18], [2, -22], [5, -13]], [[96262, 39919], [-15, -5], [18, 52], [1, 33], [7, 63], [-1, 22], [12, -3], [12, -18], [-14, -16], [-5, -28], [0, -34], [6, -7], [-9, -37], [-12, -22]], [[96499, 39653], [-15, -4], [-20, 41], [-39, 21], [-17, 36], [-11, 43], [22, 11], [22, 58], [-15, 22], [-26, 3], [3, 23], [42, 27], [18, -16], [8, -18], [-2, -92], [19, -29], [20, -65], [-1, -18], [-8, -43]], [[96539, 38811], [-9, -22], [-11, 5], [-8, 8], [-6, 12], [6, 44], [24, -22], [4, -25]], [[94430, 40718], [-4, -12], [-2, 92], [8, 34], [5, -71], [-7, -43]], [[96368, 45123], [-24, -9], [-10, 2], [-16, 50], [12, 11], [18, -4], [5, -29], [15, -21]], [[96147, 45646], [-22, -10], [-7, 3], [-17, -6], [-18, -41], [-13, 6], [-10, -2], [-8, 34], [0, 17], [13, -3], [6, 33], [14, 17], [32, 7], [28, -10], [10, -8], [-9, -30], [1, -7]], [[94604, 45047], [-20, -20], [-17, 10], [-14, 15], [-11, 44], [-23, 28], [-34, 11], [-14, 19], [-3, 10], [-24, 8], [-6, 24], [2, 25], [3, 13], [22, -12], [103, -117], [25, -36], [11, -22]], [[94652, 47053], [69, -171], [-3, -31], [-9, -19], [-3, -58], [8, -22], [19, -10], [32, -62], [13, -75], [1, -23], [14, -34], [0, -72], [30, -100], [3, -48], [-3, -22], [-12, 13], [-37, 113], [-41, 49], [-5, 21], [-42, 66], [-28, 111], [-30, 198], [14, 47], [-34, 96], [1, 25], [15, -6], [10, 2], [5, 11], [13, 1]], [[94920, 45859], [35, -34], [20, 6], [30, -23], [23, 13], [15, -30], [36, -118], [0, -38], [24, -27], [-20, -5], [-28, 14], [-22, -10], [-22, 23], [-38, 12], [-33, 27], [-69, 87], [0, 43], [-11, 21], [-3, 54], [-25, 17], [-29, 3], [-2, 26], [5, 45], [21, -1], [26, -19], [50, -65], [12, -12], [5, -9]], [[94873, 46298], [4, -62], [-2, -21], [-21, 45], [-10, -16], [-9, 22], [1, 46], [1, 50], [-4, 38], [-11, 55], [12, -9], [39, -148]], [[94218, 46587], [-4, -1], [-13, 7], [-16, 2], [-9, 20], [11, 29], [15, 18], [6, -4], [7, -12], [14, -5], [2, -37], [-13, -17]], [[94490, 46661], [16, -8], [8, 1], [18, -31], [25, -46], [-10, -23], [-20, 12], [-7, -5], [-2, 3], [-4, 23], [-22, 23], [-19, 2], [-3, 27], [20, 22]], [[94357, 46942], [-13, -8], [-20, 21], [-9, 19], [4, 30], [12, 12], [13, -20], [1, -21], [12, -33]], [[93822, 47095], [18, -47], [20, -105], [-4, -36], [-14, -3], [-4, -22], [-20, 51], [-26, 14], [-19, 31], [-6, 62], [-2, 39], [-15, 7], [-42, -10], [-14, -34], [-19, 11], [-4, 30], [3, 29], [26, 29], [5, 38], [26, 64], [15, 11], [31, -23], [3, -92], [11, -30], [31, -14]], [[93944, 46761], [-6, -2], [-7, 23], [15, 62], [8, -50], [4, -19], [-14, -14]], [[93918, 46840], [-27, -45], [-20, 15], [-17, 39], [6, 47], [3, 13], [8, 2], [8, 10], [9, 21], [29, -17], [8, -11], [-18, -29], [6, -9], [4, -14], [1, -22]], [[93718, 46823], [0, -8], [-15, 16], [-34, 78], [6, 26], [31, 50], [10, 7], [8, -31], [-7, -46], [-10, -12], [-5, -43], [16, -37]], [[93523, 47279], [-5, -8], [-9, 31], [-7, 10], [0, 34], [-28, 57], [-2, 39], [16, 38], [22, -22], [22, -48], [25, -16], [-5, -32], [-23, -57], [-6, -26]], [[93500, 47136], [-3, -15], [-15, 71], [1, 36], [3, 23], [5, 7], [12, -79], [-3, -43]], [[93658, 47172], [-6, -9], [-30, 4], [-23, 59], [0, 44], [18, 40], [22, 8], [12, -16], [11, -34], [4, -43], [-3, -38], [-5, -15]], [[93288, 47754], [-28, -13], [-17, 18], [7, 44], [10, 23], [35, -41], [-7, -31]], [[95272, 54910], [3, -27], [-18, 13], [-2, 10], [10, 10], [7, -6]], [[93975, 55768], [-16, -13], [-20, 5], [-6, 47], [-10, 13], [2, 23], [15, 19], [30, -15], [11, -34], [-7, -22], [1, -23]], [[98761, 30944], [2, -31], [-21, 11], [-8, 24], [-24, 24], [-4, 8], [-2, 48], [12, 23], [2, 10], [6, 4], [10, -26], [19, -36], [8, -59]], [[98309, 28304], [-38, -34], [2, 23], [7, 51], [17, 26], [8, 1], [17, 20], [-1, -43], [-12, -44]], [[96317, 25543], [-1, -28], [-3, -14], [-10, 0], [-14, 3], [-14, 13], [-10, -4], [-7, 5], [10, 32], [33, 17], [12, -14], [4, -10]], [[1062, 26647], [-10, -15], [-17, 1], [-30, -59], [2, 44], [-9, 17], [-26, -4], [-4, -10], [17, -12], [4, -6], [-17, -25], [17, -55], [15, 2], [14, -43], [0, -13], [-33, -16], [-17, -23], [-16, 1], [-7, 4], [-9, 41], [0, 17], [19, 31], [11, 30], [-9, 28], [-22, 19], [-48, -9], [-11, 6], [24, 39], [26, -5], [28, 28], [108, -13]], [[1062, 26312], [-12, -5], [1, 33], [-4, 21], [21, 7], [9, -26], [-15, -30]], [[96993, 21602], [15, -29], [-29, -13], [-14, 11], [-10, 13], [-5, 19], [15, -2], [14, 8], [14, -7]], [[96172, 22602], [6, -48], [-16, -1], [-32, 14], [-9, 21], [-7, 5], [-12, -24], [-18, -1], [-5, 8], [8, 25], [44, 49], [8, 61], [-1, 19], [35, 5], [8, -7], [3, -9], [-2, -11], [-14, -20], [0, -23], [3, -24], [-11, -12], [6, -21], [6, -6]], [[96706, 24848], [0, -23], [-29, 9], [1, -26], [23, -14], [8, -18], [24, 5], [5, -28], [-5, -24], [-16, -19], [-47, -9], [-31, -36], [-26, 6], [-7, -3], [-30, -39], [-34, -12], [-9, 3], [5, 34], [25, 33], [0, 31], [7, 25], [24, 18], [0, 33], [16, 29], [-10, 63], [6, 56], [47, 3], [53, -97]], [[88081, 42754], [-12, -27], [-15, 28], [-3, 29], [-12, 8], [6, 27], [6, 7], [6, 33], [16, -39], [1, -43], [7, -23]], [[88017, 42845], [-5, -4], [0, 48], [8, 24], [4, -50], [-7, -18]], [[87941, 42840], [-17, -2], [-4, 3], [-3, 25], [5, 23], [18, 6], [7, -6], [-6, -49]], [[86831, 45332], [-6, -9], [-22, 89], [6, 27], [-9, 46], [15, 5], [12, 34], [4, -16], [1, -63], [9, -36], [-10, -77]], [[91400, 40154], [-6, -6], [-10, 0], [-13, 11], [12, 74], [6, -39], [12, -32], [-1, -8]], [[91370, 40236], [-6, -3], [-7, 6], [5, 24], [7, 19], [10, 14], [-3, -52], [-6, -8]], [[90632, 41341], [6, -55], [12, -42], [-5, -28], [-7, -21], [-18, 19], [-12, 51], [-21, 41], [-5, 23], [25, -2], [12, 8], [5, 9], [8, -3]], [[89520, 45676], [-23, -33], [-15, 18], [-4, 36], [2, 16], [19, 28], [21, -65]], [[89538, 45972], [-17, -36], [-17, 11], [-6, 20], [6, 29], [23, 5], [11, -29]], [[89490, 45994], [-7, -16], [-12, 34], [14, 40], [12, -19], [-7, -39]], [[88751, 42296], [-21, -51], [-11, 7], [-10, -27], [-20, -13], [-12, 0], [-22, -13], [-4, 16], [4, 51], [19, 56], [18, 35], [46, 16], [36, 25], [4, -4], [26, -65], [-38, -8], [-15, -25]], [[88738, 41984], [-11, -10], [-3, 24], [14, 24], [9, 34], [19, -30], [3, -30], [-31, -12]], [[87975, 43891], [12, -24], [13, 2], [12, 53], [7, -8], [5, -13], [4, -23], [-17, -40], [-8, -6], [-7, -23], [-12, -73], [1, -24], [11, -25], [27, -22], [13, 10], [5, -3], [-5, -36], [-11, -27], [-36, 12], [-32, -4], [-52, 26], [-27, 3], [-8, 10], [16, 21], [10, 28], [-5, 67], [4, 84], [30, 41], [14, 42], [20, 26], [13, -3], [-2, -26], [5, -45]], [[87843, 43879], [-7, -6], [-25, 11], [0, 21], [3, 15], [7, 10], [16, 41], [11, -24], [5, -49], [-10, -19]], [[87943, 45288], [-20, -35], [-1, 26], [10, 21], [25, 84], [11, 20], [6, 11], [5, 31], [1, 46], [14, 7], [-11, -105], [-40, -106]], [[87871, 45159], [-44, -43], [24, 58], [51, 52], [8, 12], [-2, -25], [-26, -43], [-11, -11]], [[86238, 45115], [23, -14], [10, -19], [7, -21], [1, -25], [-29, -11], [-52, 37], [-51, -31], [-15, 0], [-10, 22], [8, 61], [19, -9], [16, 22], [-3, 67], [-9, 37], [27, 68], [12, 13], [12, 0], [11, -48], [2, -51], [13, -48], [8, -50]], [[86282, 45290], [37, -5], [45, 43], [21, -18], [9, 4], [33, 41], [21, 12], [15, 30], [14, -33], [32, -38], [11, -40], [13, -19], [5, -12], [-20, -42], [-3, -45], [-21, 3], [-25, -74], [-95, -124], [-85, 106], [-37, 71], [-24, 99], [-5, 82], [-10, 51], [4, 14], [5, 6], [7, -1], [25, -56], [12, -15], [16, -40]], [[84777, 43444], [-18, -36], [-12, 29], [7, 58], [12, 20], [10, -10], [-1, -45], [2, -16]], [[84610, 42971], [-11, -17], [-10, 5], [0, 23], [-11, 24], [6, 28], [4, 14], [9, -2], [3, -23], [12, -26], [-2, -26]], [[82068, 39868], [-17, -45], [-19, 9], [-3, 23], [13, 37], [22, 45], [7, -28], [-3, -41]], [[81439, 36835], [-7, -24], [-54, 180], [-15, 123], [10, 22], [10, 6], [32, -170], [10, -39], [0, -40], [4, -12], [10, -46]], [[90931, 26844], [-13, -59], [-21, 10], [-22, -10], [-13, 40], [0, 10], [16, -10], [6, 13], [4, 17], [5, 4], [4, 24], [14, 29], [8, 0], [9, -38], [3, -30]], [[91139, 27240], [-15, -5], [-6, 2], [1, 30], [-2, 13], [13, 27], [20, -13], [7, -20], [-19, -17], [1, -17]], [[90953, 26934], [-17, 0], [-7, 5], [-3, 29], [-11, 12], [6, 9], [2, 18], [7, 20], [13, -22], [10, -71]], [[90217, 28509], [-10, -47], [-11, 60], [12, 8], [9, 21], [2, -3], [-2, -39]], [[89979, 28734], [-8, -2], [-6, 32], [3, 47], [-14, 45], [8, 46], [-1, 50], [5, 22], [16, 24], [3, 43], [14, 2], [25, -33], [9, -85], [-4, -51], [9, -46], [-8, -40], [-21, -32], [-30, -22]], [[91201, 28624], [26, -34], [15, -38], [-20, -31], [-14, -6], [-9, 36], [-29, -13], [-31, 3], [-23, 27], [-3, 14], [14, 14], [38, -1], [36, 29]], [[91110, 28941], [50, -104], [25, -17], [8, -11], [-2, -45], [-11, -20], [20, -26], [-3, -17], [-4, 1], [-24, -35], [-29, -17], [-9, 12], [-8, 17], [-6, 23], [-37, 91], [4, 25], [-8, 38], [-18, -3], [-12, 23], [20, 22], [26, 61], [18, -18]], [[91176, 28504], [-14, -44], [-17, 28], [-2, 13], [21, 10], [7, -1], [5, -6]], [[88220, 31256], [67, -14], [26, 21], [32, -17], [22, -56], [-16, -27], [-15, -4], [-49, 23], [-46, -18], [-13, -23], [-9, -51], [-40, -28], [-18, 31], [-48, 22], [-17, -32], [-34, 9], [-32, -14], [-43, 8], [-46, 57], [-14, 26], [11, 47], [16, 34], [126, 49], [67, 41], [55, -7], [15, -9], [14, -21], [-10, -38], [-1, -9]], [[90412, 29749], [-42, -38], [-15, 17], [1, 29], [3, 13], [36, 2], [17, -23]], [[90364, 29671], [10, -28], [2, -11], [-24, 22], [-39, -5], [24, 40], [20, -8], [7, -10]], [[92649, 36038], [-24, -158], [-7, 3], [-9, 24], [1, 91], [10, 58], [24, -10], [5, -8]], [[92622, 36108], [-6, -9], [-12, 55], [-4, 56], [5, 51], [14, 11], [10, -4], [-11, -94], [4, -66]], [[92521, 37009], [-7, -16], [-13, 29], [-8, 102], [6, 59], [14, 55], [3, 30], [-6, 62], [42, 71], [10, 37], [4, 48], [-15, 52], [-12, 10], [10, 29], [12, 15], [9, 6], [7, -5], [5, -102], [17, -36], [-3, -50], [-58, -259], [-16, -97], [-1, -40]], [[91984, 38311], [10, -15], [8, 2], [8, -9], [-3, -38], [13, -42], [6, -30], [-10, -24], [-6, -8], [-15, 20], [-42, 121], [7, 41], [24, -18]], [[91809, 38984], [-8, -1], [-7, 10], [6, 23], [1, 32], [10, -10], [7, -45], [-9, -9]], [[91646, 39059], [-10, -18], [-6, 42], [1, 44], [10, 15], [5, -58], [0, -25]], [[82598, 56575], [-19, -14], [-4, 36], [2, 35], [14, -3], [6, -11], [1, -43]], [[82521, 56384], [-14, -44], [-16, 50], [1, 71], [5, 19], [24, 11], [0, -107]], [[83309, 57883], [-34, -18], [-8, 56], [24, 51], [28, -21], [16, -20], [-8, -18], [-18, -30]], [[83294, 58482], [6, -31], [-8, -46], [-7, -10], [-8, 19], [-20, 14], [-1, 24], [10, 0], [18, 24], [10, 6]], [[83360, 58852], [15, -9], [11, 8], [10, 31], [9, -45], [22, -37], [-7, -38], [-20, -4], [-19, 8], [-21, -15], [-25, 9], [-14, 35], [-17, 63], [-9, 12], [1, 26], [6, 16], [-3, 4], [2, 12], [3, 8], [5, 3], [13, -28], [32, -42], [6, -17]], [[83343, 58584], [-21, -19], [-5, 12], [-3, 28], [0, 20], [-20, 104], [15, 15], [11, -12], [12, -16], [10, -9], [10, -32], [-2, -23], [3, -22], [-10, -46]], [[84068, 57875], [-7, -8], [-7, 2], [-16, -21], [-6, 39], [5, 66], [25, 50], [6, 16], [7, 10], [8, 1], [8, -20], [2, -30], [-16, -90], [-9, -15]], [[84269, 57286], [-11, -15], [-4, 38], [3, 51], [21, 179], [-5, 45], [36, 100], [22, 93], [32, 99], [5, 51], [29, 97], [27, 134], [-1, 45], [7, 22], [4, 33], [0, 29], [20, 50], [6, -33], [-6, -64], [1, -30], [3, -14], [0, -60], [-7, -91], [7, -105], [-13, -107], [-15, -48], [-21, -34], [-24, -21], [-25, -53], [-15, -62], [-3, -57], [-39, -192], [-34, -80]], [[84376, 58342], [16, -76], [-22, 0], [-8, 56], [10, 18], [4, 2]], [[84609, 57480], [-3, -21], [-22, 2], [-8, -3], [-20, -54], [-12, -14], [-66, -18], [-52, 14], [-18, 30], [-12, 49], [-3, 33], [13, 35], [12, 24], [42, 46], [10, 35], [22, 43], [45, 14], [4, -11], [6, -6], [9, -2], [23, -35], [25, -23], [-6, -85], [7, -28], [4, -25]], [[84668, 57109], [-8, -34], [-31, 28], [-8, 25], [4, 29], [15, 10], [8, 0], [15, -31], [5, -27]], [[84360, 57164], [2, -60], [-25, -18], [-21, 16], [-13, 36], [0, 13], [11, -1], [26, 31], [8, 7], [12, -24]], [[83402, 54871], [-7, -35], [-9, -16], [-12, 9], [-9, 18], [-5, -27], [-24, -10], [-15, -41], [-23, -12], [-15, 6], [2, 37], [43, 54], [27, 21], [23, 39], [12, 5], [6, -33], [6, -15]], [[83914, 55546], [-28, -8], [-9, 0], [-22, 59], [-2, 26], [-18, 29], [6, 29], [23, 7], [40, 38], [64, -59], [10, -21], [-20, -13], [-14, -56], [-30, -31]], [[85016, 57468], [-4, -3], [-15, 45], [2, 51], [21, 76], [15, -67], [0, -30], [-2, -15], [14, -37], [-10, -19], [-21, -1]], [[84913, 57554], [-5, -16], [-6, 33], [-17, 31], [-15, 53], [-11, 16], [7, 42], [1, 68], [16, 31], [7, 10], [11, 33], [6, 2], [5, -28], [-11, -85], [16, -100], [-6, -62], [3, -14], [-1, -14]], [[83408, 59764], [0, -39], [-47, 57], [-1, 20], [1, 14], [5, 9], [25, -21], [17, -40]], [[83864, 59642], [18, -1], [5, 5], [33, -48], [-2, -24], [4, -33], [-19, -55], [-3, -19], [-11, -18], [-35, 44], [-13, 27], [-4, 56], [14, 81], [13, -15]], [[83914, 58959], [-22, -143], [-15, 49], [6, 31], [-13, 26], [-3, 24], [5, 31], [13, 29], [3, 94], [29, 30], [11, 1], [-4, -23], [1, -43], [-11, -106]], [[83974, 59060], [-8, -18], [-5, 3], [-4, 31], [8, 21], [3, -2], [6, -35]], [[84070, 58933], [-14, -13], [-29, 56], [-17, 26], [-4, 15], [13, 21], [37, 0], [19, -39], [3, -24], [-8, -42]], [[84244, 59247], [24, -88], [-26, 60], [-30, 41], [-31, 67], [-23, 24], [-6, 14], [2, 28], [17, 5], [7, -2], [45, -119], [21, -30]], [[84381, 59017], [1, -51], [-10, 19], [-34, 99], [-9, 36], [9, 24], [25, -37], [18, -90]], [[84365, 58921], [53, -69], [37, -116], [4, -89], [-3, -35], [-17, 39], [-38, 54], [-26, 12], [-8, 10], [3, 30], [-17, 27], [-2, 11], [-15, 12], [-23, 61], [-16, 12], [-15, -13], [-35, -91], [-37, -64], [-1, 25], [15, 79], [10, 128], [6, 39], [-8, 57], [-1, 51], [28, -24], [35, -23], [27, -33], [4, -22], [40, -68]], [[84542, 59695], [-8, -37], [-9, 13], [-12, -2], [-21, -32], [-33, 43], [-5, 33], [24, 73], [0, 109], [8, 27], [9, 19], [11, 11], [23, -75], [8, -10], [22, -34], [-5, -70], [2, -41], [-14, -27]], [[83937, 59935], [-1, -23], [-60, 85], [-3, 15], [0, 13], [4, 14], [60, -104]], [[83897, 60486], [5, -20], [-5, 1], [-4, -4], [-13, -41], [14, -77], [-9, -56], [-16, -4], [-6, 6], [3, 28], [4, 12], [-3, 37], [-10, 23], [-7, 44], [-12, 27], [6, 43], [36, 5], [17, -24]], [[83866, 62727], [-17, -42], [-10, 12], [10, 40], [0, 14], [8, 31], [15, 11], [13, -31], [-19, -35]], [[83680, 62835], [-1, -39], [-14, 21], [-3, 29], [1, 21], [6, 26], [9, -23], [2, -35]], [[83755, 62996], [3, -52], [-17, 1], [-24, 32], [-3, 16], [1, 13], [4, 11], [36, -21]], [[83877, 63574], [-5, -7], [-8, 3], [8, 55], [14, 15], [11, -6], [-20, -60]], [[83854, 63814], [-13, -47], [-11, 0], [2, 26], [14, 55], [5, -1], [3, -33]], [[91117, 48486], [-11, -4], [-5, 26], [-26, 23], [-26, 70], [1, 61], [3, 17], [15, 1], [57, -70], [6, -22], [-4, -66], [-10, -36]], [[90881, 48714], [-15, -3], [-26, 54], [-6, 21], [3, 28], [32, 39], [21, -35], [4, -75], [-13, -29]], [[90560, 49120], [-19, -17], [-13, 13], [-6, 38], [5, 36], [16, 29], [10, 9], [12, -20], [4, -38], [-9, -50]], [[91076, 50527], [-9, -30], [-21, 3], [-9, 9], [15, 6], [6, 25], [7, 8], [11, -21]], [[90851, 50714], [93, -38], [6, 1], [-1, 13], [1, 4], [6, -10], [-2, -27], [-15, -7], [-13, 3], [-10, -15], [-26, -52], [-18, 9], [-22, -12], [-38, -1], [-50, 23], [-13, -20], [-18, 6], [-17, -22], [-8, 1], [-4, 32], [1, 16], [20, 14], [-3, 49], [17, 25], [29, -3], [27, 17], [58, -6]], [[92957, 48713], [-6, -4], [-12, 72], [-2, 54], [-4, 40], [-6, 24], [18, 43], [8, 12], [13, -23], [2, -51], [11, -43], [-8, -95], [-14, -29]], [[92408, 50038], [-7, -51], [-17, 30], [-12, 42], [8, 20], [19, 11], [9, -52]], [[92249, 50145], [-3, -29], [-9, 1], [-24, 57], [-4, 15], [5, 14], [28, -41], [7, -17]], [[92209, 50212], [-6, 0], [-1, 46], [4, 24], [16, -16], [2, -42], [-15, -12]], [[91601, 50948], [-1, -21], [-20, 11], [-6, -3], [-34, 60], [0, 37], [9, 31], [15, -5], [25, -39], [12, -71]], [[91787, 50309], [-55, -8], [-20, 9], [-18, 33], [-16, 52], [-16, 12], [-7, 11], [39, 39], [35, 12], [56, -49], [6, -25], [0, -16], [-1, -53], [-3, -17]], [[91966, 46071], [12, 0], [20, 43], [17, 13], [11, -20], [-18, -137], [-16, 21], [-60, 38], [-2, 54], [-15, 18], [-10, 53], [-20, 58], [-4, 38], [12, -16], [12, -38], [53, -79], [-2, -25], [10, -21]], [[91762, 46374], [-4, -14], [-16, 10], [-46, 80], [7, 59], [21, 30], [31, -33], [10, -49], [3, -27], [-6, -56]], [[91813, 46459], [39, -48], [21, 14], [12, -7], [25, -55], [1, -40], [4, -34], [-1, -15], [-14, -21], [1, 24], [-10, 4], [-37, -1], [-28, 15], [-39, 4], [16, 36], [4, 14], [-21, 59], [0, 28], [1, 15], [17, 8], [9, 0]], [[91973, 46812], [5, -41], [-22, 44], [10, 50], [2, 27], [-1, 15], [-22, 26], [11, 42], [13, 14], [7, 4], [0, -59], [6, -27], [-9, -95]], [[92397, 46682], [16, -9], [33, 4], [11, -33], [16, -11], [13, -15], [12, -22], [0, -13], [-3, -12], [-7, -10], [2, -23], [-12, 3], [-16, -12], [-30, 27], [-11, 6], [-3, 24], [-19, 39], [-35, 28], [18, 23], [15, 6]], [[91915, 45757], [-4, -45], [-22, 13], [-5, 10], [4, 28], [20, 1], [7, -7]], [[92855, 45298], [-4, -31], [-10, 10], [-30, -16], [-16, 4], [-9, 28], [-3, 13], [27, -10], [-5, 31], [38, -16], [12, -13]], [[92648, 45232], [46, -30], [16, -34], [-17, -15], [-40, -10], [-10, 20], [-39, 21], [-6, 37], [-19, -13], [10, 27], [-25, 29], [-7, 40], [-1, 16], [28, -19], [64, -69]], [[89884, 46957], [-12, -2], [-49, 39], [-12, 29], [57, -7], [15, -7], [3, -40], [-2, -12]], [[89885, 46869], [5, -25], [-40, 35], [-39, 58], [-19, 15], [-13, 38], [24, -28], [41, -27], [41, -66]], [[87606, 51467], [59, -22], [21, 1], [21, -25], [26, 12], [14, -8], [49, -88], [24, -58], [35, -50], [26, -17], [-19, -45], [-39, -24], [-15, -1], [-30, 27], [-25, -5], [-21, 34], [-4, 52], [-21, 119], [-29, -34], [-33, 54], [-9, 1], [-3, -9], [-14, 19], [-12, 37], [-1, 30]], [[87631, 50926], [110, -29], [29, 4], [63, -12], [52, -38], [91, -7], [28, -12], [21, -26], [-51, -22], [-24, -20], [-45, -10], [-38, 10], [-27, -12], [-10, 20], [-39, 20], [-51, 41], [-105, 49], [-5, 30], [1, 14]], [[87489, 51200], [-13, -11], [-15, 12], [-15, 44], [5, 34], [17, 23], [15, -23], [4, -30], [11, -2], [-9, -47]], [[87325, 50619], [-8, -8], [-3, 25], [5, 33], [5, 6], [6, -2], [8, -12], [-13, -42]], [[88581, 47010], [-14, -7], [-69, 17], [-8, 24], [-1, 12], [16, 24], [15, 40], [24, 14], [10, 0], [28, -94], [-1, -30]], [[87102, 49397], [14, -31], [-33, 24], [-47, 51], [-3, 34], [40, -52], [29, -26]], [[86208, 50869], [4, -34], [16, -32], [-5, -49], [-7, -7], [4, -23], [7, -17], [-13, -12], [-10, 6], [-15, -16], [-10, -22], [-32, -9], [-11, 20], [-57, 24], [-37, 53], [-5, 16], [71, 62], [32, 17], [26, -1], [33, 23], [9, 1]], [[86389, 51085], [-10, -16], [-34, 15], [-17, 35], [-12, 48], [-8, 39], [-2, 32], [-10, 38], [1, 14], [62, 40], [12, -15], [26, -1], [12, -29], [-8, -127], [-12, -73]], [[86362, 51395], [-7, -30], [-14, -19], [-119, -36], [10, 21], [5, 21], [8, 11], [12, -3], [6, 7], [5, 2], [7, -3], [12, 9], [24, -6], [25, 5], [-2, 28], [28, -7]], [[86284, 51538], [-16, -1], [-28, 25], [16, 22], [11, 5], [9, 13], [5, 0], [12, -11], [7, -19], [-16, -34]], [[86336, 51840], [48, -24], [11, 4], [70, -64], [11, -31], [-4, -21], [10, -29], [-22, -43], [-11, -5], [-12, 16], [-22, 10], [-25, -18], [-17, 13], [-14, 40], [-24, 24], [-35, 84], [-17, -3], [5, -33], [14, -21], [20, -64], [11, -6], [11, 2], [16, -27], [-1, -41], [-40, -16], [-14, 30], [-3, 55], [-23, -19], [-9, -19], [-7, -2], [-15, 57], [-43, 3], [-29, 30], [14, 32], [2, 30], [19, 17], [19, -15], [19, 22], [14, -6], [10, 14], [38, 9], [25, 15]], [[85985, 51735], [-12, -2], [-10, 34], [-28, 37], [-17, 65], [65, -107], [2, -27]], [[85681, 53025], [-44, -10], [-10, 27], [-12, 124], [31, 99], [40, 58], [27, 15], [9, 1], [24, -71], [-18, -144], [-21, -73], [-26, -26]], [[85403, 51839], [-1, -17], [-9, 24], [-6, 6], [6, 62], [4, 11], [5, -43], [1, -43]], [[85394, 52213], [-10, -7], [-3, 2], [-3, 24], [5, 39], [12, 0], [5, -6], [1, -29], [-7, -23]], [[85346, 51557], [-17, -15], [-19, 1], [-4, 61], [6, 78], [18, 13], [27, -16], [-10, -20], [8, -42], [-9, -60]], [[85360, 51393], [-3, -12], [-29, 15], [-8, 8], [15, 82], [14, -2], [12, -78], [-1, -13]], [[85434, 51659], [32, -86], [-21, -82], [15, -46], [40, -2], [10, -17], [7, -21], [4, -28], [-10, -23], [-23, -20], [-26, 29], [-7, 28], [-5, 10], [-35, -21], [-10, -2], [-6, 39], [8, 55], [-24, 25], [-23, 57], [-1, 24], [9, 39], [-1, 32], [13, 3], [23, -43], [11, 40], [9, 17], [11, -7]], [[85597, 50886], [-17, -23], [-8, -7], [-41, 16], [-48, -3], [-50, -22], [-29, 18], [-18, 30], [1, 32], [17, 78], [37, 60], [16, 10], [26, -16], [45, -45], [36, -54], [32, -41], [1, -33]], [[87429, 48555], [-2, -22], [-1, -41], [5, -38], [-12, -39], [11, -57], [2, -29], [-1, -41], [-3, -18], [-8, -54], [-9, -19], [-6, -5], [-7, -16], [-54, 18], [-24, 37], [-21, 40], [-4, 17], [-25, 46], [-6, 16], [0, 25], [20, 7], [21, -1], [-1, 22], [13, 80], [-33, 51], [-6, 21], [12, 15], [26, -18], [32, 89], [10, 19], [4, 50], [18, 6], [13, -6], [8, -31], [3, -27], [-3, -24], [15, -13], [13, -60]], [[87370, 48132], [-4, -41], [-5, -45], [-25, -51], [-16, -78], [-9, -19], [-34, -35], [-30, 43], [-9, 37], [13, 172], [13, -6], [9, 1], [2, 12], [-19, 19], [-4, 98], [1, 38], [15, 8], [18, -29], [24, -52], [27, -40], [33, -32]], [[86923, 48443], [-22, -50], [21, 117], [4, 59], [20, 36], [29, 179], [7, -5], [10, -17], [-15, -131], [-41, -92], [-13, -96]], [[86890, 48472], [-17, -55], [-11, 19], [-7, 1], [-4, 32], [4, 68], [-14, 76], [19, -1], [5, -23], [6, -8], [18, -73], [1, -36]], [[85755, 49800], [0, -25], [-2, -8], [-15, 9], [-11, -1], [-10, 44], [3, 10], [20, -12], [7, -5], [8, -12]], [[85711, 49777], [-48, -30], [11, 56], [6, 15], [24, -15], [7, -26]], [[85631, 49726], [-7, -21], [-16, -14], [-14, 1], [5, 21], [-4, 11], [-10, -5], [-16, -16], [-20, -33], [-13, 16], [-2, 26], [1, 11], [24, 45], [29, 8], [40, 43], [18, -2], [-4, -27], [-6, -20], [-4, -20], [-1, -24]], [[84216, 49221], [6, -124], [-2, -32], [-15, 47], [-6, 10], [-4, -10], [-6, -5], [-8, 0], [-10, -48], [-1, -45], [-8, -30], [-4, -101], [3, -28], [12, 14], [7, 3], [27, -39], [15, -28], [-4, -34], [-19, -35], [-21, -15], [-16, 15], [-5, -7], [-9, -18], [-8, -24], [3, -24], [-19, -68], [-10, -19], [-22, 21], [-14, -18], [-11, 1], [-16, 69], [0, 32], [15, 36], [1, 26], [7, 29], [17, 40], [10, 29], [0, 19], [8, 72], [2, 30], [5, 32], [8, 66], [1, 122], [26, 101], [25, 28], [11, 5], [-2, -27], [31, -68]], [[84067, 48807], [-7, -38], [-15, -30], [-13, -2], [-12, 6], [-23, 26], [-6, -27], [-18, 1], [-6, 35], [12, 105], [19, 39], [-2, 41], [-15, 88], [10, 46], [43, 34], [37, 42], [12, 9], [11, -32], [5, -149], [-40, -118], [8, -76]], [[83900, 48710], [-18, -15], [-33, 66], [-14, 54], [3, 31], [10, 26], [5, 7], [-2, 28], [13, 14], [15, -2], [9, -38], [11, -10], [6, -36], [-5, -125]], [[84233, 49473], [-27, -69], [-19, 4], [-23, 45], [-6, 50], [-1, 18], [16, 28], [52, -9], [9, -25], [-1, -42]], [[85014, 50431], [-4, -11], [-17, 31], [-11, 88], [-10, 24], [-11, 83], [3, 24], [14, 35], [11, 0], [8, -21], [-5, -90], [25, -114], [-3, -49]], [[85006, 50812], [85, -19], [-12, -21], [-92, -33], [-33, 6], [-100, -20], [-12, 1], [-2, 32], [-11, 23], [16, 20], [21, 4], [55, -7], [85, 14]], [[84713, 50860], [26, -20], [9, 0], [9, 24], [5, 4], [12, -12], [2, -39], [17, 6], [13, -14], [4, -9], [-1, -39], [-50, -6], [-36, -32], [-48, 28], [-54, -48], [-33, -16], [-28, 1], [-25, 84], [14, 99], [11, 16], [18, 8], [50, 5], [85, -40]], [[84401, 50716], [5, -23], [-17, 1], [-7, 43], [1, 24], [18, -45]], [[84225, 51168], [6, -36], [-10, -31], [11, -59], [28, 78], [27, 10], [15, -13], [10, -15], [6, -30], [-10, -63], [-18, -30], [-22, -5], [-11, 37], [-15, 4], [-10, -81], [-5, -12], [-13, -10], [-12, 22], [-2, 12], [17, 37], [-9, 108], [-13, -20], [-34, -99], [-26, -44], [-8, 23], [-14, 67], [6, 86], [21, 58], [18, -4], [52, 18], [15, -8]], [[84208, 50796], [-20, -47], [-2, 25], [4, 23], [5, 16], [9, 9], [4, -26]], [[83850, 51608], [12, -25], [-7, -30], [-9, 7], [-26, 0], [-9, -2], [-12, -18], [-7, 0], [5, 27], [21, 41], [14, -6], [18, 6]], [[85226, 54166], [-11, -12], [-18, 4], [-2, 30], [18, 52], [12, 56], [-13, 14], [-12, 35], [-1, 41], [11, 76], [15, -6], [14, -33], [6, -62], [10, -47], [-20, -64], [-9, -84]], [[85199, 54075], [1, -25], [-17, 56], [-7, 65], [14, -23], [15, -49], [-6, -24]], [[85236, 54013], [-5, -6], [-10, 15], [-6, 17], [1, 17], [7, 9], [14, -26], [0, -15], [-1, -11]], [[84904, 53822], [-7, -18], [-34, 32], [2, 51], [-4, 25], [-9, 27], [-4, 26], [4, 28], [20, -36], [12, -57], [16, -55], [4, -23]], [[84835, 53370], [-3, -13], [-11, 68], [9, 34], [12, -13], [3, -12], [-11, -32], [1, -32]], [[83479, 48215], [-11, -96], [-6, 33], [-2, 88], [-7, 43], [5, 49], [-1, 126], [8, 58], [16, -74], [4, -38], [-6, -189]], [[86661, 47694], [-4, -28], [-12, 15], [-11, 33], [-17, 5], [-13, 8], [-7, 16], [47, 7], [17, -56]], [[86350, 47051], [-24, -18], [16, 45], [52, 104], [18, -19], [25, -4], [-37, -47], [-38, -19], [-12, -42]], [[86478, 47235], [-4, -7], [-35, 8], [-19, 0], [2, 43], [-10, 33], [14, 48], [0, 56], [15, 7], [2, 32], [17, 84], [10, 19], [15, 7], [17, 49], [10, 15], [10, 37], [15, 17], [-2, 32], [9, 17], [23, 13], [16, -15], [10, -33], [-26, -40], [13, -99], [-19, -108], [-12, -33], [-23, -27], [-6, -27], [-27, -53], [-8, -46], [-2, -19], [-5, -10]], [[86065, 47261], [-16, -53], [-18, 3], [-34, 71], [2, 50], [3, 16], [13, 5], [43, -15], [9, -40], [-2, -37]], [[85741, 47705], [-13, -15], [-20, 30], [-6, 13], [13, 29], [14, 9], [9, -13], [4, -13], [-2, -14], [1, -26]], [[85506, 47177], [48, -23], [28, 3], [6, -21], [-27, -49], [-56, 38], [-10, 40], [11, 12]], [[85393, 47451], [-17, -13], [5, 43], [-1, 34], [29, -11], [0, -27], [-3, -10], [-13, -16]], [[85222, 47426], [3, -28], [0, -13], [-33, -9], [-32, -31], [-17, -36], [-13, -46], [-44, 19], [-39, 3], [-18, 16], [-19, -1], [-24, -14], [-35, -40], [-8, -3], [3, 60], [10, 37], [36, 88], [31, -19], [36, -6], [40, 18], [29, 39], [40, 21], [33, -52], [21, -3]], [[84901, 47154], [-19, -99], [-20, 21], [22, 55], [10, 17], [7, 6]], [[84281, 45908], [-25, -20], [0, 42], [20, 54], [17, 18], [10, -22], [1, -9], [-26, -20], [3, -43]], [[84152, 45559], [-26, -1], [-8, 6], [-3, 51], [8, 28], [60, 37], [23, 34], [34, 70], [20, 18], [5, 8], [4, -1], [3, -54], [9, -31], [1, -17], [-30, -27], [-26, -62], [-59, -41], [-15, -18]], [[83856, 45742], [-14, -7], [-30, 17], [-6, 10], [25, 28], [20, 39], [23, 4], [14, -8], [-5, -47], [-27, -36]], [[84603, 47153], [7, -35], [22, 20], [21, 4], [47, -3], [35, -8], [21, -15], [2, -70], [-10, -15], [-181, -53], [-18, 17], [-7, 17], [20, 52], [-9, 25], [10, 40], [22, 27], [18, -3]], [[84523, 47045], [-17, -36], [-11, -62], [-11, -19], [-22, -11], [-14, 62], [-24, -3], [12, 54], [11, 21], [16, 0], [7, -22], [4, -4], [36, 92], [7, 1], [6, -4], [5, -11], [-5, -58]], [[84423, 47077], [-39, -15], [-24, -72], [-19, 1], [-11, -32], [-2, -14], [1, -12], [-2, -13], [-8, -12], [-17, 20], [-16, -25], [-6, -7], [-23, 30], [-21, -2], [-6, 5], [26, 52], [36, 50], [6, 18], [-14, 5], [-8, 7], [-2, 12], [23, 7], [16, 2], [12, -16], [8, 1], [48, 58], [20, -14], [14, -14], [8, -20]], [[84254, 47030], [-6, -25], [-75, 2], [2, 33], [21, 36], [7, 12], [23, 11], [33, -20], [-5, -49]], [[83184, 46808], [-11, -6], [-11, 8], [4, 52], [-6, 34], [11, 28], [3, 48], [5, 15], [6, -15], [4, -10], [5, -5], [13, -1], [3, -21], [-1, -19], [-5, -21], [-15, -23], [-11, -25], [6, -39]], [[83075, 47097], [-12, -1], [-2, 23], [4, 24], [12, 11], [5, 0], [8, -22], [2, -11], [-8, -15], [-9, -9]], [[82113, 46791], [-8, -20], [-22, 35], [-6, 16], [17, 23], [6, 3], [14, -24], [-1, -33]], [[82048, 47827], [-22, -10], [-21, 21], [0, 27], [5, 25], [32, 13], [17, 0], [18, -18], [12, -18], [6, -21], [-34, -1], [-13, -18]], [[81310, 48495], [-6, -20], [-26, 1], [-5, 24], [17, 41], [12, 3], [10, -15], [-2, -34]], [[82756, 54178], [-52, -29], [-31, 68], [11, 47], [-1, 27], [13, 7], [15, -6], [34, -38], [9, -55], [2, -21]], [[82682, 53732], [-3, -19], [-24, 47], [-7, 33], [3, 27], [25, 2], [12, -17], [-6, -73]], [[82339, 49847], [-10, -99], [-17, 56], [19, 67], [9, 13], [-1, -37]], [[82306, 49614], [-59, -107], [-9, 28], [5, 109], [-17, 67], [2, 51], [11, 89], [15, 68], [34, 46], [8, 5], [-2, -83], [7, -31], [2, -27], [-3, -23], [6, -105], [4, -26], [-8, -33], [4, -28]], [[80264, 50910], [-32, -25], [-10, 55], [21, 16], [22, -14], [-1, -32]], [[80474, 51163], [-55, -59], [-13, 3], [-10, 21], [6, 113], [7, 34], [39, 4], [23, -17], [12, -18], [5, -38], [-2, -23], [-12, -20]], [[80246, 53516], [-14, -30], [-14, 19], [22, 61], [5, 4], [1, -54]], [[80087, 53968], [-38, -21], [-22, 30], [24, 36], [8, 3], [6, 7], [2, 15], [-43, 24], [-12, 21], [-12, 54], [0, 34], [55, 91], [13, 10], [2, -38], [38, -95], [2, -64], [-1, -23], [-22, -84]], [[79523, 53661], [-1, -39], [-19, 23], [-4, 44], [7, 14], [13, -8], [4, -34]], [[79377, 53492], [-12, -2], [-3, 17], [1, 29], [-2, 24], [-3, 17], [0, 30], [11, -15], [8, -14], [10, -10], [7, -6], [4, -5], [-7, -42], [-14, -23]], [[78251, 53040], [16, -47], [3, -31], [-11, -35], [-4, -54], [-33, -42], [-28, 10], [-9, 15], [-18, 82], [2, 69], [11, 27], [26, -4], [27, 38], [18, -28]], [[78451, 52413], [-13, -18], [-15, 28], [-13, 39], [-6, 41], [-6, 68], [-2, 48], [8, 28], [5, -1], [23, -28], [15, -49], [9, -15], [1, -45], [-5, -52], [-1, -44]], [[78469, 52683], [2, -74], [-20, 20], [-17, 29], [-25, 22], [-32, 7], [-23, 19], [-16, 34], [0, 16], [1, 13], [5, 10], [119, -67], [6, -29]], [[78618, 52273], [-5, -22], [-11, 16], [-54, 25], [-18, 2], [-47, 28], [-14, 14], [-10, 19], [3, 35], [7, 21], [4, 59], [12, 24], [23, -44], [26, -38], [15, -17], [46, -38], [16, -19], [7, -65]], [[78657, 52344], [-9, -17], [-14, 4], [-14, 20], [-20, 35], [-21, 31], [-28, 20], [-17, 5], [-6, 8], [6, 60], [18, 4], [58, -56], [19, -31], [28, -83]], [[78689, 52155], [-31, -4], [-9, 8], [4, 54], [9, 33], [14, -1], [16, -49], [-3, -41]], [[78728, 52447], [2, -32], [-19, 8], [-13, 37], [11, 26], [7, 10], [7, -36], [5, -13]], [[78735, 52225], [-5, -7], [-24, 73], [6, 42], [6, 11], [13, -26], [10, -27], [8, -32], [-14, -34]], [[78840, 52304], [2, -17], [-25, 34], [-1, 24], [3, 11], [15, -26], [6, -26]], [[78895, 52523], [18, -25], [14, 16], [-1, -21], [-3, -21], [-17, -59], [-28, 13], [-7, 19], [-2, 15], [4, 9], [3, 29], [12, 0], [7, 25]], [[79051, 52543], [1, -43], [16, -21], [4, -32], [-3, -51], [-14, -59], [-7, -15], [-20, 12], [-6, 19], [-3, 16], [3, 11], [-15, 14], [10, 22], [-7, 32], [-40, -20], [-12, -1], [-2, 36], [2, 15], [31, 45], [18, 9], [20, -10], [24, 21]], [[78955, 52323], [-18, -17], [-22, 53], [1, 12], [2, 9], [4, 6], [13, -27], [16, -10], [4, -26]], [[79080, 51877], [2, -14], [-13, 16], [-8, 10], [-5, 8], [-29, 79], [12, -5], [32, -69], [9, -25]], [[79104, 51741], [8, -9], [10, 30], [19, -41], [11, -21], [15, -20], [-15, -1], [-6, -19], [-4, -4], [-59, 66], [-38, -21], [-25, 19], [-8, 14], [14, 36], [13, 83], [26, -21], [6, -26], [-2, -7], [17, -16], [18, -42]], [[79020, 51650], [26, -56], [6, -20], [-13, -31], [-10, -44], [-6, -9], [-20, 16], [-14, -43], [-9, 69], [-20, 44], [12, 44], [5, 4], [6, -2], [6, -11], [31, 39]], [[78815, 51642], [-36, -20], [-41, 15], [5, 34], [20, 41], [17, -2], [31, -27], [12, -23], [-8, -18]], [[80057, 50116], [-5, -61], [-6, -23], [-24, -30], [-7, -18], [-22, 3], [-3, 32], [-7, 21], [-23, 25], [-6, -6], [-4, -37], [-45, -26], [-13, -2], [6, 49], [-11, 38], [-1, 47], [-2, 21], [-6, 12], [11, 32], [-1, 37], [12, 39], [7, 95], [47, 21], [10, -17], [56, -21], [39, -58], [21, -77], [-23, -96]], [[79853, 50172], [-11, -14], [-7, 14], [-2, 16], [5, 20], [15, 2], [7, -6], [-7, -32]], [[79690, 50111], [-5, -11], [-15, 6], [-11, 16], [-7, 15], [-2, 16], [15, 20], [32, -20], [-7, -42]], [[79236, 48018], [-17, -13], [-13, 11], [-6, 16], [19, 40], [10, 10], [9, 3], [5, -22], [-7, -45]], [[77077, 52687], [61, -162], [24, -22], [33, -74], [8, -25], [-9, -52], [-7, -147], [-15, -37], [-38, 18], [-1, 26], [-22, 111], [-39, 62], [-16, 3], [-10, 63], [-20, 76], [-60, 137], [46, -1], [22, 33], [5, 27], [4, 7], [34, -43]], [[78435, 48687], [-23, -3], [-42, 71], [-7, 22], [12, 21], [13, -2], [48, -45], [9, -22], [-10, -42]], [[77895, 50009], [11, -84], [-33, 58], [1, 40], [-5, 26], [-20, 33], [-15, 40], [-7, 96], [5, 20], [13, 1], [58, -126], [4, -21], [-1, -45], [-8, -14], [-3, -24]], [[77834, 50264], [-20, -47], [-33, 1], [-6, 29], [1, 70], [-8, 22], [0, 9], [6, 40], [6, 9], [53, -98], [1, -35]], [[77733, 50493], [2, -15], [-45, 50], [-22, 14], [-19, 56], [5, 26], [1, 37], [3, 15], [14, 5], [18, -27], [13, -66], [23, -61], [7, -34]], [[77545, 50818], [-26, -3], [-55, 69], [-13, 31], [-3, 42], [-52, 159], [-7, 37], [20, 131], [54, 31], [18, -22], [6, -59], [30, -106], [10, -57], [8, -26], [3, -19], [-2, -14], [22, -68], [15, -39], [2, -64], [-30, -23]], [[77349, 51537], [-17, -27], [-25, 26], [9, 37], [4, 51], [15, 41], [5, 47], [-29, 130], [14, 5], [12, -14], [19, -87], [17, -52], [-7, -70], [-17, -87]], [[77037, 53038], [-2, -13], [-29, 61], [-32, 34], [13, 8], [27, -9], [11, -9], [10, -30], [2, -42]], [[76795, 53202], [-18, -5], [-16, 12], [-14, 33], [-75, 96], [-23, 1], [-16, 25], [-20, 8], [-21, 64], [-5, 35], [16, 16], [9, 35], [25, -15], [28, -62], [29, -23], [8, -12], [14, -34], [66, -85], [7, -28], [5, -29], [1, -32]], [[76489, 55191], [-6, -16], [-16, 8], [-18, 52], [6, 10], [12, -5], [21, -12], [2, -20], [-1, -17]], [[80941, 53234], [-9, -8], [-13, 21], [-3, 175], [9, 15], [6, -2], [7, -32], [-1, -76], [1, -68], [3, -25]], [[82539, 55972], [-17, -31], [-6, 37], [1, 47], [23, 44], [33, 8], [4, -35], [-4, -40], [-7, -21], [-27, -9]], [[58892, 78458], [38, -29], [-39, 8], [-86, 27], [-38, 25], [-10, 28], [-5, 38], [21, -40], [15, -18], [104, -39]], [[56367, 85729], [-23, -28], [-13, 11], [-7, 14], [-30, -65], [-33, -11], [-19, 13], [2, 24], [-19, 63], [-29, 19], [-40, 1], [-30, 26], [113, 18], [12, 30], [23, 32], [17, 3], [15, -7], [2, -25], [4, -10], [51, -13], [20, -41], [8, -50], [-24, -4]], [[56484, 85570], [-23, -6], [-55, 41], [13, 27], [15, 11], [47, -17], [6, -42], [-3, -14]], [[59948, 89390], [9, -23], [3, -37], [-9, -24], [5, -20], [-18, -14], [-27, 46], [-17, 1], [-17, 20], [-8, 33], [15, 9], [7, -6], [33, 24], [24, -9]], [[61864, 90265], [-10, -8], [-55, 27], [-5, 21], [2, 8], [22, 6], [23, -7], [17, -27], [6, -20]], [[57465, 97147], [-41, -1], [-75, 42], [-14, 37], [13, 15], [36, 1], [57, -51], [61, -15], [-37, -28]], [[58068, 97299], [83, -4], [83, 9], [14, -9], [-107, -31], [-119, 16], [-107, 4], [-127, -33], [-42, 13], [65, 33], [70, 10], [11, 20], [27, 4], [93, 2], [56, -34]], [[63903, 97968], [-23, -8], [-106, 44], [-9, 13], [91, 41], [102, -6], [16, -20], [3, -7], [-69, -36], [-5, -21]], [[64280, 97893], [7, -7], [-1, -6], [-99, 6], [-173, -4], [-100, 32], [106, 32], [56, 7], [72, 27], [89, -26], [-5, -23], [1, -11], [24, -10], [23, -17]], [[59034, 97994], [-263, -22], [-27, 16], [427, 63], [22, 6], [80, 8], [68, -14], [-20, -11], [-287, -46]], [[66058, 98816], [14, -23], [43, -13], [117, -11], [35, -26], [-53, -19], [-143, -10], [15, -38], [29, -28], [-29, -33], [-40, -16], [-88, -19], [-81, 24], [-94, 35], [-42, -23], [-44, -14], [-41, 2], [-48, 27], [-132, -21], [-40, 23], [-29, 48], [87, 10], [104, -15], [69, 48], [88, 21], [70, 51], [33, 17], [76, -3], [25, 4], [73, 13], [26, -11]], [[65199, 98568], [209, -55], [194, 5], [84, -17], [122, -50], [182, -53], [35, -16], [-31, -21], [-213, -53], [-138, -18], [-120, -3], [-48, 6], [-48, 38], [-117, 28], [-125, -8], [-13, 15], [-25, 11], [-43, 2], [-86, 15], [-6, 34], [54, 17], [35, 1], [14, 48], [60, 73], [24, 1]], [[64098, 98529], [-39, -4], [-27, 3], [-29, 22], [-10, 11], [-2, 11], [26, 2], [12, 11], [4, 8], [20, 6], [34, 1], [45, -12], [19, -24], [-44, -21], [-9, -14]], [[66283, 98526], [39, -30], [15, -33], [24, -20], [8, -38], [-20, -31], [-60, -6], [-99, -2], [-97, 16], [-52, 56], [-96, 15], [-54, 58], [56, 17], [68, -8], [109, 50], [15, -3], [24, -11], [88, -19], [32, -11]], [[67680, 98853], [-34, -8], [-179, 7], [-86, 14], [-12, 8], [-4, 7], [-114, 12], [49, 16], [142, 7], [254, -19], [16, -13], [5, -8], [-37, -23]], [[66193, 98914], [-92, -12], [-13, 9], [-3, 6], [10, 15], [11, 29], [42, 17], [313, 16], [41, -17], [-15, -26], [0, -12], [-294, -25]], [[55205, 98099], [-60, -32], [-100, 25], [12, 25], [23, 15], [64, -6], [61, -27]], [[53125, 97125], [3, -40], [45, 4], [53, -42], [58, -22], [17, -16], [12, -20], [35, -40], [17, -42], [-42, -4], [-58, 60], [-47, 34], [-60, 29], [-48, 2], [-21, 12], [-78, 105], [-15, 24], [-44, 39], [-20, 48], [0, 38], [60, -9], [52, -24], [45, -54], [9, -16], [-21, -22], [21, -27], [27, -17]], [[55338, 94695], [-33, -23], [-51, 34], [-33, 43], [18, 16], [89, 3], [22, -23], [4, -13], [-16, -37]], [[64761, 92881], [14, -16], [4, -32], [-38, -54], [-6, -20], [16, -18], [4, -10], [-27, -8], [-5, 25], [-15, 24], [-32, 19], [-13, 16], [-14, 38], [-53, 40], [-34, -6], [-38, 18], [-11, 8], [-3, 23], [16, 19], [60, 16], [29, -1], [31, -16], [-2, 20], [3, 8], [13, -3], [35, -20], [25, -42], [22, -31], [19, 3]], [[64761, 92881], [-1, 0], [2, 0], [-1, 0]], [[70738, 93820], [-6, -5], [-14, 10], [-42, 15], [-71, 39], [-22, 27], [11, 30], [16, 20], [58, 12], [53, -5], [35, -7], [66, -27], [-61, -17], [-26, -37], [3, -22], [11, -13], [-11, -20]], [[70973, 94156], [-45, -14], [9, 26], [54, 37], [100, 19], [30, -8], [4, -6], [-42, -39], [-21, -13], [-89, -2]], [[71320, 94150], [-26, -4], [-118, 22], [-43, 27], [16, 18], [31, 0], [140, -63]], [[71564, 93485], [-135, -5], [-67, 9], [-10, 11], [9, 28], [69, 42], [31, 27], [32, 46], [56, 38], [47, 0], [147, -45], [21, -28], [3, -13], [-58, -38], [-41, -14], [-63, -48], [-41, -10]], [[72083, 93733], [-20, -6], [-152, 23], [-53, 30], [-16, 27], [6, 24], [141, 117], [54, -33], [15, -31], [36, -38], [-1, -86], [-10, -27]], [[72974, 94522], [-27, -20], [-37, 11], [-27, 13], [-14, 19], [14, 10], [40, 7], [24, -7], [21, -22], [6, -11]], [[73207, 94511], [-14, -14], [-13, 2], [-11, -7], [-70, 21], [-95, 9], [24, 22], [68, 13], [101, -17], [30, -19], [-20, -10]], [[73543, 94734], [-13, -34], [-78, 17], [-11, 14], [42, 21], [38, 12], [54, 2], [-32, -32]], [[74070, 95035], [23, -11], [73, 17], [14, -6], [20, -24], [-31, -45], [-23, -18], [-66, 10], [-83, 1], [-37, 25], [20, 26], [48, 16], [28, 15], [14, -6]], [[72825, 95287], [10, -19], [4, -21], [-12, -6], [-36, 1], [-20, -54], [-20, 9], [-13, 31], [-45, -21], [-12, 5], [-21, 24], [-13, 5], [-9, 16], [59, 48], [36, -25], [24, 1], [-5, 29], [1, 22], [30, 9], [40, 1], [2, -55]], [[76814, 95782], [22, -9], [-6, -24], [-29, 7], [-38, -12], [1, -20], [-15, -33], [-53, 20], [-73, 3], [-46, 19], [-102, 12], [3, 27], [16, 16], [59, -23], [54, 26], [101, -13], [33, 19], [73, -15]], [[77107, 95967], [-15, -9], [-29, 4], [-24, 22], [-9, 35], [20, 9], [57, -61]], [[76745, 96213], [-9, -11], [-12, -9], [-33, 6], [-65, -16], [-25, 9], [-24, 18], [-88, -6], [-26, 4], [42, 22], [120, 24], [188, 62], [9, -30], [0, -14], [-38, -34], [-39, -25]], [[74864, 96306], [-59, -3], [-34, 15], [-10, 10], [16, 26], [23, 17], [93, 6], [17, -18], [-4, -15], [-42, -38]], [[71180, 97725], [34, -21], [26, 16], [248, -50], [53, -18], [11, -13], [-217, -8], [-44, 3], [-4, 29], [-49, 1], [-85, 19], [-23, 27], [-5, 11], [27, 11], [28, -7]], [[72229, 98414], [-258, -21], [-25, 13], [-8, 8], [36, 44], [30, 21], [164, 8], [131, -14], [41, -13], [-15, -26], [-8, -9], [-88, -11]], [[75435, 98583], [-96, -45], [-346, 29], [-16, 20], [-5, 13], [47, 25], [288, -9], [103, -9], [25, -24]], [[79915, 96849], [-25, -28], [-35, -14], [-38, 23], [-95, -1], [-163, 25], [47, 16], [257, 13], [18, -3], [34, -31]], [[79519, 96892], [-33, -4], [-36, 12], [10, 26], [81, 4], [30, 39], [51, -2], [14, -11], [8, -13], [-1, -17], [-11, 0], [-48, -2], [-9, -9], [-56, -23]], [[79837, 96337], [-32, 0], [-9, 27], [27, 33], [34, 0], [29, -10], [10, -5], [10, -12], [4, -18], [-73, -15]], [[81243, 95979], [43, -39], [8, -25], [-13, -6], [-8, -9], [-3, -18], [-12, -1], [-38, 19], [-27, 31], [-40, 7], [-42, 31], [-9, 13], [11, 4], [75, -8], [32, 14], [23, -13]], [[83405, 93945], [-70, -26], [-60, 0], [-42, 46], [33, 18], [57, 7], [31, -6], [44, -29], [7, -10]], [[84594, 94383], [-17, -1], [-32, 15], [-8, 21], [0, 10], [26, 8], [33, -5], [25, -19], [4, -7], [-31, -22]], [[87763, 95281], [-57, -16], [-81, 5], [6, 42], [14, 19], [19, 46], [-9, 35], [5, 42], [10, 33], [23, 45], [25, -27], [17, -40], [15, -20], [62, -39], [12, -12], [-52, -48], [-5, -21], [16, -27], [-20, -17]], [[91430, 96001], [-209, -6], [14, 16], [75, 40], [191, 21], [-38, -20], [-18, -41], [-15, -10]], [[87832, 94420], [-21, -17], [-20, 25], [-93, 76], [-23, 35], [-51, 34], [-13, 12], [-4, 30], [67, -19], [113, -75], [62, -60], [-17, -41]], [[88321, 93034], [-69, -49], [-27, 6], [-28, 24], [-15, 5], [-15, -4], [-17, -10], [-22, -2], [-51, 26], [-5, 16], [5, 8], [14, 8], [10, 0], [32, 13], [149, 5], [11, -3], [21, -23], [7, -20]], [[94643, 92639], [-19, -10], [-40, 8], [-19, 18], [1, 42], [2, 6], [33, -6], [22, -23], [20, -35]], [[96999, 91923], [-79, -5], [-158, 54], [-56, 28], [-42, 36], [-48, 25], [-9, 10], [7, 21], [14, 16], [54, 43], [38, 19], [45, 4], [283, -76], [12, -16], [4, -14], [-4, -30], [-24, -6], [-9, -20], [-10, -61], [-5, -16], [-13, -12]], [[95453, 85600], [-45, -54], [-7, 9], [-4, 12], [-1, 19], [41, 36], [42, 91], [16, 75], [-5, 25], [-2, 24], [123, 47], [87, 75], [16, -3], [15, -63], [9, -81], [-12, -49], [-94, -28], [-88, -54], [-91, -81]], [[96677, 83274], [11, -30], [-112, 106], [-52, 56], [-13, 36], [19, 0], [23, -34], [32, -16], [48, -46], [44, -72]], [[96291, 83432], [-2, -84], [-34, 43], [-16, 34], [-23, 6], [-16, 16], [-26, 41], [-31, 54], [-10, 27], [-4, 34], [-21, 31], [-67, 60], [22, 7], [28, 26], [78, -16], [18, -7], [-13, -40], [5, -44], [43, -92], [21, -32], [28, -25], [20, -39]], [[93445, 81023], [-11, -13], [-11, 3], [-36, 36], [-8, 17], [13, 30], [45, 45], [22, -1], [9, -10], [-1, -53], [-22, -54]], [[93310, 80819], [-35, -58], [-52, -14], [-25, -19], [-19, -39], [-14, -21], [-30, 12], [-13, 19], [0, 68], [-13, 30], [6, 19], [30, -3], [30, 44], [69, 18], [25, 47], [31, 117], [33, 41], [26, 9], [8, -58], [-7, -64], [-15, -62], [-35, -86]], [[92799, 79948], [-10, -30], [-12, 10], [-2, 9], [27, 35], [10, 41], [20, 1], [8, -8], [-6, -20], [-35, -38]], [[93234, 81118], [-26, -7], [-11, 16], [-8, 18], [-5, 26], [29, 12], [19, -14], [4, -38], [-2, -13]], [[92527, 79356], [-13, -33], [-14, 4], [-5, 9], [18, 39], [8, 7], [6, -26]], [[92222, 78857], [-52, -63], [-17, 0], [-9, 24], [-2, 13], [42, 10], [48, 84], [35, 55], [19, 19], [16, -1], [-80, -141]], [[91579, 78134], [-41, -29], [-26, 1], [61, 142], [36, 21], [46, 84], [97, 103], [11, 7], [56, -3], [-88, -113], [-11, -45], [-39, -48], [-28, -16], [-20, -23], [-54, -81]], [[91277, 77947], [-52, -40], [-42, -18], [-71, -84], [-26, -46], [-36, -19], [-35, 11], [-10, -19], [-3, -33], [-13, -29], [-70, -91], [-29, -72], [-30, -13], [-56, -73], [10, 63], [11, 30], [47, 56], [3, 60], [26, 51], [51, 52], [35, 67], [28, 18], [31, 56], [32, 20], [-3, 43], [14, 48], [11, -3], [26, -67], [20, -2], [54, 14], [80, 116], [26, 21], [19, 4], [11, -10], [4, -14], [-1, -17], [-6, -25], [10, -29], [-13, -22], [-53, -4]], [[91830, 85840], [-22, -7], [-11, 16], [-1, 11], [34, 25], [21, 36], [13, -22], [4, -15], [-38, -44]], [[88316, 83578], [25, -23], [39, 4], [10, -15], [-31, -25], [-22, -51], [-7, -47], [-9, -18], [-25, -23], [-22, -30], [-19, -19], [-17, -6], [-37, 99], [-18, 28], [-52, -47], [-12, -1], [12, 58], [30, 63], [15, 9], [30, 85], [9, 19], [93, -50], [8, -10]], [[88104, 83582], [-34, -100], [-24, -1], [-18, 21], [-39, -8], [-14, 5], [23, 31], [55, 48], [23, -1], [22, 10], [6, -5]], [[90753, 77041], [-9, -16], [-20, 14], [1, 32], [2, 9], [57, 28], [16, -18], [4, -15], [-51, -34]], [[90612, 77475], [42, -42], [58, 9], [-14, -38], [-22, 1], [-39, -55], [-34, -7], [-17, -13], [-55, -82], [-8, -32], [-33, -62], [-50, -55], [-9, -104], [-32, 42], [-4, 42], [10, 35], [57, 74], [23, 41], [7, 34], [22, 36], [10, 32], [14, 14], [48, 131], [26, -1]], [[84525, 65965], [-16, -91], [-14, -13], [-14, 7], [-14, 51], [10, 19], [14, -10], [11, 4], [25, 74], [7, -12], [-9, -29]], [[84413, 65829], [-18, -8], [-21, 10], [-19, 2], [0, 18], [20, 17], [0, 25], [5, 13], [46, -30], [-2, -22], [-11, -25]], [[84845, 66096], [-24, -15], [-25, 8], [4, 81], [9, -11], [5, -28], [19, -16], [12, -19]], [[85627, 67196], [-27, -27], [-10, -31], [-25, -11], [-24, -44], [-23, -9], [0, -35], [10, -30], [-15, -6], [-17, -36], [-1, -27], [6, -22], [-1, -11], [-20, -31], [-22, -2], [-1, 35], [2, 25], [20, 63], [0, 73], [19, 8], [7, 10], [29, 52], [6, 22], [-16, 21], [1, 25], [4, 11], [24, -8], [10, -19], [5, -2], [14, 14], [6, 25], [27, 50], [11, 49], [21, -41], [-6, -52], [-14, -39]], [[85832, 67811], [-12, -11], [-15, 15], [-5, 66], [7, 32], [12, 7], [11, -57], [7, -24], [-5, -28]], [[85958, 68092], [-24, -47], [-25, 42], [-31, 29], [15, 7], [8, 11], [1, 18], [20, 27], [40, 20], [12, 2], [14, 19], [5, 17], [6, 9], [25, 24], [7, -28], [-1, -21], [-19, -12], [-19, -29], [-17, -36], [-16, -15], [-5, -11], [4, -26]], [[85922, 68032], [2, -13], [-27, 11], [-11, 53], [18, -10], [6, -18], [12, -23]], [[86283, 69275], [-32, -12], [-17, 13], [-16, 71], [30, 45], [41, -44], [8, -13], [-14, -60]], [[86377, 69352], [-24, -6], [-1, 34], [19, 75], [2, 55], [18, 70], [8, 15], [6, 6], [6, -22], [-7, -85], [-18, -65], [-9, -77]], [[85740, 70727], [10, -15], [16, 9], [13, 2], [9, -8], [11, -40], [4, -24], [-20, -3], [-9, -5], [-11, -30], [-16, 11], [-10, 14], [-2, 19], [5, 70]], [[86133, 70408], [-22, -20], [-3, 19], [-9, 9], [16, 28], [0, 12], [-11, 19], [12, 71], [-3, 30], [44, 12], [8, -29], [1, -87], [-33, -64]], [[86216, 70520], [-24, -3], [-11, 7], [-4, 18], [35, 37], [26, -6], [-11, -34], [-11, -19]], [[87046, 72697], [-12, -21], [-24, 7], [-14, 31], [5, 35], [25, 27], [23, -54], [-3, -25]], [[88428, 73630], [-26, -2], [-7, 6], [16, 14], [1, 24], [10, 42], [0, 13], [-21, 2], [1, 48], [16, 48], [43, 75], [11, 14], [2, -33], [-13, -77], [-3, -28], [34, -6], [-22, -93], [-42, -47]], [[88744, 76083], [-6, -3], [-7, 5], [-6, 43], [5, 23], [18, 16], [17, 5], [-14, -80], [-7, -9]], [[89186, 77956], [-11, -37], [-14, 55], [-3, 58], [8, 0], [16, -9], [3, -28], [1, -39]], [[89248, 77833], [-19, -4], [-23, 24], [-3, 30], [17, 24], [16, -9], [16, -31], [5, -16], [-9, -18]], [[88844, 70884], [-5, -6], [-13, 19], [-2, 17], [2, 10], [9, 2], [18, -20], [-9, -22]], [[88737, 71846], [-3, -27], [-15, 6], [-7, 18], [1, 32], [16, 0], [8, -29]], [[87480, 71594], [-30, -49], [-26, 3], [-13, 22], [-4, 27], [25, 43], [21, 60], [19, 27], [16, 15], [12, -1], [-27, -84], [7, -63]], [[85854, 70760], [-7, -6], [-9, 52], [-6, 18], [10, 10], [21, 94], [4, -37], [8, -37], [8, -6], [-8, -27], [-12, -10], [-9, -51]], [[85969, 70980], [-19, -27], [-15, 0], [13, 32], [2, 15], [11, 43], [21, 15], [9, 2], [-17, -44], [-5, -36]], [[86054, 71283], [-20, -24], [-14, 19], [7, 51], [5, 17], [16, -17], [6, -46]], [[85910, 71499], [-18, -23], [-8, 35], [8, 102], [34, -21], [0, -31], [-16, -62]], [[85940, 71632], [-6, -28], [-19, 19], [-8, 18], [17, 87], [-2, 34], [1, 16], [35, 45], [6, -8], [2, -13], [-3, -20], [2, -43], [-27, -71], [2, -36]], [[86826, 71494], [-8, -23], [-24, 7], [10, 20], [7, 24], [6, 5], [4, -26], [5, -7]], [[86740, 71396], [13, -21], [32, 9], [4, -6], [-9, -19], [-14, -19], [-26, 14], [-16, 1], [-2, 31], [2, 12], [16, -2]], [[82890, 65968], [12, -38], [-5, -24], [-38, 13], [-2, 23], [14, -4], [19, 30]], [[82828, 65953], [-10, -34], [-16, 5], [0, 25], [-4, 7], [5, 23], [3, 7], [18, -20], [4, -13]], [[85761, 71888], [-27, -36], [-35, 48], [-8, 26], [26, 39], [23, 44], [15, 3], [6, -124]], [[85573, 71892], [-3, -56], [-20, -3], [-11, 36], [-13, -17], [-6, -1], [-10, 45], [-2, 36], [23, 26], [14, -16], [20, -8], [8, -42]], [[85499, 71782], [-3, -18], [-14, 27], [14, 30], [3, -39]], [[85090, 70981], [-13, -13], [-11, 8], [-3, 6], [-14, 33], [-4, 17], [10, 32], [38, 53], [99, 51], [18, 2], [39, -21], [9, -42], [-7, -35], [-9, -24], [-46, -40], [-35, -19], [-71, -8]], [[85064, 71641], [-18, -9], [-10, 20], [-7, 6], [4, 26], [29, 51], [6, 17], [27, -10], [10, -27], [-13, -42], [-28, -32]], [[85144, 73580], [-2, -76], [-15, 4], [-10, 7], [-5, 15], [-10, 71], [11, 29], [23, -23], [8, -27]], [[83850, 69983], [-23, -16], [-72, 49], [-51, 55], [-31, 65], [-4, 28], [35, -5], [35, -24], [8, -36], [14, -11], [9, -21], [65, -49], [10, -15], [5, -20]], [[83970, 69103], [-4, -12], [-34, 33], [-37, 7], [-13, 29], [-2, 46], [39, -2], [48, -41], [11, -21], [-8, -39]], [[83936, 68939], [-1, -11], [-24, 37], [-11, 7], [5, 21], [16, 5], [13, -47], [2, -12]], [[84000, 69062], [-2, -27], [-8, 4], [-10, 47], [6, 12], [14, -3], [0, -33]], [[83283, 66507], [-21, -27], [-13, 13], [0, 36], [7, 32], [-8, 23], [7, 28], [16, 8], [5, -17], [9, -10], [3, -9], [0, -18], [-9, -30], [7, -16], [-3, -13]], [[80662, 63993], [10, -20], [28, 14], [5, -25], [-1, -12], [-9, -29], [-23, 22], [-23, -5], [-16, 2], [-5, 14], [13, 28], [21, 11]], [[79889, 64064], [-40, -72], [-15, 1], [13, 82], [7, 19], [24, -28], [11, -2]], [[79866, 63897], [-15, -15], [-19, 2], [22, 28], [12, 35], [9, 12], [-1, -30], [-8, -32]], [[79730, 63794], [-11, -3], [-22, 47], [11, 25], [26, -18], [5, -11], [0, -10], [-6, -22], [-3, -8]], [[79684, 63833], [-3, -11], [-14, 27], [-10, 12], [8, 37], [16, -40], [3, -25]], [[79615, 56844], [-8, -1], [-6, 12], [26, 37], [-3, -25], [1, -12], [-10, -11]], [[78906, 57828], [5, -29], [-2, -66], [-11, -66], [4, -29], [-9, -18], [-18, 123], [-24, 53], [-5, 21], [14, -2], [24, 34], [12, 1], [10, -22]], [[78623, 58343], [-5, -5], [-5, 0], [-5, 8], [1, 34], [3, 20], [9, 4], [2, -61]], [[78501, 58569], [-5, -60], [-15, 24], [3, 31], [7, 13], [10, -8]], [[78451, 58749], [1, -14], [-14, 10], [-5, -5], [-17, 4], [-8, 80], [2, 19], [11, -6], [17, -40], [8, -27], [5, -21]], [[78880, 52610], [-42, -38], [-47, 34], [15, 57], [32, 13], [25, -18], [14, -13], [10, -16], [-7, -19]], [[78950, 53416], [-14, -6], [-7, 4], [-5, 23], [11, 51], [4, 9], [11, -56], [0, -25]], [[77857, 54893], [-7, -16], [-20, 9], [4, 94], [11, 12], [18, -17], [8, -16], [-14, -66]], [[77735, 55567], [19, -62], [-9, -27], [-5, -8], [-12, 9], [-11, -24], [-11, -4], [-11, 42], [-13, 17], [-3, 30], [18, 5], [10, -10], [20, 20], [8, 12]], [[77683, 55599], [-5, -3], [-10, 47], [13, 67], [13, -82], [-11, -29]], [[77798, 57428], [-3, -9], [-11, 18], [-8, 21], [-4, 26], [17, -1], [8, -25], [1, -30]], [[77797, 57365], [1, -33], [-6, -39], [-25, -23], [-9, 31], [2, 49], [4, 12], [25, -3], [8, 6]], [[77386, 56413], [-3, -10], [-14, 110], [20, -29], [-3, -71]], [[77335, 56395], [-3, -43], [-11, 1], [-12, -27], [-5, -4], [-10, 86], [11, 121], [6, 18], [8, -32], [23, -15], [-10, -69], [3, -36]], [[77307, 57057], [-16, -7], [2, 32], [4, 20], [8, 5], [3, -34], [-1, -16]], [[76080, 55778], [-17, -48], [-33, 145], [-15, 9], [0, 69], [8, 28], [38, 30], [10, -17], [20, -134], [-11, -82]], [[76036, 56080], [-26, -54], [-12, 33], [5, 22], [11, 13], [11, 17], [11, -31]], [[75872, 56595], [8, -22], [-15, 4], [-15, 32], [4, 31], [6, 12], [12, -57]], [[75956, 56381], [-22, -1], [-6, 24], [-9, 26], [6, 25], [12, 6], [16, -40], [4, -28], [-1, -12]], [[75982, 56484], [-13, -22], [-4, 3], [-1, 16], [-1, 12], [-2, 20], [-2, 37], [11, 30], [10, -6], [-5, -31], [7, -59]], [[75774, 57106], [-13, -4], [-7, 20], [-1, 23], [7, 15], [6, 7], [7, -1], [7, -39], [-6, -21]], [[75694, 57923], [-8, -20], [-29, 15], [3, 60], [-7, 58], [5, 24], [21, 42], [18, 18], [12, -56], [5, -55], [-20, -86]], [[75747, 58399], [-13, -12], [-14, 15], [11, 23], [2, 47], [13, -26], [0, -30], [1, -17]], [[75837, 58776], [13, -79], [-22, 35], [-8, 24], [11, 17], [6, 3]], [[75754, 59253], [-9, -37], [-1, 80], [4, 10], [4, 3], [6, -8], [-4, -48]], [[75756, 58488], [-7, -14], [-9, 15], [-25, 104], [-5, 66], [-7, 23], [9, 33], [12, 11], [6, 37], [3, 57], [10, 46], [5, 13], [20, 0], [6, 6], [-3, 44], [-12, 20], [-4, 12], [0, 106], [3, 43], [8, 30], [-6, 64], [4, 24], [15, 33], [7, 72], [-6, 21], [14, 110], [-1, 73], [19, 74], [29, 33], [9, 1], [1, -62], [3, -21], [-17, -37], [16, -49], [-2, -17], [-6, -39], [-11, -37], [-15, -16], [-11, -50], [-7, -19], [22, -53], [7, -180], [-16, -49], [-19, -10], [4, -120], [-3, -26], [-19, -59], [-4, -26], [-11, -24], [5, -30], [9, -13], [0, -25], [-8, -64], [-1, -72], [-11, -59]], [[77372, 58157], [-6, -1], [-6, 2], [-6, 9], [14, 62], [4, -72]], [[77280, 58152], [23, -100], [-3, -15], [-3, -8], [-6, 3], [-9, 54], [-17, 34], [-21, -6], [17, 44], [7, 10], [12, -16]], [[77272, 57565], [-13, -34], [-5, 2], [6, 55], [23, 41], [19, 4], [-2, -26], [-14, -31], [-14, -11]], [[77283, 58455], [-1, -13], [-2, 0], [-7, 9], [4, 55], [11, 44], [11, 66], [6, 14], [2, -35], [-7, -74], [-5, -40], [-12, -26]], [[77365, 58700], [-12, -3], [-5, 93], [3, 14], [16, -46], [24, -28], [-9, -18], [-17, -12]], [[77242, 58578], [3, -32], [-18, 34], [-3, 95], [14, -60], [6, -14], [-2, -23]], [[77375, 58608], [-7, -119], [-17, 17], [-9, 0], [-10, 67], [0, 18], [-6, 44], [41, 8], [8, -35]], [[77259, 58842], [-3, -3], [-4, 1], [-10, 10], [-10, 39], [5, 27], [4, 7], [10, -2], [4, -5], [2, -10], [-3, -22], [1, -19], [4, -23]], [[77240, 58980], [-2, -21], [-16, -43], [-14, 25], [-4, 13], [15, 28], [15, -4], [4, 6], [2, -4]], [[77336, 59100], [7, -16], [9, 0], [-3, -56], [-22, -69], [-13, -10], [-5, 0], [5, 101], [-9, 57], [3, 39], [24, -18], [4, -28]], [[77309, 59388], [-2, -95], [-14, 46], [-2, 52], [1, 49], [3, 8], [1, -8], [8, -22], [5, -30]], [[77103, 61205], [-10, -7], [-16, 37], [-3, 90], [13, 20], [7, 5], [11, -11], [3, -14], [2, -18], [-3, -19], [-4, -83]], [[77521, 56216], [7, -70], [-10, 15], [-8, 30], [0, 44], [2, 7], [9, -26]], [[76334, 60955], [-6, -15], [-11, 11], [-3, 6], [26, 64], [3, -24], [-9, -42]], [[76243, 61028], [-18, -56], [-7, 84], [30, 47], [14, 44], [15, 31], [5, -37], [-14, -71], [-25, -42]], [[76024, 62605], [-4, -5], [-29, 49], [-23, 62], [36, 12], [35, -13], [1, -33], [-8, -53], [-8, -19]], [[75969, 63301], [6, -79], [-19, 30], [-7, 41], [-2, 42], [22, -34]], [[75835, 63320], [4, -55], [-13, 22], [-18, 76], [1, 50], [12, -23], [14, -70]], [[76031, 63109], [32, -48], [13, 3], [19, -30], [1, -12], [-4, -24], [-9, -19], [-24, -20], [-16, 16], [-7, 52], [-19, 25], [-6, 20], [13, 29], [7, 8]], [[75520, 64419], [-10, -47], [-5, 34], [4, 43], [4, 24], [3, 0], [6, -25], [-2, -29]], [[75541, 64232], [-17, -3], [-8, 17], [4, 24], [-5, 78], [14, 8], [7, -1], [5, -22], [3, -42], [-3, -59]], [[75319, 64616], [-30, -40], [10, 239], [22, -89], [6, -48], [-8, -62]], [[75432, 64736], [-13, -17], [-12, 14], [-16, 56], [8, 71], [5, 11], [7, -23], [11, -50], [7, -38], [3, -24]], [[75178, 65070], [4, -25], [-15, 15], [-12, 17], [-7, 23], [12, 12], [18, -42]], [[75215, 64567], [-48, -20], [-25, 6], [46, 151], [-1, 68], [-7, 55], [-24, 44], [-1, 32], [-11, 43], [-5, 51], [26, 16], [21, -29], [3, -16], [4, -42], [11, -43], [36, -88], [0, -55], [-10, -132], [-15, -41]], [[72213, 57390], [-17, -6], [-14, 38], [-3, 17], [3, 11], [4, 6], [5, -2], [6, -36], [16, -28]], [[72187, 57056], [8, -43], [-23, 29], [-15, 25], [-6, 20], [32, -22], [4, -9]], [[47512, 92649], [-25, -4], [-15, 13], [37, 35], [124, 66], [49, 63], [95, 22], [6, -35], [-6, -44], [-84, -35], [-92, -23], [-89, -58]], [[6783, 62794], [-12, -27], [-16, 2], [-55, 59], [-7, 32], [4, 148], [-21, 120], [-23, 91], [17, 47], [22, 37], [25, 69], [-21, 88], [6, 53], [11, 9], [59, -65], [117, -97], [31, -68], [6, -74], [21, -9], [11, -50], [30, -44], [11, -26], [-13, -40], [-56, -78], [-72, -34], [-62, -87], [-13, -56]], [[6329, 64063], [59, -15], [14, 6], [10, -12], [48, -8], [9, -5], [-10, -30], [-31, -27], [-45, 24], [-75, 8], [3, 23], [7, 16], [1, 29], [10, -9]], [[6531, 63901], [8, -11], [29, 16], [22, 5], [35, -38], [13, -26], [23, -27], [8, -21], [-6, -24], [-26, -40], [-36, -10], [-20, -17], [-28, 4], [-8, 7], [-3, 51], [-9, 55], [-17, -7], [-20, 19], [-21, 46], [-2, 27], [11, 44], [20, 5], [15, -24], [12, -34]], [[5505, 64424], [-5, -26], [-10, 4], [-2, 23], [6, 31], [16, 27], [18, 41], [14, -6], [-8, -27], [-1, -29], [-20, -16], [-8, -22]], [[6167, 64202], [9, -3], [13, 4], [4, -46], [14, -25], [5, -15], [-15, -16], [-30, -7], [-14, 13], [-15, 29], [-15, -8], [-3, 23], [-3, 6], [-11, -6], [10, -30], [-27, -2], [-9, 4], [-7, 34], [-28, 64], [0, 25], [-10, 31], [42, 8], [28, 53], [16, 5], [31, -85], [0, -24], [6, -23], [9, -9]], [[5730, 64476], [-25, -32], [-14, 14], [-27, 5], [-10, 25], [-29, 22], [-11, 30], [17, 56], [41, 48], [63, -2], [14, -38], [1, -28], [-8, -31], [-4, -45], [-8, -24]], [[6431, 63808], [-17, -16], [-18, 8], [-4, 39], [-17, 50], [30, 10], [17, -14], [9, -16], [11, -27], [-11, -34]], [[99847, 81435], [-49, 0], [-97, 94], [-50, 29], [-28, 33], [13, 7], [60, -23], [49, -51], [27, -33], [31, -28], [34, -12], [10, -16]], [[99923, 81742], [-23, -14], [-26, 7], [-15, 23], [2, 27], [34, 29], [43, -37], [-15, -35]], [[99281, 81729], [-24, -24], [-19, 24], [-3, 12], [36, 42], [28, 9], [11, 15], [12, 53], [20, 2], [10, -6], [-5, -25], [-16, -38], [0, -27], [-50, -37]], [[98255, 82004], [-18, -2], [-11, 20], [-60, 8], [6, 19], [26, 8], [39, 30], [33, -5], [-9, -28], [-6, -50]], [[98002, 82380], [48, -19], [33, 9], [41, -30], [52, -53], [-12, -10], [-13, -5], [-12, 0], [-40, -8], [-22, 2], [-40, -36], [-45, 26], [-15, 51], [-35, 12], [-28, 18], [51, 40], [37, 3]], [[2016, 86668], [60, -38], [39, 4], [30, -31], [13, -26], [-46, 19], [-66, -2], [-90, 77], [-32, 18], [7, 43], [35, 22], [17, -58], [33, -28]], [[2733, 84783], [-29, -28], [-26, 10], [-7, 20], [-1, 9], [75, 22], [-12, -33]], [[5464, 83719], [-4, -45], [-38, 29], [-10, 14], [7, 11], [36, 2], [9, -11]], [[5365, 83706], [4, 0], [9, 4], [18, 33], [6, 1], [0, -10], [-8, -32], [14, -43], [13, -21], [-1, -7], [-34, -15], [-25, 11], [-14, -4], [-12, -15], [-9, 17], [-6, 79], [2, 14], [14, 27], [18, 13], [8, -4], [7, -11], [1, -11], [-5, -26]], [[4917, 83436], [-6, -2], [-20, 17], [-7, 14], [-5, 20], [39, 30], [8, 0], [8, -16], [1, -14], [-11, -37], [-7, -12]], [[4846, 83180], [-24, -13], [-26, 13], [-22, 25], [-2, 28], [49, -18], [10, -9], [15, -26]], [[5733, 83509], [-9, -3], [-8, 6], [-10, 33], [-1, 13], [20, -10], [7, -24], [1, -15]], [[5591, 83599], [-17, -13], [-5, -16], [-13, -7], [-11, -13], [-37, -59], [-16, -11], [18, 51], [3, 16], [0, 10], [-5, 38], [10, -1], [9, 8], [18, 34], [16, 3], [17, 40], [9, 3], [4, -6], [-7, -24], [16, -22], [-4, -22], [-5, -9]], [[5690, 83612], [-1, -46], [-4, -7], [-8, 12], [-15, -13], [-9, 10], [4, 16], [-1, 12], [11, 1], [3, 23], [-2, 9], [6, 21], [8, 5], [8, -43]], [[2863, 82285], [-4, -24], [-4, -8], [-43, 12], [-29, -4], [-3, 14], [3, 12], [45, 18], [18, 1], [12, -10], [5, -11]], [[2574, 82131], [-18, -18], [-5, 7], [-3, 23], [10, 17], [30, 38], [21, -7], [6, -10], [0, -14], [-8, -19], [-10, -10], [-12, 0], [-11, -7]], [[3933, 82989], [-11, -10], [-8, -2], [-7, 6], [-28, -7], [-6, 4], [-13, 34], [-1, 18], [5, 14], [13, 13], [21, 11], [21, -2], [35, -32], [17, -18], [3, -12], [-12, -11], [-29, -6]], [[4011, 83027], [-12, -4], [-3, 6], [-2, 25], [-9, 40], [18, 15], [11, 3], [4, -6], [13, -30], [13, -8], [9, -6], [-16, -9], [-26, -26]], [[3343, 82571], [-85, -61], [-28, -45], [-21, -44], [-16, -24], [-12, -4], [-14, -11], [-28, -31], [-12, -3], [-90, -71], [-6, -1], [4, 18], [28, 26], [18, 24], [20, 40], [11, 14], [4, 20], [1, 40], [5, 15], [20, 30], [14, 17], [18, 6], [38, -5], [16, 15], [4, 11], [-9, 11], [-2, 18], [2, 32], [11, 28], [19, 25], [27, 19], [33, 13], [24, 1], [44, -29], [7, -13], [-11, -29], [-6, -27], [-28, -25]], [[3718, 82891], [12, -27], [21, 17], [15, 24], [12, 31], [7, 12], [11, -16], [29, -22], [-25, -34], [-47, -51], [-16, -34], [-1, -15], [46, 12], [13, -2], [8, -12], [-13, -13], [-25, -13], [-21, -24], [-50, -42], [-19, -35], [-23, -14], [-30, -3], [-54, -23], [-32, -21], [-8, -12], [-11, -5], [-12, 1], [-13, -10], [-14, -19], [-12, -9], [-19, -2], [-11, -8], [-11, 0], [-31, 23], [-8, 14], [28, 27], [20, 9], [30, 4], [29, 25], [61, 34], [19, 18], [12, 63], [14, 11], [8, 25], [33, -1], [16, -28], [5, -4], [3, 3], [2, 22], [17, 16], [-10, 12], [-31, 15], [-23, 6], [-15, 0], [-13, 8], [-9, 17], [-5, 17], [1, 17], [8, 19], [14, 21], [17, 12], [36, 9], [32, 14], [17, 2], [13, -6], [3, -55]], [[3831, 82789], [-4, -1], [-7, 14], [-1, 13], [5, 9], [13, 22], [9, 8], [11, 4], [3, -6], [-10, -26], [-12, -17], [-7, -20]], [[2093, 81953], [-21, -8], [-22, 9], [10, 30], [11, 16], [21, 20], [24, -9], [19, -25], [-42, -33]], [[1791, 81875], [54, -23], [68, 2], [25, -5], [0, -7], [-43, -10], [-15, 4], [-38, -13], [-26, -3], [-58, 13], [-46, -9], [-12, 3], [-14, 11], [-16, 18], [-1, 12], [15, 4], [40, -15], [4, 8], [34, 14], [29, -4]], [[1478, 81817], [-149, -24], [-22, 16], [22, 10], [27, 5], [56, 27], [69, 23], [54, 29], [47, 18], [13, 30], [-41, 16], [-8, 12], [19, 14], [16, 21], [39, 25], [34, -31], [8, -20], [-4, -25], [-7, -25], [-30, -13], [-4, -13], [16, -38], [-62, -33], [-93, -24]], [[1109, 81688], [-24, -12], [-31, 25], [3, 30], [34, -25], [18, -18]], [[1031, 81677], [-17, -34], [-13, 15], [-5, 47], [10, 12], [27, -34], [-2, -6]], [[946, 81720], [2, -20], [32, 3], [10, -10], [0, -38], [-5, -11], [-4, -2], [-12, 8], [-13, -19], [-59, -48], [-18, 27], [-35, -42], [24, 108], [28, 16], [11, 12], [-3, 32], [13, 52], [28, -2], [13, -22], [0, -14], [-12, -30]], [[1105, 81798], [-6, -17], [-28, 18], [-9, 15], [-2, 15], [8, 25], [22, 0], [12, -10], [12, -19], [4, -12], [-13, -15]], [[792, 81633], [-8, -7], [-15, -6], [-42, 6], [-26, -2], [-28, -4], [-22, -10], [-4, 14], [1, 12], [92, 32], [22, 16], [13, 21], [12, 39], [10, 12], [6, -1], [13, -15], [-5, -20], [-11, -18], [-4, -17], [-4, -52]], [[589, 81595], [-6, -19], [-7, 0], [-37, 32], [-5, 11], [22, 15], [6, 11], [-3, 16], [-16, 21], [-30, 27], [-11, 20], [7, 12], [14, 7], [45, 2], [25, -34], [18, -12], [43, -8], [-22, -14], [-13, -13], [-15, -53], [-15, -21]], [[70474, 21234], [-34, -28], [-34, 1], [-14, 21], [-22, 68], [-14, 4], [-8, 19], [-1, 8], [15, 5], [23, -19], [55, -16], [40, -37], [30, -12], [-12, -10], [-24, -4]], [[69244, 23583], [-17, -5], [-5, 19], [1, 25], [-10, 20], [-5, 22], [4, 20], [28, 3], [28, -7], [8, -35], [-21, -48], [-11, -14]], [[64398, 25092], [-20, -5], [-18, 11], [-11, 32], [23, 27], [12, -19], [9, -20], [5, -26]], [[60515, 24801], [-12, -11], [-56, 10], [-6, 22], [17, 34], [9, 14], [29, -7], [24, -28], [4, -9], [-9, -25]], [[57734, 72539], [-21, -12], [-6, 2], [-9, 26], [12, 65], [-11, 41], [-1, 18], [17, 24], [11, 36], [27, 40], [72, 46], [17, 5], [-1, -37], [-24, -92], [-21, -46], [6, -37], [-34, -11], [-34, -68]], [[57548, 72272], [-10, -32], [-11, 27], [5, 31], [-13, 50], [24, 74], [0, 36], [18, 19], [-4, -62], [-14, -49], [14, -40], [7, -46], [-16, -8]], [[57738, 72899], [-6, -9], [-14, 26], [0, 14], [14, 16], [7, 3], [2, -10], [0, -23], [-3, -17]], [[57505, 73132], [-28, -8], [5, 46], [-13, 36], [21, -20], [14, -24], [7, -5], [-2, -15], [-4, -10]], [[57485, 72999], [-8, -1], [10, 28], [29, 38], [43, 34], [14, 3], [24, -21], [-44, -34], [-12, -18], [-32, -4], [-24, -25]], [[57096, 73137], [-25, -22], [-17, 32], [-10, 50], [46, 72], [11, -6], [6, -19], [-1, -65], [-10, -42]], [[57021, 73195], [-22, -44], [-18, 5], [-8, 20], [12, 42], [24, 24], [11, -7], [-1, -31], [2, -9]], [[57078, 72806], [-13, -30], [-18, 11], [7, 11], [5, 15], [0, 22], [-5, 13], [3, 5], [17, -22], [4, -25]], [[57050, 72968], [-5, -9], [-21, 37], [-8, 21], [10, 18], [31, -42], [-7, -25]], [[57451, 73623], [34, -19], [9, 2], [16, -6], [5, -35], [-22, -6], [-37, -32], [-15, 7], [-19, 28], [-30, 3], [-9, 8], [16, 33], [29, 16], [23, 1]], [[57230, 73461], [-13, -2], [4, 23], [25, 40], [34, 2], [32, 20], [7, 0], [-15, -31], [-25, -30], [-49, -22]], [[57183, 73035], [-25, -4], [-8, 4], [15, 10], [11, 10], [5, 13], [25, 23], [16, 29], [18, -20], [-23, -13], [-34, -52]], [[57350, 72917], [-22, -14], [-14, -29], [-17, 21], [0, 28], [18, -9], [13, 16], [-4, 18], [15, -9], [11, -22]], [[56765, 73488], [-19, -28], [-3, 42], [12, 44], [16, 3], [6, -19], [-12, -42]], [[56787, 73354], [-16, -17], [6, 40], [-8, 21], [7, 17], [10, 15], [5, -15], [9, -24], [-13, -37]], [[56815, 73020], [0, -34], [-1, -12], [-57, -16], [5, 38], [3, 13], [19, -18], [7, 9], [3, 10], [21, 10]], [[56928, 73440], [-1, -60], [-8, 1], [-4, 9], [0, 23], [3, 36], [10, -9]], [[56942, 73594], [-9, -39], [-21, 45], [-24, 31], [-9, 27], [-14, 16], [-4, 36], [17, 15], [8, 1], [18, -44], [28, -5], [-2, -27], [8, -35], [4, -21]], [[57015, 73501], [-10, -37], [-18, 6], [-29, 40], [-10, 18], [-5, 18], [12, 2], [14, -19], [37, -10], [9, -18]], [[56866, 73111], [-5, -3], [-7, 25], [-2, 22], [3, 13], [10, 2], [13, -43], [-12, -16]], [[57248, 73858], [-27, -33], [-29, 47], [-5, 15], [21, 19], [11, 30], [-8, 36], [-31, 53], [-1, 38], [46, 16], [27, -33], [14, -3], [-5, -31], [2, -10], [2, -96], [-13, -13], [-2, -26], [-2, -9]], [[57336, 74498], [-5, -34], [38, -57], [13, -36], [5, -35], [-3, -10], [-15, 19], [-12, 6], [4, -25], [13, -21], [-22, -13], [-22, 1], [-64, 30], [-14, 32], [38, 48], [8, 19], [-27, -2], [-29, -57], [-46, 25], [-14, 23], [-4, 12], [19, 51], [32, -2], [17, 11], [21, 16], [1, 24], [50, 6], [18, -31]], [[56605, 74374], [-12, -20], [-20, 9], [-20, 65], [52, -54]], [[56635, 74399], [-13, -7], [13, 46], [23, 24], [-9, -38], [-14, -25]], [[56854, 74198], [-30, -14], [-8, 2], [7, 18], [0, 7], [-29, 33], [4, 42], [3, 11], [22, -22], [5, -37], [26, -40]], [[57134, 75130], [-31, -15], [-35, 47], [34, 19], [15, -14], [11, -16], [6, -21]], [[57065, 74874], [-10, -19], [-8, -34], [-4, -47], [-16, -2], [-10, 10], [-3, 18], [-1, 23], [-7, -1], [-6, -25], [-5, -11], [-16, -2], [-18, 15], [1, 33], [-4, 38], [2, 14], [49, 3], [14, -28], [18, 16], [7, 18], [21, 11], [-4, -30]], [[56881, 75238], [-35, -20], [-37, 39], [1, 23], [19, 47], [10, 14], [27, -4], [15, -32], [4, -15], [-5, -26], [1, -26]], [[57213, 74963], [-64, -18], [-19, 17], [20, 35], [37, 22], [12, 2], [16, -34], [-2, -24]], [[45523, 58213], [-22, -8], [-10, 28], [-2, 11], [12, 10], [5, 0], [9, 21], [11, 14], [5, 5], [5, -1], [4, -46], [-5, -20], [-12, -14]], [[45451, 63194], [-17, -56], [-8, 22], [-3, 37], [15, 52], [8, 28], [14, 9], [-9, -92]], [[45224, 70776], [38, -30], [35, 14], [43, -39], [23, -9], [-20, -27], [-21, -36], [-50, 9], [-42, 34], [-15, 26], [-5, 23], [14, 35]], [[45584, 58227], [-3, -16], [-16, 2], [4, 16], [-4, 5], [5, 49], [2, 7], [8, -18], [1, -8], [3, -37]], [[45462, 68190], [-23, -131], [-22, -52], [-13, -17], [-32, -14], [-38, 82], [-19, 83], [-11, 26], [17, 21], [25, -3], [54, 17], [11, 7], [55, 84], [55, 10], [1, -27], [-60, -86]], [[46190, 68497], [-19, -38], [-21, 13], [10, 83], [9, 25], [39, 36], [32, 15], [9, 38], [11, 15], [11, -23], [-9, -26], [-6, -84], [-22, -26], [-44, -28]], [[46056, 68069], [-38, -65], [-38, 15], [-6, 11], [38, 16], [34, 50], [22, 110], [35, 121], [7, 52], [13, 20], [19, 2], [8, -4], [9, -27], [0, -61], [-10, -102], [-18, -89], [-75, -49]], [[46520, 56126], [-4, -15], [-18, 37], [-96, 56], [27, 29], [66, 9], [20, -17], [9, -15], [3, -27], [-7, -57]], [[45722, 68057], [-2, -45], [6, -44], [-1, -69], [-13, -36], [-35, -37], [-26, 6], [-15, 15], [-27, 60], [-1, 61], [25, 41], [10, 51], [64, -9], [6, 9], [4, 3], [5, -6]], [[45631, 58303], [0, -23], [-11, 4], [-4, 7], [7, 43], [11, 19], [12, -3], [4, -6], [-2, -16], [-6, -14], [-11, -11]], [[45679, 58488], [-2, -13], [-16, 11], [23, 49], [15, 8], [-1, -37], [-11, -8], [-8, -10]], [[43008, 61604], [-27, -11], [-12, 5], [-3, 46], [-6, 30], [1, 14], [63, 59], [21, -10], [16, -47], [-11, -26], [-42, -60]], [[43086, 61530], [-22, -13], [-14, 1], [-21, 21], [7, 22], [22, 24], [15, 5], [12, -43], [1, -17]], [[45226, 67984], [-11, -5], [-14, 15], [-14, 45], [10, 34], [8, 16], [13, -3], [23, -25], [8, -25], [0, -16], [-23, -36]], [[45582, 58447], [-13, -18], [-13, 9], [-7, 16], [1, 29], [15, 41], [14, -6], [3, -71]], [[45559, 58687], [-15, -70], [-17, 7], [-13, 42], [-1, 18], [36, 6], [10, -3]], [[45031, 67862], [-27, -94], [-34, 35], [-8, 12], [-7, 19], [33, 4], [33, 47], [10, -23]], [[43634, 61196], [23, -11], [8, 4], [15, -2], [16, -30], [3, -33], [-8, -40], [-30, -33], [-18, 4], [-21, 30], [12, 60], [0, 51]], [[43247, 60400], [-21, -22], [-15, 10], [-15, 23], [-7, 33], [6, 28], [29, 33], [17, -11], [10, -51], [-4, -43]], [[45046, 68256], [-7, -5], [-7, 46], [-33, 111], [20, 50], [37, 1], [15, -34], [5, -36], [-7, -21], [2, -42], [-4, -27], [-21, -43]], [[43309, 61418], [11, -17], [4, -12], [-17, -7], [-42, 22], [-11, -13], [-11, -48], [-21, 72], [2, 27], [4, 8], [30, -19], [51, -13]], [[43642, 61439], [-9, -30], [-11, 44], [-6, 10], [-3, 62], [16, 19], [8, 1], [0, -64], [5, -42]], [[43560, 60562], [-8, -2], [-11, 26], [2, 36], [-1, 9], [10, 39], [20, -4], [6, -28], [0, -59], [-18, -17]], [[43487, 60488], [-17, -53], [-36, 4], [-19, 22], [-22, 66], [0, 52], [8, 44], [-1, 39], [3, 10], [11, -6], [2, -26], [34, -64], [12, -13], [25, -75]], [[62354, 44883], [14, -79], [0, -60], [-6, -19], [-13, 12], [-23, 48], [-43, 46], [20, 4], [12, -4], [12, 4], [8, 26], [1, 16], [11, 12], [7, -6]], [[62163, 44753], [19, -35], [-54, 15], [-8, 31], [-1, 24], [20, -5], [24, -30]], [[62549, 44368], [-17, -5], [-8, 15], [-5, 36], [5, 35], [1, 28], [-14, 49], [14, 28], [12, -32], [6, -2], [18, -23], [-5, -42], [1, -13], [-8, -42], [0, -32]], [[62073, 44987], [-5, -8], [-25, 33], [-15, 8], [-21, 53], [8, 184], [7, 24], [5, 10], [12, 3], [14, -23], [-4, -119], [19, -79], [12, -63], [-7, -23]], [[61030, 47247], [-15, -7], [-6, 7], [-9, 24], [16, 21], [16, 39], [36, 59], [12, 38], [5, 8], [-3, -45], [-20, -99], [-18, -7], [-14, -38]], [[61387, 50599], [-11, -5], [6, 33], [30, 43], [13, -10], [2, -10], [-1, -8], [-5, -9], [-34, -34]], [[60971, 48286], [21, -123], [-3, -23], [-15, -14], [-8, -1], [-9, 20], [-7, 41], [-11, -10], [-19, 50], [-20, 2], [-17, 59], [7, 51], [-4, 88], [21, 45], [12, 76], [13, -52], [3, -80], [18, -95], [15, -29], [3, -5]], [[66014, 40043], [-36, -17], [-39, 6], [-15, 31], [-3, 13], [13, 12], [-1, 39], [7, 63], [8, 26], [20, 23], [8, 51], [17, 34], [22, 4], [22, -63], [16, -66], [-3, -65], [-16, -25], [-5, -38], [-15, -28]], [[65499, 39550], [-40, -17], [-27, 6], [-54, 49], [-15, 33], [-21, 91], [5, 32], [17, 57], [38, 23], [41, -9], [18, -15], [21, -66], [28, -68], [-4, -80], [-7, -36]], [[63428, 44145], [0, -21], [-36, 8], [-6, 72], [18, 3], [4, 29], [11, 4], [11, -64], [-2, -31]], [[63871, 42106], [-32, -106], [9, 89], [36, 127], [11, 10], [-24, -120]], [[48418, 42627], [-25, -3], [2, 27], [19, 29], [13, -4], [0, -33], [-9, -16]], [[61073, 49017], [2, -30], [-5, -27], [1, -87], [-1, -58], [-16, -80], [-13, -28], [-12, 8], [-9, 13], [-8, 22], [15, 147], [-7, 107], [30, -10], [23, 23]], [[65427, 49139], [1, -53], [-13, 18], [-4, 34], [-18, 26], [-9, 24], [20, 29], [23, -78]], [[52426, 54008], [7, -3], [41, 2], [12, -30], [-1, -45], [-43, -131], [-8, -55], [-17, -46], [-14, -4], [-49, 27], [-9, 17], [-3, 22], [5, 52], [4, 16], [23, 10], [8, 9], [13, 56], [4, 51], [10, 39], [17, 13]], [[51849, 51912], [-28, -42], [-10, 11], [-7, 29], [-8, 64], [3, 30], [13, 35], [28, 34], [17, 3], [17, -46], [0, -47], [-25, -71]], [[52062, 52746], [-11, -15], [-12, 12], [-3, 23], [16, 44], [7, 11], [6, -9], [4, -12], [1, -18], [-8, -36]], [[52027, 54388], [-26, -18], [-18, 4], [24, 77], [12, -17], [16, -7], [-8, -39]], [[37741, 38512], [9, -16], [-16, 2], [-18, -14], [-28, -12], [-11, 23], [24, 32], [9, 24], [6, -5], [8, -17], [17, -17]], [[36504, 36634], [-5, -7], [-18, 72], [35, 69], [12, -28], [-9, -55], [-10, -38], [-5, -13]], [[36531, 35848], [-19, -26], [4, 137], [10, 45], [11, 34], [14, 21], [10, -29], [-8, -67], [-25, -81], [3, -34]], [[37427, 38082], [0, -30], [-11, 15], [-31, -12], [-11, 23], [42, 97], [8, -14], [6, -18], [5, -25], [-5, -16], [-3, -20]], [[53132, 71862], [-43, -41], [9, 36], [28, 43], [7, -10], [-1, -28]], [[53043, 71268], [-7, -3], [-13, -16], [-8, -1], [-20, 17], [-7, 0], [-10, 12], [3, 68], [3, 19], [49, 2], [27, -40], [4, -10], [1, -12], [-12, -22], [-10, -14]], [[48774, 83055], [-56, -73], [-23, 13], [-19, -6], [-6, 2], [11, 26], [13, 61], [24, 24], [29, 64], [23, 17], [9, -2], [5, -6], [11, -71], [-16, -26], [-5, -23]], [[48164, 84438], [-16, -4], [-1, 9], [28, 39], [17, 6], [6, -4], [-12, -22], [-22, -24]], [[48581, 83783], [-35, 0], [-12, 5], [-15, 14], [-17, 79], [6, 28], [7, 13], [7, 11], [19, 5], [18, -15], [7, -14], [15, -54], [3, -46], [-3, -26]], [[48395, 84299], [-111, -32], [-38, 3], [-4, 16], [8, 10], [31, 10], [13, 77], [-47, 36], [-3, 10], [4, 17], [5, 7], [29, 18], [12, 4], [10, -2], [21, -21], [23, -43], [30, -7], [21, -19], [-4, -84]], [[48297, 84061], [10, -74], [10, -46], [0, -16], [-9, -22], [-45, -29], [-15, 0], [0, 7], [10, 30], [-9, 33], [4, 26], [-4, 4], [-9, -3], [-33, -41], [-11, -4], [-1, 8], [8, 34], [1, 22], [5, 14], [9, 13], [11, 10], [8, 1], [9, -10], [27, 28], [24, 15]], [[48341, 83994], [-6, -6], [-14, 1], [-5, 10], [-3, 14], [0, 26], [8, 19], [36, 28], [-16, 10], [-1, 7], [10, 24], [39, 36], [10, 7], [10, -1], [-20, -65], [-48, -110]], [[49710, 86701], [-7, -7], [-27, 59], [20, 67], [24, -2], [4, -18], [-2, -16], [-13, -2], [-1, -5], [4, -31], [0, -36], [-2, -9]], [[49636, 86714], [6, -40], [14, 10], [22, -39], [11, 0], [18, 16], [-4, -36], [-18, -101], [-6, -17], [-3, -31], [-4, -6], [-6, -61], [-12, -21], [-11, -48], [-4, -5], [-16, 19], [16, 74], [6, 43], [-4, 22], [-9, 20], [-24, 1], [-20, -9], [-4, 12], [-1, 16], [-5, 5], [-27, -1], [-7, 4], [-6, 15], [-1, 12], [25, 9], [22, -4], [34, 24], [-21, 78], [-28, 7], [-6, 8], [5, 13], [15, 7], [24, 40], [14, 6], [17, -1], [-2, -41]], [[49784, 86873], [0, -7], [-14, -49], [0, -18], [-23, 2], [-4, 5], [-4, 28], [3, 30], [3, 8], [7, 3], [7, -6], [12, 15], [6, 0], [7, -11]], [[49120, 85710], [-16, -7], [-15, 0], [-25, 33], [-9, 25], [2, 16], [10, 5], [24, -8], [12, -28], [1, -18], [3, -7], [15, -7], [-2, -4]], [[48834, 82558], [11, -11], [30, 2], [-10, -24], [-32, -27], [-22, -26], [-26, -22], [-13, 25], [-15, -1], [-22, 49], [-4, 72], [29, 19], [41, -1], [33, -55]], [[49291, 85962], [-31, -1], [16, 34], [19, 9], [36, -4], [-6, -15], [-34, -23]], [[49186, 85680], [-3, -2], [-10, 11], [-17, 38], [27, 7], [12, -5], [-5, -16], [-4, -33]], [[49150, 85846], [-3, -14], [21, 0], [30, -12], [19, -2], [15, -15], [-8, -28], [-10, -8], [-10, -1], [-36, 28], [-48, -12], [-10, 4], [-6, 7], [-2, 10], [0, 20], [-3, 6], [-17, -19], [-8, 2], [-4, 9], [-2, 19], [2, 26], [10, 38], [17, 8], [26, -5], [29, -21], [9, -13], [0, -11], [-11, -16]], [[48160, 87445], [-6, -22], [-7, 1], [-26, 26], [-21, 15], [-7, 13], [-6, 21], [12, 2], [14, -4], [36, -20], [10, -20], [1, -12]], [[48139, 87237], [5, -18], [-6, 2], [-19, 20], [-33, 48], [-11, 39], [-2, 18], [8, -2], [7, -16], [31, -11], [8, -8], [0, -19], [10, -23], [2, -30]], [[48003, 87637], [25, -22], [9, -16], [-14, -15], [-18, -4], [-21, 3], [-34, 17], [-12, 38], [24, -1], [28, 7], [13, -7]], [[48158, 87688], [-7, -77], [-12, 0], [-20, 22], [-15, 4], [-5, -11], [1, -14], [8, -9], [24, -52], [2, -15], [-3, -7], [-23, 15], [-57, 67], [-44, 110], [60, 18], [43, -29], [48, -22]], [[49241, 85936], [-24, -14], [-10, 12], [-2, 37], [-29, 16], [-14, 10], [-10, 18], [2, 6], [19, 8], [32, -34], [13, -28], [23, -8], [3, -4], [-3, -19]], [[48220, 87706], [-13, -42], [-20, 7], [-5, 4], [-5, 11], [3, 31], [-1, 45], [22, -37], [19, -19]], [[48278, 85462], [-36, -100], [-13, -3], [-13, -25], [-37, -28], [33, 0], [9, -10], [0, -19], [-6, -12], [-43, -46], [-29, -18], [-31, -48], [-16, 0], [-16, -31], [-13, -13], [-7, 0], [-9, 6], [-19, 30], [35, 30], [4, 16], [24, 18], [-2, 5], [-39, 24], [-15, 17], [2, 8], [18, 19], [-9, 2], [-6, 10], [-10, 4], [-4, 10], [-1, 24], [2, 26], [12, 11], [4, 12], [5, 3], [17, -6], [18, -20], [20, 8], [24, -4], [1, 5], [-18, 49], [3, 10], [10, 12], [55, 35], [68, 60], [17, 9], [5, -8], [7, -31], [-1, -41]], [[48255, 84656], [-8, -7], [-10, 1], [-11, 10], [-13, 27], [30, 19], [13, -11], [4, -13], [0, -14], [-5, -12]], [[48293, 84968], [-1, -26], [-5, -30], [7, -32], [1, -22], [12, -8], [7, -10], [52, -12], [49, 4], [9, -10], [1, -15], [-8, -16], [-27, -30], [-33, -48], [-10, -10], [-11, -1], [-7, 5], [-6, 86], [-35, -11], [-29, 1], [-16, 10], [-11, 20], [-22, 52], [-65, 21], [-18, 28], [-6, 18], [3, 9], [13, 21], [17, -7], [11, 4], [6, 10], [0, 8], [-9, 18], [0, 6], [66, 23], [5, 37], [15, 3], [16, -12], [23, -38], [6, -46]], [[47998, 85070], [31, -32], [-25, -54], [-38, 0], [-54, 39], [0, 8], [4, 12], [8, 10], [9, 2], [13, -7], [19, 11], [15, -4], [18, 15]], [[47986, 84743], [-12, -3], [-15, 3], [-10, 9], [-9, 35], [-2, 22], [4, 40], [-1, 47], [32, 2], [8, -7], [5, -142], [0, -6]], [[47236, 82899], [-1, -17], [-21, 21], [-10, 22], [-56, 11], [23, 22], [12, -6], [40, -1], [11, -10], [2, -42]], [[47939, 84657], [-24, -8], [-9, 4], [-2, 8], [6, 20], [19, 7], [13, -11], [2, -10], [-5, -10]], [[56109, 86599], [-20, -3], [-29, 29], [-3, 11], [11, 6], [-8, 23], [3, 10], [22, -18], [12, -21], [-12, -5], [20, -22], [4, -10]], [[55461, 86513], [2, -13], [-11, 3], [-8, -4], [-6, -16], [-12, 5], [-5, 23], [9, 34], [22, 2], [9, -34]], [[55552, 86607], [9, 0], [3, 5], [15, -4], [23, -22], [4, -12], [16, -6], [5, -13], [-18, -39], [-11, 0], [-8, 4], [-15, -4], [-8, -7], [-3, -16], [0, -34], [-65, -7], [-15, 10], [-20, 77], [4, 20], [14, 8], [12, 2], [1, -41], [18, 4], [5, 27], [1, 20], [-4, 9], [-12, 8], [-7, 13], [10, 21], [18, 9], [16, -28], [12, -4]], [[55893, 88272], [3, -11], [17, 3], [21, 20], [16, -9], [-2, -28], [-10, 1], [-3, 4], [-14, -16], [-2, -9], [-16, -7], [-29, 28], [-18, 45], [42, 0], [-4, -11], [-1, -10]], [[55321, 85208], [-5, -36], [-15, 3], [-13, 26], [27, 41], [40, -2], [14, -9], [-48, -23]], [[54591, 84268], [-15, -29], [-12, 2], [-9, 39], [-2, 99], [5, 49], [61, 178], [27, 14], [38, 109], [10, 48], [17, 44], [10, 39], [8, 15], [17, -7], [8, -7], [-18, -23], [2, -29], [-1, -13], [-48, -128], [-12, -83], [-17, -21], [-69, -296]], [[54190, 83537], [-10, -10], [-46, 17], [-56, 40], [9, 78], [14, 34], [102, -88], [1, -33], [-14, -38]], [[53808, 83169], [7, -39], [-8, -19], [-31, 32], [-32, 0], [-18, -51], [-14, -2], [-49, 46], [-7, 23], [-2, 18], [7, 65], [-1, 20], [15, 22], [2, 32], [27, 34], [24, 1], [8, -28], [11, -20], [40, -22], [6, -10], [4, -14], [-19, -27], [-6, -14], [6, -23], [30, -24]], [[53485, 83505], [-10, -9], [-43, 7], [-48, -40], [-18, 12], [7, 26], [5, 9], [16, 11], [11, 16], [4, 25], [10, -14], [30, -5], [14, -8], [12, -12], [10, -18]], [[53518, 83868], [-26, -24], [-6, 1], [-9, 34], [14, 20], [8, 17], [6, 0], [8, -19], [5, -29]], [[53155, 83462], [50, -36], [33, 2], [22, -14], [6, -23], [2, -51], [-24, -15], [-26, 5], [-36, -19], [-117, 83], [2, 69], [4, 27], [56, 7], [28, -35]], [[52912, 83437], [-19, -6], [-21, 12], [-35, 48], [-4, 12], [18, -8], [23, -25], [18, -5], [25, -21], [-5, -7]], [[52794, 83459], [-29, -8], [-14, 14], [-28, 5], [-9, 89], [2, 5], [14, -6], [47, -41], [16, -45], [1, -13]], [[52981, 83381], [-12, -3], [-17, 46], [-2, 15], [20, 30], [12, 34], [33, 52], [19, 61], [7, -1], [-8, -55], [-43, -151], [-9, -28]], [[52946, 83976], [-5, -11], [-17, 11], [-2, 37], [6, 34], [-7, 30], [8, 19], [25, -45], [7, -21], [-9, -25], [-6, -29]], [[53134, 83189], [-43, -1], [-16, 23], [-17, 6], [9, 29], [12, 10], [41, -19], [13, -36], [1, -12]], [[53070, 84822], [-12, -13], [-38, 19], [17, 26], [42, 13], [24, -4], [-27, -27], [-6, -14]], [[52307, 83402], [-6, -12], [3, 82], [30, 86], [13, -2], [-13, -23], [-4, -16], [-5, -33], [2, -17], [70, -5], [-8, -15], [-71, -10], [-11, -35]], [[49672, 78285], [-10, -50], [-18, 46], [-25, 41], [-5, 37], [0, 10], [29, -27], [29, -57]], [[49704, 81042], [-24, -20], [-7, -23], [-6, -9], [-15, -6], [-15, -1], [-58, 47], [-14, -2], [13, 22], [37, 17], [20, 23], [47, -22], [22, -26]], [[51357, 82413], [-28, -41], [-17, 12], [-4, 9], [8, 32], [41, 53], [0, -65]], [[52887, 76530], [9, -22], [1, -13], [-6, -15], [3, -33], [-24, 28], [-35, -14], [-21, 3], [-6, 24], [5, 15], [33, 3], [11, 7], [20, -3], [10, 20]], [[52355, 74347], [-16, -57], [-17, 40], [-1, 35], [3, 10], [20, -15], [11, -13]], [[52301, 75483], [-9, -26], [-13, 2], [5, 19], [12, 39], [15, 13], [6, -11], [-7, -23], [-9, -13]], [[51192, 74793], [-5, -7], [-85, 67], [-28, 7], [-7, 10], [1, 35], [2, 15], [57, 7], [46, -24], [25, -67], [2, -11], [-8, -32]], [[50442, 74119], [-6, -7], [-18, 7], [-28, 0], [-1, 23], [4, 16], [5, 17], [17, -33], [27, -6], [0, -17]], [[50401, 74261], [-10, -35], [-42, 12], [-10, 15], [9, 40], [13, 5], [0, 28], [13, 29], [60, 23], [14, -20], [3, -28], [-36, -61], [-14, -8]], [[41350, 74542], [-12, -27], [-21, 10], [-7, 10], [6, 59], [17, 14], [17, -24], [0, -42]], [[42479, 74103], [-6, -6], [-58, 16], [-16, 21], [-7, 39], [10, 13], [25, 8], [37, -7], [24, -28], [0, -36], [-9, -20]], [[42283, 74052], [-13, -7], [-74, 44], [-26, 21], [-34, 51], [96, -62], [51, -47]], [[42044, 74034], [-29, -1], [-27, 44], [40, 23], [12, -14], [8, -16], [6, -21], [-10, -15]], [[42181, 73993], [23, -23], [-35, -5], [-11, -11], [-29, 16], [-33, -3], [-22, 31], [-5, 33], [11, 20], [30, 0], [71, -58]], [[42875, 73640], [17, -4], [89, 9], [24, -6], [-3, -43], [-17, -17], [-52, -11], [-82, 27], [-27, 37], [-4, 27], [0, 12], [17, 10], [38, -41]], [[54046, 72495], [-10, -19], [-26, 1], [-24, 29], [0, 61], [27, -12], [25, -41], [8, -19]], [[54230, 77224], [5, -20], [-35, 38], [-13, 26], [-3, 11], [46, -55]], [[54113, 77751], [-34, -12], [-16, 22], [-4, 18], [-29, 6], [-17, 25], [-3, 11], [24, 28], [13, 45], [16, -27], [20, -51], [11, -14], [19, -51]], [[54119, 77625], [7, -25], [-26, 23], [-23, 9], [-5, 17], [3, 14], [5, 14], [18, -2], [3, -14], [18, -36]], [[54218, 77382], [-7, -16], [-18, 29], [-16, 20], [-12, 23], [-23, 30], [-8, 34], [-34, 69], [-6, 19], [18, -28], [14, -18], [12, -4], [30, -44], [30, -57], [35, -49], [-8, -2], [-7, -6]], [[54219, 77143], [4, -8], [-1, -6], [-14, 8], [-4, -2], [-68, 126], [-7, 24], [24, -29], [66, -113]], [[54269, 77173], [19, -43], [-18, 9], [-18, 27], [-11, 28], [28, -21]], [[54024, 77568], [-2, -22], [-17, 28], [-9, 51], [-21, 82], [-3, 23], [11, 23], [0, 23], [-15, 72], [12, 11], [8, 2], [3, -50], [7, -29], [20, -35], [-4, -58], [4, -83], [4, -18], [2, -20]], [[54891, 76479], [37, -39], [-111, 51], [13, 5], [12, 1], [49, -18]], [[55725, 73953], [4, -67], [19, -12], [26, -60], [-2, -31], [-6, -10], [-43, 28], [-10, -13], [-13, 5], [-7, 34], [1, 11], [-8, 20], [-5, 9], [-17, -26], [-11, -5], [0, 24], [16, 66], [7, 11], [13, -22], [10, 8], [8, 36], [1, 36], [3, 11], [14, -53]], [[55802, 73620], [29, -56], [-23, 14], [-26, -39], [-31, 45], [-20, 46], [-4, 18], [20, 43], [19, -44], [22, -7], [14, -20]], [[55746, 74083], [-11, -5], [-9, 3], [-9, -2], [-8, -11], [1, 45], [10, 57], [11, 33], [17, 15], [7, -26], [-1, -92], [-8, -17]], [[55766, 73922], [-14, -6], [-17, 55], [-7, 38], [7, 2], [7, -5], [8, -14], [0, -15], [3, -15], [7, -19], [6, -21]], [[55577, 74557], [6, -32], [-35, 20], [-25, 29], [-21, 71], [-45, 81], [0, 24], [17, 18], [36, 12], [15, -13], [9, -13], [3, -16], [-20, -31], [-5, -14], [16, -28], [0, -11], [7, -55], [8, -20], [20, -16], [14, -6]], [[56541, 73689], [-11, -14], [-12, 1], [-9, 5], [-4, 11], [5, 6], [7, 23], [6, 6], [9, -3], [5, -9], [4, -26]], [[56403, 72689], [-3, -25], [-28, 17], [-8, 26], [-2, 57], [8, 28], [5, 9], [13, -32], [27, -47], [-12, -33]], [[51096, 81646], [28, -31], [5, -10], [2, -11], [-34, -12], [-37, 38], [-24, -9], [-9, 18], [0, 12], [25, 9], [44, -4]], [[35829, 91907], [-43, -20], [-9, 5], [-9, 15], [-22, 70], [-7, 34], [5, 41], [-8, 29], [39, 35], [32, 5], [43, -8], [72, -35], [-5, -11], [-16, -18], [-44, -24], [-15, -53], [-3, -27], [2, -20], [-12, -18]], [[39713, 89591], [-43, 0], [-14, 45], [4, 50], [49, 15], [26, -34], [-10, -50], [-12, -26]], [[35129, 92765], [-26, -4], [-75, 29], [-12, 11], [-5, 14], [3, 16], [24, 30], [45, 43], [32, 8], [20, -27], [20, -37], [2, -18], [-1, -22], [-5, -19], [-9, -15], [-13, -9]], [[34717, 93773], [-39, -39], [-32, -23], [-70, -66], [-12, -3], [-18, 9], [-15, 18], [-26, 4], [-9, 11], [-4, 9], [-12, 6], [-18, 3], [-30, -7], [-27, 7], [-21, 29], [38, 20], [24, 17], [91, 6], [25, -7], [16, 0], [25, 4], [54, 21], [8, 10], [48, -12], [4, -17]], [[35645, 92658], [-37, -2], [-86, 11], [-7, 6], [-1, 13], [12, 37], [38, 5], [45, -20], [49, -29], [6, -13], [-19, -8]], [[37148, 86855], [-32, -70], [-32, 15], [-16, 31], [-31, 15], [-34, -4], [-1, 12], [110, 74], [53, 20], [-4, -31], [-10, -27], [-3, -35]], [[14974, 80272], [8, -52], [-34, 9], [-12, 10], [0, 25], [6, 23], [26, -8], [6, -7]], [[16001, 79144], [-1, -13], [-10, -10], [-6, 2], [0, 16], [-3, 2], [-12, -18], [1, 36], [6, 39], [5, 1], [7, -26], [13, -29]], [[15973, 79259], [-2, -11], [-15, 13], [-5, 12], [1, 27], [3, 18], [3, 4], [9, -8], [3, -4], [3, -51]], [[15894, 79880], [3, -13], [-11, -12], [-8, -2], [-12, 20], [-6, 2], [5, -30], [-2, -10], [-26, 18], [-5, 15], [8, 16], [16, 16], [6, 2], [32, -22]], [[15883, 79741], [-4, -6], [-15, 8], [-9, 13], [-3, 16], [6, 30], [7, 8], [5, -2], [2, -27], [13, -28], [-2, -12]], [[15830, 79781], [7, -19], [-30, 12], [-13, 11], [-3, 11], [-5, 34], [2, 12], [13, 4], [25, -43], [4, -22]], [[15952, 79583], [13, -76], [6, 31], [38, -54], [0, -27], [-4, -9], [-8, -3], [-8, 8], [-6, 19], [-9, 10], [-18, 6], [-9, 21], [-4, 15], [0, 42], [-5, 14], [-10, 2], [-9, 11], [-14, 29], [-2, 8], [7, 24], [15, 41], [11, 19], [7, -2], [9, -13], [10, -22], [-2, -15], [-41, -31], [-2, -7], [21, -9], [7, -7], [7, -25]], [[15513, 80374], [4, -12], [-62, 45], [-27, 27], [-10, 19], [-6, 11], [-32, 28], [-5, 13], [7, 10], [21, -6], [35, -21], [32, -35], [43, -79]], [[15730, 80003], [-4, -7], [-43, 41], [-29, 54], [-12, 32], [57, -81], [29, -26], [2, -13]], [[15712, 79927], [-11, -15], [-7, 2], [-5, 10], [-18, 102], [8, -3], [24, -31], [-5, -12], [18, -31], [4, -21], [-8, -1]], [[15284, 80661], [-7, -5], [-7, 66], [9, 23], [2, 12], [-1, 13], [15, -30], [6, -20], [2, -27], [0, -8], [-19, -24]], [[14822, 80417], [-11, -2], [-18, 7], [-19, 16], [-35, 44], [-3, 10], [3, 9], [9, 7], [3, 11], [-8, 32], [27, 20], [25, -17], [11, -20], [13, -36], [6, -41], [1, -28], [-4, -12]], [[15226, 80700], [-3, -30], [-17, 49], [-28, 105], [4, 24], [12, 35], [11, 2], [18, -16], [16, -29], [3, -11], [10, -30], [5, -27], [-11, -33], [-20, -39]], [[17125, 70753], [-16, -6], [-18, 12], [-16, 56], [-17, 43], [9, 13], [14, -42], [35, -64], [9, -12]], [[17155, 68514], [-12, -22], [-32, 120], [0, 29], [9, 15], [15, -3], [0, -30], [13, -26], [5, -24], [2, -59]], [[16654, 71381], [-19, -8], [-15, 8], [-23, 55], [50, 7], [21, -24], [3, -7], [-17, -31]], [[16699, 71474], [57, -30], [30, 14], [6, -14], [-4, -12], [-69, -23], [-21, 16], [-2, 21], [-7, 21], [10, 7]], [[17125, 71074], [14, -42], [-20, 5], [-21, -3], [-6, 24], [-7, 32], [-4, 8], [-14, 3], [-1, 3], [-2, 15], [4, 8], [45, -36], [12, -17]], [[30176, 75740], [-8, -11], [-3, 28], [6, 32], [5, 0], [3, -17], [-3, -32]], [[29407, 74700], [-32, -87], [-1, 17], [41, 108], [-8, -38]], [[29392, 75185], [-13, -2], [13, 55], [24, 25], [9, -5], [0, -19], [-3, -17], [-16, -26], [-14, -11]], [[32019, 70445], [-25, -20], [-7, 2], [-5, 7], [26, 19], [21, 46], [7, -3], [-17, -51]], [[30414, 75677], [-77, -28], [-12, 18], [19, 8], [24, 43], [16, 5], [25, -24], [5, -22]], [[30210, 75743], [-13, -15], [-16, 2], [8, 22], [3, 31], [8, 34], [4, 11], [9, 9], [-3, -94]], [[30561, 75613], [-21, -9], [-49, 21], [40, 18], [7, 6], [5, 27], [1, 13], [15, -57], [2, -19]], [[28949, 72113], [-50, -41], [-6, 3], [33, 29], [23, 9]], [[28990, 72497], [-4, -12], [-19, 64], [19, -21], [4, -17], [0, -14]], [[29074, 73668], [-13, -10], [43, 116], [24, 96], [11, 34], [-10, -68], [-19, -62], [-36, -106]], [[29015, 72142], [-37, -16], [-3, 6], [42, 32], [14, 116], [2, 53], [-7, 95], [1, 19], [6, -30], [7, -88], [-3, -67], [-12, -97], [-10, -23]], [[28749, 71798], [-7, -6], [25, 72], [50, 91], [14, 14], [-42, -78], [-40, -93]], [[23121, 68060], [-10, -3], [12, 31], [21, 16], [45, 60], [18, 4], [10, 20], [4, 3], [-3, -25], [-36, -36], [-61, -70]], [[22957, 67568], [-9, -33], [3, 50], [22, 112], [46, 147], [20, 25], [-53, -162], [-29, -139]], [[23600, 68632], [-14, -6], [61, 89], [12, 29], [16, -1], [-27, -50], [-48, -61]], [[23008, 66911], [-4, -26], [-23, 125], [-37, 282], [-2, 161], [6, 56], [10, -228], [41, -289], [9, -81]], [[26414, 68918], [-28, -21], [-30, 15], [19, 3], [13, -6], [35, 30], [18, 22], [21, 9], [-48, -52]], [[27383, 69683], [-12, -140], [-5, 50], [-1, 48], [9, 28], [9, 14]], [[25215, 69172], [1, -27], [-13, 14], [-20, 1], [8, 9], [7, 9], [3, 10], [25, 33], [-7, -25], [-4, -24]], [[24502, 68836], [-11, -8], [-46, 50], [-3, 21], [23, 20], [14, -2], [22, -25], [8, -8], [3, -10], [-2, -16], [-8, -22]], [[25325, 69013], [-7, -18], [7, 87], [-11, 74], [12, -32], [4, -39], [-5, -72]], [[28428, 65811], [1, -13], [-28, -36], [20, -26], [19, 56], [15, -46], [8, -86], [-1, -15], [1, -12], [3, -17], [1, -24], [-16, -75], [-54, 8], [-2, 63], [-8, 12], [-13, 91], [-17, 29], [-24, 74], [14, 19], [18, -6], [10, 9], [25, 7], [16, 10], [12, -22]], [[28425, 64488], [-11, -18], [-13, 26], [-8, 2], [-11, 10], [-21, 29], [-5, 29], [17, 2], [23, -5], [39, -16], [-4, -34], [-6, -25]], [[28326, 64680], [-6, -10], [-15, 22], [-22, 9], [-13, 33], [-12, 13], [-1, 12], [20, 9], [14, -4], [16, -26], [9, -46], [10, -12]], [[28158, 64834], [38, -13], [13, 8], [13, 2], [13, -5], [19, -48], [-16, -6], [-13, 0], [-10, 8], [-34, 3], [-23, 14], [-12, 12], [-6, 14], [18, 11]], [[28548, 66764], [-6, -5], [-24, 58], [-19, 17], [30, 41], [13, 35], [0, 76], [7, 42], [-2, 36], [7, 37], [-9, 42], [-26, 33], [-50, 131], [-79, 32], [-41, 1], [22, 21], [21, -2], [32, -13], [39, -6], [23, -39], [22, -51], [21, -20], [8, -14], [-1, -14], [3, -14], [27, -24], [26, -39], [8, -113], [-36, -54], [-6, -164], [-10, -30]], [[29428, 64932], [6, -10], [-17, -23], [-40, 28], [-9, -2], [-8, 31], [-3, 22], [2, 21], [24, -16], [12, -30], [33, -21]], [[29325, 65707], [-22, -63], [-12, 6], [7, 78], [15, 12], [6, 0], [6, -33]], [[29714, 64050], [-8, -42], [-30, -81], [-65, -20], [-73, -4], [-5, 22], [-2, 20], [5, 30], [0, 12], [-3, 12], [26, 13], [18, 37], [27, 7], [34, -27], [19, -1], [27, 29], [22, 63], [13, -8], [-5, -62]], [[29387, 64639], [-20, -18], [5, 30], [37, 51], [21, 44], [11, 16], [5, 12], [16, 17], [8, 28], [-2, 24], [-17, 38], [0, 27], [6, 20], [29, 9], [-8, -29], [12, -82], [-39, -103], [-33, -31], [-31, -53]], [[28708, 66524], [46, -65], [39, -24], [42, -82], [18, -29], [4, -26], [-7, -120], [-10, -73], [2, -63], [-10, 18], [-10, 42], [-17, 24], [-5, 13], [29, 2], [3, 66], [14, 51], [-2, 54], [-34, 59], [-24, 53], [-36, 16], [-34, 52], [-20, 7], [-24, -10], [9, 31], [6, 41], [4, 8], [17, -45]], [[28982, 65351], [-12, -4], [-21, 16], [-48, 70], [-23, 6], [8, 39], [17, -14], [39, -60], [15, -30], [25, -23]], [[29211, 65031], [-2, -15], [-35, 115], [-44, 28], [-26, 28], [6, 15], [17, 7], [3, 37], [-7, 39], [-24, 80], [-13, 54], [-6, 12], [-1, 45], [27, -70], [12, -62], [18, -61], [13, -105], [35, -36], [25, -51], [2, -60]], [[29081, 65783], [2, -30], [-19, 6], [-28, -11], [-9, 0], [6, 20], [19, 27], [1, 26], [-24, 37], [-27, 92], [-13, 22], [-6, 35], [-23, 38], [5, 20], [4, 4], [16, -9], [35, -134], [2, -12], [59, -131]], [[28367, 64589], [-10, -2], [-27, 24], [-9, 20], [10, 27], [2, 30], [4, 1], [4, -35], [22, -15], [1, -8], [13, -30], [-10, -12]], [[27212, 67081], [-10, -15], [-20, 11], [-11, 20], [-5, 38], [17, -41], [7, -9], [22, -4]], [[28404, 66075], [0, -70], [3, -52], [-3, -19], [-30, -34], [-8, -20], [-28, -20], [-17, -27], [-9, 45], [-17, 27], [-2, 47], [-13, -16], [-19, 10], [-30, 35], [-19, 48], [27, 8], [5, -30], [22, 37], [-5, 19], [-4, 3], [-7, 36], [32, 94], [7, 60], [-15, 98], [14, 6], [36, -34], [16, -34], [0, -46], [16, -35], [21, -86], [27, -50]], [[27342, 66013], [-18, -6], [15, 23], [5, 34], [8, -26], [0, -17], [-10, -8]], [[27726, 67556], [4, -42], [-25, 98], [-32, 154], [-17, 120], [12, -33], [11, -66], [47, -231]], [[27066, 64269], [-26, -31], [-55, -43], [-30, -1], [-30, 16], [-20, 36], [-12, 35], [1, 17], [19, -28], [16, -14], [13, 9], [10, 16], [-31, 114], [2, 25], [24, 62], [65, -19], [11, -11], [10, -40], [14, -31], [17, -83], [2, -29]], [[27199, 67138], [-1, -34], [-14, 57], [-9, 62], [13, -20], [11, -65]], [[27958, 64898], [1, -15], [-49, 42], [-21, 44], [-8, 10], [13, 1], [55, -72], [9, -10]], [[28196, 67240], [34, -18], [18, 2], [11, 12], [49, -5], [41, 17], [6, -30], [-1, -16], [-86, -15], [-78, -45], [-43, -31], [-21, -3], [-15, 16], [-52, 93], [14, -10], [38, -52], [24, 10], [22, 34], [4, 26], [-4, 13], [10, 41], [29, -39]], [[27671, 66325], [-55, -108], [6, 27], [22, 58], [7, 28], [14, 17], [14, 31], [1, 37], [20, 25], [6, 4], [-35, -119]], [[25569, 62168], [-13, -11], [11, 34], [1, 21], [16, 89], [10, -1], [3, -8], [-28, -124]], [[25596, 61879], [-21, -81], [-2, 23], [9, 60], [12, 21], [8, 22], [2, 26], [10, -13], [-3, -25], [-15, -33]], [[24532, 62601], [-31, -13], [-6, 13], [63, 58], [11, -2], [4, -8], [-33, -28], [-8, -20]], [[27157, 57246], [-3, -27], [-21, 49], [12, 8], [5, -1], [7, -29]], [[27397, 62988], [9, -11], [11, 7], [4, 12], [42, -9], [7, -24], [-33, -1], [-14, -15], [-8, -3], [-28, 4], [-4, 55], [8, 6], [6, -21]], [[25850, 63538], [-15, -18], [-7, 64], [11, 61], [14, 36], [28, 4], [18, 12], [2, -16], [-15, -48], [-36, -95]], [[32602, 61773], [-7, -8], [-13, 35], [-20, 10], [-18, 21], [0, 4], [0, 11], [4, 12], [9, 9], [22, -28], [11, -36], [10, -17], [2, -13]], [[33084, 59805], [-15, -61], [-31, 38], [-3, 48], [3, 29], [18, 54], [15, 36], [10, 12], [6, -47], [-3, -109]], [[33103, 60192], [-2, -33], [-7, -6], [-11, 27], [-45, -4], [-7, 25], [-1, 11], [22, 42], [-26, 11], [-10, 18], [-22, 87], [2, 26], [9, 13], [15, 2], [28, -28], [20, -40], [7, -1], [3, -11], [-4, -29], [12, -24], [5, -17], [12, -69]], [[33052, 57680], [-45, -32], [-118, -8], [-48, 12], [-37, -9], [67, 70], [8, 30], [29, 6], [9, 9], [9, 155], [-4, 38], [-5, 20], [-12, 15], [-26, 20], [-5, 11], [17, 17], [35, 9], [26, 19], [55, 4], [26, 16], [45, 5], [-22, -71], [-10, -27], [4, -65], [-5, -43], [6, -55], [13, -37], [-9, -35], [-1, -54], [-2, -20]], [[31054, 58838], [-14, -64], [-8, 28], [-1, 52], [-6, 20], [-11, 12], [-6, 17], [0, 26], [42, -41], [4, -50]], [[33123, 58282], [-15, -6], [2, 23], [26, 40], [41, 26], [10, 1], [-6, -35], [-58, -49]], [[32736, 61486], [-1, -34], [-19, 10], [-1, 30], [9, 31], [5, 3], [7, -40]], [[33474, 59378], [-8, -11], [-25, 23], [-9, 28], [-1, 88], [15, 8], [29, -70], [17, -25], [-18, -41]], [[32264, 58254], [9, -75], [-3, -14], [-25, -51], [-21, -3], [-17, 1], [-13, 10], [-17, 33], [-16, -10], [-40, 12], [-11, 11], [15, 41], [28, 16], [10, 4], [8, -25], [20, -22], [23, -2], [6, 38], [32, 57], [12, -21]], [[32499, 62339], [-44, -29], [2, 17], [35, 40], [13, -3], [-6, -25]], [[32856, 58762], [-18, -2], [7, 21], [2, 37], [10, 44], [15, 30], [15, -8], [-6, -98], [-25, -24]], [[32848, 61966], [-4, -15], [-23, 28], [-7, 51], [1, 11], [3, 6], [9, -10], [12, -4], [8, -17], [1, -50]], [[32991, 60996], [-15, -2], [-7, 5], [-2, 34], [12, 24], [7, 6], [10, -27], [3, -22], [-8, -18]], [[32856, 61657], [-9, -23], [-31, 9], [-6, 29], [-1, 20], [19, 41], [22, -18], [9, -19], [6, -4], [0, -17], [-3, -12], [-6, -6]], [[32977, 60627], [-26, -13], [-11, 100], [-18, 72], [3, 45], [3, 17], [38, -28], [12, -33], [7, -89], [-8, -71]], [[32964, 61192], [-32, -6], [-22, 5], [-5, 41], [11, 35], [-8, 42], [5, 25], [11, 17], [18, -22], [3, -32], [11, -29], [51, -61], [-43, -15]], [[32891, 61063], [-22, -26], [-11, 8], [-14, 50], [-9, 138], [7, 22], [5, 9], [30, -17], [12, -19], [13, -13], [-7, -25], [4, -103], [-8, -24]], [[33007, 59422], [-8, -9], [-21, 39], [3, 45], [12, 25], [12, 14], [12, 2], [4, -38], [-3, -52], [-11, -26]], [[29711, 64763], [17, -9], [9, 1], [32, -17], [19, -24], [4, -10], [-10, -21], [-29, 40], [-26, 5], [-36, -1], [-14, 8], [10, 43], [24, -15]], [[30902, 58789], [-14, -8], [-54, 56], [-44, 90], [-1, 47], [11, -4], [12, -18], [17, -64], [52, -42], [21, -57]], [[30094, 64380], [-1, -8], [-16, 23], [-30, 0], [-5, 30], [12, 5], [38, -11], [9, -26], [-7, -13]], [[29745, 64231], [-37, -28], [-3, 33], [18, 27], [22, -32]], [[30033, 64424], [-5, -7], [-16, 20], [-2, 16], [-6, 1], [-10, 14], [3, 19], [22, 1], [9, -52], [5, -12]], [[29907, 64430], [32, -32], [19, 5], [2, -7], [-11, -7], [-2, -6], [-31, -9], [-9, 2], [-2, 22], [2, 32]], [[5300, 85585], [-20, -9], [-22, 5], [-17, 57], [13, 1], [28, 38], [60, 30], [15, 4], [-57, -126]], [[7498, 84749], [-35, -19], [-7, 1], [-21, -38], [-17, -16], [-22, 30], [5, 46], [20, 30], [97, -10], [7, -9], [1, -7], [-8, -6], [-20, -2]], [[7772, 86613], [-13, -2], [17, 28], [13, 56], [17, -8], [3, -10], [-28, -57], [-9, -7]], [[7643, 85532], [-9, -4], [-20, 18], [-13, 19], [9, 14], [39, 30], [19, 0], [8, -4], [3, -10], [-2, -13], [-8, -18], [-26, -32]], [[7433, 85166], [-8, -16], [-7, 4], [-16, 19], [-31, 28], [-15, 18], [-1, 8], [11, 9], [38, -22], [15, -20], [14, -28]], [[6787, 83998], [-11, -19], [-21, 2], [-12, 6], [-3, 16], [32, 48], [7, 6], [6, -2], [3, -20], [-1, -37]], [[7032, 84352], [-19, -14], [-6, 5], [-1, 11], [5, 18], [9, 18], [29, 34], [29, 23], [15, -2], [6, -14], [-19, -30], [-48, -49]], [[7164, 84397], [-13, -1], [-21, 15], [3, 18], [29, 22], [29, -3], [3, -12], [-2, -14], [-2, -8], [-9, -8], [-17, -9]], [[9335, 86664], [6, -16], [53, 4], [16, -3], [6, -7], [-7, -11], [-21, -14], [-60, -25], [-49, -33], [-6, 3], [-9, 36], [-9, 15], [-6, 20], [0, 7], [9, 14], [18, 20], [13, 8], [46, -18]], [[9689, 86599], [-9, -14], [-24, 5], [-13, 9], [44, 37], [7, -8], [-5, -29]], [[9843, 86300], [-14, -3], [20, 38], [27, 41], [26, 27], [32, 11], [-3, -20], [-43, -35], [-45, -59]], [[8962, 86297], [-31, -8], [-7, 17], [16, 42], [13, 24], [10, 6], [35, 48], [39, 35], [36, 51], [37, 72], [6, 27], [17, 3], [28, -18], [17, -25], [-8, -20], [-92, -103], [-8, -13], [-8, -35], [-8, -13], [-12, -5], [-9, -15], [-5, -25], [-11, -14], [-18, -1], [-12, -7], [-6, -12], [-19, -11]], [[8883, 86442], [-15, -17], [-55, 10], [12, 35], [42, 22], [46, -34], [-30, -16]], [[8984, 86664], [0, -15], [-9, -14], [8, -27], [-14, -46], [-6, -29], [-8, -19], [-7, -7], [-8, 4], [-2, 11], [5, 16], [-18, -1], [-6, 40], [10, 13], [4, 17], [1, 12], [12, 51], [4, 3], [2, -12], [3, -3], [7, 5], [9, 22], [4, 3], [9, -24]], [[8908, 86881], [-35, -5], [-16, 7], [-3, 8], [7, 29], [0, 12], [17, 5], [21, -14], [6, -14], [3, -28]], [[13094, 83464], [6, -8], [7, 5], [12, 21], [20, -4], [14, -7], [9, -8], [-5, -30], [-4, -49], [-8, -17], [-8, -24], [-28, 14], [-23, 31], [-33, 53], [-19, 38], [-1, 16], [-12, 12], [-22, 66], [-13, 52], [-21, 6], [-26, 15], [-10, 29], [7, 25], [37, 12], [55, -64], [9, -28], [20, -32], [3, -44], [10, -18], [24, -62]], [[12781, 84587], [18, -40], [26, 4], [14, -30], [11, -46], [-8, -29], [-11, 7], [-13, -17], [-8, -56], [4, -55], [-4, -56], [-15, -57], [-3, -38], [-6, -11], [-7, -4], [-8, 10], [-12, 8], [-15, -32], [-19, 0], [-15, 73], [13, 121], [31, 25], [-18, 32], [-39, 39], [3, 21], [-29, 62], [-2, 14], [5, 52], [27, 46], [37, 8], [25, -20], [14, -17], [4, -14]], [[12971, 83838], [6, -16], [0, -11], [-40, -38], [-1, -8], [-9, -23], [-9, -9], [-15, -26], [-28, -27], [4, 83], [-28, 48], [28, 24], [19, -7], [31, -3], [30, 22], [12, -9]], [[13517, 83571], [28, -75], [2, -27], [-28, -9], [-21, 4], [-11, 8], [-3, 13], [7, 38], [-14, 22], [-16, 8], [-15, -14], [0, 38], [11, 27], [-7, 36], [0, 28], [4, 9], [15, -1], [30, -29], [18, -76]], [[13126, 84403], [-3, -8], [-36, 1], [-12, 7], [-5, 24], [3, 23], [8, 18], [10, 34], [8, 56], [52, -63], [16, -28], [8, -35], [-18, -13], [-22, -6], [-9, -10]], [[13302, 84164], [-6, -96], [-11, 5], [-10, 1], [-22, -14], [-22, 6], [-11, 11], [-4, 12], [4, 28], [-12, 16], [-42, 6], [-16, 7], [-9, 30], [-2, 39], [7, 14], [21, 11], [16, 47], [10, 7], [35, 94], [17, -7], [31, -57], [39, -83], [-13, -77]], [[13117, 84243], [-15, -2], [-16, 9], [-40, 47], [-1, 14], [6, 15], [22, 29], [10, 7], [54, -3], [17, -8], [4, -13], [0, -14], [-6, -13], [-1, -15], [3, -15], [-7, -15], [-30, -23]], [[12691, 85385], [-2, -15], [-38, 2], [-38, 21], [-19, 27], [4, 13], [35, 11], [34, -26], [24, -33]], [[14184, 82090], [-9, -26], [-37, 63], [-13, 18], [-28, 67], [-5, 29], [1, 17], [5, 6], [9, -4], [8, -8], [53, -74], [15, -35], [1, -53]], [[13631, 83225], [-6, -1], [-3, 12], [2, 25], [9, 42], [4, 9], [36, -7], [5, -3], [1, -8], [-2, -13], [-12, -19], [-34, -37]], [[13603, 81774], [-5, -1], [-9, 12], [-7, 19], [-4, 51], [3, 20], [3, 8], [24, -32], [-5, -77]], [[13823, 82925], [-8, -21], [-20, -32], [-13, -13], [-6, 6], [-18, 4], [-19, 32], [-14, 13], [-10, 1], [-5, -12], [-1, -15], [3, -20], [-2, -9], [-6, 2], [-5, 9], [-6, 16], [-1, 17], [4, 17], [13, 24], [42, 47], [13, 9], [14, -2], [23, -22], [5, -7], [17, -44]], [[13931, 82469], [-6, -2], [-18, 7], [-60, 98], [-43, 35], [-29, 48], [-30, 31], [18, 50], [16, -6], [56, -41], [44, -39], [25, -26], [53, -110], [-4, -16], [-22, -29]], [[14465, 81493], [-4, -9], [-11, 0], [-18, 10], [-13, 21], [-16, 66], [2, 12], [5, 12], [25, 24], [10, -3], [3, -18], [15, -39], [5, -11], [0, -46], [-3, -19]], [[14342, 82027], [-21, -7], [7, 31], [2, 18], [-4, 17], [-3, 33], [-1, 79], [21, 49], [33, 1], [-1, -25], [-14, -111], [-7, -51], [-5, -19], [-7, -15]], [[14079, 82368], [-4, -5], [-11, 8], [-11, 15], [-19, 43], [-6, 18], [-4, 29], [3, 5], [9, -3], [5, -5], [30, -70], [8, -35]], [[14120, 82440], [-2, -4], [-28, 0], [-8, 6], [-5, 12], [-2, 19], [4, 22], [17, 42], [1, 18], [3, 8], [12, -22], [5, -19], [3, -82]], [[11377, 91921], [-23, -21], [-37, 22], [-9, 11], [42, 30], [19, -1], [39, -18], [14, -15], [-45, -8]], [[33056, 56951], [-17, -12], [-3, 58], [5, 15], [30, 47], [8, 8], [6, -9], [-2, -13], [14, -21], [-3, -26], [-16, -29], [-22, -18]], [[27741, 50130], [-5, -22], [-27, 2], [-7, 7], [0, 25], [6, 81], [7, 34], [22, 32], [18, 16], [23, -3], [25, -29], [-29, -55], [-16, -8], [-6, -7], [-11, -73]], [[35602, 51017], [-30, -11], [38, 144], [34, 67], [1, 133], [36, 118], [34, 49], [47, 14], [26, -72], [-32, -205], [-9, -1], [-43, -108], [-48, -75], [-54, -53]], [[28037, 56597], [-12, -25], [-5, 24], [9, 25], [3, 0], [5, -24]], [[28080, 52564], [-15, -4], [-7, 28], [19, 32], [6, 6], [-3, -62]], [[28301, 53307], [-7, -13], [-14, 23], [-5, 29], [8, 21], [12, -7], [5, -18], [1, -35]], [[33105, 57107], [-33, -19], [0, 15], [9, 27], [17, 7], [7, 10], [11, 6], [6, -1], [7, -8], [-16, -15], [-8, -22]], [[37639, 50149], [-28, -56], [9, 65], [-4, 45], [3, 35], [19, 34], [6, 5], [-2, -41], [1, -13], [-4, -74]], [[39237, 44298], [-10, -12], [-2, 36], [29, 47], [4, 54], [15, -25], [4, -28], [0, -12], [-40, -60]], [[39193, 44081], [-9, -33], [-11, 5], [-5, 22], [-8, 22], [4, 18], [8, 10], [20, -2], [1, -42]], [[37532, 51083], [-18, -27], [-5, -15], [-15, 11], [3, 16], [4, -2], [5, 47], [25, -6], [1, -24]], [[36183, 51997], [12, -30], [-40, -120], [-21, -18], [-24, -3], [-31, 36], [-48, -3], [-15, 9], [-1, 52], [20, 56], [40, -3], [69, 45], [39, -21]], [[36028, 52959], [-28, -26], [-16, 10], [-15, 69], [5, 57], [20, 19], [16, -4], [6, -8], [14, -93], [-2, -24]], [[35929, 51767], [-76, -113], [-25, 37], [-6, 22], [5, 21], [-1, 9], [8, 39], [43, 32], [21, 5], [27, -10], [5, -27], [-1, -15]], [[36265, 51778], [-73, -18], [-34, 29], [8, 24], [25, 38], [30, 28], [28, 12], [28, -15], [8, -33], [-2, -32], [-18, -33]], [[35992, 51923], [-5, -85], [-50, 36], [4, 87], [24, 24], [20, 46], [7, 56], [1, 77], [8, 14], [6, 5], [6, -5], [3, -116], [2, -70], [-26, -69]], [[36068, 52069], [-30, -19], [-5, 18], [0, 72], [8, 40], [38, 11], [4, 12], [11, 7], [7, -25], [-1, -41], [-32, -75]], [[24907, 51398], [-15, -1], [-43, 56], [3, 55], [17, 37], [56, 18], [23, -34], [-2, -66], [-19, -48], [-15, -9], [-5, -8]], [[25161, 51318], [-33, -24], [-11, 11], [-7, 11], [-2, 15], [19, 35], [17, 20], [16, 41], [29, 24], [9, -6], [5, -8], [2, -14], [-9, -33], [-18, -23], [-17, -49]], [[27332, 56067], [-15, -3], [-31, 24], [-23, 48], [-2, 15], [1, 16], [12, 49], [17, 17], [6, 0], [16, -57], [-11, -21], [5, -35], [22, -26], [3, -27]], [[24604, 51577], [-28, -10], [-24, 20], [-10, 31], [-2, 46], [2, 15], [52, 16], [17, -38], [0, -57], [-7, -23]], [[24882, 51071], [-11, -1], [-16, 24], [12, 45], [13, -11], [9, -12], [5, -18], [-12, -27]], [[24646, 51857], [18, -37], [9, -106], [56, -112], [7, -62], [-5, -29], [2, -11], [27, -44], [18, -47], [-30, -108], [-62, -46], [-67, 2], [-13, 12], [-18, 41], [-4, 37], [11, 35], [34, 54], [53, 48], [6, 37], [-21, 35], [-14, 71], [-34, 50], [-16, 152], [-11, 8], [-23, -21], [-11, 18], [-2, 10], [25, 35], [5, 24], [36, 12], [15, -20], [9, -38]], [[24840, 51650], [-13, -17], [-52, 20], [-16, 33], [13, 46], [11, 18], [31, -17], [32, -51], [-6, -32]], [[19644, 36209], [-43, -18], [2, 32], [11, 27], [31, -16], [15, -3], [-16, -22]], [[20416, 64291], [-8, -47], [-21, 19], [-8, 30], [-1, 48], [11, 9], [17, -21], [4, -14], [6, -24]], [[19190, 62638], [-17, -12], [-24, 36], [6, 27], [14, 19], [14, -35], [7, -35]], [[19287, 66246], [8, -65], [-15, 10], [-18, 35], [-13, 44], [1, 20], [3, 4], [26, -26], [8, -22]], [[19498, 65755], [-6, -3], [-14, 31], [-6, 75], [3, 8], [27, -93], [-1, -11], [-3, -7]], [[18568, 68578], [-2, -10], [-29, 35], [-64, 122], [-23, 61], [-4, 28], [2, 64], [22, -8], [25, -42], [12, -40], [0, -45], [48, -21], [7, -98], [6, -46]], [[18140, 70106], [-9, -2], [-17, 26], [1, 25], [4, 2], [17, -21], [6, -19], [-2, -11]], [[18008, 68012], [-4, -19], [-47, 39], [26, 67], [-4, 70], [12, 15], [10, -23], [13, -90], [-6, -59]], [[18972, 65894], [-3, -27], [-84, 108], [20, 10], [23, -8], [44, -83]], [[19139, 66831], [3, -20], [-2, -6], [-11, 14], [-19, -86], [-6, -8], [12, 118], [12, 17], [13, 3], [-2, -32]], [[18832, 68551], [-21, -136], [-21, 2], [-44, 43], [-5, 27], [17, 157], [13, 21], [39, 21], [6, -19], [4, -47], [12, -69]], [[18873, 65982], [-6, -7], [-24, 67], [-3, 46], [-10, 19], [-24, 15], [21, 93], [17, 193], [8, -35], [-18, -195], [1, -26], [8, -24], [10, -40], [1, -44], [16, -40], [3, -22]], [[96382, 25818], [12, -70], [-25, 14], [-11, 20], [20, 35], [4, 1]], [[84531, 57952], [-7, -3], [13, 61], [10, -9], [3, -6], [0, -28], [-19, -15]], [[84799, 57593], [2, -29], [-35, 75], [-8, 53], [12, -2], [16, -20], [13, -77]], [[84148, 56111], [3, -14], [-1, -14], [-29, -27], [-9, 1], [-3, 44], [7, 21], [14, -18], [12, 21], [6, -14]], [[84939, 55853], [-4, -32], [-17, 77], [-7, 19], [9, 65], [19, -32], [0, -97]], [[84991, 57369], [-5, -15], [-8, 31], [7, 68], [5, 11], [7, -43], [-6, -52]], [[84613, 58463], [-35, -4], [-15, 26], [-19, 78], [21, 16], [21, -4], [15, -27], [15, -52], [-3, -33]], [[84681, 58522], [-5, -30], [-8, 8], [-7, 14], [-11, 44], [-3, 33], [16, -18], [9, -33], [9, -18]], [[87449, 48136], [-7, -4], [0, 28], [8, 25], [8, 14], [9, 1], [-18, -64]], [[87409, 47955], [-5, -9], [-7, 18], [-1, 12], [10, 32], [9, 18], [11, 1], [-3, -26], [-14, -46]], [[85551, 50151], [-14, -48], [-24, 2], [-4, 7], [29, 30], [13, 9]], [[85445, 49933], [7, -25], [-28, 16], [-12, 25], [12, 15], [7, 4], [14, -35]], [[84458, 48402], [-3, -28], [-10, 32], [-9, 15], [1, 34], [13, -12], [8, -41]], [[84340, 48806], [-1, -58], [-11, 3], [-9, 20], [-3, 20], [1, 15], [5, 13], [18, -13]], [[83548, 47742], [-29, -3], [-8, 5], [-3, 56], [32, -24], [10, -2], [-2, -32]], [[84160, 46920], [-9, -34], [-16, 10], [4, 33], [8, 19], [22, 28], [22, 5], [13, -10], [4, -11], [-34, -11], [-14, -29]], [[82654, 47023], [-7, -1], [-12, 11], [5, 24], [-7, 40], [2, 32], [16, 18], [33, 2], [1, -24], [-31, -102]], [[69450, 90150], [-49, -7], [-54, 44], [-51, 86], [10, 21], [31, -7], [51, -2], [33, -14], [44, -9], [-5, -40], [0, -16], [14, -17], [-14, -30], [-10, -9]], [[76903, 95736], [-15, -6], [-13, 4], [-4, 7], [1, 29], [25, 38], [1, 12], [12, 6], [31, -7], [15, -16], [2, -7], [-21, -38], [-34, -22]], [[77815, 97703], [-61, -7], [7, 40], [4, 11], [31, 6], [20, -10], [44, -7], [-45, -33]], [[94851, 91532], [-12, -1], [9, 39], [1, 17], [-27, 28], [-50, 21], [-13, 17], [-3, 50], [11, 78], [-23, 42], [8, 37], [59, 41], [24, 31], [27, 25], [4, -3], [27, -24], [-2, -52], [-20, -37], [-46, -14], [-6, -25], [6, -44], [1, -57], [5, -51], [28, -52], [6, -26], [-3, -25], [-11, -15]], [[86032, 70078], [-9, -10], [6, 45], [22, 40], [2, -26], [-21, -49]], [[85115, 72864], [-4, -38], [-18, 25], [-5, 82], [19, -24], [8, -45]], [[84695, 74617], [-16, -17], [0, 30], [12, 25], [12, 3], [-8, -41]], [[83680, 68021], [-24, -13], [-9, 0], [0, 42], [20, 39], [8, -13], [5, -21], [0, -34]], [[81542, 64979], [3, -27], [-22, 41], [-6, 2], [-11, 15], [-6, 25], [17, 1], [16, -30], [9, -27]], [[81330, 64286], [-6, -11], [-8, 20], [-2, 30], [-6, 16], [14, 21], [6, 22], [15, -4], [7, -7], [-14, -23], [-3, -10], [-3, -54]], [[81289, 64308], [-27, -12], [-6, 2], [10, 30], [24, 21], [-1, -41]], [[81665, 64637], [-33, 0], [-7, 5], [-4, 13], [12, 22], [45, 30], [-11, -32], [-2, -38]], [[79768, 57832], [-23, -35], [-2, 29], [20, 19], [7, 15], [6, 0], [-8, -28]], [[78699, 58017], [-11, -22], [-16, 46], [0, 12], [27, -36]], [[52385, 83359], [-11, -14], [-26, 2], [-15, 13], [5, 14], [14, 11], [11, 2], [18, -7], [4, -21]], [[51870, 82708], [-25, -2], [7, 15], [24, 12], [13, 0], [-19, -25]], [[25947, 92747], [11, -12], [64, 16], [54, 18], [84, 45], [50, 15], [152, 0], [26, -9], [-11, -26], [-7, -8], [5, -11], [17, -16], [33, -17], [13, 16], [9, 37], [23, 153], [9, 46], [5, 44], [-1, 41], [-11, 26], [-39, 16], [-53, -3], [-28, 4], [-33, 8], [-25, 13], [-16, 17], [-31, 52], [-24, 28], [-60, 52], [-28, 17], [14, 21], [55, 23], [33, 23], [39, 65], [23, 11], [84, -9], [114, -51], [72, -44], [19, -5], [0, 8], [-18, 21], [-82, 54], [-38, 40], [-17, 29], [8, 12], [46, 13], [6, 14], [-63, 17], [-31, 0], [-26, -12], [-28, -1], [-51, 22], [-14, 13], [-30, 38], [-15, 34], [-17, 21], [-7, 16], [-3, 51], [2, 30], [7, 26], [12, 22], [33, 39], [19, 12], [35, 5], [76, -20], [203, -71], [-5, 23], [-227, 96], [-81, 24], [-20, 35], [122, 133], [111, 31], [56, 38], [91, 2], [85, -25], [1, 7], [-38, 46], [3, 12], [48, 27], [89, 32], [108, 26], [22, 13], [28, 9], [51, 9], [127, 3], [71, -3], [95, -20], [55, -35], [17, -21], [30, -69], [24, -95], [35, -40], [56, -21], [39, -24], [22, -26], [6, -32], [-10, -39], [7, -40], [25, -41], [20, -24], [42, -26], [1, -14], [-13, -16], [-28, -23], [-70, -69], [-90, -76], [-64, -66], [-3, -20], [133, 104], [42, -4], [2, -15], [-28, -50], [-33, -45], [-33, -29], [6, -11], [63, -50], [-11, -9], [-31, 5], [-12, -5], [-9, -9], [-6, -14], [0, -20], [5, -25], [-1, -18], [-6, -13], [7, -5], [18, 2], [16, 10], [27, 34], [88, 93], [57, 34], [18, 4], [52, -23], [13, 1], [-58, 72], [-5, 18], [12, 26], [7, 9], [32, 20], [26, 10], [15, -4], [24, -36], [11, -25], [19, -11], [44, 14], [28, 30], [36, -20], [54, -48], [-5, -48], [0, -49], [3, -35], [65, -65], [44, -28], [9, -1], [-2, 10], [-9, 22], [-24, 21], [-23, 34], [-20, 40], [12, 95], [34, 50], [32, -13], [43, -29], [34, -2], [53, 3], [108, -58], [58, -1], [-5, 23], [-44, 12], [-64, 31], [-101, 38], [-46, 44], [-8, 20], [1, 22], [6, 20], [10, 16], [20, 17], [97, 50], [69, 22], [51, 7], [87, -1], [100, -9], [55, -14], [62, -36], [79, -35], [28, -6], [33, 0], [38, 8], [36, -3], [114, -52], [30, -27], [18, -32], [14, -32], [8, -31], [-3, -24], [-95, -108], [-41, -18], [-28, -41], [-40, -77], [-35, -42], [-3, -8], [7, -2], [21, 19], [36, 53], [26, 46], [47, 38], [78, 45], [68, 22], [58, -2], [49, -6], [39, -11], [24, -10], [7, -7], [16, -34], [-1, -23], [-10, -26], [-19, -29], [-84, -33], [-47, -25], [-29, -10], [-87, -9], [4, -10], [65, -14], [71, 4], [-1, -16], [-34, -44], [-11, -38], [9, -31], [-1, -26], [-26, -53], [-28, -48], [10, -7], [66, 69], [18, 76], [27, 66], [31, 37], [23, 14], [74, 5], [40, 39], [35, 12], [15, 1], [29, -15], [-1, -15], [-43, -70], [-92, -112], [38, 13], [25, 27], [34, 26], [38, 40], [25, -36], [39, -27], [23, -61], [38, -29], [23, -23], [-3, 39], [-33, 77], [9, 31], [25, 16], [79, 65], [55, -22], [34, -19], [17, 5], [43, -3], [69, -10], [67, -19], [66, -25], [50, -31], [35, -34], [21, -24], [8, -14], [12, -34], [-9, -23], [-50, -53], [-27, -24], [-27, -11], [-73, 11], [-23, -7], [-24, -16], [-76, -73], [-42, -32], [-41, -20], [-10, -10], [89, 1], [24, 21], [21, 41], [39, 42], [74, 19], [103, -41], [52, 2], [39, 41], [44, 28], [17, 6], [9, -3], [33, -30], [10, -26], [0, -60], [-5, -18], [-29, -46], [-73, -68], [-47, -25], [-52, -14], [-57, -23], [-20, -19], [-20, -26], [-20, -18], [-25, -14], [33, -22], [12, 1], [13, 13], [33, 50], [24, 23], [14, 4], [14, -2], [14, -10], [14, -18], [-1, -43], [-42, -171], [7, 0], [26, 47], [74, 178], [18, 36], [36, 36], [80, 54], [63, 29], [70, 24], [37, 9], [43, -6], [28, -28], [37, -5], [46, 7], [30, -4], [33, -11], [29, -20], [48, -24], [110, -44], [14, -10], [12, -16], [12, -25], [-1, -24], [-15, -23], [-18, -15], [-22, -5], [-23, -13], [-42, -34], [-13, -6], [-66, -14], [-61, -7], [-38, -14], [-73, -37], [-101, -68], [1, -16], [40, -8], [33, 10], [45, 47], [42, 18], [66, 15], [91, 12], [39, -2], [7, -2], [5, -11], [3, -20], [-15, -26], [-17, -12], [-47, -58], [31, -15], [42, -7], [24, 16], [22, 36], [25, 19], [27, 4], [24, 9], [21, 15], [5, 9], [-30, 19], [-2, 11], [12, 28], [22, 30], [23, 19], [17, 2], [57, -21], [39, -35], [98, -107], [12, -21], [34, -79], [7, -35], [-6, -25], [-8, -15], [-10, -5], [-22, -1], [-130, 33], [-60, -4], [-26, -9], [-21, -14], [-16, -17], [-12, -21], [-23, -12], [-82, 0], [-47, -12], [-80, -28], [-28, -16], [-7, -20], [49, 4], [81, 26], [75, 8], [127, -59], [41, -9], [23, 9], [28, 2], [101, -4], [35, -7], [51, -22], [78, -49], [15, -14], [9, -15], [2, -16], [0, -39], [-8, -13], [-27, -9], [-112, 10], [-35, 9], [-42, -11], [-34, 4], [-44, 15], [-48, 28], [-72, -26], [-58, 17], [-59, -15], [-117, -62], [13, -11], [160, 53], [31, -3], [51, -20], [80, -38], [23, -16], [0, -60], [-12, -41], [-25, -45], [-37, 6], [-85, 28], [-35, 4], [-26, -4], [-34, -19], [-17, 0], [-137, 36], [-31, 2], [-3, -4], [6, -7], [125, -56], [92, -6], [57, -10], [34, -17], [16, -13], [2, -37], [30, -38], [28, -15], [18, -1], [30, 14], [30, 2], [25, -9], [31, -21], [37, -6], [33, -13], [26, -2], [71, 6], [31, -8], [8, -7], [-13, -12], [-66, -29], [-10, -28], [37, -36], [20, -28], [-1, -20], [-20, -47], [-5, -19], [6, -2], [48, 38], [7, -4], [5, -53], [6, 3], [16, 43], [-7, 58], [28, 23], [88, 18], [-15, -91], [-2, -47], [-39, -79], [-32, -25], [1, -6], [23, -10], [14, -1], [14, 13], [33, 60], [66, 64], [12, 1], [0, -23], [-9, -42], [31, -20], [29, 19], [16, 17], [37, -2], [17, -8], [5, -19], [-17, -79], [3, -19], [39, -52], [4, 3], [-8, 25], [-8, 62], [8, 28], [32, 34], [65, 50], [25, 10], [15, -7], [24, -24], [-8, -14], [-26, -15], [-19, -27], [-13, -39], [14, -21], [53, -2], [54, 32], [30, -16], [37, -42], [66, -67], [39, 18], [47, -51], [-64, -40], [20, -86], [-82, 4], [-46, -7], [-31, 8], [-34, -3], [31, -20], [59, -9], [6, -25], [46, 0], [35, 5], [63, -1], [4, 30], [41, 17], [23, 19], [20, -12], [57, -12], [77, -59], [-34, -35], [-9, -33], [-12, -28], [-6, -25], [-14, -17], [-109, -99], [18, -1], [46, 24], [91, 35], [50, 15], [36, -10], [18, 0], [16, 13], [30, -15], [62, -13], [71, 81], [43, -16], [40, -50], [86, -89], [45, -51], [15, -23], [-2, -23], [-41, -25], [-20, -5], [-55, 46], [-50, 24], [-31, -3], [-30, -18], [10, -9], [121, -71], [21, -52], [2, -23], [-81, -35], [-26, -2], [-57, 17], [-32, 31], [-28, 11], [-37, 3], [-12, -6], [41, -52], [-4, -16], [-21, -10], [-11, -25], [81, -46], [61, -46], [9, -19], [-41, -13], [-29, -4], [-62, 7], [-35, 10], [-9, -11], [35, -24], [14, -16], [10, -23], [7, -22], [1, -20], [-28, -17], [-35, -46], [-14, -48], [-31, -5], [-13, 9], [-42, -15], [-55, 21], [-20, 22], [-61, 90], [-1, -10], [15, -46], [-3, -27], [-64, -20], [0, -7], [39, -15], [48, -11], [-8, -42], [1, -181], [-11, -64], [-23, -56], [-34, -53], [-36, 35], [-15, 36], [-12, 18], [-17, 15], [-23, 7], [-23, 0], [-25, -32], [-28, 28], [-26, 33], [10, 88], [11, 44], [-4, -1], [-16, -20], [-36, -64], [-23, -79], [-31, 30], [-28, 38], [-22, 38], [-37, 43], [-36, 51], [-19, 60], [-8, 13], [-21, 50], [-8, 14], [-8, 5], [-17, 31], [6, 34], [28, 39], [26, 28], [42, 28], [50, 16], [22, 36], [28, 66], [30, 46], [33, 26], [-16, 4], [-42, -22], [-30, -32], [-35, -54], [-32, -34], [-84, -40], [-30, -8], [-36, -4], [-78, 5], [-18, 14], [9, 38], [56, 68], [-9, 5], [-20, -24], [-27, -17], [-23, -9], [-34, 3], [-41, 43], [-19, 13], [-39, 15], [-16, 14], [-66, 104], [-13, 28], [-7, 27], [-21, 23], [-35, 18], [-8, -3], [13, -23], [0, -20], [-30, -12], [-31, 4], [-33, 21], [-3, -28], [35, -51], [1, -64], [-10, -6], [-24, -4], [-16, 8], [-53, 48], [-50, 33], [-36, 18], [-4, -13], [23, -57], [27, -57], [44, -47], [69, -56], [32, -32], [-25, -46], [-22, -14], [-13, -5], [-42, 0], [-77, 25], [-37, 28], [-52, 67], [-87, 69], [-19, -1], [-61, -28], [9, -4], [40, -2], [29, -9], [69, -55], [6, -23], [-18, -25], [1, -32], [20, -39], [20, -25], [41, -18], [20, -2], [8, -11], [-25, -87], [-2, -24], [7, -10], [9, 0], [52, 35], [22, 9], [19, 2], [22, -10], [26, -22], [14, -23], [5, -23], [7, -15], [52, -24], [-5, -12], [-53, -37], [-3, -5], [11, -3], [33, -22], [31, -34], [19, -41], [4, -21], [0, -19], [4, -11], [16, -2], [7, 7], [7, -1], [9, -10], [8, -32], [19, -92], [10, -25], [5, -1], [3, 92], [9, 15], [33, -16], [47, -36], [34, -32], [4, -15], [-25, -29], [5, -13], [19, -19], [17, 7], [12, 33], [22, 32], [25, 22], [48, -18], [39, -48], [6, -16], [26, -21], [22, 11], [44, -54], [-21, -25], [-45, -36], [-5, -12], [11, 2], [87, 1], [23, -15], [5, -28], [-38, -76], [-35, 6], [-47, 2], [-24, -4], [4, -10], [65, -35], [18, -29], [25, -30], [12, -25], [-1, -11], [-10, -17], [5, -6], [44, -11], [28, 10], [34, 4], [30, -3], [3, -11], [-5, -28], [-31, -25], [9, -7], [36, 8], [17, -12], [21, -62], [25, -48], [-20, -11], [-22, -5], [3, -61], [14, -64], [1, -60], [-5, -54], [-20, -12], [-22, 1], [-8, 14], [-53, 161], [-13, 29], [-16, 25], [-56, 70], [2, -11], [14, -32], [12, -48], [16, -96], [8, -61], [-4, -23], [-11, -6], [-3, -11], [5, -17], [43, -63], [21, -38], [15, -39], [13, -26], [13, -14], [-3, -11], [-19, -9], [-32, -4], [-16, 5], [-58, 36], [-8, -11], [32, -133], [-1, -32], [-16, -11], [-20, 13], [-24, 38], [-36, 42], [-49, 46], [-47, 37], [-11, -1], [-7, -11], [-7, -2], [-9, 7], [-16, 28], [-16, 18], [-68, 62], [-7, 0], [7, -18], [6, -41], [-7, -8], [-18, 3], [-34, 18], [-23, 40], [-28, 70], [-16, 26], [-1, -17], [8, -67], [-1, -22], [-17, -6], [-8, 6], [-7, 18], [-6, 29], [-17, 23], [-25, 15], [-14, 16], [-7, 29], [-5, 6], [-45, -6], [-23, 20], [-65, 81], [-59, 88], [-38, 46], [-14, 12], [20, -57], [22, -84], [6, -39], [-10, -1], [-22, 17], [-113, 108], [-69, 51], [-39, 9], [-63, 6], [-14, -28], [34, -62], [33, -47], [32, -32], [50, -61], [46, -79], [19, -25], [62, -34], [33, -9], [34, -2], [3, -12], [-16, -23], [-4, -14], [75, -35], [28, -20], [27, -32], [15, -8], [65, -82], [16, -14], [58, -26], [19, -17], [32, -53], [20, -27], [28, -64], [21, -29], [52, -32], [22, -10], [10, -12], [-7, -29], [-6, -12], [-30, -20], [5, -28], [17, -50], [-1, -31], [-18, -12], [-37, -14], [-19, 1], [-28, 12], [-35, 20], [-70, 50], [-105, 35], [-39, 18], [-13, 17], [-20, 10], [-260, 48], [-44, 12], [-27, 15], [-25, 22], [-100, 49], [-12, 11], [-67, 85], [-49, 100], [-17, 13], [-54, 13], [-45, -8], [-30, -11], [-46, 4], [-30, 16], [-63, 45], [-64, 23], [-56, 39], [-29, 14], [3, 10], [41, 58], [-12, 0], [-73, -45], [-26, 14], [-43, 35], [-32, 35], [-66, 97], [-38, 35], [5, 8], [43, 3], [34, -3], [23, 8], [44, 39], [19, 25], [2, 14], [-37, 4], [-8, 7], [-7, 16], [-17, 21], [-27, 25], [-31, 10], [-107, -9], [-19, 11], [0, 17], [21, 47], [12, 19], [3, 10], [-4, 3], [-14, -2], [-62, -42], [-14, 3], [-24, 45], [-15, 51], [-11, 17], [-14, 6], [-51, 50], [-72, 95], [-27, 30], [-30, 27], [-21, 11], [3, 14], [46, 79], [2, 12], [-40, -4], [-59, 16], [-28, -20], [-18, -1], [-21, 11], [-12, -4], [-11, -65], [-9, -16], [-12, -9], [-11, 2], [-9, 11], [0, 15], [-9, 79], [-21, 12], [-58, 3], [-13, 6], [-14, 15], [-12, 27], [-10, 40], [-12, 22], [-13, 3], [-11, -3], [-8, -10], [-18, -6], [-28, -3], [-1, -15], [27, -28], [25, -40], [25, -52], [-15, -35], [-55, -18], [-48, -5], [-41, 7], [-32, 12], [-44, 29], [-63, -9], [-15, -76], [-13, -4], [-60, 1], [-24, -6], [-80, -42], [-25, -6], [-18, 5], [-18, -11], [-27, -24], [-37, -2], [-47, 19], [-39, 8], [-33, -3], [-33, 12], [-34, 25], [-29, 11], [-36, -2], [-9, 4], [-54, 55], [-17, 22], [-35, 68], [-7, 27], [-1, 29], [3, 21], [13, 32], [13, 76], [12, 25], [17, 23], [32, 29], [120, 51], [24, 20], [-1, 14], [-27, 62], [0, 16], [9, 9], [19, 37], [9, 10], [21, 6], [44, -19], [37, -7], [50, -3], [83, -25], [115, -49], [66, -33], [50, -50], [36, -49], [5, -25], [-16, -38], [-9, -11], [1, -13], [9, -15], [29, -21], [7, 8], [-3, 26], [6, 22], [15, 17], [1, 23], [-11, 28], [-13, 24], [-17, 21], [-74, 70], [-7, 23], [25, 11], [108, -24], [42, 6], [16, 27], [17, 19], [18, 10], [37, 4], [51, -13], [25, -2], [23, 5], [29, 15], [42, 50], [28, 11], [41, 8], [31, 1], [56, -20], [35, 0], [-3, 34], [-23, 63], [-28, 66], [-23, 22], [-57, 41], [-68, 78], [-34, 49], [-9, 24], [4, 16], [12, 24], [123, 86], [97, 86], [42, 44], [21, 31], [21, 22], [22, 14], [47, 16], [13, 22], [3, 36], [8, 32], [44, 85], [33, 23], [51, 16], [33, 20], [41, 70], [-4, 17], [-19, 13], [-14, 20], [-62, 182], [-42, 89], [-49, 76], [-45, 94], [-73, 92], [-1, 24], [13, 28], [-6, 6], [-76, -40], [-18, -2], [-29, 17], [-20, 22], [-16, 38], [1, 20], [11, 19], [15, 47], [0, 24], [-5, 22], [-6, 16], [-9, 9], [-23, 6], [-38, 2], [-13, -8], [43, -71], [-7, -17], [-54, -7], [-24, 3], [-22, 8], [-20, 14], [-63, 74], [-13, 27], [4, 20], [-5, 11], [-13, -7], [-17, 0], [-24, 7], [-5, 8], [44, 40], [3, 12], [-21, 13], [-30, 3], [-8, 12], [10, 12], [41, 22], [15, 14], [-25, 11], [-13, 1], [-28, -24], [-42, -48], [-30, -18], [-41, 22], [-27, 8], [-18, -5], [-28, -38], [-61, -27], [-109, -65], [-46, -20], [-51, 4], [-9, 13], [0, 22], [4, 18], [6, 14], [2, 18], [-4, 73], [9, 21], [17, 12], [32, 12], [81, -15], [37, 3], [27, 17], [26, 24], [27, 33], [5, 31], [-28, 50], [-10, 11], [-72, 39], [-40, 14], [-35, 6], [-26, 11], [-16, 17], [-15, 27], [-1, 18], [2, 24], [15, 17], [64, 20], [0, 5], [-53, 14], [-25, -2], [-21, -16], [-27, -37], [-16, -11], [-48, 22], [-29, 3], [-19, 11], [-11, 10], [7, 10], [24, 11], [41, 32], [3, 18], [-29, 28], [-15, 7], [-60, 10], [-72, -10], [-28, 5], [-12, 32], [-7, 37], [-4, 44], [-13, 75], [-14, 39], [-19, 4], [-88, -16], [-20, 0], [-15, 6], [-57, 50], [-24, 18], [-13, 4], [-42, 53], [-16, 10], [-19, 26], [-22, 42], [-24, 13], [-26, -16], [-26, -24], [-26, -30], [-14, -26], [-2, -21], [16, -16], [91, -28], [24, -18], [19, -30], [15, -36], [10, -43], [-1, -32], [-11, -22], [-20, -19], [-57, -30], [-58, -17], [-59, -5], [-28, 4], [-152, 59], [-27, 0], [-35, 8], [-79, 24], [-43, 3], [-76, 20], [-128, 11], [-25, -9], [34, -27], [30, -14], [25, 0], [37, -24], [48, -47], [28, -29], [22, -34], [1, -12], [-23, -23], [-178, 122], [-109, -42], [-51, -16], [-43, -3], [-54, 17], [-121, 59], [-46, 20], [-16, 3], [-106, -25], [-91, -1], [-185, 24], [-67, 17], [-18, 17], [-22, 8], [-40, 0], [-105, 19], [-97, -43], [-116, 40], [-35, 23], [-11, 16], [-33, 66], [-5, 36], [10, 32], [9, 22], [10, 12], [-64, -37], [-22, -6], [-29, -1], [-87, 13], [-14, -7], [5, -12], [23, -19], [2, -12], [-48, -8], [-73, 9], [-33, -4], [-14, -5], [-33, -30], [-14, -7], [-17, 3], [-77, 67], [-62, 43], [-73, 16], [-33, 14], [-18, 16], [-100, 137], [-14, 29], [-32, 107], [-10, 23], [-13, 15], [25, 3], [95, -13], [91, 0], [50, -8], [57, -27], [76, -19], [53, -4], [87, 7], [98, 18], [11, 14], [-63, 24], [-57, 31], [-52, 41], [-31, 17], [-53, 11], [-146, 8], [-137, 27], [-93, 37], [-77, 41], [-31, 22], [-11, 18], [-12, 54], [-13, 90], [-12, 61], [-12, 31], [-1, 27], [26, 57], [74, 63], [2, 10], [-15, 3], [-31, 16], [-10, 23], [-4, 37], [0, 32], [3, 25], [13, 33], [32, 57], [46, 71], [49, 65], [9, 22], [4, 58], [7, 43], [6, 30], [11, 22], [31, 43], [38, 41], [60, 34], [5, 13], [1, 18], [3, 13], [6, 9], [149, 110], [68, 45], [57, 29], [69, 21], [195, 43], [101, 12], [127, -3], [233, -24], [28, -17], [7, -9], [10, -24], [-7, -16], [-64, -52], [-80, -44], [-53, -38], [-88, -86], [-24, -30], [-110, -173], [-26, -28], [-15, -23], [-11, -63], [4, -22], [17, -36], [59, -79], [16, -36], [0, -34], [-7, -81], [-1, -41], [3, -39], [12, -56], [22, -73], [51, -74], [79, -74], [59, -50], [59, -36], [69, -54], [15, -26], [-32, -29], [-74, -44], [-98, -19], [-52, -18], [-65, -39], [-82, -30], [-32, -19]], [[30697, 99663], [227, -10], [73, 4], [84, -26], [51, -3], [83, 5], [61, -6], [226, -6], [47, -10], [-1, -11], [-48, -26], [-66, -25], [-423, -82], [-31, -13], [83, -4], [121, 3], [94, 9], [111, 28], [37, 2], [70, 13], [137, 38], [109, 20], [49, -9], [42, -14], [28, -2], [15, 11], [23, 30], [14, 11], [36, 7], [22, -1], [35, -14], [40, -33], [36, -23], [20, 0], [83, 26], [41, 3], [96, -9], [39, -12], [7, -12], [-25, -13], [-16, -11], [-6, -10], [14, -11], [58, -23], [83, -51], [-1, -19], [-45, -38], [1, -9], [214, 40], [217, -18], [61, -12], [23, -15], [25, -24], [27, -34], [-19, -35], [-95, -55], [-98, -43], [-58, -38], [-88, -22], [-305, -92], [-149, -30], [-85, -30], [-39, -5], [-181, 6], [-48, -16], [-26, -28], [-58, -13], [-84, -9], [-172, -7], [-39, -31], [-10, -21], [-17, -16], [-15, -8], [-492, -111], [-10, -18], [50, -8], [63, 8], [717, 134], [137, 9], [128, -10], [-14, -31], [-181, -88], [-231, -80], [-115, -61], [-291, -104], [-237, -105], [-92, -52], [-122, -95], [-42, -23], [-51, -9], [-60, 4], [-54, 14], [-72, 35], [-65, 39], [-21, 7], [13, -19], [126, -132], [-14, -25], [-232, -27], [-103, -23], [-53, -6], [-38, 4], [-36, -2], [-36, -10], [-2, -10], [32, -11], [92, -9], [206, 30], [33, -2], [52, -15], [3, -13], [-55, -42], [-166, -50], [21, -2], [48, -18], [-1, -16], [-52, -38], [-25, -12], [-160, -35], [-70, -8], [-62, 4], [-281, 77], [-99, 11], [-94, 19], [-69, -3], [-74, -22], [33, -12], [136, -21], [114, -4], [47, -9], [18, -14], [49, -51], [8, -27], [-11, -25], [-15, -18], [-18, -10], [-30, -5], [-111, 3], [-41, -6], [-48, -15], [-61, -6], [-109, 3], [-128, -22], [-67, -4], [-76, 10], [-81, 24], [-86, 12], [-145, 11], [12, -14], [51, -6], [104, -37], [50, -51], [47, -8], [96, -42], [69, -6], [72, -14], [102, 18], [68, -3], [-14, -102], [-30, -10], [-164, 0], [-79, 15], [-34, 15], [-76, 17], [-68, -10], [-62, 2], [-42, -10], [-67, 1], [-174, -18], [-92, 0], [-68, 11], [-79, 4], [-90, -4], [7, -12], [38, -4], [55, -19], [52, -29], [43, -13], [51, 7], [52, 14], [190, 23], [84, 3], [75, -10], [49, -12], [35, -15], [44, -40], [109, -5], [84, -13], [133, -58], [37, -4], [15, -15], [-28, -38], [-4, -22], [-92, -44], [-144, -12], [-158, 4], [-113, -5], [-12, -6], [78, -11], [180, -51], [69, -28], [13, -16], [-100, -61], [-87, -122], [-29, -10], [-30, -3], [-77, 2], [-98, -30], [-74, -6], [-134, 11], [-154, -1], [-13, -19], [-7, -38], [1, -57], [9, -76], [-8, -56], [-26, -35], [-32, -26], [-58, -25], [-60, -16], [-44, -5], [-75, -1], [-213, -18], [-105, 1], [-81, 8], [-83, 25], [-140, 71], [-40, 16], [-38, 9], [1, -15], [42, -40], [35, -26], [28, -11], [-7, -12], [-62, -20], [-67, -8], [-81, 0], [-2, -7], [27, -21], [35, -19], [24, -6], [61, 6], [72, 24], [44, 8], [89, -6], [35, -9], [110, -54], [16, -2], [82, 27], [118, 1], [44, -21], [16, -43], [2, -34], [-12, -26], [27, -25], [67, -25], [52, -6], [37, 14], [56, 35], [24, 8], [23, -2], [34, -25], [46, -48], [5, -56], [-38, -64], [-46, -42], [-180, -69], [-55, -27], [-43, -28], [-63, -26], [-123, -34], [-64, -6], [-140, -37], [-31, -2], [-45, 6], [-9, 18], [11, 32], [15, 30], [19, 27], [0, 23], [-39, 35], [-28, 16], [-27, 9], [-54, -5], [-30, -10], [-33, -2], [-35, 6], [-29, 15], [-59, 63], [-22, 8], [-29, -2], [-25, 9], [-23, 20], [-38, 19], [10, -15], [38, -35], [26, -36], [15, -35], [-7, -27], [-321, -16], [-138, 8], [-28, 25], [-66, 103], [-14, -183], [-241, -30], [-56, 5], [-93, 20], [-121, 50], [-50, 33], [-20, 32], [-15, 18], [-9, 3], [-30, -39], [-33, -81], [-83, 21], [-104, 20], [-38, 80], [-2, -115], [-169, 15], [-81, -4], [-23, 100], [-4, 112], [-33, -71], [14, -59], [5, -73], [-72, 21], [-157, 10], [-56, 10], [7, 96], [13, 97], [202, 96], [60, 45], [44, 18], [69, 12], [89, 7], [60, -6], [70, 6], [82, 17], [59, 5], [11, 6], [-17, 9], [-63, 62], [-23, 14], [-23, 6], [-45, 3], [-45, 27], [-25, 24], [-28, 32], [-43, 62], [-44, 69], [22, 37], [72, 30], [72, 21], [73, 11], [60, 0], [73, -16], [103, -32], [59, -36], [74, -76], [49, -61], [39, -27], [177, -50], [59, -8], [70, 4], [143, 13], [70, 14], [31, 16], [16, 23], [21, 18], [63, 41], [96, 85], [54, 68], [12, 22], [11, 28], [9, 32], [-30, -17], [-167, -167], [-35, -30], [-97, -51], [-42, -8], [-66, 2], [-89, 23], [-104, -36], [-63, 9], [-56, 25], [0, 118], [-71, 95], [78, 48], [65, 29], [115, 77], [26, 1], [84, -12], [-46, 17], [-45, 26], [-100, -7], [35, 166], [-67, -124], [-68, -65], [-42, -33], [-46, -18], [-176, -17], [43, 61], [40, 90], [-42, -34], [-99, -50], [-74, -27], [-61, -14], [-118, 4], [-59, 25], [17, 62], [0, 77], [36, 35], [54, 46], [59, 61], [40, 63], [158, 29], [153, 11], [128, 34], [63, 6], [60, -16], [244, -26], [100, -20], [44, -15], [33, -5], [34, 22], [44, 21], [152, -2], [42, 3], [39, 10], [47, 20], [56, 30], [8, 15], [-38, -1], [-39, -8], [-58, -21], [-56, -12], [-57, 2], [-115, 19], [-200, 3], [-102, 8], [-47, 9], [-27, 12], [-23, 19], [-20, 25], [10, 17], [41, 10], [35, 2], [57, -14], [63, -23], [69, -3], [-24, 21], [-88, 42], [-60, 36], [-51, 44], [-40, 43], [-87, 68], [-70, 68], [-50, 30], [-52, 15], [-160, 18], [-32, 12], [-76, 59], [-20, 100], [-34, 61], [32, 77], [54, 35], [318, -27], [135, 4], [172, -10], [92, -19], [106, -47], [94, -53], [91, -36], [83, -48], [91, -73], [54, -34], [47, -21], [62, -19], [118, -23], [103, -7], [53, 3], [57, 16], [41, 20], [-45, 6], [-119, -3], [-82, 11], [-47, 23], [-50, 31], [-79, 59], [-60, 39], [-131, 63], [-97, 62], [-78, 60], [-7, 25], [56, 18], [69, 13], [432, 40], [258, 48], [105, 56], [12, 13], [346, 78], [244, 29], [94, 5], [85, 13], [3, 7], [-74, 11], [-75, 5], [-171, 0], [-152, 9], [-46, 18], [10, 28], [14, 25], [46, 40], [49, 31], [209, 88], [140, 38], [41, 25], [-302, -57], [-106, -41], [-106, -62], [-55, -19], [-39, 5], [-35, -6], [-31, -16], [-25, -30], [-21, -44], [-19, -30], [-17, -16], [-43, -23], [-104, -44], [-242, -63], [-82, -16], [-70, -3], [-226, -35], [-68, -2], [-76, 11], [33, 31], [119, 56], [32, 25], [-77, -5], [-78, -16], [-172, -12], [-69, -23], [-66, -42], [-53, -26], [-40, -11], [-55, -6], [-202, -3], [-45, 2], [-116, 32], [-103, -11], [-43, 2], [-78, 23], [-23, 14], [3, 20], [45, 37], [53, 35], [170, 78], [109, 37], [158, 31], [369, 35], [17, 26], [-374, -29], [-318, -36], [-52, -14], [-74, -35], [-235, -129], [-70, -33], [-106, -7], [-81, 11], [-63, 16], [-109, 38], [-83, 21], [-39, 13], [-23, 14], [-18, 17], [-15, 18], [27, 16], [210, 33], [284, -6], [128, 7], [125, 20], [186, 51], [201, 71], [40, 22], [-74, 5], [-54, -5], [-131, -26], [-208, -68], [-181, -24], [-448, -13], [-142, -19], [-63, 4], [-47, 19], [-52, 34], [9, 28], [107, 31], [84, 7], [15, 7], [-119, 30], [-11, 15], [69, 34], [148, 50], [76, 15], [137, 10], [142, -5], [5, 9], [-140, 19], [-105, 4], [-138, -14], [-369, -80], [-31, 2], [-53, 14], [15, 20], [197, 85], [6, 13], [-141, -2], [-42, 4], [-40, 10], [-58, -9], [-75, -27], [-52, -12], [-31, 4], [-78, 33], [10, 27], [62, 35], [57, 25], [77, 23], [126, 29], [90, 10], [148, 0], [70, 13], [62, 22], [78, 36], [86, 25], [140, 20], [118, -6], [65, -18], [51, -31], [56, -24], [5, 19], [46, 24], [58, 10], [69, -3], [61, -12], [79, -28], [63, -13], [30, 0], [38, 16], [99, 1], [-2, 6], [-32, 17], [-40, 12], [-352, 82], [-10, 18], [119, 17], [74, 21], [35, 5], [87, 43], [57, 22], [105, 25], [43, -7], [53, -22], [51, -14], [151, -13], [65, -14], [115, -81], [46, -26], [66, -27], [39, -10], [77, -6], [8, 15], [-92, 38], [-25, 22], [11, 18], [20, 10], [28, 1], [72, -17], [192, -56], [288, -67], [110, -15], [68, -24], [62, -29], [61, -20], [11, 2], [-57, 45], [-139, 55], [-371, 94], [-147, 50], [-72, 33], [-53, 34], [-1, 19], [50, 21], [68, 17], [85, 7], [11, 7], [-78, 26], [-45, 22], [1, 16], [93, 12], [57, -4], [108, -28], [91, -13], [15, 8], [-94, 75], [-9, 17], [14, 9], [33, 10], [98, -5], [161, -37], [290, -18], [79, 3], [-12, 8], [-115, 23], [-121, 30], [-53, 18], [-39, 24], [-47, 21], [-4, 9], [75, 16], [196, -3], [182, -24], [155, 9], [97, -6], [39, -8], [70, -26], [224, -96], [23, -15], [26, -23], [27, -32], [38, -8], [74, 21], [49, 21], [-21, 20], [-124, 46], [-28, 20], [-61, 34], [-139, 59], [-37, 28], [-23, 24], [383, 22], [370, -20], [60, -14], [40, -19], [38, -30], [60, -30], [119, -46], [171, -29], [-33, 20], [-127, 51], [-58, 35], [1, 23], [10, 18], [20, 13], [144, 47], [206, 15], [24, -3], [161, -73], [76, -30], [53, -12], [2, 5], [-74, 34], [-56, 18], [-6, 12], [94, 35], [59, 9], [251, 10], [28, -3], [24, -10], [59, -39], [22, -5]], [[23803, 93182], [38, -4], [24, 7], [76, -2], [18, -14], [-1, -15], [-9, -24], [6, -21], [51, -40], [47, -28], [42, -34], [63, -72], [13, -21], [10, -22], [16, -80], [2, -31], [-6, -88], [-5, -17], [-16, -20], [5, -8], [50, -23], [39, -46], [21, -15], [49, -24], [9, -9], [12, -16], [28, -66], [46, -59], [3, -13], [-10, -28], [7, -9], [18, -10], [16, 5], [14, 21], [15, 6], [17, -9], [12, -16], [17, -38], [25, -31], [-2, -10], [-12, -8], [-68, -8], [-37, 6], [-35, 15], [-25, 16], [-22, 24], [-9, -2], [-12, -20], [-25, -29], [-16, -27], [18, -12], [89, 1], [19, -8], [23, -19], [-26, -31], [-60, -53], [-129, -103], [-38, -26], [9, -8], [14, -2], [45, 5], [41, 14], [51, -6], [22, -12], [-8, -11], [14, -17], [83, -42], [52, 8], [53, 40], [41, 20], [51, -2], [14, -5], [-5, -10], [-38, -22], [-34, -25], [-3, -7], [42, 10], [94, -16], [45, -4], [34, 4], [31, -6], [29, -17], [9, -11], [-27, -6], [-25, 0], [-22, -11], [-18, -20], [-13, -26], [-8, -33], [-19, -13], [-31, 6], [-13, 9], [7, 13], [-9, 2], [-25, -10], [-20, 0], [-5, -9], [137, -104], [44, -91], [30, -38], [3, -10], [-20, -26], [-1, -19], [9, -56], [-4, -45], [-14, -78], [13, -25], [29, -22], [18, -27], [12, -10], [9, -22], [10, -14], [12, -6], [8, 8], [5, 20], [11, 19], [31, 34], [30, 54], [5, 17], [-5, 42], [4, 18], [28, 64], [9, 44], [8, 69], [15, 48], [32, 40], [56, 82], [20, 16], [22, 8], [40, -2], [28, -26], [39, -49], [49, -44], [90, -60], [25, -23], [51, -59], [21, -59], [15, -84], [13, -50], [10, -17], [5, -25], [-1, -34], [-4, -26], [-7, -19], [-11, -11], [-27, -4], [-34, 6], [-9, 8], [-18, 40], [-7, 2], [-31, -29], [-4, -16], [12, -54], [-2, -102], [3, -23], [33, -106], [55, -81], [138, -155], [8, -18], [15, -64], [7, -13], [9, -8], [11, -2], [15, 6], [51, 48], [44, 51], [31, 27], [18, 2], [18, 9], [21, 17], [13, 18], [7, 19], [9, 77], [8, 37], [21, 50], [8, 14], [107, 127], [9, 16], [45, 147], [17, 67], [2, 41], [-6, 36], [3, 30], [12, 24], [13, 16], [22, 17], [13, 24], [7, 2], [19, 0], [24, -16], [17, -3], [113, 19], [0, 9], [-66, 31], [1, 16], [5, 21], [21, 24], [26, 7], [6, 15], [0, 19], [9, 31], [-8, 11], [-62, 42], [-36, -2], [-9, 5], [-31, 35], [-11, 50], [-1, 20], [4, 33], [4, 9], [-2, 15], [-8, 20], [0, 19], [6, 16], [-4, 19], [-14, 22], [-6, 18], [15, 56], [1, 17], [-15, 24], [-10, 9], [8, 6], [25, 2], [31, -7], [36, -18], [43, 0], [52, 17], [52, 9], [91, -4], [21, -5], [90, -52], [70, -26], [32, 3], [156, -11], [68, 6], [35, -3], [68, -28], [-4, -24], [-30, -39], [-38, -8], [-34, -14], [32, -21], [92, -28], [22, -44], [6, -21], [-11, -18], [6, -10], [21, 0], [55, 16], [61, -10], [89, -35], [10, -7], [15, -27], [-2, -11], [-78, -67], [-41, -27], [-54, -27], [-1, -15], [75, -3], [58, -7], [27, -9], [14, -13], [19, -27], [3, -22], [-2, -29], [-6, -20], [-69, -59], [-31, -18], [-53, -21], [-23, -17], [-26, 3], [-28, 20], [-28, 5], [-52, -17], [-29, 1], [-13, -6], [-2, -13], [25, -37], [14, -14], [6, -11], [-11, -18], [3, -6], [8, -7], [47, -80], [10, -6], [10, 3], [20, 23], [13, 9], [5, -1], [0, -12], [-22, -70], [-2, -19], [0, -17], [11, -35], [23, -38], [30, -35], [45, -46], [60, -49], [22, -24], [33, -56], [7, -22], [-9, -59], [-24, -97], [-15, -55], [-7, -14], [-45, -39], [-26, -9], [-42, 1], [-14, -8], [-22, -31], [-30, -55], [-24, -35], [-17, -14], [-32, -17], [-50, -51], [-24, -20], [-86, -21], [-69, -68], [-28, -23], [-30, -12], [-32, -2], [-19, 11], [-10, 42], [-7, 14], [-24, 29], [-50, 83], [-22, 29], [-14, 6], [-30, -5], [-14, 3], [-33, 26], [-11, 17], [1, 7], [25, 9], [-11, 14], [-43, 37], [-18, 20], [-2, 6], [-43, 26], [-43, 7], [-53, -42], [-21, -29], [1, -9], [26, -11], [11, 6], [22, 26], [11, 8], [33, -4], [28, -18], [10, -16], [4, -11], [75, -83], [26, -17], [12, -20], [8, -33], [16, -37], [36, -61], [39, -75], [8, -30], [-20, -14], [-10, -1], [-30, 11], [-78, 35], [-9, -1], [-20, -18], [-17, -42], [-5, -4], [-42, 17], [-78, 36], [-52, 31], [-27, 26], [-32, 41], [-37, 56], [-45, 17], [-52, -20], [-76, -7], [-158, 6], [-21, -5], [-8, -7], [14, -30], [-4, -9], [-10, -6], [-3, -9], [18, -32], [27, -23], [79, -30], [52, -25], [32, -22], [10, -19], [1, -20], [-15, -41], [-8, -15], [-183, -203], [-70, -82], [-35, -50], [-32, -33], [-27, -17], [-45, -9], [-62, -2], [-81, 8], [-42, 26], [-76, 70], [-54, 41], [-23, 14], [-20, 39], [-18, 7], [-39, 7], [-39, 21], [-92, 70], [-48, 28], [-44, 15], [-39, 3], [-15, -4], [27, -36], [-12, -2], [-31, 8], [-32, 0], [-55, 26], [-55, -4], [-39, 5], [-48, 14], [-51, 7], [-82, 0], [-29, -3], [-5, -7], [40, -31], [68, -37], [-9, 32], [2, 8], [23, 11], [107, -19], [122, -42], [31, -4], [34, -15], [38, -25], [52, -51], [99, -116], [32, -29], [43, -27], [215, -40], [75, 0], [149, -11], [79, -21], [22, -15], [7, -51], [-7, -26], [-43, -79], [-27, -58], [-168, -245], [-22, -57], [-9, -34], [-30, -34], [-76, -55], [-76, -46], [-46, -10], [-41, 11], [-26, 14], [-39, 45], [-3, -4], [29, -72], [-7, -7], [-23, 9], [-53, 32], [-17, -6], [-10, -9], [-14, 0], [-18, 10], [-32, 26], [-9, 13], [-7, 40], [-6, 7], [-64, -23], [-10, -7], [26, -16], [9, -12], [25, -58], [2, -13], [-19, -8], [-61, 23], [-7, -2], [30, -59], [12, -27], [1, -15], [-39, -66], [-25, -27], [-35, -10], [-21, 6], [-24, 17], [-18, -2], [-11, -22], [-20, -15], [-29, -9], [-37, 4], [-45, 17], [-120, 62], [-37, 9], [-70, 9], [-9, 9], [1, 8], [10, 8], [-3, 7], [-15, 6], [-15, -6], [-16, -16], [-28, -5], [-40, 7], [-59, 24], [-116, 62], [-128, 53], [-74, 68], [28, -62], [-3, -20], [-14, -19], [-2, -18], [29, -44], [40, -15], [40, 1], [1, 7], [-16, 11], [-15, 16], [-7, 24], [7, 4], [36, -12], [23, -15], [177, -81], [53, -15], [40, -15], [11, -10], [-14, -20], [-71, -50], [-1, -8], [49, 4], [59, 45], [33, 20], [32, 13], [43, -22], [55, -56], [44, -32], [63, -18], [37, -19], [62, -53], [10, -27], [6, -111], [-2, -27], [-8, -27], [-14, -26], [-26, -15], [-38, -3], [-30, -11], [-65, -59], [-28, -9], [-117, 18], [-45, 16], [-21, -1], [-12, -13], [-12, -6], [-46, -5], [-8, -11], [3, -16], [9, -22], [11, -13], [18, -16], [26, -11], [53, -12], [6, -30], [-2, -10], [-18, -20], [-20, 2], [-35, 24], [-18, 1], [-15, -13], [-21, -4], [-27, 4], [-15, -10], [-3, -25], [-9, -19], [-31, -30], [-17, -22], [0, -18], [18, -12], [21, -28], [23, -45], [5, -19], [-15, 5], [-19, 18], [-24, 29], [-36, 27], [-80, 35], [-15, -1], [8, -9], [53, -36], [20, -24], [3, -17], [-45, -38], [-1, -13], [12, -11], [3, -9], [-16, -18], [-26, -16], [-51, -2], [-4, -9], [19, -19], [6, -12], [-16, -16], [-11, -2], [-58, 7], [15, -40], [9, -14], [18, -20], [32, -19], [1, -7], [-11, -16], [-19, -20], [-81, -59], [-56, -70], [-8, -22], [14, -45], [1, -12], [-15, -21], [-33, 6], [-7, -8], [8, -22], [2, -31], [-5, -42], [-24, -66], [-43, -88], [-33, -81], [-23, -73], [-16, -36], [-31, -2], [-23, -23], [16, -12], [9, -14], [7, -21], [-7, -67], [-19, -111], [-13, -89], [3, -274], [-3, -121], [-9, -67], [-14, -37], [-24, -11], [30, -10], [20, -17], [9, -26], [8, -42], [12, -19], [13, 3], [13, -4], [11, -12], [33, -59], [37, -17], [2, -33], [-15, -184], [0, -24], [17, 46], [18, 144], [23, 63], [19, 14], [77, 7], [81, -16], [31, -2], [27, 8], [28, -17], [6, -18], [8, -75], [8, -43], [48, -153], [23, -86], [29, -133], [10, -38], [59, -178], [11, -49], [5, -37], [-2, -26], [-11, -40], [-19, -54], [-18, -42], [-17, -28], [-18, -22], [-18, -14], [1, -3], [21, 6], [20, 15], [39, 37], [15, 8], [43, 5], [1, -13], [-20, -28], [4, -2], [30, 22], [64, 31], [252, 103], [59, 9], [85, -19], [69, -43], [75, -56], [79, -41], [124, -38], [37, -18], [73, -19], [34, -21], [40, -52], [65, -67], [49, -42], [54, -39], [55, -73], [88, -164], [22, -20], [54, -27], [102, -35], [151, -81], [66, -32], [43, -13], [43, -22], [43, -32], [32, -35], [23, -38], [19, -25], [35, -28], [18, -19], [2, -30], [-42, -116], [-1, -10], [42, 84], [24, 24], [19, 11], [39, -1], [59, -14], [53, 0], [44, 13], [39, 6], [31, -1], [23, 4], [14, 10], [17, 0], [68, -29], [27, -2], [99, -27], [63, 10], [11, -5], [22, -36], [19, -3], [31, 6], [31, -10], [51, -46], [23, -40], [23, -82], [2, -25], [-42, -190], [-13, -73], [-2, -65], [8, -36], [37, -62], [6, -17], [22, -91], [6, -39], [-3, -45], [-11, -75], [3, -56], [9, -85], [-3, -58], [-17, -31], [-11, -29], [-9, -54], [0, -21], [9, -40], [16, -23], [26, -25], [24, -38], [45, -92], [33, -51], [39, -75], [8, -38], [-11, -25], [-14, -17], [-32, -23], [-14, -17], [3, -4], [47, 12], [27, -1], [23, -19], [19, -36], [32, -30], [43, -25], [44, -43], [74, -100], [13, -23], [19, -52], [26, -82], [13, -54], [1, -25], [-14, -25], [-49, -46], [-50, -81], [16, 4], [32, 34], [56, 67], [30, 13], [29, -7], [45, -20], [39, -27], [35, -36], [51, -95], [55, -76], [30, -65], [-9, 41], [-20, 48], [-51, 76], [-22, 39], [-5, 19], [-2, 21], [4, 37], [10, 55], [13, 39], [16, 22], [10, 24], [6, 25], [8, 19], [44, 33], [12, -3], [9, -41], [10, -8], [21, -6], [17, -15], [14, -21], [10, -23], [6, -22], [13, -73], [9, -34], [2, 41], [11, 65], [8, 26], [27, 39], [-2, 17], [-11, 22], [-56, 97], [-1, 24], [15, 14], [11, 26], [5, 40], [12, 28], [35, 40], [30, 62], [16, 42], [12, 23], [13, 5], [-18, 17], [-4, 11], [-1, 51], [-8, 54], [-12, 25], [-34, 53], [-6, 16], [-6, 60], [4, 30], [9, 26], [-5, 24], [-32, 45], [-12, 39], [-14, 93], [-13, 118], [-14, 86], [-16, 56], [-3, 35], [9, 14], [11, 44], [10, 10], [16, -2], [1, 5], [-25, 23], [-12, 30], [1, 11], [21, 29], [-3, 12], [-16, 16], [-49, 28], [18, 10], [11, 23], [-2, 7], [-20, 10], [-22, 17], [-17, 27], [-20, 42], [-13, 34], [-12, 56], [-22, 63], [-9, 16], [-11, 10], [-12, 5], [0, 10], [13, 14], [210, 106], [18, 16], [103, 59], [48, 33], [48, 48], [66, 49], [32, 31], [21, 31], [105, 122], [44, 62], [26, 53], [37, 64], [49, 75], [31, 63], [13, 54], [16, 91], [4, 82], [3, 119], [-1, 106], [-14, 167], [-7, 53], [-15, 62], [-37, 125], [-6, 35], [-23, 57], [-74, 151], [-92, 101], [-18, 26], [-36, 30], [-56, 34], [-36, 28], [-94, 104], [-31, 13], [-11, 27], [-3, 19], [4, 50], [5, 34], [7, 26], [7, 16], [52, 77], [29, 61], [20, 34], [22, 26], [41, 34], [23, 44], [-6, 17], [-18, 19], [-4, 19], [31, 47], [4, 13], [-4, 45], [6, 10], [38, 3], [54, -64], [13, 5], [-17, 18], [-21, 43], [3, 18], [40, 47], [1, 21], [-12, 29], [-1, 24], [23, 55], [-6, 12], [-65, 11], [-11, 16], [4, 7], [31, 19], [2, 7], [-54, 125], [-9, 37], [23, 46], [26, 20], [-3, 12], [-35, 2], [-21, 7], [-21, 35], [8, 23], [8, 10], [20, 54], [20, 11], [-4, 9], [-74, -23], [-35, 19], [-35, -5], [-16, 6], [6, 19], [62, 86], [29, 47], [18, 43], [10, 28], [1, 14], [-6, 93], [3, 26], [25, 24], [37, 44], [-51, 41], [-32, 39], [-21, 20], [-16, 19], [-21, 40], [-15, 53], [-17, 106], [-3, 58], [4, 42], [7, 21], [11, 22], [47, 41], [82, 60], [64, 24], [47, -13], [90, -15], [73, -34], [222, -86], [40, -38], [-37, -33], [5, -8], [84, 62], [22, 12], [19, 3], [63, -24], [25, -4], [32, -20], [76, -66], [6, 6], [-21, 34], [12, 15], [60, 35], [62, 29], [44, 28], [47, 37], [32, 20], [16, 2], [21, -11], [56, -49], [36, -25], [29, -26], [40, -47], [16, -10], [31, -32], [41, 3], [13, -3], [4, -7], [7, -21], [4, -14], [0, -14], [-9, -42], [-30, -66], [13, -1], [18, 14], [24, 25], [19, 9], [40, -20], [38, -32], [13, -17], [15, -28], [12, -15], [12, -27], [-1, -9], [-11, -14], [-46, -22], [9, -9], [53, 14], [17, 14], [11, 24], [16, 6], [63, -41], [9, -14], [-4, -11], [-10, -13], [-27, -14], [-24, -35], [-4, -15], [17, -11], [41, -4], [0, -8], [-24, -16], [-3, -20], [53, -71], [36, -32], [21, -5], [48, -2], [39, -12], [86, -40], [51, -8], [44, 13], [29, 2], [25, -16], [8, -11], [4, -23], [0, -34], [14, -24], [28, -14], [23, 2], [31, 27], [25, 5], [9, 20], [7, 37], [8, 20], [18, 6], [15, -11], [9, -17], [16, -51], [4, -23], [-1, -20], [-8, -19], [-16, -20], [-23, -21], [-19, -31], [-22, -70], [-9, -46], [-2, -28], [1, -29], [4, -33], [9, -27], [21, -37], [1, -13], [2, -30], [-2, -14], [-12, -27], [-34, -26], [-46, -7], [-152, -1], [-41, 6], [10, -24], [43, -8], [38, 0], [145, -15], [20, -15], [17, -28], [12, -28], [12, -57], [2, -27], [-6, -31], [-15, -33], [-10, -44], [-5, -55], [8, -29], [78, -3], [15, -20], [-1, -15], [-28, -56], [-3, -15], [13, -38], [-2, -11], [-7, -11], [-8, -28], [-7, -46], [-9, -30], [-21, -22], [-11, -5], [-8, 6], [-21, 62], [-9, 9], [-8, -6], [-4, -9], [0, -14], [-4, -14], [-7, -14], [-31, -23], [-50, -16], [1, -16], [34, -9], [43, -28], [25, -4], [38, 22], [75, 71], [31, 19], [27, 7], [30, 1], [34, -5], [68, 9], [17, -7], [20, -15], [25, -25], [17, -23], [9, -23], [15, -85], [21, -23], [4, -16], [2, -25], [-1, -49], [-23, -100], [-11, -36], [-31, -50], [-36, -23], [-64, -21], [-33, -18], [-25, -25], [-1, -13], [72, 42], [79, 20], [23, 24], [17, 22], [17, 50], [32, 130], [18, 40], [25, 7], [11, -14], [26, -76], [0, -19], [-7, -16], [-42, -74], [15, 7], [43, 70], [9, 21], [5, 32], [14, 23], [5, -11], [13, -82], [0, -60], [3, -19], [-5, -56], [5, -10], [13, 49], [4, 37], [6, 26], [7, 16], [52, 50], [61, 40], [40, 36], [33, 17], [50, 17], [31, 33], [14, 50], [12, 35], [10, 20], [33, 34], [17, 2], [17, -12], [20, -26], [21, -40], [13, -30], [4, -23], [4, -78], [4, 0], [19, 60], [3, 21], [-2, 23], [-6, 22], [-20, 49], [-7, 31], [1, 18], [22, 11], [31, 4], [5, 8], [-23, 21], [-1, 11], [22, 36], [13, 1], [26, -5], [-5, 18], [0, 12], [7, 5], [42, -11], [5, 14], [36, 1], [4, 12], [-32, 18], [-30, 12], [-10, 9], [-7, 15], [-9, 35], [2, 9], [9, 0], [14, -9], [9, 18], [9, 43], [9, 18], [28, -21], [1, 9], [-23, 68], [4, 13], [35, 5], [21, -9], [55, -49], [11, 5], [-9, 14], [-28, 29], [-26, 19], [-23, 9], [-17, 16], [-19, 45], [-3, 18], [2, 24], [13, 50], [7, 11], [14, 8], [19, 5], [21, -5], [44, -33], [7, 11], [-23, 18], [-13, 16], [-6, 21], [2, 24], [19, 49], [9, 40], [39, 109], [12, 20], [12, 12], [8, 13], [31, 3], [57, -39], [18, -23], [4, -32], [-30, -45], [-51, -33], [-16, -14], [10, -9], [49, 27], [42, 12], [34, 0], [28, -53], [4, -73], [-16, -60], [21, 30], [26, 17], [22, -40], [2, -32], [12, -31], [24, -40], [25, -36], [-28, -37], [-33, -23], [7, -16], [46, -18], [6, -18], [-5, -24], [7, 1], [32, 36], [27, -5], [34, -79], [-25, -46], [-39, -21], [-30, -9], [-43, 2], [-17, -7], [8, -15], [41, -1], [63, 12], [47, 19], [20, 1], [22, -8], [7, -6], [-23, -13], [-1, -5], [8, -13], [18, -44], [-2, -10], [-17, -25], [27, -5], [38, 12], [11, -14], [23, -52], [15, -53], [-64, -73], [-32, -15], [-48, -39], [-13, -31], [-28, -39], [18, 0], [49, 64], [24, 15], [18, -4], [7, -11], [-3, -18], [16, 3], [66, 37], [28, 7], [36, 3], [3, -13], [-22, -89], [-38, -69], [-70, -42], [-24, -25], [-31, -40], [12, -7], [66, 52], [45, 21], [64, 17], [28, -3], [51, -104], [28, -10], [24, 5], [44, -30], [16, -29], [-4, -21], [-15, -13], [-7, -19], [18, -58], [-11, -33], [-32, -29], [-23, -14], [-24, -5], [-24, -25], [-10, -4], [-33, 6], [11, -15], [16, -8], [26, -4], [30, 8], [30, -1], [46, -19], [20, -23], [0, -6], [-10, -13], [-15, -42], [-10, -15], [9, -12], [23, -18], [17, -6], [23, 6], [25, -8], [82, -99], [-4, -51], [-12, -40], [5, -44], [0, -55], [-44, -15], [-148, 25], [-84, 39], [-5, 12], [24, 26], [-21, 2], [-24, -10], [-11, -10], [29, -41], [77, -36], [35, -44], [38, -4], [11, -8], [21, -25], [-6, -9], [-39, -3], [-30, -30], [19, -17], [69, -16], [49, -4], [25, -17], [-20, -19], [-58, -22], [-2, -33], [43, -14], [38, 8], [16, -3], [11, -80], [7, -17], [-41, -14], [-1, -16], [28, -13], [45, -10], [15, -15], [3, -24], [9, -12], [26, -3], [29, 30], [17, 25], [25, -9], [1, -31], [30, -36], [10, -6], [9, -51], [24, 45], [17, -9], [20, -2], [-7, -44], [-11, -34], [15, -22], [12, -32], [33, -43], [-9, -21], [-38, -45], [-20, -72], [-5, -24], [-20, -41], [-26, -40], [16, 4], [60, 73], [36, 25], [78, 13], [19, 20], [29, 9], [18, -23], [1, -42], [24, -14], [24, 14], [22, -12], [-13, -26], [-71, -108], [-21, -44], [-6, -31], [24, 43], [90, 97], [9, 14], [20, 42], [18, 27], [48, -10], [25, -19], [11, -55], [19, -59], [30, -65], [78, -32], [28, -6], [49, 23], [7, 30], [38, 10], [27, -4], [9, -59], [29, -31], [28, -26], [27, -14], [40, -6], [22, -28], [0, -12], [-22, -30], [-22, -45], [-38, -31], [-53, -1], [-72, -20], [-3, -17], [-16, -19], [-39, -20], [-21, -14], [-35, -72], [-20, -31], [-24, -6], [-34, 3], [-22, -6], [-16, -14], [-10, -19], [-7, -7], [-45, -20], [-82, -55], [-44, -2], [-26, 7], [-21, -5], [-14, -15], [-39, -27], [-12, -16], [-7, -19], [-5, -38], [-5, -14], [-7, -8], [-33, 8], [-37, 25], [7, -27], [58, -44], [17, -25], [-16, -21], [-37, -34], [-4, -18], [15, -10], [-6, -15], [-20, -16], [2, -7], [2, -6], [51, 23], [45, 50], [29, 50], [14, 14], [58, 19], [34, 22], [49, 39], [54, 58], [58, 76], [74, 59], [91, 42], [66, 22], [42, 1], [2, 7], [-37, 14], [-32, 2], [-39, -10], [-12, 24], [2, 10], [12, 17], [33, 15], [161, -21], [55, -17], [60, -137], [14, -44], [4, -32], [-6, -20], [-24, -24], [-69, -48], [-9, -12], [-1, -7], [30, -9], [9, -14], [15, -52], [31, 34], [58, 83], [48, 38], [40, 11], [47, 5], [17, -1], [6, -27], [25, -54], [23, -14], [45, -7], [40, -67], [15, -46], [14, -27], [-1, -19], [2, -15], [11, -23], [5, -19], [-3, -45], [-23, -77], [17, -71], [-7, -31], [-4, -51], [14, -33], [5, -20], [-13, -11], [-88, -28], [-35, -1], [-9, -17], [27, -5], [48, 1], [59, -17], [27, -19], [11, -27], [-3, -21], [-17, -16], [-33, 3], [-32, 15], [2, -14], [47, -35], [14, -17], [26, -22], [5, -30], [-6, -30], [-90, -120], [-73, -76], [-74, -67], [-119, -129], [-12, -6], [-21, -3], [-57, 21], [-45, -5], [-85, -25], [-24, -15], [-47, -45], [-18, -6], [-51, -9], [-47, 6], [-19, -7], [-23, -21], [-6, -12], [-7, -38], [-115, -168], [-31, -57], [-59, -60], [-65, -106], [-57, -43], [-19, -58], [-54, -36], [-100, -9], [-47, -10], [-55, 16], [-42, -25], [-62, -8], [-30, 6], [-121, -57], [-31, 54], [-23, 21], [-68, 3], [-55, 22], [-50, 4], [-48, 10], [-32, 0], [-33, -6], [-52, 2], [-29, -30], [-96, 9], [-41, 27], [-34, 6], [-44, -6], [-43, -20], [-94, 22], [-100, -19], [-87, 13], [-24, 13], [-138, -35], [-53, 20], [-48, -54], [-32, 11], [-35, -8], [-12, 11], [-23, -8], [-15, -29], [-20, -3], [-33, -52], [-56, -41], [-82, -226], [-7, -87], [-31, -59], [-27, -8], [-22, -1], [-141, -44], [-63, -34], [18, -27], [-21, -21], [-33, -8], [-36, -25], [-24, -28], [-11, -39], [-72, -64], [-84, -147], [-40, -108], [-49, -78], [-34, -30], [-25, -5], [-25, 10], [-41, 36], [-30, 4], [-76, 51], [-177, 52], [27, -19], [23, -32], [47, -8], [47, 0], [99, -63], [48, -22], [30, -19], [25, -43], [-18, -84], [-19, -69], [-24, -53], [-85, -137], [-41, -46], [-72, -163], [-74, -77], [-40, -47], [-42, -74], [-99, -56], [-37, -15], [-34, 8], [-41, -46], [-49, -28], [-15, -42], [-117, -114], [-45, -15], [-39, -30], [-11, -51], [-34, -32], [-10, -23], [-29, -72], [-53, -94], [-66, -15], [-24, -32], [-27, -53], [-39, -36], [-77, 17], [18, -22], [69, -34], [7, -51], [-34, -12], [-72, -68], [-98, -117], [40, 22], [82, 85], [61, 30], [80, 89], [57, 17], [11, 20], [9, 73], [6, 26], [26, 73], [33, 61], [26, 84], [47, 54], [71, 45], [66, 98], [36, 30], [35, 22], [15, 40], [21, 23], [58, 46], [64, 13], [64, 38], [50, 21], [30, 36], [44, 19], [132, 104], [36, 49], [48, 99], [41, 51], [14, 54], [60, 87], [62, 116], [30, 83], [46, 45], [89, 132], [47, 52], [20, 6], [53, 47], [34, 48], [54, 49], [97, 60], [91, 72], [123, 63], [144, 93], [117, 50], [82, 7], [100, 24], [35, -3], [156, -40], [74, -50], [85, -106], [13, -27], [2, -39], [-45, 19], [-40, 1], [28, -22], [47, -65], [-3, -81], [-26, -73], [-79, -36], [-20, -29], [-16, -47], [-16, -18], [-39, -22], [-21, -30], [-62, -49], [-28, -6], [-32, 11], [-78, 47], [-47, 44], [-24, -24], [-20, -25], [-46, 8], [-21, -11], [-34, 12], [-71, -56], [20, -6], [56, 32], [19, -4], [42, -41], [100, -45], [26, -29], [25, -95], [16, -15], [35, 10], [39, 47], [32, 25], [63, 20], [-13, -31], [48, 3], [48, -42], [-18, -30], [-24, -59], [-16, -116], [-49, -78], [-64, -76], [16, -19], [19, -11], [41, 22], [28, -1], [31, -15], [-10, -59], [-11, -40], [7, -38], [18, -71], [25, -16], [10, -92], [14, -50], [-2, -40], [25, -25], [4, -41], [92, -12], [19, -16], [63, -15], [12, -12], [12, -22], [-63, -49], [51, -36], [47, -59], [38, 12], [16, -2], [42, -36], [12, -19], [6, -16], [21, 4], [31, 14], [54, -4], [59, -20], [-5, -32], [-9, -21], [46, 7], [28, -23], [10, 11], [7, 14], [57, 38], [73, 79], [9, -9], [3, -30], [10, -49], [28, -34], [33, -8], [45, 26], [18, -22], [22, -43], [20, -57], [-1, -20], [-26, -17], [-24, -26], [99, -10], [10, -11], [10, -22], [-10, -22], [-9, -11], [-18, 13], [-33, -12], [-28, -29], [-31, -16], [-20, -2], [-22, -14], [-20, -20], [-20, -6], [-65, -52], [-66, -33], [-69, -54], [-71, -34], [-73, -40], [-16, -4], [-19, 2], [-41, -40], [-21, 6], [-21, -7], [-25, 9], [-16, 16], [13, -42], [3, -39], [-6, -16], [-12, -20], [-42, 3], [-16, 14], [-20, 21], [-9, 33], [-21, 24], [-13, -33], [1, -25], [-16, -33], [-18, 57], [-34, -21], [-14, -61], [7, -17], [10, -46], [-16, -25], [-12, 7], [-25, -68], [-31, -25], [-31, -69], [-37, -53], [-11, -36], [-62, -81], [-24, 2], [-17, -2], [-26, -34], [-5, -68], [-11, 9], [-12, -2], [-6, -22], [-9, -3], [-23, 20], [-27, -11], [-21, 15], [-27, 100], [-14, 35], [-26, 12], [-6, -22], [-10, -20], [-25, 41], [-18, 153], [0, 37], [26, 129], [64, 116], [-21, 4], [-56, -81], [6, 20], [9, 20], [19, 33], [29, 31], [39, 17], [27, 3], [18, 17], [27, 30], [5, 16], [-24, -18], [-39, -18], [10, 23], [10, 13], [209, 208], [42, 34], [84, 44], [12, 28], [-12, 19], [33, -17], [-3, -23], [-5, -18], [-2, -29], [3, -28], [34, -14], [27, -52], [-13, 71], [25, 40], [96, 54], [80, 6], [25, 25], [-68, 17], [-81, -9], [-50, 19], [-70, -12], [-73, 11], [-22, -15], [-19, -34], [-23, 15], [-12, 3], [-11, 11], [24, 58], [74, 87], [46, 75], [12, 15], [10, 31], [-24, -5], [-22, -12], [-15, 34], [-27, 47], [-2, -20], [13, -57], [-51, -101], [-34, -7], [-44, -47], [-62, -41], [-73, -78], [-95, -66], [-19, -1], [-43, 55], [12, 24], [11, 34], [-11, -10], [-7, -14], [-25, -24], [21, -45], [-11, -17], [-30, -22], [-27, -32], [-25, -22], [-20, 28], [-54, -35], [-46, -9], [-10, 17], [-3, 28], [-16, 7], [-30, -8], [-11, 15], [-2, -18], [8, -29], [6, -57], [-9, -26], [2, -34], [26, -10], [6, -10], [1, -13], [-57, -88], [-48, 13], [-26, -24], [-27, -6], [-12, -40], [-15, -8], [-20, 3], [-18, 11], [-13, -6], [-19, -70], [-16, 6], [-6, -26], [-8, -11], [-12, -9], [-10, 31], [-7, 30], [-9, 6], [-13, 8], [-13, 0], [-9, -5], [-11, -19], [-16, -16], [-12, 13], [-9, 23], [-8, -36], [-12, -38], [2, -44], [-5, -26], [-11, 7], [-11, 23], [-31, 18], [-25, -1], [5, 24], [24, 35], [-8, 7], [-11, -5], [-5, 5], [8, 32], [1, 35], [-10, -12], [-14, -37], [-31, -30], [1, -49], [-30, -102], [-1, -43], [-19, -34], [-25, -30], [-33, 9], [-25, -26], [-13, -29], [-11, -5], [-5, 38], [-5, 11], [-9, -55], [-9, -4], [-4, 40], [-4, 26], [-13, -23], [-9, -59], [-9, 5], [-2, 22], [-7, 7], [-2, -25], [3, -36], [-5, -19], [-8, 10], [-9, 17], [-15, -13], [-14, -5], [0, 17], [3, 22], [-27, -12], [-32, -39], [-26, -55], [9, -9], [10, -17], [-44, -84], [-44, -76], [-34, -123], [-14, -15], [-11, -22], [-13, -75], [-14, -66], [8, -30], [5, -30], [13, -30], [11, -3], [11, 5], [9, -1], [5, -13], [-2, -15], [-13, -4], [-26, -26], [-22, -11], [-11, -32], [-16, -37], [-32, -58], [13, -18], [50, -20], [22, -21], [34, -109], [-8, -10], [-3, -20], [30, -28], [9, -78], [25, -27], [36, -16], [45, 24], [37, 32], [-1, 27], [-24, 61], [-5, 29], [-18, 19], [-6, -16], [-11, 21], [-2, 12], [11, 5], [12, -2], [14, -11], [36, -67], [10, -89], [3, -56], [-4, -19], [-11, 4], [-20, -4], [-96, -29], [-21, -25], [-49, -28], [-3, 14], [3, 28], [-3, 59], [-10, 3], [-75, -96], [-30, -6], [-24, -28], [-6, 16], [-4, 71], [15, 61], [-8, -1], [-26, -36], [-11, 22], [-5, 24], [-8, 14], [-9, 5], [7, -53], [-17, -40], [-5, -104], [-22, -43], [-68, -27], [-45, 6], [-40, -9], [-53, -20], [-29, 12], [-30, -21], [-103, -6], [-21, 11], [-28, -39], [-44, -24], [-111, -88], [-25, -33], [-29, -50], [-21, -27], [-16, -9], [-10, -22], [-11, -15], [10, 50], [12, 43], [10, 82], [-3, 66], [-12, 28], [-12, 18], [14, -66], [2, -80], [-5, -47], [-27, -91], [-12, -21], [-13, -19], [-10, -8], [-10, -15], [-11, -23], [-10, -45], [6, -42], [53, -15], [15, 13], [7, -30], [4, -42], [-4, -45], [-9, -45], [-7, -57], [-5, -86], [-9, -78], [-1, 24], [5, 94], [-9, -10], [-6, -22], [-16, -121], [-22, -65], [-21, -45], [-21, 7], [5, -36], [-6, -18], [-5, -39], [-13, -26], [-12, 3], [-17, -18], [-6, -13], [-1, -26], [-11, -23], [-42, -119], [-35, -35], [-9, 5], [10, 56], [6, 57], [-22, 24], [-21, 13], [-23, -1], [-27, 44], [-34, 32], [-47, 86], [1, 24], [-1, 41], [14, 63], [14, 45], [19, 23], [56, 23], [14, 36], [8, 30], [-28, -52], [-41, -17], [-22, -19], [-18, -29], [-10, -37], [-24, -44], [2, -29], [4, -21], [-2, -44], [15, -43], [30, -70], [5, -109], [23, -72], [35, -85], [27, -24], [1, -32], [-12, -52], [-17, -24], [22, 5], [10, -12], [10, -43], [0, -44], [-4, -25], [-6, -10], [0, 25], [-5, 9], [-7, -11], [-5, -13], [-2, -49], [-5, -25], [-18, -7], [-19, -66], [-17, -37], [-67, -249], [2, -42], [-12, -14], [-19, -11], [-19, -25], [-12, -27], [-12, -74], [-22, -84], [-14, 35], [-4, 30], [7, 77], [24, 128], [26, 79], [21, 37], [16, 76], [-21, 12], [-32, -1], [6, 35], [9, 31], [-16, 31], [-10, 4], [-10, 12], [12, 26], [5, 27], [-3, 34], [5, 25], [-9, -4], [-13, -27], [-8, -10], [-5, 23], [-6, -5], [-4, -16], [-9, -9], [-18, 22], [-26, 25], [-15, 43], [-8, 34], [8, 61], [18, 10], [24, -9], [31, 0], [-4, 13], [-11, -2], [-33, 49], [-11, 30], [-18, 8], [-8, -29], [-9, -7], [11, 62], [15, 3], [22, 17], [-6, 36], [-14, 16], [-25, -20], [0, 26], [5, 32], [19, 0], [16, -10], [14, 52], [1, 24], [-24, -34], [-5, 73], [23, 72], [22, 31], [27, -1], [28, 5], [-17, 13], [-18, 7], [13, 28], [12, 5], [11, 24], [-27, -3], [3, 46], [-13, -9], [-16, -5], [-6, -19], [1, -33], [-4, -21], [-13, -18], [-20, -13], [-2, 23], [-7, 11], [-3, -50], [-5, -17], [-15, 47], [-5, -10], [1, -13], [-4, -23], [-13, -12], [1, -29], [-5, -16], [-42, 25], [-1, -8], [24, -56], [17, -18], [2, -30], [-15, -25], [-20, 21], [-4, -1], [11, -37], [7, -33], [-7, -27], [1, -33], [-1, -30], [-5, -26], [10, -121], [12, -33], [12, -32], [6, -29], [-12, -5], [-20, 25], [-17, 18], [-21, 59], [-4, 24], [-5, 19], [3, -43], [7, -48], [65, -107], [12, -42], [9, -32], [-2, -31], [-17, 22], [-15, 28], [-38, 32], [-49, 19], [-28, 74], [1, -31], [-7, -26], [-16, 32], [-11, 27], [-4, 29], [-20, -2], [-22, -25], [-22, 6], [-2, 50], [5, 27], [24, 62], [23, 33], [10, 41], [-4, 64], [-4, -65], [-13, -33], [-20, -24], [-27, -44], [-6, -41], [-8, -77], [11, -25], [11, -7], [34, 17], [18, -8], [39, -91], [72, -37], [27, -23], [22, -48], [32, -27], [25, -40], [1, -27], [-9, -30], [-3, -42], [-11, -27], [-26, -3], [-15, 7], [-84, 147], [-10, 14], [-31, 77], [-36, 41], [-11, -1], [52, -76], [21, -53], [37, -75], [26, -32], [20, -50], [18, -23], [50, -33], [-18, -24], [28, -20], [4, -37], [-3, -42], [-38, 16], [-1, -31], [3, -18], [-16, -15], [-24, 20], [-61, 113], [1, -15], [5, -18], [35, -72], [31, -44], [27, -20], [21, -36], [7, -22], [5, -34], [-15, -22], [-18, -13], [-17, 23], [-12, 24], [-27, 40], [-8, 46], [-20, -3], [-84, 58], [-68, 7], [7, -12], [8, -8], [54, -14], [22, -26], [44, -24], [26, -6], [11, -73], [35, -49], [5, -37], [25, -4], [43, 36], [28, -13], [40, -10], [9, -30], [7, -55], [14, -63], [37, -246], [55, -202], [7, -34], [-13, 30], [-41, 134], [-23, 96], [-23, 170], [-7, 38], [-8, 16], [-5, -13], [-2, -21], [4, -17], [-9, -56], [4, -26], [14, -26], [17, -67], [13, -89], [-18, 36], [-19, 19], [-29, 15], [-25, 26], [1, -37], [-2, -40], [-20, 12], [-14, 13], [12, -42], [-26, 13], [-17, -3], [-11, -38], [-15, -23], [-23, -7], [-33, 34], [-11, 42], [-4, 47], [-2, -55], [6, -58], [-2, -43], [32, -9], [30, 8], [40, -2], [26, 8], [16, 14], [38, -12], [3, -53], [-4, -52], [-3, -56], [11, 0], [12, 18], [6, 100], [35, 37], [12, -3], [11, -32], [4, -32], [4, -45], [-9, -68], [-53, -80], [-38, -74], [-20, -15], [-28, 8], [-32, 19], [-15, 4], [-12, -6], [-8, 22], [-4, 42], [-13, 14], [-9, -2], [-7, -44], [-29, -13], [-41, 19], [-42, 37], [18, -40], [105, -74], [12, -14], [11, -20], [-15, -32], [-11, -36], [-2, -28], [-4, -18], [-42, -48], [-23, 9], [-58, 86], [27, -75], [21, -31], [43, -17], [80, 28], [26, -31], [-22, -54], [-21, -37], [-28, -5], [-25, -10], [-7, -26], [-18, -2], [-27, -1], [-43, -2], [-23, 6], [-33, -54], [-12, -7], [-18, 10], [-7, 43], [-8, 21], [0, -80], [3, -22], [6, -16], [-38, -43], [-37, -54], [-13, -15], [-15, -27], [-30, -78], [-8, -57], [-11, -64], [-1, 29], [2, 48], [-8, 55], [-5, -101], [-12, -47], [-109, 3], [-47, -25], [-74, -86], [-22, -38], [-60, -145], [-16, -94], [-12, 40], [3, 29], [0, 24], [-15, -51], [15, -76], [-13, -28], [-40, -54], [-22, -8], [-25, -16], [-8, -52], [-33, -49], [-19, -22], [-36, 13], [11, -46], [-13, -36], [-23, -27], [-28, -18], [-16, 2], [-13, -9], [-11, -23], [-26, -21], [-28, 12], [-30, 7], [-18, -12], [29, -21], [16, -31], [-3, -41], [-8, -15], [-18, -22], [-8, 3], [-5, 20], [-6, 40], [-9, -9], [-1, -18], [-8, -7], [-25, 64], [1, -49], [9, -37], [9, -19], [8, -12], [3, -17], [-18, -42], [-9, -10], [-16, -7], [-10, -26], [3, -22], [-14, -49], [-34, -30], [-10, 1], [-9, -9], [5, -22], [9, -16], [-1, -14], [-9, -20], [-17, -6], [-10, -23], [3, -21], [6, -12], [-1, -21], [-21, -20], [-4, -21], [10, -6], [7, 6], [6, -4], [-12, -34], [-11, -21], [-10, -37], [-24, -11], [1, -12], [13, -11], [12, -28], [-22, -53], [-13, 4], [-8, 12], [-5, -42], [2, -22], [-5, -46], [-8, -55], [-6, -22], [1, -42], [4, -41], [13, -52], [20, -214], [13, -74], [24, -200], [41, -194], [57, -235], [93, -284], [11, -40], [-12, -35], [-4, -35], [-1, -54], [3, -52], [11, -64], [22, -98], [-12, 20], [-31, 140], [-4, 82], [5, 117], [-7, -3], [-6, -38], [-3, -44], [-8, -18], [-11, 68], [1, 31], [11, 36], [-3, 13], [-18, 18], [-4, 29], [2, 29], [-10, 15], [-8, -1], [5, -70], [9, -43], [11, -104], [17, -63], [10, -52], [118, -561], [28, -72], [10, -51], [11, -107], [2, -138], [-19, -252], [-5, -171], [-2, 5], [-2, 18], [-5, 2], [-16, -78], [-23, -71], [-8, -110], [-10, -56], [-33, -58], [-20, 1], [-50, -43], [-35, 11], [-42, -25], [-27, 3], [-16, 52], [3, 23], [6, 24], [11, 5], [36, -54], [7, 23], [-11, 27], [-21, 15], [-16, 17], [-31, 125], [-33, 85], [-6, 57], [-56, 35], [-41, 53], [-27, 94], [-15, 166], [-18, 19], [-8, 13], [18, 62], [19, 51], [-15, -13], [-11, -19], [-14, -45], [-10, -7], [-9, 7], [-11, 87], [3, 108], [15, 40], [-23, 2], [-23, -16], [3, -36], [-3, -20], [-18, 6], [-13, 12], [-17, 38], [-25, 71], [-49, 197], [-10, 27], [-17, 29], [8, 9], [14, 6], [32, 88], [25, 54], [9, 37], [-2, 16], [-11, 23], [-14, -20], [-7, 5], [-16, 47], [-16, 13], [-11, -10], [12, -38], [10, -14], [-4, -56], [-4, -18], [-10, -16], [-15, 9], [-7, -14], [-9, 15], [-9, 24], [-10, 40], [26, 225], [24, 144], [3, 163], [2, 24], [-2, 44], [-33, 94], [-145, 231], [-112, 273], [-97, 103], [-74, -23], [-12, -21], [-6, -26], [5, -31], [-7, -13], [-20, 2], [-26, -7], [-70, -72], [-25, 3], [-22, -19], [-17, -14], [-43, -8], [-37, -15], [-16, 8], [-10, 42], [0, 43], [8, -33], [13, -26], [6, 10], [2, 23], [-13, 45], [-41, 58], [-48, 84], [14, -3], [4, 18], [-15, 24], [7, 27], [10, 29], [-20, -4], [-18, -21], [-1, -24], [-3, -20], [-10, 3], [-18, 24], [-89, 68], [-77, 39], [59, 17], [32, -14], [-3, 21], [-8, 13], [-26, 17], [-32, -7], [-21, 8], [-21, -16], [-22, -25], [-21, -12], [-80, -18], [-65, -19], [11, 20], [11, 13], [38, 20], [6, 41], [-9, 39], [-10, -9], [-11, -31], [-13, 22], [-14, 0], [-4, -49], [-19, -33], [-8, -33], [-54, -26], [-7, 9], [16, 31], [-1, 18], [-19, -15], [-30, -60], [-106, -19], [5, 13], [23, 3], [32, 19], [-7, 32], [-12, 34], [-11, 4], [-8, 21], [1, 64], [-7, 38], [-18, 39], [-6, -8], [-12, -66], [-11, -87], [-5, -28], [-32, -2], [-28, 6], [-95, -11], [-35, 30], [-15, 6], [-9, -1], [-41, -27], [-48, -21], [-11, 7], [-16, 1], [-34, -71], [-40, -33], [-102, 60], [-25, 47], [-22, 10], [-28, 6], [-29, -58], [-23, -79], [36, -44], [30, -21], [50, 18], [28, 38], [23, -1], [11, 8], [10, 20], [19, -16], [1, -16], [-14, -22], [-17, -19], [-11, -22], [20, -45], [31, -15], [12, 7], [7, 50], [19, 32], [26, -7], [-3, -20], [3, -19], [12, -33], [-1, -47], [2, -11], [-28, -20], [-21, -8], [-17, -27], [9, -15], [-17, -14], [-11, 6], [-6, -6], [-2, -16], [-9, -16], [13, -46], [26, -30], [19, -38], [74, -50], [18, 1], [18, -50], [14, -18], [14, -8], [-1, -35], [-25, -25], [-7, -31], [-6, -17], [-11, 22], [-11, 15], [-26, -47], [-13, -10], [6, 51], [-10, 20], [-15, 52], [-21, 31], [-16, 11], [-12, 20], [-14, 8], [-13, -2], [-21, 12], [-1, 27], [-6, 20], [-16, 25], [-78, 45], [-1, -19], [6, -14], [11, -9], [13, -19], [0, -54], [-6, -23], [-2, -33], [-5, -34], [-10, -26], [-21, -18], [-10, 15], [-15, 72], [-22, 23], [-34, 2], [-23, -16], [-25, -70], [-21, -11], [-70, 36], [-80, 55], [2, 18], [13, 6], [24, -7], [-1, 19], [-25, 61], [-4, 28], [3, 34], [-8, -1], [-15, -28], [-51, 24], [-14, 28], [-30, 81], [-42, 3], [-19, 49], [-35, -20], [-17, -23], [-15, -35], [6, -19], [15, -29], [-7, -14], [-49, -21], [-114, 24], [-34, 21], [-44, 46], [-62, 37], [-30, 6], [-29, -7], [-86, -4], [-19, -10], [-17, -16], [-11, 18], [-5, 31], [10, 5], [11, 19], [10, 36], [1, 22], [-7, 15], [-13, 1], [-29, -95], [16, -53], [-1, -19], [-58, -11], [-132, -107], [-51, -58], [2, 19], [62, 75], [-21, 12], [-36, -19], [-13, 7], [15, 62], [-4, 55], [-26, 1], [-16, -43], [-11, 1], [-14, 19], [-11, -6], [8, -98], [16, -41], [13, -52], [-36, -64], [-34, -53], [-3, -51], [-34, -66], [-32, -38], [-74, -88], [-22, -19], [-33, -42], [-47, -30], [-44, -49], [-15, -8], [28, 42], [34, 41], [-29, -6], [-44, 19], [-28, 1], [0, -15], [-21, -21], [-21, 31], [-9, 21], [-5, 18], [-9, 4], [-9, -8], [32, -127], [14, -5], [15, -13], [-19, -29], [-20, -23], [-32, -15], [-27, 47], [-6, -59], [-3, -58], [-9, -14], [-15, -22], [-7, 16], [-4, 23], [-9, -20], [-14, -15], [-22, -3], [-17, -8], [0, -24], [4, -24], [30, 19], [-11, -62], [-27, -62], [-23, -14], [-34, 9], [-8, -6], [-8, -13], [40, -96], [-25, -145], [-17, -52], [-11, -7], [-12, -2], [-44, 47], [-24, 36], [21, -98], [58, -29], [3, -37], [-1, -31], [-11, -38], [-11, -49], [8, -35], [9, -85], [8, -39], [8, -119], [10, -51], [52, -189], [18, -2], [2, -20], [-1, -40], [-5, -119], [-17, -97], [-55, -203], [-24, -126], [-44, -360], [-14, -236], [-3, -111], [-4, -15], [4, -17], [-10, -245], [5, -210], [-3, -32], [-17, -63], [-11, -88], [5, -39], [-1, -27], [17, -133], [5, -100], [50, -171], [28, -60], [34, -51], [13, -30], [-6, -72], [-14, -37], [-6, -59], [-7, 49], [2, 62], [11, 34], [1, 25], [-21, 26], [-37, 86], [-45, 153], [32, -244], [11, -39], [9, -16], [14, -17], [4, -27], [0, -19], [40, -170], [45, -175], [3, -48], [18, -58], [114, -246], [70, -184], [25, -174], [15, -54], [7, -75], [46, -83], [14, -54], [24, -30], [20, -90], [38, -53], [-9, -1], [-33, 27], [2, -18], [28, -37], [54, -37], [13, 0], [-21, 19], [-18, 26], [6, 4], [38, -32], [105, -11], [47, -75], [60, -32], [32, -96], [38, -100], [24, -5], [19, 0], [56, 17], [88, 63], [30, 30], [59, 42], [90, 8], [28, -12], [67, 26], [33, 32], [11, 29], [5, 22], [62, 30], [13, 6], [63, 6], [31, 11], [35, 7], [26, -45], [0, -22], [-17, -21], [8, -20], [31, -34], [56, -13], [19, 5], [26, 49], [46, 48], [-1, 55], [-9, 31], [-13, 2], [-3, 17], [9, 40], [-2, 14], [-29, -39], [-6, 0], [3, 18], [6, 15], [83, 85], [22, 35], [28, 31], [60, 115], [13, 218], [12, 38], [40, 67], [4, 20], [3, 45], [-1, 114], [2, 90], [-2, 102], [7, 90], [7, 26], [23, 145], [47, 64], [82, 76], [19, 13], [261, 80], [37, 20], [45, 52], [33, 17], [60, -1], [18, 7], [4, 7], [0, 7], [11, 7], [34, -7], [65, -31], [24, -8], [58, -36], [63, -15], [10, 6], [8, 11], [6, 22], [-6, 18], [-6, -1], [-11, -10], [-13, -1], [-25, 15], [5, 13], [25, -1], [17, 6], [24, 22], [26, -16], [35, -75], [24, -24], [2, -108], [4, -19], [8, -29], [-12, -84], [-13, -69], [-17, -57], [-37, -89], [-45, -71], [-56, -159], [-13, -75], [1, -59], [9, -58], [-3, -21], [-6, -22], [-12, 2], [-22, -28], [-28, -82], [-1, -25], [13, -23], [16, 11], [21, 1], [12, 7], [12, -2], [-3, -47], [-13, -33], [-8, -11], [-15, -5], [-17, -19], [-9, -18], [1, -54], [9, -4], [20, 40], [12, -2], [2, -17], [-26, -139], [-16, -143], [-23, -82], [-8, -121], [-11, -51], [-14, -51], [-8, 3], [-21, 96], [-23, 25], [-4, 23], [12, 117], [-6, 65], [-11, -3], [-15, -35], [-19, -31], [0, -45], [-22, -73], [-6, -25], [-15, -65], [15, -9], [14, 7], [32, -3], [13, -71], [-4, -61], [-30, -158], [-4, -55], [-14, -81], [19, -54], [-18, -72], [-6, -46], [-1, -69], [9, -132], [-15, -190], [-25, -83], [-16, -32], [-28, -82], [-37, -25], [-51, -133], [-9, -35], [5, -38], [15, -12], [12, -4], [24, -32], [30, -25], [18, 50], [-9, 29], [-8, 15], [1, 14], [102, -128], [27, -16], [21, 37], [12, 12], [29, 44], [9, 10], [48, 18], [23, -1], [21, -44], [16, -25], [30, 21], [26, 5], [105, -42], [42, 19], [76, 4], [35, -11], [49, 59], [31, 12], [37, 27], [-5, 29], [-9, 12], [56, -12], [83, -60], [89, 11], [32, 32], [21, 9], [91, -61], [24, -47], [19, -4], [14, 10], [4, 10], [-18, 10], [-8, 15], [72, -29], [135, -222], [3, -18], [-58, 65], [-31, -5], [-8, -10], [2, -36], [3, -17], [13, -2], [10, 10], [24, -12], [15, -24], [19, -36], [12, -40], [12, -1], [12, 24], [23, 3], [15, -26], [11, 1], [-15, 42], [-35, 41], [9, 1], [77, -74], [21, -92], [19, -21], [18, -29], [-7, -21], [-9, -14], [-18, -69], [-6, -6], [-1, 51], [-10, 7], [-13, -18], [-7, -26], [11, -35], [10, 0], [11, -9], [31, -236], [-7, -42], [-19, -65], [-18, -56], [-18, -35], [-23, -148], [-20, -241], [14, -217], [-7, -200], [6, -48], [2, -59], [-15, -10], [-8, 1], [-9, 37], [1, 31], [9, 38], [4, 50], [-5, 27], [-9, -58], [-15, -26], [-10, -9], [-10, -29], [10, -55], [14, -40], [4, -29], [-5, -34], [-3, -117], [-5, 3], [-5, 16], [-14, 1], [-2, -47], [1, -26], [-12, -21], [-4, -20], [10, -14], [11, -9], [13, 2], [12, -58], [3, -47], [-26, -44], [-9, -36], [-14, -43], [-8, -43], [-3, -31], [10, -98], [18, -69], [15, -44], [20, -10], [7, -23], [8, -36], [3, -46], [36, -155], [28, -86], [62, -158], [26, -29], [45, -127], [16, -21], [9, -37], [46, -31], [13, -23], [18, -31], [36, -54], [2, -27], [-3, -26], [10, -74], [18, -10], [19, 14], [5, -14], [-4, -13], [-9, -15], [-3, -64], [31, -30], [15, -26], [51, 13], [19, -7], [13, 7], [-14, 51], [-19, 38], [1, 17], [15, -13], [11, -25], [25, -32], [46, -111], [53, -26], [42, 3], [39, 15], [63, 43], [45, 78], [36, 34], [116, 74], [42, 77], [17, 10], [17, 10], [36, 58], [20, 46], [21, 22], [62, -16], [39, -22], [28, 3], [27, -15], [11, -33], [12, -14], [65, 3], [54, -16], [117, -98], [70, -97], [37, -103], [90, -133], [8, -12], [23, -83], [37, -53], [38, -87], [16, -59], [12, -11], [11, -22], [-5, -16], [-12, -17], [-3, -35], [8, -19], [8, -12], [22, 8], [12, 40], [-8, 178], [-13, 89], [-15, 27], [-13, 35], [9, 27], [24, 12], [31, 31], [115, 170], [39, 159], [30, 58], [34, 37], [41, -9], [33, 20], [10, 51], [-9, 69], [-13, 41], [12, 61], [13, 91], [-1, 76], [16, 46], [-6, 18], [-23, -37], [-18, -16], [10, 30], [33, 76], [16, 115], [13, 48], [46, 67], [10, 32], [34, 50], [56, 108], [22, 30], [108, -69], [34, 4], [-6, -13], [-16, -4], [-23, -19], [-6, -41], [15, -44], [17, -12], [14, 28], [14, 80], [22, 88], [6, 92], [15, 32], [24, 11], [41, -18], [32, -19], [33, -3], [101, 14], [164, 240], [77, 52], [47, 50], [31, 99], [8, 74], [22, 28], [24, 0], [11, 18], [3, 23], [57, 64], [33, 8], [28, -1], [65, -56], [29, -98], [5, -68], [-40, -74], [-10, -32], [-9, -28], [-18, -34], [-20, -21], [-106, -53], [-11, -11], [-13, -22], [0, -50], [2, -39], [32, -129], [12, -32], [41, -70], [-9, -10], [-16, -1], [12, -92], [25, -63], [1, -39], [-19, -123], [-36, -74], [-25, -86], [-20, -34], [-44, -168], [34, -101], [4, -50], [29, -73], [19, -23], [12, -30], [-6, -49], [12, -67], [15, -35], [18, -14], [23, 0], [67, 44], [15, 20], [10, 36], [34, 73], [2, 93], [7, 113], [-8, 73], [-35, 104], [-15, 75], [-35, 69], [-21, 118], [-9, 37], [-6, 51], [-8, 91], [23, 32], [-2, 74], [57, 21], [123, 120], [77, 31], [87, 64], [20, 32], [17, 52], [14, 7], [45, -50], [22, 17], [9, 39], [-12, 75], [-26, 0], [-78, -27], [-8, 32], [0, 29], [-18, 89], [11, 68], [12, 55], [22, 22], [33, 24], [25, -37], [15, -35], [8, -33], [6, -92], [13, -93], [14, -64], [23, -49], [17, 4], [12, 8], [81, 11], [50, -33], [63, -17], [59, -71], [60, -85], [15, -63], [6, -59], [14, -40], [-14, -41], [7, -69], [18, -69], [26, -44], [74, -12], [81, 30], [125, 27], [40, 23], [206, 12], [39, -33], [4, -33], [0, -26], [67, -124], [54, -16], [46, -40], [48, -22], [52, -30], [30, 4], [22, 11], [26, 2], [184, 207], [98, -6], [15, 14], [13, 18], [-36, 32], [-82, 12], [-25, -21], [-14, 53], [27, -2], [91, 18], [105, -11], [85, 38], [43, 6], [24, -8], [68, 25], [128, -29], [101, 24], [-12, -34], [-33, -21], [-53, -7], [-41, -50], [-87, 9], [-61, -18], [19, -14], [0, -51], [9, -11], [8, 0], [21, -38], [6, -25], [7, -53], [-10, -56], [-12, -26], [25, 9], [14, 26], [-2, 27], [2, 31], [14, -10], [9, -14], [32, -148], [22, -78], [6, 3], [5, 3], [7, 15], [10, 36], [9, -23], [5, -9], [5, -3], [-5, 34], [6, 42], [-2, 15], [10, 3], [12, -5], [17, -12], [30, -49], [20, -51], [1, -28], [8, -16], [12, -16], [7, -26], [1, 41], [-8, 30], [-2, 34], [40, 1], [10, 45], [21, -27], [56, -123], [21, -21], [62, -24], [38, -59], [23, -53], [-14, -56], [-36, -28], [-14, -35], [-9, -34], [0, -35], [-11, -40], [-1, -14], [-7, -56], [-15, -68], [-19, -72], [-104, -2], [26, -29], [23, -22], [39, -57], [30, 45], [44, 3], [48, 49], [18, 8], [88, -26], [22, 36], [17, 11], [48, -7], [42, -39], [10, -9], [40, -92], [23, -20], [4, 0], [0, 24], [21, -10], [52, -63], [77, -103], [108, -195], [31, -75], [20, -35], [33, -85], [9, -41], [-1, -166], [-28, -112], [-7, -84], [-2, -113], [-16, -64], [22, 35], [6, 101], [19, 62], [24, 67], [33, 16], [35, -28], [28, -5], [24, -20], [53, -108], [52, -86], [18, -68], [55, -34], [32, -54], [10, -47], [7, -122], [-11, -185], [3, -9], [4, -12], [11, 67], [2, 53], [8, 54], [14, 63], [24, 31], [140, -32], [64, -30], [82, -52], [12, -55], [0, 55], [-4, 56], [23, 40], [50, 14], [75, -19], [64, 23], [87, -3], [133, -45], [59, -31], [25, -28], [4, -50], [-2, -64], [-10, -62], [-21, -82], [20, 30], [27, 152], [19, 54], [20, 7], [109, -126], [51, -11], [103, -68], [38, -88], [86, -145], [45, -45], [1, -39], [-10, -60], [29, 53], [45, -84], [13, -41], [14, -76], [-5, -49], [-6, -25], [-1, -19], [14, 27], [7, 21], [3, 51], [10, 63], [15, 1], [12, -38], [24, -163], [9, -33], [4, -52], [-2, -23], [2, -22], [26, 99], [3, 45], [24, 2], [37, -52], [30, -75], [40, -243], [6, -225], [17, -118], [46, -245], [3, -45], [7, -55], [15, -58], [16, -96], [1, -18], [-11, -26], [16, -2], [14, -15], [9, -61], [11, -41], [21, -56], [43, -19], [33, -7], [37, -31], [27, -41], [21, -138], [-7, -87], [2, -61], [-11, -24], [-30, -40], [-7, -22], [-62, -103], [-14, -49], [-33, -65], [-33, -125], [-48, -114], [-17, -29], [-26, -7], [-16, -17], [-37, -93], [-51, -31], [-4, -54], [-29, -124], [-26, -67], [-16, -23], [-41, -122], [-5, -54], [0, -94], [-28, -57], [-28, -37], [-4, -80], [-12, -27], [-11, -18], [-58, 21], [-91, -88], [-30, -21], [98, -5], [32, -46], [69, 31], [83, 110], [32, 24], [65, 75], [27, 50], [48, 60], [10, 26], [27, 29], [15, -36], [1, -23], [-22, -44], [6, -28], [14, -36], [5, -49], [2, -37], [9, -66], [30, -88], [1, -30], [-4, -38], [14, -32], [15, -19], [51, -95], [39, 53], [25, 15], [15, 23], [33, 14], [27, -22], [51, -32], [37, 34], [75, 78], [-23, -138], [-17, -127], [-13, -51], [-13, -138], [-13, -37], [-10, -42], [17, 15], [14, 20], [18, 53], [14, 92], [55, 247], [16, 22], [45, 28], [78, 197], [31, -1], [19, -45], [19, -27], [4, 54], [27, 22], [-28, 27], [-5, 24], [-2, 40], [19, 55], [-12, 48], [40, 61], [-3, 45], [14, 38], [18, 39], [21, 19], [3, 33], [13, 14], [10, 4], [20, -37], [22, 44], [21, 17], [9, -7], [12, -20], [12, -8], [10, 4], [26, 28], [24, -46], [15, -10], [-4, 26], [-8, 23], [6, 20], [11, 12], [36, -11], [19, -20], [21, -38], [28, -3], [23, 4], [14, -21], [23, 1], [11, -33], [35, -46], [7, -31], [28, -16], [27, -19], [28, -5], [28, 5], [1, -40], [21, -11], [26, 9], [21, -48], [53, -37], [38, -56], [24, 10], [27, -15], [30, -121], [6, -87], [13, 12], [12, 39], [16, 71], [29, 23], [14, -27], [30, -44], [25, -47], [11, -31], [19, -5], [-16, -38], [16, 4], [19, 27], [17, -55], [13, -60], [2, -62], [-12, -35], [-10, -22], [-12, -44], [-13, -7], [-14, -14], [16, -32], [10, -30], [24, 82], [16, 23], [23, 13], [13, -59], [2, -55], [-38, -23], [0, -44], [-12, -24], [-7, -29], [-6, -59], [-8, -50], [-23, -218], [0, -36], [27, 38], [52, 112], [16, 118], [20, 117], [22, 37], [14, 0], [20, -13], [1, -38], [-3, -22], [-22, -58], [-9, -32], [9, -32], [50, 97], [22, 33], [19, -6], [38, 44], [76, 9], [5, 51], [16, 22], [41, -6], [82, -45], [29, -37], [43, -35], [23, -41], [96, -76], [69, -8], [34, 35], [43, -36], [23, -41], [44, -21], [45, -12], [35, 29], [88, 10], [112, 42], [66, -10], [75, -28], [54, -71], [45, -41], [27, -40], [44, -41], [94, -111], [33, -64], [58, -88], [59, -37], [32, -91], [25, -42], [61, -154], [71, -108], [47, -109], [90, -69], [35, -115], [61, -14], [26, -17], [32, -49], [44, -27], [56, 8], [63, -6], [50, 23], [120, -43], [19, -21], [24, -49], [44, -182], [26, -202], [13, -154], [30, -120], [16, -226], [14, -71], [1, -54], [12, -13], [7, -152], [-3, -61], [-11, -80], [-1, -35], [2, -23], [-5, -33], [-2, -32], [12, -72], [0, -57], [-15, -70], [-21, -181], [-53, -302], [-51, -173], [-71, -178], [-47, -93], [-18, -10], [-17, 19], [12, -50], [-11, -43], [-47, -131], [-46, -86], [-49, -150], [-4, -3], [-62, -58], [-37, -47], [-47, -85], [-43, -135], [-9, -18], [-16, 10], [0, -69], [-37, -108], [-11, -16], [0, 30], [7, 24], [3, 25], [-1, 29], [-10, -21], [-22, -82], [7, -59], [-16, -90], [-60, -257], [-75, -217], [-17, -66], [-62, -146], [-45, -70], [-12, -1], [-15, 6], [-7, 112], [-36, 68], [-10, 12], [-15, -72], [-12, -20], [-18, -4], [19, -31], [6, -36], [-19, -73], [-1, -66], [-34, -72], [-20, -53], [-10, -67], [-7, -62], [16, 17], [7, -13], [5, -19], [-3, -29], [-11, -54], [2, -134], [-4, -30], [11, -33], [12, 56], [6, -16], [-32, -359], [13, -162], [4, -183], [15, -179], [16, -160], [1, -13], [-22, -185], [-28, -183], [-17, -150], [-11, -161], [-11, -78], [-4, -79], [13, -188], [4, -35], [-34, -84], [-37, -41], [-21, -40], [-45, -151], [-25, -224], [-1, -118], [12, -249], [-9, -102], [-14, -67], [-17, -45], [-44, -53], [-39, -131], [-17, -137], [-27, -50], [-5, -76], [-21, -83], [-56, -124], [-36, -36], [-18, -34], [-11, -72], [-35, -119], [-25, -154], [6, -53], [1, -8], [9, -178], [-3, -46], [-34, -49], [-128, -91], [-34, -39], [-77, -156], [-4, -36], [3, -53], [12, -30], [-13, -33], [-15, -59], [-22, 4], [-127, 0], [-69, -19], [-36, 4], [-16, 14], [-18, 23], [-6, 30], [10, 46], [-6, 27], [-19, -1], [-20, -13], [-4, -27], [1, -20], [8, -28], [4, -35], [-8, -30], [-40, -4], [-46, -28], [-56, -12], [-45, -20], [-21, 26], [21, 13], [29, -7], [32, 21], [-7, 25], [-45, 32], [-51, -19], [-28, -39], [-61, 4], [-75, -29], [-12, -30], [2, -57], [15, -13], [14, -26], [-14, -24], [-13, -11], [-79, -27], [-73, -112], [-31, -14], [-27, -49], [-3, -42], [-8, -25], [-18, -2], [-38, 23], [-50, 1], [-35, -18], [-183, -182], [-66, -72], [-75, -148], [-126, -166], [-67, -99], [-12, -26], [-11, -1], [-21, -21], [9, -17], [14, -2], [-6, -57], [-26, -40], [-50, -103], [-11, 7], [16, 54], [-25, 2], [-36, 20], [-15, -22], [9, -54], [-14, -22], [-24, -3], [-23, 6], [-24, 39], [11, -70], [51, -18], [22, -16], [8, -27], [-40, -126], [-34, -17], [-3, -17], [18, 0], [10, -35], [-12, -141], [-16, -26], [-10, -1], [-10, -24], [14, -46], [13, -33], [-2, -65], [-5, -54], [0, -52], [17, -101], [6, -104], [7, -37], [4, -42], [-11, -39], [6, -63], [-19, -107], [10, -154], [-4, -144], [-8, -76], [-12, -59], [-29, -76], [-1, -77], [-62, -71], [-69, -99], [-63, -118], [-69, -166], [-80, -252], [-73, -360], [-89, -272], [-36, -98], [-48, -109], [-64, -128], [-86, -128], [-94, -114], [-34, -51], [-33, -73], [-8, 30], [7, 49], [-4, 37], [-1, 48], [19, 9], [28, -30], [14, 20], [11, 21], [34, 12], [65, 125], [48, 47], [28, 79], [4, 42], [-1, 85], [16, 22], [35, -8], [7, 24], [-3, 27], [6, 59], [48, 52], [22, 63], [-7, 160], [8, 7], [20, -25], [9, 11], [10, 70], [-5, 36], [-23, 10], [-79, -79], [-26, 3], [-4, 62], [-39, 29], [-15, 52], [-4, 35], [-14, 14], [1, -61], [4, -59], [34, -69], [-8, -28], [-17, -32], [-11, -71], [1, -92], [-9, 28], [-12, 16], [-5, -99], [-23, -38], [-7, -38], [6, -43], [-12, -30], [-58, -80], [-58, -55], [-13, -26], [-6, -61], [-9, -63], [-26, -55], [-21, -110], [1, -47], [7, -69], [11, -46], [-18, -31], [-23, -59], [-19, -67], [-46, -251], [-40, -151], [-31, -74], [-44, -78], [-125, -196], [-13, -21], [-15, -41], [-17, -97], [-58, -133], [-12, -76], [-62, -78], [-44, -89], [-29, 2], [-26, -38], [-149, -115], [-54, 22], [-39, -1], [-37, 51], [-84, 19], [-53, -21], [-71, -56], [-21, 1], [-15, 3], [-39, 23], [-21, 50], [-108, 57], [-88, 129], [-104, 2], [-79, -17], [-12, 18], [-8, 33], [-17, 48], [-68, 114], [-54, 113], [-10, 111], [7, 121], [16, 144], [-2, 44], [19, 26], [20, 5], [19, 37], [17, 56], [3, 43], [-13, 78], [-10, 110], [-10, 55], [-6, -53], [14, -228], [-8, -32], [-14, -37], [-16, -2], [-19, 6], [-13, -23], [-9, -100], [-25, -218], [4, -51], [21, -84], [7, -53], [6, -41], [5, -76], [-12, -34], [-11, -6], [-14, -19], [16, -93], [13, -43], [38, -87], [144, -122], [60, -72], [68, -97], [37, -100], [3, -83], [-54, -124], [-6, -103], [11, -73], [20, -68], [52, -88], [39, -32], [52, 4], [9, -25], [5, -21], [8, -178], [-1, -67], [-15, -61], [-100, -282], [-86, -172], [-31, -94], [-11, -102], [-27, -48], [-148, -154], [-230, -137], [-186, -71], [-42, -24], [-299, -78], [-58, -11], [-75, 7], [-61, -10], [-68, 21], [-61, 25], [-34, 61], [-41, 7], [-11, -30], [20, -78], [-9, -93], [11, -54], [24, -11], [23, -27], [21, -37], [-35, -4], [13, -29], [15, -18], [-2, -61], [-13, -148], [-34, -32], [-9, -8], [-11, -32], [-21, -142], [-7, -92], [9, -59], [41, -124], [-15, -81], [-26, -44], [-112, -90], [-45, -36], [-70, -25], [-114, -4], [-42, 6], [-97, 82], [-73, 49], [-66, 39], [-64, 23], [9, 12], [4, 21], [-18, 12], [-13, 3], [-42, -43], [-18, -43], [-5, -38], [-1, -92], [8, -76], [30, -189], [3, -103], [-14, -130], [20, -76], [24, -34], [56, -34], [21, -23], [24, 3], [7, -9], [-4, -16], [-14, -33], [1, -35], [42, -10], [43, 7], [46, 16], [11, 24], [0, 50], [-53, 9], [6, 18], [41, 21], [53, 33], [27, 7], [18, -23], [12, -21], [16, -54], [9, -71], [1, -86], [-7, -81], [-7, -28], [-14, -35], [-95, -43], [-26, 11], [-25, 61], [-8, 63], [-21, 42], [-46, 34], [-45, -10], [-45, -59], [-44, -19], [-15, -53], [110, -86], [52, -24], [17, 0], [17, -11], [-15, -32], [-16, -20], [-79, -44], [-34, -31], [-41, -60], [-57, -132], [-17, -28], [-9, -34], [-6, -91], [19, -150], [-20, -63], [12, -70], [-6, -47], [-20, -67], [-80, -106], [-14, -78], [28, -45], [-2, -40], [-9, -36], [-33, 0], [-120, 24], [-44, -39], [-41, -49], [-11, -23], [-14, -14], [-83, -26], [-16, -17], [-88, -184], [-38, -115], [-45, -112], [-12, -47], [-3, -66], [7, -59], [6, -44], [16, -56], [33, -64], [170, -260], [35, -23], [181, -28], [40, -36], [23, -58], [9, -51], [-10, -128], [-11, -41], [-20, -36], [-43, -47], [-51, -25], [14, -18], [21, 2], [46, 16], [19, -16], [15, -50], [-28, -21], [-9, -24], [-20, -38], [-105, -148], [-56, -45], [-52, -59], [-70, -61], [-27, -34], [-37, -73], [-56, -79], [-61, -170], [-2, -33], [9, -22], [-34, -298], [-12, -35], [-24, -37], [-65, -62], [-31, -7], [-41, 35], [-23, 38], [-22, 63], [-28, 66], [-1, -23], [9, -40], [-6, -42], [-70, -19], [-18, -20], [63, 9], [43, -13], [18, -15], [16, -32], [15, -38], [-12, -21], [-35, -18], [-44, -32], [-53, -58], [-29, -68], [-13, -48], [-14, -98], [-4, -64], [-22, -50], [-35, -44], [2, -11], [24, 23], [18, 7], [16, -59], [22, -119], [10, -82], [-2, -25], [-6, -33], [-45, -8], [-39, 1], [-29, -15], [15, -15], [27, 6], [37, -36], [41, 15], [19, -23], [13, -22], [63, -172], [55, -106], [27, -63], [-13, -29], [-157, 54], [-35, 30], [-30, 3], [-57, -36], [-32, -88], [-16, -25], [-40, -23], [-40, -5], [-134, -85], [-48, -7], [-33, -23], [-32, -32], [-12, -70], [5, -42], [-36, -152], [-9, -84], [0, -44], [10, -70], [-13, -120], [-25, -26], [-59, -34], [-41, 24], [-69, 22], [-50, 46], [-63, 33], [-21, 20], [-56, 92], [-6, 31], [-4, 39], [30, 56], [16, 4], [46, -2], [39, 9], [25, -30], [6, -65], [-10, -34], [-10, -22], [3, -16], [28, 23], [14, 145], [94, 72], [31, 42], [30, 66], [5, 18], [2, 25], [-20, 20], [-44, 27], [-142, -137], [-64, -36], [-42, -39], [-50, -71], [-9, -21], [-11, -46], [-5, -52], [-49, 24], [-76, 74], [-15, 28], [15, 38], [23, 31], [2, 107], [6, 38], [16, 30], [29, 33], [14, 7], [12, -14], [2, -25], [48, 2], [93, 94], [38, 3], [51, -22], [57, 13], [11, 10], [11, 22], [-42, 26], [-41, 13], [-115, 10], [-25, -10], [-34, -51], [-11, 13], [-7, 25], [-39, 18], [-19, -4], [-18, -24], [3, -37], [-10, -41], [-36, -39], [-25, -64], [1, -49], [-1, -26], [-9, -14], [-19, -16], [-60, 11], [-34, 52], [-13, 35], [-38, 39], [83, 47], [29, 27], [27, 61], [20, 39], [-14, 27], [-17, 0], [1, -43], [-18, -36], [-38, 17], [-57, -52], [-35, 14], [-56, -16], [-28, 28], [-6, 36], [10, 38], [-10, 63], [-16, 15], [-16, -4], [-7, 38], [-17, 66], [-8, 18], [-8, 31], [9, 7], [19, -8], [17, -20], [26, -3], [57, -43], [24, 10], [13, 10], [5, 36], [0, 34], [10, 0], [32, -43], [21, 4], [36, -12], [19, 5], [34, 16], [54, 48], [27, 49], [14, 7], [16, -6], [12, -15], [0, -34], [12, -32], [17, -26], [5, -31], [-3, -32], [-31, -43], [-6, -16], [11, -16], [12, 8], [18, 21], [10, 30], [2, 16], [1, 22], [-1, 27], [-25, 76], [-3, 18], [0, 35], [28, 32], [8, 25], [2, 48], [-15, 33], [-61, 77], [-101, 76], [-12, -8], [-8, -14], [10, -10], [13, -5], [90, -63], [24, -37], [15, -10], [19, -24], [-5, -36], [-91, -34], [-72, -76], [-55, -46], [-37, 17], [-18, 47], [-19, 60], [-28, 35], [-16, -4], [-13, 7], [-11, 18], [-21, -15], [-49, 42], [-13, 18], [35, 58], [39, -22], [9, 165], [-12, 37], [-51, 41], [-24, -5], [-34, 5], [-23, 19], [-26, 8], [-22, 11], [-29, 25], [-34, 14], [-47, 104], [-20, 55], [-11, 60], [72, 2], [42, 10], [10, 25], [-15, 47], [-20, 38], [15, 36], [21, 27], [22, -12], [56, -61], [9, -41], [39, -126], [10, -12], [4, -11], [82, -71], [11, 1], [-5, 59], [23, 81], [23, 26], [11, 0], [1, 13], [-22, 34], [11, 44], [-7, 1], [-19, -28], [-40, -140], [-24, -26], [-33, 64], [-18, 45], [-10, 17], [4, 71], [65, -14], [-22, 23], [-77, 42], [-19, 20], [-14, 7], [-25, 49], [-32, 41], [55, 74], [27, 52], [88, -27], [17, 16], [-15, 38], [-17, -12], [-27, 24], [-43, 72], [2, 36], [7, 67], [17, 14], [36, 14], [41, -22], [17, -17], [16, 8], [-16, 49], [-27, 19], [-29, 35], [3, 39], [9, 33], [8, 35], [5, 50], [-3, 39], [8, 17], [13, 8], [1, 15], [-26, -3], [-9, -49], [-3, -45], [-19, -35], [-7, -41], [-5, -48], [-10, -55], [-23, 21], [-13, 21], [-5, 15], [3, 28], [-6, 175], [-1, 147], [11, 114], [32, 45], [14, 13], [13, -6], [20, 1], [14, 16], [-45, 28], [-28, -16], [-20, -22], [-37, 17], [-7, 58], [-21, 51], [-4, 65], [2, 93], [51, -8], [42, -18], [110, 2], [90, -90], [40, 12], [-2, 18], [-30, 22], [-19, 51], [-11, 14], [-6, 31], [-1, 35], [-23, 129], [-9, -3], [-9, -44], [-18, -74], [-26, -36], [-40, -15], [-40, -8], [-34, 14], [-8, 31], [1, 35], [-15, 17], [-39, 16], [-11, 8], [-13, 32], [19, 49], [15, 29], [18, -6], [18, -13], [23, -38], [22, -7], [25, 30], [5, 21], [-16, 13], [-14, 5], [-23, 16], [-44, 58], [22, 59], [52, 68], [16, 16], [-14, 57], [16, 63], [-16, 51], [-29, 56], [-39, 12], [-8, -16], [-2, -23], [6, -17], [-3, -12], [-9, 0], [-50, 12], [-33, 37], [-54, 34], [-7, 26], [-6, 39], [19, 67], [-10, 1], [-35, -52], [-53, -27], [-40, -9], [-17, -20], [-7, -18], [11, -10], [22, -2], [17, -65], [-4, -25], [-8, -16], [-19, -4], [-38, 45], [-20, 51], [0, 40], [14, 54], [61, 74], [17, 31], [36, 34], [48, 78], [41, 43], [-20, 36], [-21, 53], [2, 75], [84, 30], [37, -13], [47, 3], [26, 18], [18, 3], [40, 21], [17, 29], [4, 22], [0, 20], [-4, 23], [-7, 62], [7, 21], [17, 24], [22, 8], [10, -2], [27, -22], [-6, -32], [-10, -39], [-22, -153], [-11, -35], [-17, -30], [12, -62], [-18, -44], [-76, -47], [-10, -2], [6, -17], [44, 4], [34, 10], [34, 39], [11, 60], [14, 117], [18, 17], [22, 3], [11, -27], [-4, -62], [0, -60], [-28, -176], [-35, -71], [-4, -19], [2, -22], [27, 3], [21, 38], [15, 49], [15, 68], [-2, 49], [5, 30], [6, 100], [11, 50], [-1, 71], [-19, 26], [-26, 16], [-7, 43], [14, 86], [50, -3], [48, 59], [31, 21], [18, -5], [62, -56], [12, -1], [-2, 21], [-9, 14], [-25, 19], [-45, 60], [-61, 10], [11, 78], [12, 72], [30, 9], [49, 24], [94, 107], [17, 81], [4, 91], [-45, 23], [-48, 60], [-39, 31], [-35, 40], [7, 59], [5, 97], [43, 21], [20, 132], [-29, 102], [7, 76], [38, 64], [6, 45], [11, 49], [33, 5], [1, 27], [-3, 49], [-22, 58], [-1, 80], [21, 94], [33, -6], [6, 4], [-23, 57], [-19, 63], [3, 25], [18, 21], [21, 12], [23, -32], [33, -103], [5, 27], [-13, 104], [-11, 130], [-35, -17], [-31, 9], [-12, 20], [-12, 30], [11, 35], [11, 27], [23, 33], [49, 12], [35, 42], [11, 87], [-11, -9], [-19, -76], [-32, -26], [-16, 4], [-19, 14], [-38, 67], [-21, 15], [-20, 2], [-17, -17], [-44, -117], [-19, -20], [-78, -9], [-28, 14], [-31, 17], [3, 29], [10, 31], [17, 16], [1, 17], [-24, 5], [-28, 32], [-13, 41], [-5, 73], [-25, 116], [-5, 83], [17, 59], [38, 232], [12, 119], [20, 104], [0, 68], [52, 63], [20, 38], [45, 211], [6, 114], [-71, 346], [-11, 66], [-3, 82], [17, 136], [2, 52], [-15, 75], [-40, 122], [-1, 62], [17, 64], [-16, 80], [8, 49], [9, 39], [63, -21], [29, 10], [15, 23], [12, 65], [6, 103], [4, 44], [5, 64], [31, 26], [11, 61], [26, 84], [26, 238], [27, 58], [27, 68], [-11, 100], [18, 46], [15, 34], [14, 61], [19, 58], [46, 83], [11, 101], [35, 176], [7, 112], [11, 76], [-3, 71], [21, 86], [20, 73], [7, 40], [46, 97], [8, 76], [-17, 52], [0, 81], [-13, 112], [30, 41], [12, 31], [39, 179], [-3, 70], [11, 87], [-25, 103], [-4, 231], [-14, 179], [-23, 188], [2, 105], [-15, 131], [0, 76], [11, 171], [74, 108], [15, 121], [9, 163], [-3, 119], [-8, 54], [-36, 87], [-10, 157], [7, 41], [31, 44], [21, 61], [11, 95], [23, 75], [9, 181], [18, 144], [10, 50], [30, 63], [5, 17], [5, 48], [-2, 113], [5, 70], [23, 136], [3, 63], [26, 141], [6, 101], [12, 53], [-5, 60], [8, 134], [-18, 76], [-4, 44], [22, 137], [16, 34], [24, 64], [11, 72], [2, 45], [-32, 227], [-4, 78], [7, 180], [11, 116], [-3, 93], [3, 48], [6, 60], [21, 72], [5, 52], [-7, 21], [-26, 27], [-21, 66], [-2, 65], [7, 47], [2, 67], [31, 13], [17, 37], [16, 70], [20, 169], [9, 209], [12, 125], [8, 63], [7, 130], [12, 85], [2, 78], [-2, 60], [-30, 304], [0, 112], [13, 174], [0, 244], [-2, 57], [-12, 54], [-3, 72], [-18, 127], [-17, 253], [0, 134], [-7, 114], [-16, 30], [-20, 39], [-91, 130], [-34, 69], [-32, 33], [-78, 111], [-8, 36], [-9, 114], [-11, 32], [-26, 41], [-68, 55], [-26, 28], [-27, 50], [-40, 36], [-44, 72], [-26, 59], [-29, 38], [-91, 54], [-45, 54], [-85, 76], [-38, 49], [-91, 59], [-27, 28], [-90, 138], [-62, 46], [-51, 77], [-153, 166], [-24, 53], [-23, 81], [-34, 49], [-38, 112], [-57, 66], [-54, 87], [-20, 80], [-36, 101], [-11, 54], [-32, 53], [-2, 107], [-22, 49], [16, 24], [17, 11], [21, 165], [-12, 83], [-56, 151], [-21, 72], [-15, 93], [-22, 55], [-34, 116], [-21, 102], [-45, 75], [-12, 27], [-7, 38], [-25, 26], [-1, 79], [-17, 150], [-25, 76], [-90, 140], [-2, 55], [-7, 99], [-20, 106], [-99, 332], [-26, 99], [-25, 161], [-22, 91], [-25, 162], [-37, 123], [-24, 107], [-25, 133], [-2, 71], [-45, 122], [-24, 112], [-42, 94], [-42, 72], [-18, 50], [-58, 240], [-8, 71], [-40, 132], [-40, 95], [-25, 76], [-32, 69], [-195, 212], [-69, 88], [-23, 42], [-10, 66], [4, 38], [20, 36], [28, -27], [17, 11], [13, 47], [1, 72], [-17, 92], [-63, 177], [5, 38], [12, 42], [-24, 86], [-27, 68], [-13, 53], [15, 200], [14, 51], [95, 203], [26, 86], [40, 54], [42, 82], [49, 62], [6, 8], [40, 29], [17, 29], [20, 26], [18, 41], [11, 39], [28, 180], [26, 114], [-5, 54], [-21, 74], [-5, 109], [2, 33], [-3, 25], [-14, -45], [4, -160], [-13, -72], [-17, -18], [-12, 13], [7, 117], [-13, -22], [-21, -79], [-34, -59], [-1, -19], [-9, -25], [-26, 23], [-20, 24], [-65, 132], [-43, 28], [-25, 46], [-6, 19], [-3, 27], [26, 27], [28, 37], [2, 82], [0, 65], [-20, 109], [9, 144], [-5, 56], [-23, 119], [17, 60], [60, 44], [20, 29], [13, 95], [14, 56], [27, -22], [21, 2], [-28, 21], [-24, 85], [-3, 40], [44, 116], [24, 30], [28, 62], [25, 93], [6, 147], [-10, 105], [-8, 111], [15, 28], [36, 15], [30, 36], [15, 33], [36, -5], [41, 51], [66, 26], [91, 58], [20, 52], [-9, 92], [-8, 40], [-38, 57], [19, 74], [46, 56], [60, -44], [7, 87], [-22, 76], [4, 144], [7, 29], [16, 39], [20, 26], [12, 8], [21, -13], [13, 29], [49, -13], [15, 12], [10, 20], [12, 14], [15, 35], [9, 40], [7, 16], [17, -6], [1, 18], [9, 23], [30, 53], [-1, 23], [-8, 51], [2, 19], [17, 6], [21, 15], [10, 48], [14, 42], [15, 63], [17, 4], [9, 72], [22, 64], [46, 189], [-13, -4], [-11, -26], [-13, 3], [-14, 15], [4, 85], [-8, 10], [-23, -65], [-19, 67], [-2, 40], [8, 40], [-1, 27], [-31, -20], [2, 25], [19, 26], [9, 27], [17, 29], [7, 44], [4, 69], [7, 74], [-5, 36], [-9, 31], [-8, 137], [2, 80], [-4, 62], [-8, 54], [-37, 69], [59, 80], [21, 60], [-27, 124], [-35, 105], [-1, 62], [10, -8], [11, 2], [11, 132], [-3, 41], [-19, 67], [-24, 1], [-21, 83], [-13, 19], [-9, 52], [-34, 102], [-27, 53], [-8, 16], [-67, 165], [-58, 205], [-12, 93], [15, 6], [14, -3], [8, 15], [9, 27], [-7, 63], [28, 47], [11, 32], [7, -3], [19, -55], [26, -31], [33, -46], [21, -10], [-26, 47], [-44, 63], [-13, 42], [-12, 57], [-17, -25], [-8, -21], [-9, -12], [-8, 15], [-1, 18], [-26, 4], [-7, 17], [-7, 9], [3, -36], [5, -22], [-2, -27], [-9, -1], [-7, 27], [-9, 25], [-13, 105], [-29, 49], [-14, 16], [-11, 7], [-17, 33], [-22, 18], [-29, 52], [-37, 37], [-44, 14], [-54, -9], [-19, -20], [-12, -27], [-6, -12], [-32, -30], [-12, -43], [-7, -37], [-16, -42], [18, -25], [-104, -142], [-21, -20], [-47, -15], [-11, -15], [-14, -28], [-2, -42], [2, -37], [14, -28], [12, -17], [29, -85], [52, -106], [9, -39], [8, -57], [-15, -27], [-12, -11], [-49, -5], [-17, -23], [-7, -35], [-18, -29], [-64, -28], [-49, -3], [-16, 33], [-4, 92], [-33, 158], [-8, 108], [-8, -13], [-18, -13], [-6, -27], [-5, -80], [-6, -27], [-14, 2], [-28, 29], [-37, 26], [-48, 170], [-5, 32], [-9, 38], [-37, 16], [-32, 29], [-34, 4], [-17, -16], [-18, 21], [-3, 46], [-36, -21], [-47, 7], [-41, 20], [-28, -10], [-24, -33], [4, -85], [-7, -16], [-19, 64], [-26, 61], [-23, 37], [-2, 88], [-9, 48], [-34, 44], [-30, 30], [-21, -6], [13, -50], [34, -65], [3, -25], [-1, -33], [-23, 5], [-21, 14], [-26, 4], [-17, 20], [-36, 77], [26, 66], [8, 43], [-1, 90], [-6, 43], [-28, 67], [-44, 72], [-61, 60], [-29, 47], [-73, 37], [-27, 24], [-22, 45], [-3, 33], [8, 50], [-20, 63], [-86, 125], [-48, 46], [-11, 26], [-7, 9], [7, -86], [21, -52], [55, -48], [15, -28], [6, -37], [-32, -70], [-16, -18], [-5, -38], [-10, -12], [-11, 22], [-45, 110], [-86, 53], [-16, 32], [-32, 101], [-14, 91], [5, 61], [35, 96], [11, 41], [-2, 26], [1, 37], [-13, 26], [-33, 35], [-21, 27], [6, 14], [38, 37], [2, 33], [0, 11], [0, 15], [-24, 64], [-36, 76], [-141, 234], [-52, 140], [-28, 101], [-27, 53], [-76, 107], [-17, 43], [-76, 143], [-57, 85], [-1, 35], [24, 45], [11, -2], [13, -32], [20, -36], [10, -1], [14, 17], [0, 17], [2, 61], [-23, 25], [-12, 50], [-11, 34], [3, 21], [-1, 24], [-31, 19], [-30, -14], [-17, 9], [-12, 13], [-7, -8], [5, -58], [-16, -35], [-14, -25], [-26, -7], [-44, -2], [-66, 28], [-48, 39], [-26, 0], [8, -13], [21, -8], [27, -27], [-8, -8], [-99, 57], [-114, 112], [-68, 18], [-78, 30], [-46, 71], [-35, 30], [-106, 95], [-36, 16], [-150, -2], [-64, 37], [-73, 72], [-50, 66], [-115, 182], [-8, 13], [-74, 157], [-78, 172], [-30, 56], [-29, 43], [-40, 79], [-104, 174], [-54, 80], [-50, 95], [-45, 53], [-45, 34], [-20, 20], [-17, 26], [-10, 2], [-5, -35], [16, -18], [19, -15], [14, -1], [16, -13], [46, -48], [7, -25], [-130, 97], [-53, 9], [-6, 15], [27, 50], [-9, 18], [-9, 3], [-28, -35], [-11, -2], [-2, 23], [1, 21], [-18, 32], [-11, -1], [-10, -22], [-25, -42], [1, -17], [49, -18], [16, -10], [-3, -11], [-42, 0], [-51, -19], [-92, -116], [-86, -50], [-122, -113], [-54, -5], [-29, -18], [-82, 43], [-105, 105], [-158, 33], [-107, 138], [-106, 57], [-67, 132], [-41, 6], [-26, 21], [-96, 48], [-95, 32], [-93, 115], [-61, 37], [-52, 46], [-115, 79], [-43, 43], [-41, 68], [-66, 69], [-28, 59], [-32, 21], [-45, 109], [-23, 47], [-20, 21], [-21, 8], [-62, -9], [-91, 48], [-43, 12], [-88, 72], [-118, 80], [-39, 91], [-32, 86], [-60, 113], [-37, 48], [-64, 57], [-36, 46], [-55, 35], [-93, 91], [-29, 77], [-18, 68], [-49, 83], [-55, 156], [-14, 57], [-10, 88], [-13, 51], [-15, 39], [8, 29], [27, 36], [46, 8], [33, 39], [4, 32], [-2, 19], [-21, 49], [-26, 13], [-20, 1], [-5, 18], [15, 20], [18, 48], [25, 58], [18, 53], [4, 75], [-3, 76], [7, 63], [-62, 74], [-7, 31], [-19, 84], [-34, 98], [1, 195], [-41, 173], [-42, 86], [-22, 30], [-59, 134], [-46, 77], [-46, 146], [-45, 93], [-58, 156], [-41, 78], [-189, 262], [11, 0], [55, -64], [9, 5], [2, 32], [-7, 37], [-10, 9], [-15, -8], [-20, 8], [-10, 12], [-29, 8], [-38, 44], [-16, 45], [-1, 52], [-54, 110], [-20, 62], [10, -5], [14, -25], [15, -7], [17, 0], [12, 10], [-4, 18], [-12, 15], [-78, 58], [-26, 41], [-64, 68], [-15, 24], [-10, 65], [-16, 3], [-13, -18], [-38, -18], [-10, 21], [-1, 20], [27, 22], [24, 61], [0, 22], [-14, -25], [-20, -28], [-21, -15], [-32, -13], [-16, 9], [-14, 14], [-22, 54], [-11, 176], [20, 61], [23, 61], [20, 35], [11, -27], [12, -3], [-9, 31], [-19, 28], [-7, 29], [-1, 26], [-9, 48], [-57, 102], [-54, -8], [-22, 3], [-20, 39], [-17, 65], [-9, 55], [-1, 29], [-5, 29], [-93, 48], [-28, 41], [-27, 51], [-12, 42], [-11, 32], [-9, 54], [-7, 63], [11, 82], [13, 39], [-64, 30], [-24, 1], [-21, -16], [-18, 21], [-37, 24], [-45, 85], [-53, 155], [-57, 50], [-19, 54], [-24, 48], [-20, 60], [-4, 26], [-6, 15], [-29, 42], [-32, 71], [-9, 57], [-8, 87], [-22, 31], [-21, 14], [-5, 41], [2, 24], [-7, 44], [-44, 105], [-23, 87], [-12, 27], [-11, 39], [-6, 81], [-18, 101], [-36, 120], [-29, 82], [-15, 82], [7, 83], [-5, 51], [-4, 12], [3, 17], [10, -9], [8, 15], [-1, 53], [-10, 16], [-29, 17], [-12, 11], [-70, 22], [-39, 30], [-3, 70], [-19, 32], [-16, 20], [-52, 41], [-9, -21], [-7, -39], [-21, -8], [-19, -2], [-32, 27], [-79, 103], [-17, 17], [-25, 9], [-12, 16], [-53, 55], [11, -29], [15, -30], [14, -87], [-16, -63], [-10, -220], [11, -44], [23, -70], [16, -112], [5, -82], [14, -66], [-4, -155], [5, -47], [22, -77], [41, -73], [9, -38], [53, -55], [33, -72], [65, -98], [20, -42], [58, -152], [2, -46], [11, -56], [33, 12], [15, -42], [-2, -20], [4, -15], [17, 3], [15, -11], [31, -166], [17, -22], [21, -10], [24, -18], [1, -42], [-1, -34], [21, -49], [-4, -66], [17, -56], [-3, -55], [7, -43], [50, -97], [62, -77], [13, -101], [26, -93], [25, -23], [27, -39], [-4, -40], [2, -24], [35, -73], [6, -94], [30, -61], [9, -4], [6, 9], [-22, 61], [-10, 40], [-2, 63], [8, 8], [62, -99], [7, -74], [21, -42], [1, -56], [13, -34], [4, -49], [20, -80], [1, -112], [10, -82], [40, -125], [32, -26], [6, -61], [33, -159], [38, -87], [19, -73], [3, -45], [-14, -68], [-2, -47], [21, -143], [31, -73], [35, -18], [6, -10], [-3, -20], [12, -18], [13, 23], [7, 32], [-7, 37], [-1, 27], [6, 19], [11, 3], [67, -98], [11, -38], [25, -43], [23, -55], [9, -42], [19, -36], [9, -81], [46, -37], [25, -68], [2, -43], [-12, -110], [-11, -31], [-37, -47], [-27, -56], [-27, -34], [-27, -21], [-23, 4], [-23, 65], [-26, 193], [-18, 41], [-12, 61], [-20, 50], [-75, 76], [-37, 81], [-37, 53], [-39, 78], [-106, 129], [-44, 66], [-29, 65], [-19, -1], [-14, -7], [-6, 18], [-1, 33], [-6, 22], [-62, 98], [-13, 55], [-3, 62], [14, 162], [6, 95], [-4, 49], [-6, 6], [-6, 27], [-2, 78], [-15, 84], [-56, 174], [-41, 34], [-37, 25], [-101, 154], [-27, 76], [-7, 44], [-3, 89], [-14, -52], [-19, -38], [-42, 3], [-48, -43], [-29, 40], [-15, 46], [-24, 55], [-26, 11], [-17, 2], [-31, 68], [-26, 21], [-36, 9], [-32, 34], [-9, 38], [-5, 53], [-12, 32], [-49, 62], [-39, 69], [-38, 45], [-11, 36], [-1, 25], [59, -7], [71, -27], [34, 8], [21, 25], [20, 18], [3, -19], [-4, -37], [20, -33], [26, -27], [19, 3], [-18, 29], [-12, 60], [5, 22], [0, 29], [-26, -6], [-4, 15], [23, 45], [25, 120], [13, 118], [-27, 103], [-46, 72], [-98, 210], [-59, 108], [-17, 40], [-16, 19], [-48, 25], [-40, 60], [-71, 85], [-30, 44], [-21, 104], [-16, 14], [5, 71], [-7, 127], [-12, 32], [-38, 31], [-9, 86], [-2, 82], [-8, 57], [-65, 96], [-3, 46], [0, 44], [-7, 44], [-35, 91], [-42, 79], [-14, 38], [-2, 77], [-15, 21], [6, 5], [13, -2], [8, 10], [1, 54], [-63, 84], [-18, 116], [-34, 61], [-8, 23], [-18, 109], [0, 4], [-2, 63], [-13, 22], [-17, -14], [-7, 82], [4, 39], [-2, 38], [-16, 92], [-41, 113], [-89, 140], [-46, 47], [-35, 59], [-23, 16], [-28, 5], [-9, -27], [-32, 18], [5, 66], [-32, 92], [-25, 10], [-65, -6], [-87, 50], [-25, 30], [-9, 54], [-41, 47], [-53, 46], [-30, -11], [-39, 7], [-55, 33], [-33, 4], [-63, -9], [-23, 7], [-22, 41], [-24, 21], [5, 51], [-3, 47], [4, 36], [-11, 79], [9, 73], [-8, 26], [-13, 21], [-42, 30], [-7, 37], [7, 52], [-11, 35], [-35, 32], [-32, 73], [-40, 39], [-17, 67], [-25, 42], [-8, 36], [-56, 131], [-59, 102], [-9, 58], [-2, 81], [23, 49], [12, 43], [-1, 39], [-4, 29], [-20, 51], [-79, 30], [-64, 124], [-4, 96], [-25, 98], [0, 63], [-4, 69], [19, 15], [17, -6], [-1, -27], [5, -49], [20, -37], [19, -16], [18, -36], [13, -11], [13, -3], [-7, 23], [-8, 15], [-9, 48], [-18, 61], [-20, 33], [-11, 61], [-9, 15], [-5, 22], [20, 27], [27, 19], [36, 6], [103, -9], [21, 15], [19, -5], [13, 2], [-28, 16], [-16, -5], [-18, 3], [-37, -3], [-15, 7], [-16, 19], [-11, 2], [-34, -33], [-15, 4], [-36, 36], [-15, 5], [-25, -20], [-4, -90], [8, -66], [-15, -7], [-17, 27], [-27, 17], [-22, 25], [-32, 46], [-16, 17], [-18, -39], [-1, 18], [9, 45], [-3, 75], [28, -60], [-8, 42], [-22, 47], [-17, 16], [-20, 83], [-47, 50], [-38, 80], [-77, 134], [-5, 117], [-28, 148], [12, 85], [-1, 59], [-14, 91], [-15, 49], [-62, 135], [-60, 90], [-9, 69], [-4, 69], [13, 62], [12, 64], [8, 17], [3, -7], [-2, -13], [8, -5], [3, 29], [6, 15], [-9, 2], [1, 9], [5, 18], [18, 85], [-1, 107], [19, 131], [-1, 44], [-12, 93], [-13, 56], [-23, 40], [10, 58], [0, 55], [-40, 80], [-15, 104], [-3, 45], [4, 116], [-11, 50], [-27, 82], [12, 72], [12, 43], [30, 190], [7, 15], [13, 0], [22, 32], [-10, 8], [-16, -16], [14, 75], [15, 64], [10, 24], [5, 209], [9, 160], [14, 53], [-5, 55], [6, 74], [-4, 74], [31, 359], [-4, 43], [9, 59], [-9, 153], [4, 171], [-8, 22], [-4, 24], [8, 3], [14, -25], [66, 0], [42, 24], [16, -8], [17, -31], [23, -7], [28, 6], [-9, 8], [-13, 2], [-29, 29], [-17, 28], [-51, -1], [-11, 18], [-58, -18], [-17, 19], [-32, -13], [8, 54], [-2, 68], [2, 66], [8, -48], [19, -52], [10, 59], [6, 72], [-19, 29], [-32, 20], [-11, 68], [75, 58], [-40, 12], [-15, 26], [-20, 4], [-1, -20], [-6, -27], [-7, 35], [-2, 41], [-8, 70], [-31, 113], [-18, 147], [-23, 72], [-45, 69], [-12, 40], [-11, 103], [7, 77], [-9, 54], [22, -3], [56, -42], [71, -34], [21, -24], [34, -19], [189, -28], [13, 3], [24, 17], [11, -2], [27, -40], [14, -4], [18, 2], [14, 7], [23, 28], [3, -11], [-1, -25], [8, -36], [17, -47], [7, -29], [-34, -82], [-7, -2], [-1, 28], [-4, 5], [-64, -139], [-22, -66], [-2, -29], [0, -18], [9, -4], [21, 7], [30, 27], [1, 6], [-28, -10], [-13, 0], [1, 31], [4, 14], [18, 47], [19, 27], [28, 30], [16, 24], [11, 35], [30, 43], [6, 11], [-2, 35], [2, 7], [15, -5], [6, -60], [-4, -27], [-26, -32], [-3, -12], [5, -44], [-5, -4], [-10, 5], [-3, -3], [25, -48], [8, -38], [1, -33], [-7, -65], [-7, -10], [-12, 3], [-17, 21], [-3, -7], [-13, -50], [-5, 4], [-8, 60], [-4, 4], [-25, -27], [-11, -26], [-8, -41], [-11, -20], [31, -4], [28, 8], [23, -19], [8, -1], [21, 19], [6, 14], [17, 62], [9, 11], [13, 1], [12, 9], [19, 34], [0, 14], [-6, 77], [2, 43], [-4, 14], [-8, 14], [1, 14], [6, 23], [1, 21], [-6, 18], [3, 21], [17, 45], [3, 20], [22, 45], [-6, 18], [-15, 22], [-10, 19], [-10, 30], [-8, 10], [-2, -4], [11, -50], [-3, -3], [-27, 27], [-7, 16], [-3, 23], [2, 17], [15, 17], [18, 6], [-2, 15], [-22, 46], [-15, 21], [-11, 10], [-15, 3], [-7, 7], [-2, 11], [3, 15], [9, 4], [23, -6], [13, 11], [-1, 18], [-4, 10], [1, 66], [-9, 53], [-5, 9], [-5, 1], [-6, -7], [-14, -2], [-10, 18], [-10, 34], [-18, 80], [-11, 21], [-27, 26], [-10, 0], [-11, -8], [-7, -12], [-6, -27], [-4, -8], [-4, 1], [-3, 7], [-8, 37], [2, 16], [9, 20], [-1, 7], [-20, -6], [-8, 5], [-4, 10], [1, 42], [-11, 23], [13, 10], [32, 8], [34, 1], [9, 18], [10, 43], [-24, -40], [-14, -4], [-44, 15], [-29, -2], [-4, 8], [2, 9], [6, 9], [4, 31], [7, 85], [9, 31], [3, 16], [-2, 4], [-38, -59], [-3, -19], [4, -16], [-4, -33], [-18, -10], [-10, 5], [-20, -28], [-6, -3], [-91, 50], [-10, 6], [-15, 23], [-23, 40], [-7, 34], [9, 28], [8, 14], [10, 0], [10, -10], [21, -47], [8, -29], [22, 4], [35, 37], [8, 14], [-35, -14], [-15, 1], [-15, 15], [-16, 30], [-8, 34], [0, 107], [5, 20], [17, 16], [11, 25], [-1, 11], [-10, 22], [-15, 16], [-15, 9], [-4, -3], [23, -46], [0, -18], [-26, -46], [-4, -13], [0, -45], [-3, -9], [-21, -13], [-23, -35], [-39, -12], [-36, 4], [-20, 17], [-61, 86], [-22, 36], [0, 30], [-42, 107], [0, 23], [-14, 33], [-16, 5], [-4, 32], [33, 68], [21, 58], [2, 18], [-1, 28], [-5, 62], [5, 27], [-21, -36], [-4, -26], [5, -27], [-3, -30], [-12, -43], [-21, -45], [-42, -21], [-74, 12], [-8, 6], [-5, 15], [-4, 66], [-5, -8], [-8, -35], [-7, -51], [-9, -11], [-15, -1], [-12, 8], [-9, 17], [-19, 2], [-34, -14], [-17, 6], [-19, 0], [-40, 15], [-47, 4], [-12, 11], [1, 22], [8, 11], [49, 10], [48, 23], [47, 12], [-2, 11], [-21, 4], [-108, -26], [-34, 4], [-6, 4], [-1, 26], [13, 24], [21, 23], [6, 18], [-12, 7], [-20, -5], [-9, 14], [10, 55], [-9, 55], [-13, -52], [-19, -29], [-91, -13], [-15, -15], [-12, 0], [-58, 28], [-25, 17], [-23, 25], [-42, 57], [-33, 37], [-1, 67], [7, 43], [15, 49], [59, 104], [21, 19], [18, 7], [87, 9], [65, 13], [12, 7], [-95, 7], [-85, -5], [-29, -16], [-37, -67], [-9, -28], [-10, -21], [-7, 0], [-12, 7], [-4, 9], [-6, 22], [-19, 34], [-9, 40], [-5, 59], [1, 26], [10, 34], [28, 66], [-36, -2], [4, 55], [13, 61], [34, 35], [34, 26], [31, 34], [55, 22], [18, -46], [47, -14], [13, -21], [17, -38], [20, -36], [25, -35], [7, -3], [-11, 30], [-40, 65], [-2, 23], [-10, 25], [-52, 36], [-10, 14], [-9, 36], [-4, 24], [6, 22], [53, 69], [13, 37], [0, 17], [-5, 19], [-11, 34], [-3, 0], [3, -51], [-2, -20], [-6, -22], [-8, -17], [-12, -11], [-114, -158], [-12, -9], [-42, -14], [-22, -17], [-12, -22], [-19, -58], [-25, -115], [-30, -93], [-25, 121], [-46, 92], [89, 92], [2, 14], [-8, 49], [2, 15], [8, 21], [23, 32], [-1, 3], [-26, -12], [-41, -71], [-16, -22], [-8, -3], [-1, 41], [22, 109], [18, 105], [6, 30], [16, 30], [-15, -2], [-72, -47], [-24, 29], [-20, 153], [-36, 59], [-60, 49], [-59, 22], [-13, 43], [-12, 53], [16, 62], [26, 29], [23, 14], [23, -7], [1, -22], [-15, -61], [20, -6], [81, -74], [17, -6], [34, 28], [18, -1], [44, -23], [15, -28], [42, -54], [-6, 32], [-46, 66], [-25, 22], [-45, 4], [-28, -11], [-12, 3], [-24, 17], [-21, 28], [-21, 61], [-5, 29], [1, 21], [5, 19], [9, 17], [17, 13], [26, 7], [7, 8], [-32, 35], [-15, 0], [-52, -51], [-10, -5], [-5, 10], [-4, 1], [-15, -25], [-12, -11], [-42, -79], [-7, -37], [-2, -57], [-5, -35], [-7, -14], [-50, -27], [-28, -55], [-34, 48], [-38, 45], [-25, 80], [-45, 14], [-52, 45], [-20, 41], [28, 82], [41, 63], [6, 74], [6, 16], [70, 19], [46, 37], [-47, 4], [-29, -6], [-52, -26], [-57, 51], [-29, 47], [-10, 40], [10, 34], [2, 34], [5, 47], [5, 20], [12, 26], [25, 17], [22, 54], [9, 37], [44, 111], [16, 48], [31, 67], [61, 105], [-20, -6], [-10, -9], [-9, 1], [-9, 11], [-9, 24], [-8, 35], [-5, -16], [-1, -66], [-6, -57], [-11, -39], [-30, -80], [-18, -31], [-12, 29], [10, 50], [17, 40], [3, 54], [-16, 65], [-10, 53], [-4, 40], [-1, 36], [3, 33], [7, 35], [11, 39], [-1, 4], [-14, -30], [-10, -32], [-7, -35], [-3, -37], [2, -40], [5, -35], [17, -65], [6, -39], [1, -27], [-38, -92], [-13, -45], [1, -19], [3, -46], [-40, -76], [-52, -38], [-11, 12], [-11, 12], [-65, 10], [-24, 82], [-12, 64], [-19, 55], [0, 13], [17, 37], [65, 31], [1, 12], [-24, 8], [-6, 13], [-7, 60], [2, 53], [-2, 35], [-10, 72], [-17, 43], [-41, 86], [-4, 21], [18, 27], [12, 25], [-71, -43], [-96, -46], [-42, -32], [-9, -13], [-3, -11], [8, -30], [-1, -10], [-9, -18], [-10, -51], [-21, -53], [-10, -11], [-38, 20], [-10, 17], [-19, 70], [5, 19], [13, 15], [19, 34], [24, 52], [45, 133], [29, 1], [52, 26], [-82, 13], [-12, 7], [-11, 18], [-9, 29], [-17, 33], [-31, 11], [-13, 12], [-21, 39], [-14, 18], [-7, 22], [-1, 26], [-6, 13], [-21, 5], [-12, 9], [-3, 67], [-42, 17], [-18, 15], [-28, 42], [-7, 21], [-3, 17], [7, 46], [-3, 9], [-25, -5], [-153, 72], [8, 95], [-28, 125], [-31, 51], [6, 19], [7, 11], [13, 0], [59, -37], [56, -44], [7, 7], [-89, 92], [-22, 28], [-5, 33], [-1, 18], [7, 10], [84, -9], [4, 7], [-84, 27], [-17, 0], [-18, -39], [-9, -9], [-18, 2], [-6, 6], [-22, 47], [-20, 33], [-38, 45], [-7, 33], [-2, 47], [5, 45], [31, 103], [13, 18], [3, 11], [-10, -1], [-9, -10], [-25, -48], [-27, -78], [-21, -27], [-14, 6], [-20, 32], [-43, 39], [-50, 10], [-31, 40], [-46, 111], [-6, 55], [-6, 14], [-25, 18], [-16, 26], [-24, 135], [-31, 93], [-8, 50], [3, 49], [-4, 5], [-11, -38], [-3, -20], [-20, -5], [19, -39], [5, -19], [-10, 1], [-19, -5], [33, -66], [14, -102], [21, -76], [14, -62], [7, -47], [9, -44], [25, -99], [3, -20], [-3, -16], [-8, -19], [-14, -7], [-45, 13], [-17, 25], [-24, 44], [-34, 21], [-84, -10], [-6, 3], [0, 37], [10, 65], [-8, 26], [-44, 96], [1, 19], [60, 44], [-29, 3], [-24, -17], [-9, 11], [-14, 62], [-9, 23], [-5, 4], [-2, -58], [10, -31], [1, -17], [-1, -25], [-7, -18], [-11, -11], [-11, -2], [-20, 12], [-23, 23], [-19, 11], [-8, 10], [-9, 25], [-15, 20], [-74, 24], [-44, 30], [-3, -8], [13, -31], [2, -19], [-11, -5], [-20, -30], [6, -4], [21, 10], [23, -1], [39, -19], [35, -23], [12, -13], [6, -20], [4, -7], [34, -23], [2, -12], [-22, -35], [45, 3], [27, -12], [34, -56], [11, -30], [2, -40], [-7, -11], [-14, -8], [-92, -13], [-34, -48], [-7, -1], [-25, 13], [-46, 38], [-58, 36], [-131, 108], [-3, 5], [-3, 20], [-9, 11], [-17, 9], [-25, 27], [-32, 45], [-19, 36], [-8, 25], [-18, 29], [-59, 61], [-31, 23], [-28, 13], [-24, 3], [-6, 8], [11, 13], [2, 8], [-53, 13], [-50, 28], [-127, 80], [-65, 50], [-39, 24], [-16, 13], [-7, 11], [9, 12], [26, 12], [17, 13], [27, 51], [2, 16], [-14, 37], [-7, 33], [0, 19], [4, 18], [4, 12], [11, 12], [9, 6], [10, -4], [32, -46], [4, -17], [-1, -63], [9, -73], [3, 5], [3, 24], [2, 47], [4, 22], [6, 22], [12, 12], [36, -7], [17, 4], [-71, 33], [-44, 62], [-8, 7], [-24, 3], [-26, -26], [-66, -82], [-19, -14], [-83, -46], [-57, -9], [-63, 7], [-54, 15], [-136, 72], [-21, 17], [31, 44], [2, 14], [-11, 45], [-9, 13], [-13, 8], [-4, -6], [0, -13], [3, -25], [-10, -13], [-23, -14], [-39, -15], [-120, 37], [-124, 30], [-110, 7], [-156, -25], [-83, -24], [-48, -2], [-47, 4], [-4, 17], [21, 10], [-1, 12], [-27, 39], [-40, 23], [-55, 8], [-32, 11], [-8, 14], [-19, 14], [-31, 13], [-13, 23], [10, 71], [11, 43], [10, 30], [27, 48], [-9, -3], [-39, -36], [-33, -37], [-32, -48], [-18, -22], [-24, -20], [-37, 5], [-50, 30], [-43, 15], [-36, 1], [-15, 5], [25, 27], [14, 22], [19, 34], [5, 17], [-132, 5], [-5, 19], [0, 13], [-4, 11], [-19, 8], [-27, -6], [-43, -22], [-19, 17], [7, 9], [14, 7], [28, 31], [-38, 16], [-20, 18], [-10, 16], [1, 55], [10, 35], [87, 34], [-27, 13], [-56, -5], [-37, -29], [-43, -41], [-30, -16], [-15, 11], [-20, 3], [-25, -3], [-16, -11], [-9, -18], [-10, -12], [-11, -6], [-8, 2], [-12, 18], [-25, 12], [-12, 14], [-7, -9], [-9, -27], [-9, -13], [-42, -14], [-23, 2], [-28, 34], [-4, 12], [10, 29], [61, 115], [-6, -1], [-20, -18], [-39, -46], [-18, -14], [-30, -1], [-14, 5], [-17, -4], [-20, -12], [-13, -14], [-6, -15], [4, -2], [30, 17], [17, 4], [5, -8], [-24, -52], [-14, -50], [-13, -12], [-22, 2], [-24, -5], [0, -14], [44, -39], [16, -6], [20, -14], [3, -14], [-7, -38], [-6, -15], [-9, -8], [-36, 1], [-12, -4], [-24, -24], [-12, -19], [4, -2], [21, 16], [31, 9], [39, 1], [30, 9], [20, 16], [19, -4], [18, -26], [6, -22], [-8, -19], [-15, -13], [-23, -9], [-15, -12], [-6, -16], [-3, -24], [-1, -32], [6, -58], [-5, -7], [-8, -5], [-13, 0], [-12, -14], [-27, -76], [-9, -9], [-12, 8], [-10, 0], [-9, -10], [-19, -8], [-30, -5], [-25, 2], [-45, 16], [-18, 12], [-15, 19], [-40, -20], [-11, 9], [-25, 53], [-5, -3], [-5, -58], [-8, -20], [-25, -41], [-13, -71], [-4, -3], [-5, 11], [-15, 63], [-8, 14], [-23, -36], [-2, -14], [6, -47], [-6, -7], [-45, 25], [-11, 2], [-3, -5], [15, -37], [-1, -13], [-65, -71], [-17, 3], [-10, 7], [-12, -1], [-41, -27], [-11, 1], [-15, 16], [-7, -1], [-4, -16], [-1, -32], [-15, -30], [-49, -49], [-13, -23], [-9, -31], [-8, -3], [-28, 20], [-33, 13], [-5, -6], [10, -19], [-2, -12], [-14, -4], [-18, 2], [-22, 7], [-31, -8], [-40, -25], [-33, 0], [-46, 41], [-12, 3], [-4, 12], [9, 33], [13, 25], [9, 12], [44, 32], [50, 12], [31, 19], [39, 40], [20, 30], [40, 77], [-3, 6], [-9, 4], [-88, -73], [-13, -7], [-17, 1], [-70, 28], [-14, 12], [-11, 35], [20, 80], [13, 39], [35, 60], [44, 64], [15, 41], [24, 110], [-2, 51], [-10, 61], [-1, 36], [10, 12], [102, 56], [49, 43], [94, 62], [25, 0], [19, -22], [22, -17], [25, -13], [32, 1], [39, 16], [62, -6], [128, -41], [27, -2], [1, 5], [-19, 29], [-89, 17], [-37, 16], [-104, 74], [-24, 28], [10, 14], [26, 11], [8, 10], [4, 19], [15, 25], [25, 32], [39, 31], [75, 46], [-29, 2], [-54, -8], [-19, -9], [-36, -33], [-14, -23], [-20, -46], [-8, -8], [-37, -7], [-101, -4], [-17, 23], [-9, 4], [-13, -4], [-92, -59], [-34, -30], [-23, -35], [-37, -25], [-49, -16], [-37, -20], [-39, -40], [-14, -30], [0, -14], [9, -45], [-10, -9], [-22, -3], [-36, -30], [-76, -89], [-10, -32], [0, -11], [12, -25], [-8, -17], [-22, -25], [-48, -41], [-31, -16], [-20, -1], [-20, 6], [-35, 26], [-28, 2], [-2, -4], [39, -28], [39, -36], [24, -30], [10, -24], [0, -25], [-9, -25], [-27, -44], [-27, -13], [-70, -13], [-22, -11], [-7, -8], [48, -18], [4, -10], [-6, -37], [-13, -12], [-40, -22], [-35, -6], [-6, 4], [7, 29], [-2, 7], [-13, 6], [-19, -11], [-47, -43], [-5, -7], [17, -11], [-4, -10], [-26, -30], [-10, -21], [-17, -20], [-76, -64], [5, -15], [-19, -56], [-11, -49], [13, -20], [64, -24], [31, -6], [37, -17], [66, -45], [22, -30], [3, -14], [-2, -15], [-8, -21], [-21, -38], [-50, -58], [-22, -16], [-34, -13], [-12, -10], [-43, -54], [-12, -30], [2, -26], [-9, -18], [-56, -35], [2, -6], [20, -3], [-7, -31], [-3, -43], [-10, -8], [-36, 1], [-44, -17], [-3, -5], [-1, -31], [-118, -23], [-25, -59], [-14, -18], [-45, -43], [-29, -18], [-32, -10], [-17, -15], [-1, -18], [-9, -17], [-28, -26], [-14, -34], [-10, -5], [-51, -8], [-11, -11], [-5, -46], [-9, -1], [-19, 11], [-24, -9], [-53, -51], [-12, -18], [1, -10], [8, -10], [13, -31], [-1, -20], [-20, -58], [-8, -9], [-25, -14], [-10, -32], [-23, 4], [-19, -6], [-12, -21], [-14, -12], [-14, -4], [-18, -16], [-22, -31], [-20, -19], [-18, -9], [-18, -2], [-18, 5], [-16, -4], [-14, -11], [-13, -18], [-11, -50], [-14, -22], [-9, -4], [-17, 4], [-27, 10], [-28, -4], [-44, -30], [-14, -23], [28, -5], [14, -7], [-1, -7], [-14, -6], [-25, 1], [-14, -6], [-19, -13], [-45, -14], [-17, -10], [-34, -58], [-4, -13], [4, -3], [19, 6], [23, -10], [11, -12], [8, -15], [7, -29], [4, -4], [-43, -49], [-12, -21], [-8, -8], [-5, 6], [-6, 55], [-3, 9], [-10, 1], [-10, -17], [-22, -65], [-23, -32], [-178, -83], [-26, -19], [-5, -35], [-7, -31], [-12, -24], [-14, -16], [-3, 11], [1, 86], [-3, 18], [-18, 11], [-8, -2], [-11, -5], [-18, -18], [-10, -5], [-14, 1], [-23, -18], [-55, -59], [-36, -15], [-10, -12], [-15, -32], [-10, -12], [-15, -1], [-20, 10], [-16, -7], [-12, -24], [-13, -9], [-35, 17], [-15, -11], [-20, -31], [-21, -20], [-22, -9], [-56, -11], [-23, 7], [-5, 9], [1, 38], [9, 28], [9, 13], [11, 12], [17, 1], [31, -8], [-4, 9], [-11, 11], [-29, 19], [-28, 10], [-16, -6], [-23, -15], [-15, -17], [-8, -19], [-10, -63], [-6, -17], [-67, -111], [-26, -34], [-25, 2], [-13, -13], [-17, -27], [-17, -13], [-14, 1], [-12, 5], [-8, 9], [1, 9], [11, 8], [-4, 22], [-19, 37], [-13, 19], [-24, 3], [-4, -17], [8, -84], [-1, -19], [-15, -24], [-41, -27], [-12, 2], [-37, 53], [-34, 11], [-2, -17], [7, -36], [-8, -32], [-25, -31], [-19, -15], [-13, 1], [-1, 21], [12, 42], [3, 35], [-6, 28], [1, 22], [7, 15], [45, 41], [20, 7], [10, -11], [13, -1], [15, 6], [10, 14], [4, 19], [20, 26], [35, 31], [40, 57], [46, 83], [53, 72], [62, 60], [66, 48], [134, 66], [10, -4], [-12, -21], [8, -14], [13, -1], [49, 10], [20, 14], [6, -13], [-7, -17], [-30, -17], [1, -14], [43, -67], [13, -10], [12, 1], [4, 9], [-3, 48], [14, 9], [30, 2], [19, -6], [9, -15], [17, -12], [25, -10], [15, 3], [6, 16], [-10, 19], [-48, 40], [-13, 18], [-3, 23], [7, 31], [14, 45], [24, 60], [21, 42], [42, 47], [29, 23], [72, 72], [140, 73], [34, 47], [47, 52], [20, 13], [0, -20], [6, -18], [32, -12], [20, -4], [10, 4], [2, 19], [-4, 34], [-1, 33], [2, 30], [4, 24], [21, 43], [31, 49], [43, 57], [27, 26], [25, 14], [24, 25], [42, 58], [14, 10], [30, 11], [11, -5], [7, -14], [8, -10], [30, -8], [21, 13], [-4, 7], [-16, 5], [-11, 8], [-10, 35], [-20, 21], [-5, 24], [4, 37], [17, 87], [3, 90], [16, 51], [31, 19], [69, 13], [-40, 23], [-16, 0], [-26, 11], [-10, 56], [0, 40], [18, 47], [64, 80], [71, 55], [-10, 4], [-8, 17], [32, 110], [32, 98], [-43, -84], [-50, -64], [-145, -74], [-99, -63], [-47, -14], [-31, 15], [-24, 60], [-14, 22], [-18, 39], [8, 50], [14, 35], [31, 6], [34, -17], [31, -1], [-39, 34], [-56, 30], [-26, -9], [-19, -49], [-26, -34], [-23, 12], [-14, 14], [10, -41], [-18, -63], [-6, -43], [25, -115], [-5, -45], [-45, -21], [-37, 37], [-76, 145], [-27, 41], [-60, 69], [-20, -10], [-25, -34], [-24, -9], [-65, 50], [-30, 37], [-28, 46], [-44, -25], [-38, -30], [-44, -48], [-30, 0], [-81, -41], [-9, -1], [-11, -22], [-11, -10], [-10, -43], [-109, -33], [-108, 19], [38, 23], [42, 19], [37, 44], [-16, 60], [-3, 30], [1, 38], [40, 54], [-42, 0], [-27, -19], [-25, 40], [-12, 79], [29, 47], [13, 36], [12, 50], [1, 43], [-23, 72], [-63, 153], [-29, 115], [-50, 60], [37, 100], [41, 91], [54, 40], [-4, 6], [-30, 0], [-19, -5], [-18, -30], [-18, -22], [-56, -116], [-37, -56], [-23, -16], [38, -22], [6, -19], [7, -41], [-10, -51], [-10, -28], [-45, 2], [-40, -41], [-95, -44], [-128, -26], [-63, 3], [-65, 52], [0, 30], [3, 26], [-94, 90], [-54, 89], [-38, 2], [-33, 23], [-39, 37], [3, 30], [6, 21], [-24, 15], [-31, -2], [-36, 11], [94, 114], [32, 77], [27, 11], [34, -12], [47, -30], [40, -14], [14, -14], [15, -27], [-16, -45], [-14, -31], [17, 8], [50, 49], [37, 43], [17, -4], [12, -8], [20, -44], [25, -45], [56, 43], [30, 53], [-25, 24], [-31, 13], [-79, 19], [20, 15], [50, -2], [19, 15], [-20, 20], [-25, 18], [-68, -60], [-124, 3], [-87, 35], [-87, -6], [-13, 7], [-17, 19], [49, 45], [34, 25], [2, 14], [-20, 2], [-38, -12], [-17, 21], [3, 36], [-6, -4], [-15, -19], [-21, 10], [-18, 16], [9, 17], [19, 24], [-8, 3], [-17, -5], [-16, -31], [3, -25], [0, -36], [-28, -7], [-24, 5], [-17, 36], [-17, 78], [-48, 20], [-12, 39], [30, 51], [-13, 26], [-32, 8], [-37, -25], [-17, 22], [-3, 25], [-1, 36], [10, 3], [9, -7], [74, 20], [7, 10], [-59, 30], [-16, 31], [24, 18], [44, 2], [61, 19], [-25, 33], [-6, 18], [-5, 31], [10, 51], [72, 117], [71, 98], [22, 22], [32, 12], [30, -9], [31, -21], [6, 9], [-11, 9], [-13, 40], [43, 15], [26, 45], [2, 13], [-28, -18], [-29, -31], [-7, 31], [-7, 71], [12, 68], [10, 30], [24, 29], [69, 11], [13, -6], [2, 14], [-41, 42], [17, 34], [15, 17], [84, 27], [45, -9], [58, -31], [33, -39], [-5, -20], [-8, -12], [-17, -13], [-7, -10], [3, -8], [25, 24], [40, 28], [23, -12], [17, -23], [20, 1], [63, 19], [32, 20], [39, 53], [51, 34], [73, 108], [21, 44], [25, 7], [23, -4], [15, -37], [23, -10], [130, 9], [67, 16], [46, 35], [48, 59], [28, 40], [13, 52], [-17, 66], [-18, 56], [-23, 127], [-64, 83], [-46, 25], [-30, -3], [22, 53], [61, -6], [40, 11], [33, 26], [10, 19], [16, 40], [-5, 42], [-9, 23], [-22, 26], [-27, 37], [-18, 12], [-16, -1], [-78, -74], [-46, -2], [-35, 14], [-30, -42], [-85, -37], [-45, -38], [-84, -93], [-21, -43], [-26, -2], [-19, 82], [-91, 79], [-28, -27], [15, -25], [21, -17], [34, -8], [-15, -23], [-11, -32], [-34, 30], [-61, 43], [-63, 22], [-164, -3], [-108, -44], [-10, 9], [-10, 4], [-18, -11], [-8, -17], [-11, -12], [-22, -4], [-45, 7], [-85, 27], [-194, 41], [-50, 24], [-44, 59], [1, 40], [19, 17], [-1, 58], [-38, 15], [-77, 82], [-28, 35], [6, 4], [14, -9], [26, -7], [64, 11], [22, 53], [48, 16], [44, -8], [-10, 15], [-11, 11], [-114, 27], [-16, -8], [-205, 48], [-162, 84], [-13, 16], [-15, 36], [22, 35], [22, 17], [1, -20], [3, -19], [93, 45], [48, 58], [92, 10], [22, 16], [28, 31], [41, 54], [58, 28], [39, 25], [51, 15], [44, -25], [13, -3], [80, -5], [26, 11], [11, 8], [8, 12], [-78, 45], [8, 25], [10, 18], [91, 52], [70, 17], [37, -1], [108, 68], [59, 19], [112, 13], [92, 3], [25, -24], [-49, 5], [-22, -4], [15, -9], [18, -17], [-5, -22], [-31, -66], [3, -53], [-20, -17], [-19, -24], [94, -76], [146, -5], [79, 14], [45, -23], [38, -5], [103, 12], [78, -16], [33, 6], [72, 113], [28, 18], [31, -20], [40, -16], [25, 12], [21, -29], [-10, 61], [-14, 23], [-118, 41], [-78, -20], [-25, 23], [8, 47], [-84, 115], [-35, 24], [-42, 1], [-21, 40], [-18, 51], [36, 21], [33, 10], [30, -17], [33, -67], [32, -10], [-9, -68], [39, -62], [89, -57], [70, 21], [50, -1], [30, -12], [74, -52], [37, -6], [116, 27], [1, 51], [-9, 37], [-28, 23], [-78, -5], [-62, 38], [-52, -10], [-96, -58], [-48, 23], [-30, 31], [-49, 31], [-6, 60], [41, 69], [30, 32], [-27, 24], [-68, 17], [-119, -18], [-5, 24], [0, 25], [-48, -49], [-50, 10], [-66, -5], [-148, 43], [-52, 54], [-22, 43], [-40, 119], [-50, 75], [-351, 252], [-159, 64], [-77, 70], [-48, 17], [-46, 8], [-59, 22], [40, 28], [27, 10], [-28, -30], [21, -7], [35, 17], [18, 20], [27, 85], [28, 129], [-7, 51], [194, -10], [129, 8], [43, 12], [163, 20], [43, 14], [78, 43], [92, 77], [80, 101], [12, 27], [5, -7], [7, 5], [9, 38], [10, 90], [39, 85], [168, 193], [77, 77], [26, 35], [27, 25], [19, -24], [9, -7], [5, -11], [-16, -6], [-26, -25], [-36, -16], [-9, -9], [22, 2], [63, 18], [36, 22], [179, 41], [97, 66], [3, 15], [144, 84], [20, -4], [23, -10], [-40, -55], [28, -14], [-25, -66], [52, -1], [12, -30], [3, 26], [-1, 37], [4, 37], [8, 25], [36, -11], [83, 27], [-100, 4], [-60, 59], [-33, 1], [111, 87], [102, 53], [23, -1], [11, -10], [2, -16], [-22, -10], [-21, -19], [10, -16], [15, -3], [48, 14], [22, 17], [105, -2], [30, 13], [8, 12], [134, 2], [25, 9], [85, 46], [78, 57], [36, 31], [61, 79], [53, 51], [87, 51], [21, -6], [-28, -10], [-20, -22], [27, -29], [183, -59], [46, -4], [18, -35], [-15, -34], [-47, -38], [-95, -39], [29, -15], [19, -35], [28, -4], [46, 13], [35, 21], [74, 70], [24, 39], [17, 9], [62, -9], [35, -20], [40, -35], [-15, -34], [-16, -20], [52, -26], [57, -6], [55, -21], [77, 44], [60, 9], [57, -2], [73, 24], [125, -32], [31, 8], [50, -5], [53, -20], [19, -21], [-57, -44], [-9, -46], [20, -19], [36, -4], [4, -27], [23, -6], [112, 2], [-9, -13], [-5, -15], [-35, -34], [200, -20], [27, 19], [41, 8], [88, 26], [33, -12], [39, -26], [36, -6], [34, 6], [78, 38], [91, 2], [37, -13], [39, 6], [118, -44], [44, -5], [58, -57], [30, -1], [34, 24], [29, -1], [29, -23], [47, -7], [22, -37], [24, -13], [178, -27], [88, 13], [129, -4], [62, -17], [65, 2], [107, -63], [56, -9], [11, -15], [161, -15], [56, 33], [98, 8], [88, 28], [50, 0], [59, -7], [22, 3], [16, 12], [142, -47], [79, -55], [35, -40], [166, -57], [48, -32], [33, -36], [19, -3], [14, 10], [58, -3], [22, -5], [39, -9], [126, -19], [119, 11], [221, -61], [137, -114], [111, -57], [45, -38], [72, -34], [169, -75], [53, -7], [98, -36], [61, 5], [104, -9], [71, -28], [140, -79], [29, -7], [8, 6], [-49, 78], [-8, 7], [-56, 29], [-67, 14], [-5, 6], [-12, 27], [4, 11], [14, 5], [50, -1], [29, 5], [4, 11], [-21, 2], [-25, 11], [-30, 18], [-17, 17], [61, 115], [21, -11], [32, 26], [58, -17], [10, 10], [7, 58], [9, 14], [16, 11], [80, 10], [99, -10], [11, 5], [-10, 39], [-1, 16], [6, 35], [6, 18], [12, 10], [46, -8], [15, -17], [15, -30], [16, -17], [49, -17], [6, -11], [-19, -45], [-19, -24], [-41, -62], [-3, -16], [63, 28], [71, 38], [60, 22], [51, 4], [36, 12], [22, 21], [16, 22], [31, 70], [21, 12], [87, -4], [21, 2], [13, 7], [-2, 8], [-19, 11], [-25, 3], [0, 5], [9, 12], [14, 6], [42, 8], [29, -25], [19, -2], [63, 28], [98, 74], [39, 21], [34, 3], [29, -13], [22, 4], [29, 41], [12, 23], [17, 19], [73, 43], [46, 10], [29, -8], [33, -18], [28, -7], [37, 5], [27, -2], [13, 8], [47, 50], [15, 0], [14, -14], [24, -36], [0, -18], [-31, -44], [-225, -126], [-69, -54], [-34, -20], [-36, -11], [-69, -9], [-27, -11], [-46, -10], [-109, -17], [-21, -9], [-14, -10], [-39, -66], [-18, -22], [-38, -33], [-41, -20], [-58, -7], [-36, -31], [-42, -60], [-33, -42], [-39, -36], [-42, -46], [-11, -25], [13, -32], [7, -10], [42, -18], [16, 4], [-15, 17], [-35, 25], [-5, 9], [9, 7], [166, -19], [36, 19], [12, 16], [-2, 9], [-45, 3], [-10, 15], [-7, 29], [-2, 23], [4, 17], [10, 22], [49, 35], [52, 15], [40, 20], [22, 19], [60, 32], [23, 27], [13, 20], [2, 10], [-11, 7], [9, 18], [43, 16], [20, 1], [61, -15], [11, -12], [-6, -31], [8, 2], [24, 39], [13, 13], [14, 3], [13, -5], [14, -13], [8, -38], [1, -63], [3, -25], [16, 43], [11, 20], [59, 93], [40, 51], [46, 50], [65, 37], [152, 61], [85, 17], [43, 15], [21, 13], [14, 17], [24, 19], [4, -2], [-9, -39], [-6, -12], [-56, -24], [-5, -19], [6, -29], [9, -19], [13, -9], [23, 6], [33, 23], [41, 34], [89, 86], [8, 16], [22, 69], [51, 31], [92, 35], [22, 22], [-80, 19], [-17, 13], [-3, 8], [15, 19], [-36, 20], [-14, 12], [1, 36], [11, 25], [24, 24], [14, 5], [36, -15], [30, -18], [104, -85], [42, -42], [25, -33], [58, -102], [26, -59], [21, -61], [21, -44], [20, -27], [100, -107], [52, -45], [44, -28], [49, -22], [57, -16], [38, -2], [60, 46], [1, 29], [-26, 50], [-27, 35], [4, 21], [35, 40], [-3, 14], [8, 42], [24, -8], [10, 1], [13, 15], [17, 29], [22, 24], [27, 19], [7, 12], [-26, 9], [-16, 0], [-12, 4], [-8, 8], [11, 9], [57, 22], [11, 22], [19, 14], [23, 5], [15, -6], [16, -17], [1, -28], [-7, -46], [-2, -37], [18, -87], [16, -19], [63, -25], [-4, -22], [-72, -91], [-16, -23], [-7, -17], [2, -14], [13, -12], [24, -9], [63, -3], [18, 8], [122, 3], [22, 6], [19, 18], [28, 44], [31, 14], [10, 12], [19, 52], [10, 61], [9, 26], [14, 16], [19, 5], [48, -6], [22, 5], [88, -5], [88, 4], [92, -11], [58, -12], [54, -20], [104, -46], [41, -26], [145, -113], [43, -23], [79, -22], [274, -49], [34, -13], [72, -51], [50, -30], [59, -29], [73, -25], [144, -37], [24, -13], [26, -3], [30, 5], [132, -22], [35, 1], [25, -4], [31, -15], [45, -6], [-2, 11], [-51, 59], [2, 9], [21, 1], [64, -10], [15, 17], [21, -1], [49, -8], [53, -18], [56, -28], [68, -24], [104, -60], [57, -50], [55, -62], [29, -43], [6, -24], [11, -12], [17, 0], [7, -9], [-16, -53], [-9, -14], [-12, -9], [-49, -11], [-136, 13], [-25, -43], [-76, -37], [-13, -16], [-4, -11], [6, -38], [-10, -12], [-62, -43], [-2, -12], [40, -18], [43, -30], [34, -7], [43, 4], [54, -11], [65, -25], [45, -12], [25, 2], [35, -4], [44, -12], [59, -4], [129, 1], [39, -8], [54, -4], [105, 1], [19, 1], [33, 21], [22, 6], [38, 1], [108, 14], [38, 0], [34, 11], [45, 23], [27, 4], [10, -14], [19, -6], [27, 2], [52, 23], [120, 71], [43, 0], [32, 22], [8, 0], [8, -9], [30, -52], [9, -8], [20, -4], [20, -27], [20, -39], [16, -11], [113, -2], [39, -11], [12, -11], [13, -31], [7, -60], [5, -22], [16, -33], [11, -9], [10, 9], [28, 84], [10, 13], [18, -4], [6, -5], [28, -62], [40, -46], [100, -84], [16, -31], [6, -23], [-6, -21], [-17, -18], [-27, -15], [-37, -11], [-34, 4], [-32, 19], [-10, 1], [11, -17], [66, -70], [17, -28], [16, -18], [14, -10], [13, -15], [12, -21], [55, -56], [16, -27], [62, -84], [30, -33], [23, -19], [8, -1], [-5, 15], [-79, 111], [-41, 70], [-5, 17], [-3, 26], [-2, 85], [6, 13], [28, 11], [35, -39], [13, -5], [9, 2], [5, 10], [20, -9], [36, -29], [12, 0], [-27, 54], [-19, 27], [-7, 19], [18, 28], [-10, 14], [-45, 41], [-24, 42], [-21, 65], [-2, 25], [3, 26], [-3, 22], [-29, 43], [-31, 30], [-24, 35], [-5, 19], [3, 50], [19, 21], [36, 29], [9, 30], [-16, 31], [-3, 14], [10, -2], [70, 15], [18, -5], [26, 6], [35, 19], [28, 9], [36, -2], [20, 5], [24, 8], [13, 9], [22, 36], [12, 6], [37, -4], [21, -8], [9, 3], [-1, 50], [7, 18], [37, 37], [39, 4], [25, 10], [30, 20], [21, 19], [21, 29], [9, 38], [-7, 11], [-44, 15], [-26, -8], [-59, -27], [-61, -34], [-24, -33], [-6, -41], [-12, -18], [-47, 17], [-21, 0], [-25, -7], [-27, -16], [-29, -25], [-42, -4], [-56, 15], [-33, 5], [-34, -26], [2, -20], [15, -28], [-15, -17], [-82, -6], [-21, 4], [-44, -12], [-17, 3], [-12, 13], [-89, 58], [-9, 11], [22, 47], [82, 126], [9, 8], [152, 22], [91, 23], [169, 69], [32, 6], [108, 46], [45, 12], [41, -8], [60, -24], [32, -21], [22, -26], [18, -37], [23, -81], [8, -69], [14, -26], [51, -48], [26, -18], [16, -6], [14, 11], [9, 2], [7, -4], [7, -31], [9, -3], [30, 4], [32, -12], [5, -10], [-7, -37], [9, -16], [40, -34], [37, -12], [44, -6], [81, 6], [68, 16], [51, 26], [42, -29], [84, -71], [50, -51], [41, -23], [84, -29], [19, -15], [31, -2], [43, 12], [48, -5], [54, -21], [37, -9], [127, 40], [20, 2], [47, 19], [31, 6], [36, 0], [27, 5], [17, 13], [68, -1], [122, -14], [84, -17], [49, -23], [41, -12], [32, -3], [31, 4], [30, 11], [32, 20], [68, 11], [11, 5], [-1, 11], [-14, 17], [-39, 32], [-27, 31], [-5, 20], [1, 24], [8, 14], [16, 4], [26, -15], [34, -34], [98, -126], [24, -17], [13, -17], [90, -45], [42, -9], [50, 29], [22, 17], [11, 17], [0, 17], [4, 24], [-5, 14], [-13, 20], [-36, 26], [-59, 34], [-53, 10], [-48, -14], [-55, -29], [-23, 12], [-68, 81], [-17, 31], [0, 8], [31, -9], [2, 9], [-19, 40], [-12, 13], [-39, 62], [-5, 18], [24, 5], [11, 7], [15, -1], [70, -37], [35, 17], [83, 23], [-33, 36], [-7, 35], [3, 8], [27, 5], [53, -29], [25, -4], [19, 11], [19, 1], [21, -10], [19, -15], [37, -43], [17, -26], [20, -39], [7, -6], [97, -3], [54, 35], [-1, -12], [-12, -27], [-68, -105], [1, -13], [36, 6], [17, 8], [10, 13], [9, 29], [6, 9], [101, 49], [29, 8], [-18, -53], [-37, -188], [-8, -65], [-8, -23], [-40, -72], [1, -25], [43, -61], [8, -17], [4, -50], [8, -9], [36, -1], [37, 16], [44, 11], [7, -11], [-24, -60], [1, -6], [42, 16], [19, 2], [8, -3], [31, -31], [3, -23], [0, -35], [-3, -24], [-11, -14], [-13, -6], [-16, -4], [-14, 2], [-44, -5], [-26, 6], [-25, 19], [-18, 5], [-21, -15], [-34, 3], [-37, 41], [-15, -4], [-5, -6], [0, -9], [17, -27], [132, -143], [20, -29], [4, -43], [3, 0], [12, 43], [-8, 20], [-67, 83], [-9, 31], [3, 8], [18, 9], [96, -21], [38, 4], [25, 15], [13, 18], [9, 99], [17, 63], [-10, 57], [-26, 90], [-21, 54], [-47, 53], [-5, 20], [53, 163], [9, 14], [12, 6], [42, 2], [30, 14], [47, -19], [26, -5], [33, 17], [72, 69], [28, 21], [36, 40], [43, 59], [48, 43], [76, 40], [47, 32], [10, 12], [-44, 2], [-10, 6], [-9, 30], [4, 57], [-1, 31], [-5, 28], [-9, 25], [-14, 23], [-13, 13], [-11, 4], [-8, -2], [-4, -8], [-12, -54], [-15, -39], [-20, -21], [-43, -14], [-72, -10], [-30, 19], [-4, 16], [10, 62], [25, 27], [66, 53], [42, 42], [1, 7], [-39, 1], [-9, 8], [-9, 52], [3, 20], [6, 22], [27, 16], [84, 20], [65, 23], [2, -8], [-52, -70], [-5, -16], [20, -16], [50, 41], [32, 34], [6, 11], [-30, 4], [-1, 14], [5, 26], [-2, 17], [-33, 22], [-40, -12], [-34, -23], [-28, -7], [-41, 0], [-30, 5], [-18, 11], [-23, 25], [-26, 38], [-33, 38], [-12, 4], [-10, -4], [-22, -37], [-9, -4], [-130, 52], [-56, 28], [-26, 22], [-34, 13], [-39, 4], [-32, 11], [-24, 16], [-19, 23], [-15, 31], [-27, 38], [-62, 77], [-16, 49], [-2, 19], [4, 49], [58, 82], [10, 24], [20, 17], [29, 11], [21, 4], [47, -11], [-28, 26], [-3, 13], [29, 45], [-6, 2], [-78, -34], [-20, 2], [-28, 21], [-52, 75], [-1, 47], [17, 65], [5, 38], [-15, 33], [6, 10], [16, 9], [7, 10], [-7, 36], [11, 20], [38, 38], [36, 33], [22, 10], [19, -2], [19, -10], [21, -19], [34, -19], [26, -5], [19, 10], [33, 71], [11, 18], [-11, 8], [-63, 0], [-28, 5], [-16, 7], [-11, 27], [9, 15], [62, 50], [29, 53], [86, 73], [87, 34], [43, 11], [34, 3], [15, -5], [18, -36], [4, -39], [47, -48]], [[27574, 82227], [-19, -8], [-58, 16], [-24, 11], [-71, 41], [-135, 61], [-46, 31], [-10, 22], [25, 48], [13, 19], [15, 12], [143, 22], [55, -11], [65, -97], [38, -66], [15, -52], [0, -26], [-6, -23]], [[29549, 90889], [-135, -1], [-74, 4], [-29, 9], [-26, 13], [-29, 45], [-19, 45], [-1, 20], [5, 17], [7, 11], [91, 15], [74, -19], [64, -22], [83, -4], [25, -9], [9, -6], [7, -11], [9, -53], [1, -28], [-2, -21], [-60, -5]], [[28367, 88404], [24, -25], [24, 2], [14, -20], [32, -63], [3, -10], [-1, -21], [-17, -26], [-18, -13], [-37, -20], [-42, -9], [-23, 14], [-64, 58], [-59, 68], [-19, 38], [8, 16], [25, 11], [51, 11], [83, -6], [16, -5]], [[27222, 88107], [11, -17], [3, -24], [-4, -32], [-7, -30], [-10, -27], [-25, -44], [-76, -77], [-28, -42], [-22, -25], [-124, -111], [-16, -6], [-16, 2], [-34, 17], [-34, 3], [-90, -45], [-4, 8], [-4, 48], [-9, 27], [-40, 57], [-2, 13], [0, 16], [3, 13], [45, 54], [101, 193], [24, 10], [49, -22], [24, -7], [17, 1], [72, 41], [68, -5], [63, 24], [29, 0], [23, -4], [13, -9]], [[27904, 87794], [22, -16], [36, -52], [14, -26], [4, -36], [-10, -48], [-5, -44], [-13, -34], [-25, -42], [-22, -50], [-20, -56], [-15, -38], [-13, -18], [-14, -10], [-14, -1], [-23, 21], [-30, 42], [-24, 25], [-31, 18], [-17, 23], [-3, 23], [-1, 76], [1, 37], [4, 32], [7, 25], [16, 34], [44, 75], [26, 29], [16, 7], [43, -6], [18, 2], [14, 9], [15, -1]], [[20956, 96279], [-43, -10], [-84, 23], [-56, 10], [-45, 42], [-49, 57], [-39, 62], [-14, 37], [-28, 22], [-10, 36], [-51, 57], [8, 9], [48, 8], [77, -11], [36, -20], [47, -34], [60, -54], [18, -24], [4, -33], [11, -17], [51, -4], [63, -43], [12, -17], [13, -34], [-1, -16], [-10, -34], [-18, -12]], [[23476, 96654], [70, -22], [76, 11], [81, 2], [182, -10], [120, 6], [31, -3], [47, -14], [25, -18], [23, -28], [-59, -18], [-50, -89], [-7, -5], [-54, -1], [-27, -7], [-159, 13], [-438, 5], [-19, 11], [-58, 53], [-4, 21], [11, 24], [12, 16], [14, 8], [128, 39], [55, 6]], [[22558, 97915], [6, -75], [-6, -38], [-14, -28], [-12, -7], [-17, 0], [-76, 21], [-23, 13], [-1, 11], [-8, 21], [-50, 27], [-95, -4], [-40, 3], [-16, 8], [-10, 12], [-9, 47], [2, 17], [11, 29], [7, 7], [70, 27], [20, 2], [85, -10], [75, -1], [38, -7], [34, -17], [20, -26], [9, -32]], [[25046, 96352], [-73, -33], [-37, 1], [-212, 67], [-43, 33], [-8, 23], [-2, 32], [0, 43], [9, 30], [12, 10], [25, 10], [49, 7], [46, -4], [70, -12], [70, -19], [92, -60], [34, -28], [7, -37], [0, -22], [-5, -17], [-10, -10], [-24, -14]], [[24016, 95061], [18, -43], [3, -18], [1, -37], [-8, -49], [-5, -9], [-7, -4], [-4, -13], [0, -21], [-7, -12], [-15, -5], [-99, -10], [-62, 2], [-91, -6], [-45, 3], [-30, 11], [-43, 22], [-91, 55], [-45, 2], [-116, 19], [-63, 58], [-24, 11], [-25, -18], [-7, 4], [-6, 12], [-7, 20], [-12, 10], [-48, -5], [-9, 6], [-2, 18], [0, 15], [9, 23], [51, 65], [25, 5], [31, 12], [17, 35], [-2, 33], [48, 49], [28, 15], [51, 34], [172, 54], [48, 4], [63, -4], [62, -17], [47, -28], [97, -70], [44, -43], [23, -43], [21, -25], [26, -54], [-9, -21], [-6, -28], [3, -14]], [[19495, 97148], [49, -34], [17, 1], [21, -6], [10, -9], [29, -43], [6, -21], [2, -27], [-5, -23], [-10, -19], [-27, -11], [-62, -8], [-87, 11], [-75, -14], [-35, -2], [-93, 9], [-24, 7], [-52, 26], [-40, 11], [-16, -6], [-20, -23], [-37, -28], [-23, -7], [-68, 4], [-103, 48], [-118, -14], [-123, -28], [-48, -5], [-14, 8], [-19, 21], [3, 11], [36, 32], [82, 33], [60, 19], [118, 28], [141, 15], [52, 17], [33, 23], [92, 37], [53, 16], [73, 13], [58, -1], [74, -30], [56, -15], [34, -16]], [[17131, 95379], [-79, -37], [-57, 4], [-75, 27], [-61, 10], [-21, 9], [-3, 9], [20, 26], [26, 21], [62, 41], [105, 78], [69, 30], [67, 21], [69, 47], [38, 21], [33, 2], [33, -9], [4, -13], [-35, -64], [-25, -26], [-49, -67], [-93, -112], [-28, -18]], [[20753, 93847], [-14, -3], [-26, 14], [-39, 29], [-63, 60], [-75, 59], [-12, 36], [-19, 26], [-96, 63], [-62, 26], [-48, 13], [-7, 17], [33, 51], [37, 41], [23, 15], [70, 13], [236, 27], [54, 1], [56, -13], [78, -56], [32, -6], [20, -13], [17, -21], [9, -21], [0, -44], [-8, -64], [-11, -25], [-47, -82], [-49, -46], [-10, -29], [-20, -23], [-35, -29], [-24, -16]], [[22221, 94438], [235, -123], [33, 10], [71, 6], [73, 19], [102, 15], [63, 27], [26, 8], [45, 5], [25, 0], [70, -15], [29, -11], [15, -11], [16, -19], [28, -49], [4, -18], [-1, -5], [-26, -30], [-17, -13], [-36, -12], [-30, -4], [-27, -21], [-29, 5], [-9, -19], [4, -12], [8, -6], [15, 1], [17, 8], [33, -4], [18, -13], [15, -21], [-11, -20], [-59, -27], [-87, -31], [-105, -98], [-56, -41], [-11, -13], [-6, -13], [2, -24], [2, -10], [16, -4], [51, 34], [34, 16], [33, 9], [60, 0], [25, -5], [44, -20], [41, -32], [9, -11], [-4, -11], [-17, -12], [-2, -8], [39, -15], [43, -43], [3, -26], [-19, -26], [-5, -18], [9, -8], [21, 5], [51, 29], [55, 15], [22, -2], [14, -6], [14, -40], [12, -45], [2, -37], [-9, -31], [-13, -23], [-33, -30], [-30, -11], [-16, 0], [2, -5], [35, -25], [15, -19], [6, -19], [-2, -18], [-5, -16], [-41, -57], [2, -9], [12, -3], [26, -33], [3, -78], [-93, -24], [-22, -18], [-25, -28], [-29, -22], [-67, -22], [-33, -3], [-167, 19], [-17, 11], [-11, 19], [-7, 29], [-1, 22], [2, 16], [0, 9], [-5, 3], [-19, -16], [-19, -29], [11, -33], [52, -91], [10, -39], [2, -16], [-3, -13], [-59, -53], [-34, -18], [-36, -9], [-33, 7], [-32, 22], [-24, 10], [-51, -1], [-15, 11], [-15, 22], [-35, 76], [-50, 54], [-42, 61], [-108, 89], [-56, 53], [-75, 86], [-31, 19], [-26, 8], [-51, 6], [-12, 11], [-19, 29], [-32, 22], [-11, 3], [-19, -6], [-50, -20], [-63, 22], [-14, 15], [-8, 25], [-8, 14], [-21, 13], [-18, 31], [-119, 63], [-71, 72], [-14, 26], [-2, 10], [7, 35], [17, 39], [21, 39], [14, 16], [46, 33], [37, 8], [51, -4], [27, -8], [24, -22], [11, -26], [12, -18], [38, -19], [20, -15], [30, -36], [24, -43], [21, -14], [52, -5], [53, 7], [114, 27], [5, 4], [7, 16], [13, 98], [8, 0], [39, -45], [11, -5], [16, 9], [10, 23], [-1, 10], [-24, 53], [-15, 23], [-13, 15], [-14, 4], [-31, -4], [-24, 10], [-5, 15], [4, 19], [13, 21], [14, 12], [27, 6], [32, -6], [44, -25], [28, -6], [40, 7], [-51, 15], [-70, 58], [-30, 11], [-36, -25], [-25, -9], [-47, -12], [-37, -2], [-156, 89], [-9, 9], [-11, 23], [1, 11], [16, 17], [38, 22], [58, 13], [39, 3], [34, -17], [49, -44], [43, -26], [4, 9], [-8, 26], [-20, 38], [-14, 10], [-34, 11], [-33, 26], [-15, 20], [-8, 20], [-1, 22], [7, 15], [13, 8], [120, 22], [83, -24], [53, -4], [22, 30], [-7, 6], [-28, -8], [-32, 0], [-19, 17], [-1, 9], [25, 23], [37, 10]], [[26411, 89435], [10, -7], [11, 4], [20, 29], [44, 82], [13, 7], [18, -1], [65, -52], [24, -30], [13, -41], [14, -16], [51, -21], [49, -7], [65, -21], [23, -16], [51, -78], [6, -5], [59, -32], [89, -72], [23, -10], [87, -24], [32, -17], [30, -27], [34, -49], [39, -77], [31, -123], [2, -24], [-3, -14], [-12, -16], [-50, -50], [4, -9], [48, 4], [105, 31], [65, -23], [22, -3], [5, 1], [24, 39], [25, -6], [38, -38], [24, -30], [10, -23], [-2, -13], [-25, -5], [60, -22], [53, -35], [-11, -23], [-57, -51], [-57, -45], [-67, -66], [-17, -11], [-9, 0], [-37, 12], [-54, 32], [-164, 73], [-51, 15], [-64, 9], [-9, 17], [-16, 110], [-29, 19], [-99, 23], [-29, 13], [-2, 22], [7, 38], [-14, 19], [-33, -1], [-33, -8], [-53, -26], [-25, -24], [-9, -25], [-6, -55], [-7, -26], [-18, -35], [-82, -88], [-33, -27], [-33, -7], [-13, -9], [-22, -32], [-33, -80], [-14, -23], [-21, -24], [-46, -36], [-46, -29], [-77, -33], [-42, -11], [-29, 11], [-20, 76], [-41, 223], [-7, 15], [-8, 9], [-10, 4], [-138, -29], [-76, 3], [-75, -50], [-19, -3], [-39, 1], [-27, 8], [-7, 6], [-5, 21], [2, 23], [9, 25], [34, 66], [28, 41], [13, 13], [129, 74], [31, 24], [16, 25], [0, 25], [-6, 33], [-23, 80], [-5, 73], [0, 36], [8, 55], [33, 135], [11, 66], [20, 234], [11, 67], [16, 62], [15, 37], [42, 73], [31, 30], [41, 20], [8, -2], [8, -9], [15, -31], [56, -29], [18, -28], [12, -31], [7, -40], [-7, -18], [-26, -27], [-5, -11], [1, -9], [51, -42], [38, -102]], [[28979, 91199], [145, -51], [14, -19], [7, -16], [4, -19], [0, -38], [-3, -15], [-14, -36], [-1, -12], [11, -123], [-1, -67], [-10, -56], [-21, -45], [-31, -34], [-24, -20], [-105, -48], [-75, -12], [-79, -2], [-100, -13], [-46, 3], [-24, 5], [-17, 10], [-19, 30], [-23, 51], [-18, 58], [-23, 102], [0, 12], [21, 83], [29, 56], [50, 82], [57, 81], [14, 14], [26, 14], [64, 23], [54, -6], [23, 3], [29, 10], [33, 3], [53, -8]], [[27906, 94270], [47, -7], [300, 14], [63, -11], [189, -64], [48, -21], [25, -28], [21, -45], [10, -10], [69, -26], [28, -32], [10, -17], [14, -38], [31, -22], [36, -12], [11, -11], [-5, -48], [15, -22], [33, -27], [13, -18], [-26, -22], [-61, -13], [-170, 13], [-228, 31], [-133, -9], [-67, -14], [-161, -49], [-51, -8], [-51, -1], [-89, 40], [-32, 22], [-11, 16], [-21, 49], [-17, 58], [-9, 48], [-10, 37], [-31, 12], [-90, 14], [-30, 20], [-14, 17], [-13, 27], [0, 27], [7, 25], [6, 6], [11, 1], [-25, 29], [-9, 33], [-1, 46], [4, 29], [7, 13], [17, 8], [39, 5], [58, -1], [81, -33], [64, -4], [98, -27]], [[22861, 95890], [3, -26], [-4, -19], [-9, -14], [-1, -17], [9, -18], [37, -45], [12, -25], [2, -25], [-2, -17], [-23, -32], [-10, -43], [-1, -22], [14, -35], [0, -16], [-26, -28], [-54, -25], [8, -13], [117, -30], [9, -7], [0, -70], [20, -76], [-8, -1], [-28, 24], [-52, 28], [-63, -53], [7, -90], [42, -40], [12, -23], [-4, -13], [-35, -6], [-12, 2], [-35, 19], [-21, 27], [-7, -1], [-6, -13], [4, -14], [24, -24], [11, -29], [-11, -8], [-36, -8], [-48, 0], [-76, -13], [-38, -2], [-36, 7], [-49, 1], [-41, -3], [-24, 6], [-23, 14], [-26, -3], [-57, -35], [-89, 11], [-80, 3], [-16, 11], [-18, 23], [-35, 70], [6, 18], [86, 9], [2, 6], [-61, 25], [-70, 18], [-32, 15], [7, 27], [-2, 7], [120, 32], [88, 62], [54, 25], [4, 12], [46, 13], [106, 7], [4, 18], [-200, -10], [-274, -35], [-85, -18], [-71, 10], [-300, -54], [-13, 0], [-31, 17], [-27, 33], [19, 22], [88, 43], [44, 37], [-5, 21], [35, 35], [56, 5], [96, -29], [49, -29], [45, -14], [39, 3], [41, 20], [-11, 3], [-69, -11], [-8, 3], [-35, 33], [-15, 20], [-10, 21], [-1, 15], [21, 28], [-79, 9], [-29, 19], [-14, 24], [3, 11], [25, 28], [67, 39], [-8, 10], [-97, -1], [-22, 5], [-42, 24], [9, 27], [39, 39], [30, 23], [19, 7], [31, 0], [73, -15], [21, -8], [56, -38], [14, -21], [-2, -21], [11, -15], [43, -22], [186, -115], [35, -27], [23, -12], [43, -9], [26, 2], [20, 8], [3, 10], [-80, 40], [-20, 22], [-17, 29], [7, 9], [24, 4], [58, -4], [69, 8], [-76, 12], [-50, 16], [-52, 1], [-64, 26], [0, 8], [16, 9], [87, 11], [17, 5], [1, 7], [-29, 18], [-26, 9], [-132, 21], [-47, 24], [-15, 11], [-4, 11], [17, 28], [71, 35], [51, 17], [89, 12], [71, -1], [40, -5], [94, -59], [45, -39], [77, 7], [-22, 40], [-15, 45], [23, 17], [64, 29], [51, -15], [66, -40], [15, -13], [75, -25], [44, -8], [23, -13], [7, -17]], [[21270, 97531], [65, -11], [77, -37], [73, -79], [4, -10], [0, -13], [-3, -16], [-9, -21], [-13, -12], [37, -15], [4, -8], [-3, -17], [4, -12], [23, 12], [19, 19], [5, 12], [4, 32], [57, 17], [60, 23], [28, 5], [47, -5], [112, -56], [43, -5], [16, -7], [14, -13], [1, -14], [-23, -32], [-9, -20], [6, -13], [58, -11], [134, 22], [117, -53], [65, -63], [47, -21], [8, -11], [-14, -11], [-13, -29], [-39, -22], [-8, -10], [21, -26], [1, -17], [-2, -22], [7, -13], [53, -14], [119, -93], [22, -26], [14, -32], [1, -11], [-17, -18], [-19, -51], [-10, -12], [-49, -10], [-88, -9], [-83, -17], [-88, 22], [-87, 34], [-26, 22], [-22, 28], [-5, 10], [-9, 44], [-4, 9], [-37, 24], [-32, 37], [-63, 3], [-147, 38], [-63, 8], [-64, -2], [-89, -15], [-17, 4], [-15, 11], [-14, 18], [-3, 14], [14, 23], [-262, -29], [-75, -35], [-105, 6], [-53, 14], [-69, 33], [-32, 29], [-30, 38], [-3, 29], [24, 20], [25, 11], [26, 4], [142, -23], [125, -11], [54, 11], [25, 32], [-30, 16], [-120, 7], [26, 17], [101, 16], [53, 26], [-10, 8], [-30, 10], [-137, -2], [-48, 9], [-3, 9], [11, 10], [77, 51], [-3, 10], [-33, 16], [-29, 22], [-11, 3], [-68, -20], [-95, -75], [-22, -11], [-22, 1], [-21, 12], [1, 16], [21, 19], [44, 58], [-4, 21], [-42, 14], [-114, -10], [-63, -1], [-9, 17], [-3, 30], [3, 29], [15, 45], [22, 35], [13, 12], [151, -7], [245, 21], [71, 2], [78, -21]], [[24476, 98578], [36, -48], [134, -115], [61, -42], [103, -51], [13, -19], [1, -8], [-3, -28], [30, -10], [88, -16], [99, -28], [18, 1], [34, 17], [42, 5], [54, -4], [26, -12], [19, -18], [8, -13], [1, -10], [-19, -19], [2, -8], [12, -8], [2, -11], [-20, -41], [5, -15], [50, -37], [45, -19], [89, -20], [58, 2], [36, -13], [1, 8], [-17, 23], [-34, 34], [-65, 18], [-9, 19], [-5, 34], [6, 22], [33, 18], [27, 6], [84, 1], [45, -8], [80, -25], [8, -14], [4, -27], [3, -54], [-2, -12], [-67, -30], [-15, -21], [17, -6], [58, -5], [90, -19], [35, -2], [35, -44], [27, -41], [-20, -52], [-26, -82], [-21, -19], [-21, -28], [15, -6], [88, 12], [18, 4], [59, 28], [86, -7], [29, -7], [15, -10], [26, -31], [22, -41], [16, 3], [40, 51], [15, 12], [20, 12], [9, -2], [40, -47], [91, -82], [31, -34], [6, -26], [-39, -29], [-30, -15], [-223, -62], [-99, -35], [-50, -28], [-25, -9], [-54, 5], [-12, -5], [-16, -44], [-18, -19], [-46, -30], [-65, -55], [-38, -24], [-68, 18], [-17, 25], [-10, 58], [-1, 24], [2, 13], [9, 20], [29, 49], [-3, 6], [-14, -5], [-45, -24], [-18, -13], [-16, -23], [-8, -38], [7, -70], [-6, -28], [-18, -14], [7, -11], [53, -15], [9, -7], [6, -12], [3, -17], [-3, -16], [-16, -25], [-30, -10], [-38, 11], [-82, 61], [-36, -3], [-9, -7], [8, -22], [25, -48], [5, -41], [-12, -33], [-23, -53], [-16, -29], [-9, -3], [-41, -1], [-35, 14], [-104, 93], [-51, 39], [-76, 78], [-19, 15], [-12, 4], [-10, -33], [20, -31], [68, -72], [41, -53], [29, -43], [4, -19], [-9, -7], [-15, 4], [-20, 16], [-62, 25], [-26, 15], [-16, 16], [-31, 13], [-45, 8], [-45, 2], [-45, -5], [-8, -8], [50, -23], [18, -12], [13, -17], [9, -19], [-17, -13], [-63, -7], [-84, 5], [-137, 17], [-136, 28], [-125, 44], [-91, 44], [-36, 23], [-11, 17], [34, 16], [119, 19], [119, 13], [-19, 11], [-217, 25], [-71, 4], [-38, -6], [-44, 4], [-34, 20], [-45, 37], [-23, 25], [3, 10], [17, 5], [99, -4], [13, 3], [-49, 19], [-157, 37], [-59, 33], [-11, 12], [-4, 13], [1, 12], [59, 25], [183, 59], [62, 9], [63, 1], [44, 16], [38, 56], [189, 20], [146, 25], [12, 7], [-109, -4], [-155, 5], [-65, 37], [-45, 7], [-49, 0], [-57, -12], [-98, -35], [-47, -9], [-107, -36], [-29, 3], [-15, 4], [-5, 7], [19, 24], [28, 17], [-5, 5], [-42, 4], [-48, -1], [-34, -6], [-122, -32], [-55, -23], [-17, -3], [-59, 38], [-95, 20], [-21, 16], [20, 63], [27, 13], [73, 11], [217, 57], [13, 11], [20, 29], [-50, -7], [-109, -27], [-90, -14], [-71, 0], [-51, 4], [-33, 8], [-40, 17], [-128, 83], [-36, 39], [-4, 36], [-9, 26], [-38, 65], [276, -40], [107, -8], [208, -2], [10, 3], [3, 11], [-4, 17], [2, 13], [7, 9], [77, 23], [12, 8], [-91, 4], [-168, -39], [-59, 0], [-67, 56], [-71, -10], [-34, 4], [-53, 14], [-26, 12], [-16, 15], [-7, 13], [2, 10], [14, 12], [62, 16], [28, 1], [73, -10], [55, 1], [-18, 17], [-79, 43], [-70, 47], [5, 80], [57, 17], [60, 2], [58, -20], [77, -2], [56, -23], [37, -44], [44, 1], [69, -8], [155, 1], [-28, 15], [-49, 14], [-109, 18], [-53, 63], [-114, 33], [-88, 17], [1, 15], [67, 79], [80, 28], [128, -10], [85, 14], [108, 28], [106, -13], [28, 2], [16, 8], [14, 17], [0, 15], [-14, 14], [-34, 17], [-135, 2], [-60, 7], [-23, 9], [-7, 14], [-4, 14], [0, 15], [4, 9], [11, 5], [33, 6], [126, 0], [76, 8], [83, -10], [173, -39], [55, -20], [60, -34], [31, -30]], [[23807, 96147], [52, -5], [44, 8], [38, -2], [56, -23], [53, -36], [40, -16], [13, -8], [5, -9], [6, -27], [0, -12], [-3, -10], [-18, -25], [-15, -30], [-30, -27], [-16, -20], [-14, -26], [31, 15], [119, 85], [77, -10], [117, 7], [141, 35], [67, 5], [67, -3], [50, -10], [108, -47], [37, -22], [14, -16], [3, -11], [-22, -18], [-67, 11], [-111, 10], [-20, 5], [-18, 0], [-12, -6], [8, -25], [22, -5], [133, -6], [436, -78], [19, -25], [-5, -11], [-16, -12], [-31, -17], [-252, -18], [-143, 16], [-120, 26], [-41, -6], [35, -35], [72, -10], [61, -21], [25, -17], [128, -13], [21, -13], [40, -34], [33, -3], [33, -24], [27, -41], [13, -5], [39, 7], [64, -36], [21, -19], [0, -14], [-15, -22], [-29, -31], [-73, -35], [-6, -11], [86, 4], [16, -5], [101, -63], [13, -1], [8, 6], [10, 23], [-4, 21], [-13, 28], [4, 21], [19, 13], [19, 7], [19, 0], [21, -8], [102, -77], [131, 37], [24, -17], [20, -30], [9, -5], [49, 61], [30, 15], [123, -73], [75, -16], [30, -15], [55, -18], [79, -6], [13, 27], [-45, 35], [26, 15], [109, 29], [58, -4], [107, 42], [66, 5], [40, 0], [133, 63], [31, 10], [23, 22], [52, -3], [141, -36], [40, 3], [150, 36], [56, 8], [55, -1], [141, -21], [105, -22], [33, -12], [-12, -29], [6, -9], [13, -7], [35, -8], [131, -1], [57, -7], [46, -28], [10, -11], [-1, -11], [-45, -30], [7, -7], [45, -6], [100, -4], [22, -7], [21, -37], [21, -52], [0, -20], [-35, -35], [-95, -46], [-106, -39], [-7, -10], [34, -18], [35, -9], [27, 2], [85, 18], [19, -1], [38, -18], [18, -17], [17, -24], [-30, -22], [-121, -27], [-72, 36], [-24, 7], [-16, -3], [9, -15], [35, -28], [11, -18], [-12, -9], [-6, -18], [1, -26], [-3, -27], [-11, -42], [-5, -2], [-263, -8], [-32, -8], [-74, -29], [-56, -15], [-36, -2], [-36, 5], [-96, 31], [-64, -6], [-25, 3], [-55, 20], [-13, 10], [-22, 27], [-16, 37], [1, 22], [7, 32], [-4, 17], [-16, 0], [-17, 6], [-52, 33], [-32, 10], [-6, -6], [10, -25], [6, -8], [34, -19], [6, -21], [-14, -55], [-5, -8], [-34, -40], [-25, -12], [-68, -1], [-105, -28], [-50, -4], [-67, 7], [-42, 12], [-27, 15], [-27, 21], [-13, 2], [-7, -46], [-13, -6], [-23, 1], [-35, 14], [-28, 33], [-9, 0], [-4, -19], [-7, -13], [-8, -6], [-74, -20], [-41, 0], [-43, 23], [-28, -2], [-36, -13], [-87, 24], [-21, 1], [18, -39], [-29, -6], [-62, 1], [-103, 13], [-64, -19], [-114, 11], [-116, 3], [-22, 9], [-15, 18], [-1, 16], [6, 23], [17, 33], [28, 45], [10, 23], [-26, 11], [-15, 15], [-13, 1], [-41, -17], [-27, -50], [-20, -14], [-9, 12], [-7, 30], [-9, 15], [-11, -1], [-11, -8], [-11, -15], [-15, -6], [-22, 4], [-7, -7], [6, -20], [2, -18], [-2, -16], [-18, -17], [-52, -24], [-31, -7], [-79, -4], [-48, 7], [-96, 29], [-53, 1], [-64, 48], [-51, 11], [3, 18], [22, 32], [-1, 9], [-69, -47], [-10, -15], [9, -34], [-10, -3], [-47, 13], [-47, -10], [-12, 3], [-32, 25], [-57, 26], [-25, 28], [-39, 90], [-20, 59], [2, 12], [29, 16], [-4, 13], [-36, 34], [-39, 28], [-12, 19], [-5, 20], [-5, 28], [-1, 21], [5, 13], [22, 42], [62, 76], [8, 14], [3, 13], [-8, 40], [-12, 40], [-12, 29], [-34, 39], [-46, 42], [-66, 73], [-48, 58], [-58, 80], [-28, 7], [-32, -3], [-70, -28], [-24, -13], [-5, -9], [-52, -2], [-148, 7], [-56, 9], [-42, -3], [-72, -20], [-77, 4], [-48, 56], [-110, 31], [-33, 17], [-22, 24], [7, 15], [63, 14], [26, 15], [12, 12], [-62, -10], [-27, 1], [-186, 77], [-57, 14], [-10, 7], [-4, 9], [0, 11], [5, 17], [55, -22], [25, -1], [39, 6], [14, 14], [-9, 7], [-64, 26], [-30, 19], [-12, 15], [12, 20], [3, 13], [21, 8], [37, 1], [48, 10], [88, 26], [59, 10], [59, -2], [142, -27], [142, -34], [89, -26]], [[23276, 97079], [66, -15], [113, 7], [41, -11], [106, -39], [32, -23], [8, -17], [0, -9], [-35, -19], [-71, -28], [-17, -22], [63, -27], [32, -24], [15, -17], [0, -18], [-42, -48], [-31, -14], [-48, 2], [-23, -5], [-60, -22], [-95, -21], [-129, -9], [-35, -13], [-65, -22], [-43, -3], [-14, 12], [-6, 18], [3, 13], [9, 15], [-21, 15], [-92, 28], [-54, 39], [-8, 13], [-2, 11], [119, 7], [52, 8], [23, 13], [4, 7], [-23, 3], [-82, 26], [-138, 16], [-7, 19], [-57, 36], [-6, 35], [-12, 10], [-39, 15], [-6, 5], [-12, 22], [-1, 12], [2, 12], [71, 23], [-10, 16], [-54, 61], [-14, 34], [2, 13], [34, 18], [47, 0], [124, -5], [59, -8], [59, -14], [65, -22], [97, -19], [31, -12], [58, -41], [7, -12], [-4, -13], [14, -12]], [[19317, 96833], [223, -14], [9, -3], [1, -10], [-17, -33], [-25, -24], [-119, -30], [-153, -28], [-32, -13], [2, -8], [13, -10], [25, -12], [119, 2], [29, -5], [10, -8], [6, -12], [4, -15], [0, -53], [-6, -30], [-17, -27], [-48, -20], [-86, -26], [-59, -11], [-46, 4], [-46, -3], [-202, -48], [-62, -1], [-55, 12], [-75, 46], [-78, 18], [-34, 21], [-33, 11], [-9, 16], [-3, 13], [6, 11], [14, 10], [4, 9], [-13, 25], [-6, 24], [-22, 35], [-4, 20], [0, 13], [4, 14], [15, 25], [8, 5], [46, 4], [60, 13], [139, 37], [305, 47], [93, -4], [40, 9], [75, 4]], [[17902, 96407], [21, -23], [2, -9], [-10, -9], [-33, -15], [-164, -51], [-32, -24], [12, -20], [59, -41], [60, -35], [13, -18], [-28, -17], [-55, 5], [-20, -1], [-20, -8], [6, -16], [60, -52], [20, -28], [0, -14], [-11, -14], [-26, -19], [-40, -25], [-68, -19], [-148, -26], [-5, -21], [1, -15], [-3, -38], [-6, -18], [-17, -29], [-13, -14], [-22, -9], [-32, -6], [-40, 0], [-67, 26], [-30, 16], [-42, 35], [-8, 24], [5, 28], [11, 45], [18, 46], [25, 46], [8, 29], [-10, 12], [-18, 0], [-54, -19], [-35, -7], [-27, -13], [-20, -21], [-11, -22], [-6, -43], [-10, -23], [-29, -13], [-44, 0], [-17, -7], [-8, -16], [6, -12], [43, -27], [6, -30], [-6, -18], [-46, -33], [-11, -11], [-29, -52], [-11, -13], [-24, -12], [-24, 1], [-23, 19], [-33, 36], [-22, 31], [-12, 26], [-9, 11], [-16, -8], [-19, -26], [0, -21], [4, -31], [-1, -19], [-28, -23], [4, -10], [49, -28], [6, -12], [0, -19], [-3, -9], [-20, 1], [-16, -22], [-19, -17], [-49, -33], [-69, -4], [-57, -16], [-12, 1], [-14, 26], [-15, 50], [-14, 29], [-20, 15], [-26, 58], [-12, 18], [-11, 8], [-10, 2], [-15, -12], [-33, -82], [-54, -21], [-29, -4], [-30, 2], [-74, 23], [-60, 8], [-41, -9], [-68, -34], [-27, -9], [-37, 4], [-16, 13], [-14, 21], [-1, 12], [10, 5], [17, 24], [0, 9], [-17, 14], [0, 11], [6, 7], [-2, 6], [-8, 3], [-17, -3], [-61, -16], [7, 17], [29, 37], [71, 72], [26, 21], [16, 6], [209, 24], [15, 7], [99, 97], [28, 22], [29, 18], [143, 58], [13, 14], [22, 40], [13, 10], [31, 16], [102, 82], [94, 59], [47, 37], [65, 37], [75, 16], [227, 28], [163, -37], [38, -2], [19, 10], [17, 17], [25, -7], [60, -5], [14, 4], [25, 19], [-17, 11], [-73, 19], [-5, 10], [2, 9], [26, 23], [31, 14], [90, 11], [41, -3], [43, -15], [55, -32], [127, -56]], [[19919, 95654], [35, -1], [41, 6], [46, -4], [21, -13], [15, -23], [0, -13], [-3, -10], [-6, -9], [-60, -58], [-14, -20], [19, -5], [10, 3], [59, 44], [45, 13], [34, 4], [57, -9], [22, -8], [15, -8], [9, -11], [22, -41], [16, -54], [2, 5], [1, 31], [3, 23], [55, 16], [1, 5], [-20, 13], [-16, 18], [-12, 33], [4, 12], [12, 14], [35, 28], [42, 17], [36, 4], [137, -29], [54, -25], [21, -12], [8, -9], [12, -28], [23, -78], [-1, -25], [-10, -40], [-44, -76], [-7, -51], [-44, -127], [-31, -35], [-33, -24], [-138, -43], [-104, -43], [-26, -7], [-27, -1], [-86, 15], [-99, 27], [-57, -7], [-56, -20], [-36, -6], [-33, 3], [-33, 7], [-44, 19], [23, 8], [10, 10], [-9, 10], [-46, 14], [-48, -32], [-139, -73], [-187, -25], [-58, -15], [-44, -19], [-22, -16], [-35, -38], [-53, -28], [-96, -31], [-123, -48], [-220, -49], [-138, -8], [-138, 16], [-44, 13], [-46, 21], [-93, 49], [-26, 17], [-31, 39], [18, 25], [50, 30], [75, 26], [150, 36], [135, 58], [49, 11], [130, 9], [66, -5], [48, 3], [31, 8], [47, 20], [68, 42], [50, 39], [12, 18], [-16, 17], [-25, 2], [-81, -40], [-41, -13], [-44, -1], [-61, -14], [-60, -5], [-11, 0], [-62, 39], [-33, 6], [-16, -4], [-14, -10], [-26, -28], [-16, -10], [-27, -8], [-107, -8], [-104, -14], [-23, 9], [-14, 16], [-3, 10], [-1, 33], [-7, 14], [9, 28], [12, 21], [14, 15], [71, 43], [10, 11], [-34, -2], [-80, -21], [-11, 7], [-18, 24], [-9, 2], [-11, -10], [-6, -14], [-13, -58], [-13, -30], [-32, 6], [-40, 18], [-15, 3], [-9, -6], [3, -10], [41, -50], [0, -17], [-26, -31], [-114, -51], [-44, -13], [-16, 5], [-14, 14], [-13, 22], [-29, 31], [-18, 7], [-19, 1], [-18, -7], [-17, -13], [-10, -15], [-10, -26], [-20, -21], [-13, -3], [-115, 42], [-93, 75], [-101, -11], [-46, 2], [-138, 28], [-17, 17], [-10, 22], [1, 12], [6, 12], [17, 25], [35, 37], [15, 12], [21, 10], [29, 8], [73, 4], [189, 2], [37, 5], [206, 72], [24, 12], [30, 23], [7, 10], [-1, 6], [-254, -57], [-109, -12], [-166, 9], [-31, 9], [-8, 16], [35, 42], [18, 16], [48, 15], [114, 21], [154, 19], [100, 0], [84, 15], [51, 17], [-170, -1], [-204, -8], [-30, 5], [-58, 23], [-3, 16], [23, 19], [9, 15], [-17, 33], [5, 13], [38, 27], [68, 29], [42, 5], [81, -11], [230, -10], [45, 4], [-28, 13], [-40, 9], [-178, 17], [-37, 7], [-7, 10], [-3, 15], [2, 19], [13, 20], [55, 42], [162, 35], [64, 5], [65, -3], [65, -15], [29, -14], [15, -16], [7, -16], [1, -26], [3, -11], [12, -17], [37, -42], [28, -13], [128, 24], [53, 6], [54, -8], [78, -24], [101, -75], [130, -77], [-1, -16], [-49, -26], [-10, -11], [7, -7], [50, -5], [46, 4], [45, -6], [10, -7], [16, -28], [23, -49], [27, -37], [31, -24], [31, -13], [45, -1], [46, 8], [74, -3], [381, -28], [23, 5], [16, 15], [9, 26], [4, 22], [-5, 29], [-8, 14], [-236, 94], [-21, 38], [116, 54], [8, 12], [2, 17], [-4, 21], [-15, 21], [-62, 39], [-55, 6], [-82, 38], [-12, 10], [-11, 15], [-8, 21], [1, 16], [11, 12], [80, 39], [33, 21], [100, 98], [46, 39], [33, 19], [34, 11], [74, 5], [77, -36], [17, -2], [7, -10], [-3, -17], [-10, -16], [-27, -29], [-7, -12], [2, -13], [19, -29], [6, -19], [4, -32], [3, -5], [47, -27], [42, -36], [20, -55], [-16, -19], [-35, -27], [-21, -22], [-7, -18], [5, -10], [27, -6]], [[24119, 94562], [109, -27], [53, -18], [26, -12], [50, -40], [25, -12], [97, 24], [68, 8], [151, -10], [127, -34], [48, -24], [28, -23], [-7, -26], [-24, -41], [-27, -38], [-56, -61], [-47, -31], [-11, -14], [-8, -21], [-18, -29], [-50, -65], [-14, -11], [-71, -28], [25, -12], [11, -11], [-10, -29], [-45, -69], [-46, -63], [-33, -39], [-59, -55], [-32, -15], [-44, -5], [-263, 48], [-66, -1], [-176, -25], [17, -12], [64, -19], [41, -20], [55, -63], [8, -16], [3, -18], [-2, -36], [-4, -9], [-87, -97], [-29, -71], [-18, -58], [-29, -16], [-98, 24], [-32, 0], [-110, -17], [-52, 8], [8, 88], [-8, 95], [-16, 90], [-82, 161], [-9, 29], [-6, 31], [-3, 33], [0, 33], [6, 67], [0, 34], [-4, 88], [-11, 132], [-1, 47], [1, 19], [3, 14], [18, 19], [34, 13], [17, 2], [108, -40], [50, -13], [33, 0], [2, 5], [-30, 8], [-27, 18], [-46, 51], [-20, 44], [-5, 14], [-1, 16], [3, 15], [6, 15], [23, 22], [18, 10], [68, 26], [69, 15], [151, 11], [42, -8], [66, 29], [38, 6], [67, -10]], [[22933, 91959], [9, -7], [16, 6], [12, 19], [8, 4], [12, -4], [39, -34], [29, -35], [32, -25], [50, -23], [110, -73], [32, -49], [34, -77], [31, -58], [26, -41], [29, -32], [46, -36], [41, 26], [18, 7], [15, -11], [14, -27], [-7, -12], [-18, -16], [-29, -17], [-42, -2], [-20, -5], [-32, -28], [-26, -35], [-36, -11], [-67, -57], [-37, -22], [-55, -5], [-114, 44], [-71, -6], [-58, 9], [-64, 48], [-51, 26], [-97, 39], [-6, 6], [-4, 13], [-2, 20], [-5, 14], [-6, 7], [-16, -1], [-15, -14], [-30, -11], [-46, 2], [-20, 9], [-15, 12], [-8, 15], [-1, 17], [-5, 13], [-7, 9], [-16, 0], [-26, -8], [-10, -11], [5, -13], [-4, -8], [-46, 0], [-18, 8], [-34, 24], [-15, 24], [-19, 43], [2, 11], [12, 26], [16, 19], [103, 10], [48, 11], [53, 29], [61, 52], [13, 15], [1, 11], [-4, 12], [-19, 30], [-7, 20], [6, 9], [25, 1], [-13, 12], [-11, 16], [-4, 10], [1, 16], [19, 4], [24, -8], [47, -47], [18, -9], [32, -7], [-34, 32], [-35, 67], [-4, 24], [1, 13], [9, 36], [8, 14], [11, 10], [33, 21], [53, 14], [28, 2], [27, -11], [24, -23], [54, -37], [8, -15], [-1, -7], [-20, -10], [-3, -9], [8, -14]], [[18188, 93659], [18, -7], [32, 6], [47, 19], [60, 15], [74, 13], [19, -15], [12, 3], [22, 24], [4, 16], [-3, 18], [1, 40], [12, 23], [44, 50], [23, 18], [37, 9], [89, -6], [84, -28], [112, -28], [165, -71], [52, -30], [5, -26], [-29, -55], [-71, -79], [-57, -28], [-22, -18], [37, -12], [24, -20], [36, 29], [27, 33], [38, 27], [13, 3], [3, -6], [-7, -14], [-2, -14], [1, -13], [4, -8], [23, -4], [13, 5], [50, 38], [49, 59], [75, 38], [20, 19], [65, 16], [-1, 12], [3, 44], [-22, 19], [-77, 40], [-37, 48], [8, 37], [42, -5], [115, -4], [24, -5], [111, -62], [39, -39], [31, -19], [65, -28], [22, -23], [16, -9], [5, -10], [-5, -10], [-2, -23], [12, -8], [42, -9], [12, -9], [16, -30], [19, -50], [17, -55], [27, -103], [54, -137], [18, -86], [7, -16], [12, -11], [34, -16], [27, -22], [31, -7], [7, 2], [8, 19], [20, 31], [94, 59], [5, 9], [-11, 14], [-3, 9], [1, 7], [20, 5], [-66, 75], [-43, 71], [-27, 89], [-4, 25], [-4, 55], [-9, 15], [-15, 13], [-6, 17], [2, 21], [-3, 18], [-17, 37], [-67, 261], [0, 26], [9, 19], [24, 11], [38, 2], [13, 6], [-15, 10], [-25, 27], [-3, 13], [17, 26], [86, -11], [62, -24], [106, -55], [11, 3], [12, 28], [22, 17], [34, -6], [96, -40], [112, -71], [74, -36], [53, -48], [35, -45], [23, -35], [1, -13], [-5, -14], [5, -19], [16, -22], [8, -20], [7, -43], [15, -56], [3, -28], [99, -250], [19, -45], [12, -20], [69, -97], [37, -70], [3, -48], [5, -13], [2, -22], [-2, -30], [-8, -25], [-14, -22], [-14, -30], [-22, -67], [-1, -16], [15, -23], [97, -79], [59, -95], [28, -16], [74, -59], [81, -34], [27, -15], [26, -21], [7, -1], [16, 4], [4, 6], [1, 9], [-22, 45], [-2, 17], [11, 3], [83, -76], [45, -31], [61, -32], [105, -74], [15, -6], [57, 7], [15, -5], [10, -7], [4, -10], [2, -44], [16, -21], [90, 9], [25, -2], [16, -7], [13, -14], [20, -47], [17, -92], [1, -33], [-8, -56], [-13, -20], [-17, -7], [-48, 7], [-33, 17], [-18, 23], [-16, 48], [-7, 10], [-7, -10], [-16, -45], [-10, -19], [-13, -14], [-24, 4], [-35, 19], [-66, 50], [-23, 12], [-15, -2], [-31, -17], [-49, -31], [-20, -23], [8, -15], [6, -19], [3, -22], [-2, -17], [-6, -10], [-16, -13], [-34, -2], [-49, 9], [-39, 18], [-68, 46], [-15, 6], [-21, -10], [-8, -14], [13, -19], [34, -24], [42, -41], [11, -8], [11, 0], [4, -7], [5, -22], [-2, -38], [-21, -76], [-2, -18], [9, 4], [57, 75], [29, 21], [65, 32], [27, 24], [82, 7], [30, -13], [18, -23], [1, -10], [-21, -27], [-4, -14], [-1, -17], [2, -15], [5, -13], [14, -13], [26, 6], [8, -4], [14, -13], [9, -20], [0, -29], [-19, -62], [-34, -21], [-105, -37], [-36, -20], [-70, -14], [-26, -18], [-17, -5], [-74, 2], [-85, -11], [-98, 23], [-69, 10], [-79, 36], [-30, -9], [-31, -24], [-148, 28], [-18, 20], [6, 14], [35, 42], [2, 9], [-1, 8], [-68, 7], [-75, 23], [-75, 11], [-57, -3], [-37, 8], [-36, 19], [-19, 17], [-4, 16], [0, 17], [3, 34], [-5, 24], [-16, 18], [-34, 17], [-33, -2], [-28, -18], [-26, -35], [-50, -96], [-24, -16], [-65, -70], [-24, -17], [-117, -27], [-140, -11], [-52, -22], [-49, -40], [-60, -39], [-146, -48], [-135, -27], [-142, -12], [-105, -18], [-31, 9], [-47, -3], [-51, -27], [-57, -5], [-219, -10], [-100, -17], [-55, -5], [-44, 2], [-30, 8], [-28, 23], [-30, 37], [-60, 97], [-17, 41], [6, 70], [-4, 40], [-20, 88], [-4, 7], [-105, 33], [-70, 10], [-104, 2], [-128, -4], [-127, 10], [-68, 12], [-67, 19], [-114, 51], [-7, 5], [-8, 17], [-12, 28], [-28, 37], [-78, 82], [-31, 49], [-5, 13], [-7, 36], [-10, 59], [-3, 36], [9, 22], [7, 5], [162, 43], [284, 47], [261, 32], [118, -3], [69, -15], [70, -7], [126, -3], [160, -22], [31, 2], [72, 15], [21, 12], [113, -2], [22, 8], [20, 13], [-26, 25], [-108, 55], [-286, 97], [-70, 21], [-100, 22], [-58, 3], [-74, -12], [-28, 0], [-72, -19], [-69, -12], [-131, -12], [-189, -8], [-26, 2], [-39, 15], [-28, 4], [-185, -11], [-165, 15], [-188, 149], [-32, 46], [7, 18], [23, 20], [93, 58], [34, 13], [139, 31], [138, 38], [110, 35], [53, 12], [52, 2], [42, 11], [-9, 11], [-34, 13], [0, 18], [18, 9], [69, 9], [72, -11], [37, 3], [10, 13], [-10, 9], [-69, 21], [-331, -59], [-155, -5], [-107, -26], [-59, 1], [-70, 25], [-10, 8], [-1, 10], [22, 34], [75, 20], [38, 57], [-41, 1], [-134, -12], [-59, 5], [-79, 22], [-23, 26], [-10, 18], [-2, 23], [3, 63], [6, 34], [5, 8], [98, 105], [62, 22], [43, 33], [1, 13], [-10, 14], [-40, 34], [-17, 17], [-9, 17], [7, 25], [23, 36], [67, 57], [162, 114], [82, 48], [79, 26], [110, 55], [284, 91], [254, 92], [93, -24], [27, -19], [12, -16], [10, -23], [9, -29], [12, -63], [1, -32], [-2, -33], [-6, -29], [-9, -27], [-19, -32], [-29, -38], [-60, -65], [-7, -19]], [[16740, 94534], [2, -2], [71, 53], [44, 3], [30, -5], [10, -6], [6, -11], [3, -23], [2, -58], [4, -7], [9, 3], [16, 14], [78, 85], [33, 23], [23, 7], [96, 13], [65, 0], [71, -8], [54, -12], [88, -35], [69, -40], [63, -43], [212, -161], [90, -47], [35, -27], [15, -20], [13, -25], [4, -23], [-5, -21], [-10, -15], [-21, -13], [-130, -54], [-69, -16], [-67, -24], [-162, -84], [-111, -40], [-144, -78], [-272, -126], [-32, -25], [-15, -18], [-77, -143], [-29, -33], [-71, -34], [-89, -9], [-25, -9], [-5, -50], [-32, -82], [-15, -55], [-22, -148], [-5, -15], [-16, -28], [-28, -29], [-86, -35], [-64, -18], [-86, -15], [-21, 10], [-21, 24], [-22, 2], [-13, -4], [-114, -103], [-109, -41], [-47, -38], [-33, -18], [-27, -5], [-44, 3], [-32, 17], [-29, 27], [-22, 28], [-56, 118], [-24, 40], [-21, 20], [-55, 72], [-15, 14], [-209, 91], [-101, 51], [-25, 18], [-23, 11], [-130, -7], [-18, 2], [-4, 8], [15, 27], [6, 16], [2, 17], [-2, 27], [2, 4], [49, 27], [-8, 5], [-5, 10], [-4, 15], [5, 11], [15, 6], [17, 24], [21, 43], [15, 24], [22, 16], [38, 41], [27, 17], [23, 21], [1, 9], [-10, 8], [-3, 16], [5, 50], [-1, 25], [5, 22], [8, 17], [11, 11], [97, 37], [4, 10], [2, 12], [-3, 14], [-5, 9], [-15, 8], [-26, 2], [-23, 21], [-5, 10], [9, 29], [44, 45], [14, 22], [48, 101], [86, 63], [23, 67], [65, 72], [0, 10], [-21, 24], [-60, 17], [-29, 26], [-19, 29], [-87, 170], [-15, 13], [-5, 20], [-18, 13], [4, 12], [341, 51], [235, 16], [243, 44], [68, 2], [52, -8], [52, -23], [69, -40], [90, -39], [170, -58], [106, -12], [-42, -45], [-6, -14], [0, -10]], [[34402, 78779], [-6, -5], [-19, 8], [9, 18], [7, 5], [9, 2], [4, -5], [-1, -13], [-3, -10]], [[23742, 95477], [-27, 0], [-35, 12], [-10, 12], [-8, 17], [-5, 22], [-7, 18], [-10, 13], [-2, 10], [6, 9], [11, 5], [27, 2], [57, 22], [11, -2], [8, -12], [7, -31], [9, -19], [22, -34], [10, -22], [-2, -6], [-7, -6], [-55, -10]], [[27949, 81769], [-12, -4], [-26, 4], [-22, 15], [-13, 18], [86, 51], [18, -6], [0, -10], [-13, -27], [-3, -18], [-6, -14], [-9, -9]], [[28103, 84184], [-14, -8], [-10, 1], [2, 19], [14, 38], [8, 34], [2, 28], [6, 25], [10, 22], [11, 11], [15, -1], [4, -70], [-5, -32], [-10, -28], [-14, -22], [-19, -17]], [[28073, 84254], [-23, -58], [-18, -56], [-25, -106], [-15, -3], [-13, 25], [37, 123], [1, 14], [-1, 12], [-11, 18], [-11, -21], [-52, -139], [-13, -22], [-11, -13], [-9, -2], [-22, 3], [-44, -40], [74, 165], [1, 13], [-14, 8], [-6, -5], [-60, -104], [-34, -40], [-23, 13], [-6, 10], [2, 13], [59, 104], [54, 75], [22, 48], [9, 44], [4, 33], [0, 36], [3, 10], [3, -2], [3, -14], [1, -38], [-12, -77], [-10, -38], [-12, -32], [5, -7], [22, 18], [18, 38], [15, 57], [9, 50], [10, 80], [3, -3], [4, -16], [10, -11], [15, -7], [9, -10], [6, -26], [7, -12], [23, -10], [9, -8], [6, -29], [-1, -16], [3, -9], [7, -5], [-8, -31]], [[27814, 84547], [-7, -10], [-14, 11], [0, 29], [13, 22], [10, -1], [10, -12], [-3, -15], [-9, -24]], [[27856, 84974], [-4, -5], [-12, 4], [-5, -38], [-4, -3], [-9, 23], [7, 20], [-1, 14], [2, 10], [12, 23], [7, 5], [4, -2], [4, -29], [-1, -22]], [[27784, 84220], [-14, -4], [-17, 8], [9, 42], [14, 18], [36, 17], [7, 11], [11, 6], [17, 0], [19, 15], [21, 32], [7, 4], [-14, -46], [-16, -34], [-80, -69]], [[27698, 86188], [-9, -2], [-2, 7], [7, 24], [12, 3], [13, 26], [12, -9], [-4, -15], [-16, -22], [-13, -12]], [[27795, 82548], [-1, -17], [-18, 3], [-9, 10], [-8, 15], [-2, 12], [7, 11], [21, -7], [10, -27]], [[27760, 86273], [-29, -4], [13, 34], [10, 16], [12, 11], [24, 4], [16, -14], [-15, -25], [-31, -22]], [[27911, 84479], [-9, -7], [-7, 0], [7, 51], [-8, 18], [-1, 9], [4, 9], [5, 2], [11, -16], [6, -17], [2, -16], [0, -16], [-4, -11], [-6, -6]], [[23116, 93857], [-45, -6], [-41, 40], [-2, 38], [3, 21], [5, 18], [15, 16], [43, 18], [19, -13], [7, -17], [6, -6], [28, -14], [13, -16], [-2, -19], [-8, -28], [-10, -18], [-11, -8], [-20, -6]], [[22957, 94772], [-84, -34], [-18, 13], [-8, 12], [65, 53], [28, 14], [27, -16], [7, -13], [-3, -9], [-14, -20]], [[22702, 94394], [-80, -13], [-36, 6], [-20, -16], [-15, -7], [-44, -3], [-90, 29], [-24, 10], [-9, 9], [4, 9], [16, 9], [69, 12], [25, 10], [11, 13], [17, 11], [24, 8], [65, 8], [146, 41], [72, 5], [28, -3], [9, -11], [2, -10], [-4, -11], [-22, -28], [-30, -21], [-79, -46], [-35, -11]], [[24944, 91831], [6, -36], [-24, -49], [-8, -8], [-10, -4], [-9, 6], [-28, 38], [-8, 24], [10, 12], [22, 15], [15, 7], [20, -6], [6, 10], [8, -9]], [[24863, 91716], [-23, -6], [-14, 24], [-12, 5], [-5, 16], [-24, 3], [2, 25], [7, 12], [22, 10], [17, -4], [17, -25], [8, -20], [7, -25], [-2, -15]], [[29444, 87913], [-15, -5], [-55, 7], [-69, 27], [-35, 25], [2, 8], [15, 4], [18, -4], [29, -17], [80, -9], [25, -10], [8, -16], [-3, -10]], [[29199, 91214], [-21, -4], [-32, 36], [-66, 40], [-25, 30], [-1, 14], [2, 22], [8, 27], [23, 30], [24, 5], [35, -7], [25, -21], [27, -59], [19, -29], [5, -21], [-9, -10], [1, -10], [4, -6], [-1, -11], [-8, -16], [-10, -10]], [[28185, 86824], [-38, -6], [0, 8], [16, 24], [59, 20], [44, 6], [-10, -20], [-26, -16], [-45, -16]], [[28060, 91124], [-23, -6], [-30, 30], [0, 17], [6, 41], [55, 10], [24, -24], [11, -24], [-43, -44]], [[28700, 88360], [-29, -6], [-38, 13], [-38, 25], [-85, 80], [64, 54], [102, -63], [31, -40], [-7, -63]], [[31993, 87879], [53, -6], [33, 2], [14, -9], [13, -28], [-17, -40], [-19, -16], [-31, -4], [-50, 13], [-17, 8], [-16, 22], [7, 15], [25, 5], [4, 7], [-6, 12], [0, 10], [7, 9]], [[32588, 90469], [-34, -15], [-19, 19], [13, 6], [19, 23], [26, 20], [11, 17], [43, 8], [15, -1], [5, -6], [-24, -26], [-55, -45]], [[31046, 86544], [-25, -5], [-12, 12], [0, 35], [8, 26], [29, 55], [25, 62], [15, 14], [31, -10], [18, -17], [18, -30], [8, -22], [-7, -34], [-22, -29], [-25, -21], [-61, -36]], [[30462, 87873], [-20, -2], [-37, 4], [-40, 12], [-23, 14], [-19, 29], [-4, 33], [-38, 48], [-42, 16], [-23, 33], [24, 3], [34, -8], [49, -14], [45, -19], [64, -42], [21, -40], [21, -28], [7, -22], [-6, -10], [-13, -7]], [[31991, 87192], [-7, -7], [-6, 2], [-21, 30], [-28, 13], [-10, 12], [-84, 63], [-9, 28], [-2, 22], [28, 11], [56, 10], [49, -1], [46, -13], [9, -14], [24, -26], [-6, -30], [-2, -40], [-10, -19], [-15, -14], [-12, -27]], [[31134, 91901], [-7, -4], [-72, 26], [-6, 21], [36, 24], [29, 12], [22, 2], [22, -4], [21, -25], [-25, -23], [-20, -29]], [[27936, 92043], [11, -33], [7, -11], [-11, -15], [-41, -31], [-92, -13], [-46, 14], [22, -44], [4, -19], [-6, -8], [-20, 2], [-31, 13], [-19, 15], [-4, 18], [-7, 4], [-9, -10], [-8, 2], [-19, 27], [-14, 9], [-92, 16], [-4, 7], [5, 12], [14, 18], [20, 5], [52, -7], [4, 4], [4, 22], [4, 9], [36, -3], [22, 5], [13, -11], [12, -26], [17, 5], [26, -4], [28, 9], [43, 23], [33, 9], [46, -13]], [[28325, 92001], [14, -29], [3, -15], [-20, -17], [-74, -33], [-46, -28], [-22, -7], [-31, 7], [-37, -14], [-15, 2], [17, 23], [58, 67], [49, 7], [16, 14], [14, -5], [8, 12], [1, 17], [17, 13], [16, 0], [32, -14]], [[28432, 88704], [-20, -26], [-59, 9], [-8, 8], [-2, 10], [9, 12], [61, 12], [26, 1], [14, -4], [1, -4], [-22, -18]], [[26910, 90024], [28, -7], [21, 1], [4, -9], [-22, -28], [-13, -5], [-25, 20], [-18, 25], [-5, 15], [-2, 16], [4, 3], [28, -31]], [[27997, 91500], [-19, -4], [-23, 11], [-8, 19], [-4, 19], [4, 10], [10, 9], [13, 21], [18, 32], [27, 22], [60, 21], [8, 7], [27, 58], [9, 9], [30, 6], [3, 8], [-10, 14], [0, 14], [10, 15], [15, 12], [39, 10], [35, -2], [9, -4], [7, -10], [11, -27], [1, -6], [-16, -24], [-42, -36], [-26, -31], [-5, -10], [-3, -13], [-9, -15], [-31, -38], [-20, -36], [-21, -20], [-56, -19], [-43, -22]], [[28612, 91672], [-35, -7], [-26, 4], [-17, 13], [-13, 19], [-16, 46], [6, 22], [2, 38], [3, 15], [6, 7], [37, 14], [21, -2], [32, -15], [69, -4], [18, -14], [4, -8], [-1, -10], [-4, -12], [-34, -35], [-17, -24], [-12, -29], [-23, -18]], [[31936, 87487], [6, -5], [7, 6], [6, -5], [4, -16], [6, -12], [17, -14], [5, -11], [0, -11], [-14, -16], [-9, 0], [-66, 37], [-18, 39], [-1, 19], [7, 18], [10, 8], [13, 0], [16, -10], [11, -27]], [[25857, 92230], [32, -4], [30, 5], [22, -5], [13, -16], [9, -17], [5, -18], [-12, -13], [-49, -11], [-34, 6], [-35, 15], [-17, -7], [-41, 11], [-20, 14], [-17, 21], [0, 13], [43, 14], [17, 12], [54, -20]], [[26743, 89744], [35, -23], [36, -13], [57, -6], [8, -5], [0, -11], [-8, -16], [-19, -22], [-14, 0], [-31, 15], [-12, 7], [-13, 17], [-6, 2], [-9, -6], [-2, -7], [4, -10], [-5, -2], [-39, 6], [-6, 6], [3, 18], [27, 27], [-23, 8], [-8, 10], [-35, -17], [-19, -4], [-30, 12], [-4, 60], [-3, 23], [-14, 15], [-9, 16], [-13, 12], [-27, 12], [-23, 30], [-4, 14], [3, 10], [13, 14], [79, -30], [48, -29], [46, -36], [23, -26], [2, -17], [-5, -17], [-14, -17], [11, -20]], [[25945, 90861], [-11, -1], [-19, 9], [-43, 35], [-9, 15], [-4, 17], [0, 21], [3, 20], [14, 42], [-26, 33], [-6, 19], [3, 10], [14, 26], [4, 16], [14, 22], [37, 44], [37, -10], [32, -36], [9, -24], [-3, -26], [3, -37], [8, -49], [3, -36], [-4, -22], [-14, -41], [-12, -20], [-16, -18], [-14, -9]], [[26479, 89616], [-15, -6], [-15, 3], [-13, 17], [-11, 30], [-17, 22], [-39, 28], [-7, 11], [-11, 37], [-2, 37], [-9, 34], [0, 16], [7, 25], [33, 6], [26, -10], [5, -7], [8, -14], [6, -18], [31, -47], [18, -38], [25, -78], [0, -15], [-7, -16], [-13, -17]], [[24154, 87467], [-11, -1], [-26, 29], [-5, 15], [33, 9], [23, -26], [-2, -12], [-12, -14]], [[21603, 95630], [58, -35], [3, -9], [-11, -6], [-75, -19], [-29, -15], [-25, -35], [-19, -16], [-101, -10], [-103, 1], [20, 33], [56, 56], [-44, 22], [-158, -38], [-60, 24], [51, 60], [-51, 5], [-71, 0], [-46, 36], [16, 42], [94, 24], [122, 20], [131, 31], [103, -3], [40, -14], [14, -49], [12, -59], [18, -5], [55, -41]], [[21881, 95955], [-72, -2], [-33, 6], [-2, 11], [29, 13], [95, 22], [57, 39], [21, 5], [73, 6], [43, -1], [55, -10], [-132, -49], [-134, -40]], [[21105, 95957], [13, -3], [43, 12], [27, 2], [30, -22], [8, -14], [110, -36], [38, -16], [5, -10], [-13, -15], [-33, -20], [-31, -13], [-44, -11], [-222, -2], [-24, 5], [-14, 18], [-28, 65], [-19, 36], [-8, 24], [5, 14], [24, 13], [82, 21], [36, 0], [23, -5], [9, -11], [-3, -14], [-14, -18]], [[21388, 96858], [-32, -12], [-37, 7], [-6, 7], [0, 9], [3, 10], [42, 36], [38, 12], [23, 3], [18, -13], [10, -18], [-59, -41]], [[21752, 96599], [-39, -6], [-69, 3], [-83, 21], [-22, 24], [-5, 38], [1, 22], [7, 4], [51, 5], [96, 6], [78, -5], [88, -22], [36, -14], [18, -10], [22, -20], [8, -8], [5, -16], [-110, -4], [-52, -6], [-30, -12]], [[25076, 95914], [-13, -8], [-42, 4], [-14, -8], [-22, 5], [-31, 16], [-36, 32], [-41, 48], [-32, 41], [-1, 12], [10, 19], [32, 13], [76, 15], [52, 0], [48, -31], [14, -11], [8, -13], [1, -12], [-4, -11], [-22, -24], [-10, -16], [0, -17], [5, -23], [9, -16], [13, -8], [0, -7]], [[23311, 95339], [-21, -19], [-23, -1], [-30, 18], [-32, -7], [-45, -36], [-16, -22], [-12, -7], [-37, -7], [-16, 6], [-15, 19], [-14, 32], [10, 24], [35, 16], [93, 27], [26, 13], [3, 14], [6, 9], [8, 4], [62, -23], [29, -16], [22, -18], [-2, -8], [-31, -18]], [[23526, 94760], [-13, -2], [-25, 3], [-93, 26], [-16, 10], [-4, 8], [21, 9], [8, 10], [23, 12], [42, 0], [44, -29], [21, -27], [1, -12], [-9, -8]], [[18380, 96632], [-76, -19], [-51, 0], [-89, 28], [-103, 84], [-14, 30], [39, 5], [28, 9], [17, 13], [34, 15], [76, 21], [10, -8], [-2, -18], [6, -16], [28, -4], [26, -11], [53, -36], [36, -7], [13, -8], [6, -12], [22, -21], [0, -11], [-30, -22], [-29, -12]], [[16368, 95475], [-22, -3], [-24, 6], [5, 15], [54, 41], [3, 11], [0, 9], [-7, 11], [14, 15], [22, 5], [7, -5], [2, -12], [-5, -36], [-6, -18], [-10, -14], [-14, -14], [-19, -11]], [[18455, 96049], [-42, -18], [-289, 27], [-15, 9], [-8, 12], [52, 33], [64, 14], [146, 11], [51, -13], [34, -15], [19, -12], [8, -24], [-20, -24]], [[21078, 95066], [-53, -3], [-90, 18], [-54, 33], [-17, 16], [2, 8], [9, 7], [13, 22], [31, 63], [12, 17], [48, 36], [36, 10], [75, -3], [44, -19], [18, -12], [13, -15], [13, -32], [3, -21], [22, -24], [7, -14], [0, -14], [-6, -14], [-12, -13], [-29, -21], [-85, -25]], [[34594, 81530], [-20, -58], [-14, -28], [-13, -9], [-28, -8], [-59, -9], [-25, -8], [-3, -39], [4, -20], [8, -16], [11, -4], [24, 9], [9, -1], [7, -8], [6, -15], [3, -20], [0, -25], [-4, -31], [-20, -73], [-25, -40], [-33, -33], [-7, -12], [-5, -15], [-4, -48], [-16, -38], [-52, -96], [-20, -22], [0, -17], [-8, -46], [-16, -36], [-43, -85], [-10, -30], [-5, -24], [1, -33], [-2, -15], [-10, -28], [-14, -27], [-3, -13], [6, -23], [5, -8], [1, -22], [-4, -34], [18, 22], [40, 78], [31, 47], [20, 16], [15, 21], [15, 46], [20, 44], [19, 15], [9, -9], [7, -21], [-1, -28], [-10, -33], [0, -10], [24, 24], [41, 21], [15, -3], [30, -30], [26, 3], [40, 18], [7, -8], [-7, -27], [-15, -26], [-37, -36], [-90, -72], [-28, -49], [5, 2], [20, 21], [20, 11], [21, 2], [9, -7], [-3, -14], [-3, -37], [-54, -74], [13, 3], [62, 33], [39, -46], [52, 16], [31, 16], [0, -10], [6, -20], [0, -33], [3, -5], [15, 11], [3, 12], [-1, 58], [5, 6], [10, -9], [6, -15], [2, -42], [-7, -43], [-9, -39], [-23, -57], [3, -24], [-6, -27], [5, -1], [23, 25], [1, 10], [-2, 24], [3, 11], [19, 26], [31, 31], [11, 4], [4, -7], [-2, -19], [10, 5], [20, 28], [18, 16], [17, 6], [18, 19], [19, 32], [20, 27], [21, 21], [9, 2], [-3, -35], [4, -40], [1, -34], [4, -7], [17, 36], [9, 13], [11, 6], [12, -3], [87, 13], [27, -9], [30, -24], [37, -36], [14, -33], [3, -42], [-4, -29], [-27, -37], [-24, -24], [-14, -24], [-5, -25], [-5, -15], [-16, -20], [-72, -59], [17, -2], [41, 13], [28, 3], [1, -9], [-11, -16], [-21, -17], [-2, -8], [1, -11], [22, -12], [29, 6], [24, -9], [-3, -14], [-19, -46], [-5, -28], [-26, -25], [-50, -37], [-13, -15], [3, -3], [46, 28], [24, 7], [14, 0], [17, 27], [26, 9], [26, -17], [39, 46], [14, 6], [24, -5], [15, 8], [26, 32], [20, 15], [4, -1], [4, -13], [2, -36], [-5, -32], [-6, -21], [-21, -45], [-13, -16], [-12, -6], [-21, 2], [-9, -7], [-20, -35], [-35, -36], [-22, -14], [14, -20], [5, -37], [-8, -12], [-37, -12], [-2, -6], [-13, -8], [-31, -13], [21, -6], [39, 9], [4, -6], [-5, -27], [-11, -27], [-46, -70], [0, -7], [7, -35], [9, -26], [11, -18], [26, -1], [19, 8], [27, 47], [62, 146], [55, 41], [45, 45], [11, -9], [5, -11], [-2, -11], [-23, -37], [-12, -31], [-31, -94], [-12, -45], [-6, -47], [1, -81], [4, -14], [9, -19], [19, 17], [31, 40], [20, 38], [15, 63], [10, 24], [10, -1], [10, -13], [2, -30], [8, -42], [6, -41], [-4, -46], [-5, -25], [-63, -186], [6, -33], [2, -20], [-2, -22], [-20, -89], [-19, -55], [-11, -24], [-12, -15], [-15, -5], [-13, 8], [-11, 21], [-10, 11], [-9, 1], [-17, -4], [-42, -45], [-9, -3], [-6, 6], [-8, 24], [6, 120], [4, 40], [-9, 30], [9, 52], [1, 19], [-6, 7], [-10, -4], [-17, -26], [-22, -47], [-23, -42], [-42, -57], [-18, -11], [-8, 2], [-8, 8], [-12, 24], [1, 22], [5, 29], [17, 68], [34, 101], [28, 72], [5, 31], [-7, 13], [-7, 27], [-11, 78], [-13, 64], [-16, 28], [-41, 32], [-7, -8], [-4, -43], [-48, -124], [-8, -54], [-6, -20], [-9, -14], [-21, -17], [6, 29], [22, 64], [-3, 6], [-28, -51], [-21, -29], [-26, -7], [-16, 2], [-15, -8], [-65, -121], [-3, -41], [-11, -33], [-32, -60], [-17, -21], [-24, -4], [-21, 11], [-15, -2], [-33, -19], [-38, -8], [-16, 4], [-10, 7], [-19, 24], [-2, 16], [1, 10], [10, 25], [22, 32], [18, 11], [45, 16], [33, 24], [25, 35], [12, 21], [47, 110], [60, 39], [29, 31], [21, 40], [3, 14], [-30, -20], [-15, -5], [-25, 7], [-11, 14], [-34, -4], [-47, 6], [-7, -10], [-6, -54], [-6, -28], [-7, -9], [-11, -6], [-21, -6], [-55, 19], [-11, 11], [-14, 8], [-60, -18], [-13, 2], [12, 12], [60, 40], [6, 112], [-3, 18], [-17, -16], [-28, -16], [-20, 5], [-9, 10], [-8, -9], [-19, -59], [-12, -7], [-17, -3], [-38, -21], [-73, -15], [-14, -15], [-49, 5], [-145, 33], [-52, -3], [-62, 20], [-12, 8], [-87, -3], [-26, 4], [2, 25], [-3, 6], [-25, -27], [-23, -18], [-29, -15], [-91, -26], [-49, -6], [-28, 18], [-11, 19], [-17, 59], [-12, 74], [0, 13], [6, 26], [19, 36], [87, 94], [69, 96], [30, 49], [28, 18], [46, 41], [2, 5], [-45, -5], [-32, 11], [-32, 5], [-62, -11], [-62, 0], [0, 21], [29, 40], [62, 68], [6, 1], [-19, -32], [-5, -24], [8, -16], [9, -10], [36, -4], [8, 14], [12, 73], [27, 85], [14, 61], [25, 47], [13, 7], [11, -9], [37, -11], [38, -43], [12, -3], [4, 3], [-14, 13], [-11, 20], [-5, 19], [14, 59], [16, 17], [3, 12], [-32, 0], [-26, 16], [-8, 27], [1, 47], [9, 28], [21, 37], [25, 25], [15, -6], [30, -34], [18, 10], [-3, 10], [-27, 53], [-9, 39], [1, 19], [59, 187], [29, 100], [40, 153], [9, 24], [20, 45], [9, 12], [25, 0], [16, 6], [-23, 19], [-8, 14], [-1, 15], [6, 15], [9, 12], [31, 24], [22, 40], [13, 48], [-2, 16], [-7, 16], [0, 9], [17, 10], [42, 56], [5, 11], [16, 75], [19, 33], [17, 17], [28, 21], [86, 52], [51, 46], [34, -3], [10, -32], [49, -21], [9, 23], [-12, 28], [10, 11], [40, 10], [7, -4], [12, -16], [-2, -14]], [[34573, 81059], [-9, -6], [-9, 0], [-8, 7], [-1, 11], [8, 23], [21, 12], [17, -3], [-1, -12], [-9, -19], [-9, -13]], [[34846, 80408], [-43, -34], [-10, -13], [-12, -7], [-9, 11], [-12, 35], [2, 12], [12, 2], [7, -5], [1, -11], [5, -6], [9, 0], [32, 35], [16, 5], [6, -6], [-4, -18]], [[34622, 81733], [-14, -1], [-3, 7], [6, 22], [15, 26], [20, 7], [-6, -38], [-18, -23]], [[34974, 80497], [20, -37], [11, -10], [-72, -41], [-8, -2], [-5, 4], [-1, 38], [4, 29], [5, 5], [16, -18], [17, 36], [13, -4]], [[34370, 78823], [-24, -25], [-9, 14], [2, 17], [13, 39], [-1, 11], [-14, 76], [2, 13], [4, 5], [21, -16], [3, -21], [-10, -46], [7, -31], [9, -23], [-3, -13]], [[34937, 79171], [-14, -20], [-14, 0], [2, 18], [17, 34], [8, 24], [1, 15], [3, 11], [13, 13], [11, 23], [-5, -43], [-22, -75]], [[22162, 91478], [-9, -18], [-11, -6], [-22, -21], [-8, -3], [-13, 14], [-11, 22], [-4, 3], [-7, 0], [-14, -15], [-7, 1], [-5, 9], [-3, 19], [0, 29], [7, 43], [1, 16], [-4, 12], [3, 12], [10, 10], [12, 4], [30, -4], [23, -17], [12, -23], [23, -18], [7, -13], [-10, -56]], [[22223, 91597], [-6, -34], [-34, 9], [-15, 12], [-13, 28], [-2, 8], [3, 10], [14, 25], [9, 9], [23, -11], [10, -14], [8, -23], [3, -19]], [[22136, 92451], [-3, -5], [-60, 22], [-23, 12], [-8, 10], [-5, 19], [-3, 28], [12, 14], [27, -1], [28, -11], [44, -31], [-12, -10], [-1, -20], [5, -20], [-1, -7]], [[23468, 91920], [37, -39], [0, -19], [-5, -31], [-11, -24], [-16, -16], [-23, -8], [-29, -1], [-13, 7], [10, 24], [7, 8], [1, 21], [-5, 35], [-6, 22], [-16, 12], [-12, 1], [-3, -12], [5, -23], [-4, -30], [-13, -38], [-9, -17], [-18, 9], [-8, 14], [2, 23], [-4, 22], [4, 22], [12, 34], [17, 22], [21, 12], [26, -1], [29, -13], [24, -16]], [[21897, 91818], [-23, -5], [-4, 1], [2, 16], [-2, 8], [-6, 5], [20, 13], [3, 10], [-7, 7], [-27, 14], [-8, 13], [2, 11], [10, 10], [19, -2], [41, -18], [19, -26], [8, -20], [-13, -3], [-11, -8], [-11, -16], [-12, -10]], [[21709, 91351], [-11, -1], [-16, 10], [-90, 35], [-11, 11], [10, 15], [33, 19], [22, 19], [17, 30], [51, -16], [19, -14], [8, -12], [3, -17], [-3, -41], [-17, -9], [-15, -29]], [[20961, 91247], [-16, -2], [-28, 9], [-43, 21], [-31, 21], [-21, 23], [-3, 16], [16, 9], [24, 4], [57, -3], [28, -8], [36, -34], [7, -19], [2, -12], [-5, -11], [-23, -14]], [[20028, 90668], [-14, -48], [-6, 5], [-9, 23], [-20, 11], [-21, 25], [0, 55], [8, 25], [-2, 35], [22, 21], [16, -25], [5, -42], [-4, -20], [16, -22], [7, -5], [4, -17], [-2, -21]], [[19676, 91003], [31, -6], [23, 4], [17, -23], [7, -23], [-2, -8], [-8, -4], [-49, 26], [-18, 16], [-6, 14], [5, 4]], [[19974, 90440], [35, -5], [45, 1], [-8, -44], [-17, -29], [-14, -8], [-6, 16], [-26, 35], [-9, 34]], [[19632, 91008], [-10, -2], [-38, 34], [8, 30], [35, -31], [5, -18], [0, -13]], [[33057, 84123], [3, -14], [-43, 10], [-15, 9], [-1, 9], [2, 15], [8, 17], [20, 13], [11, -7], [23, -17], [3, -11], [-11, -24]], [[32849, 84996], [23, -17], [6, -63], [-44, 4], [-50, 42], [-10, 31], [1, 5], [7, 5], [13, -7], [12, 11], [13, 3], [29, -14]], [[30789, 85852], [-17, -42], [-23, 5], [-8, -8], [-6, -1], [10, 39], [1, 27], [-5, 27], [8, 13], [30, 1], [0, -31], [4, -11], [7, -6], [-1, -13]], [[56159, 86618], [35, -13], [15, 5], [17, -30], [-29, -20], [-2, -24], [12, -14], [4, -22], [-29, 0], [-13, 18], [-6, 23], [-13, 16], [-18, 13], [9, 16], [5, 24], [13, 8]], [[55958, 86710], [-4, -27], [-19, 3], [-19, -5], [-15, 27], [-9, 45], [3, 9], [12, 10], [9, -24], [42, -38]], [[56064, 86486], [-28, -20], [-10, 5], [3, 33], [16, 15], [28, 2], [-9, -35]], [[32109, 86616], [-10, -40], [-32, 15], [-50, 30], [-20, 20], [-7, 22], [0, 30], [15, 5], [37, 3], [32, -42], [9, -6], [26, -37]], [[85047, 71849], [-4, -14], [-12, 4], [-12, 40], [-5, 31], [-13, 18], [20, 27], [25, -49], [1, -57]], [[70136, 47593], [-6, -23], [-12, -10], [-5, 58], [-17, 41], [7, 0], [15, -21], [6, -56], [5, 17], [-1, 17], [3, 16], [-2, 18], [-9, 28], [3, 5], [13, -23], [2, -19], [-2, -48]], [[11234, 46693], [-18, -5], [-3, 29], [6, 15], [8, 7], [13, -9], [8, -12], [-1, -11], [-13, -14]], [[93789, 46797], [0, -20], [-16, 6], [-36, 31], [-1, 14], [20, 5], [15, -4], [12, -18], [6, -14]], [[55725, 86428], [-2, -13], [-23, -3], [-10, 12], [-21, -2], [-3, 6], [8, 12], [17, 8], [22, -3], [12, -17]], [[56007, 86467], [-24, -6], [-15, 17], [6, 12], [17, 14], [18, -2], [4, -16], [-6, -19]], [[56902, 89280], [-42, -19], [-33, 12], [-1, 37], [21, 18], [37, 7], [52, -18], [7, -10], [-29, -7], [-12, -20]], [[58321, 92048], [-53, -17], [-6, 14], [11, 22], [14, 44], [22, -2], [22, -17], [17, -20], [-27, -24]], [[51377, 87030], [-25, -8], [-19, 6], [7, 55], [10, 9], [15, 4], [16, -30], [-4, -36]], [[52250, 88327], [-27, 0], [-32, 9], [-21, 19], [-3, 16], [38, 21], [37, 12], [18, -23], [1, -37], [-11, -17]], [[52352, 88517], [-31, -1], [-20, 13], [46, 25], [72, 25], [6, 15], [9, 2], [12, -19], [2, -26], [-8, -13], [-88, -21]], [[53474, 89805], [-22, -2], [0, 23], [13, 22], [20, 14], [26, 4], [29, 2], [9, -12], [-17, -16], [-58, -35]], [[53449, 89886], [-25, -4], [4, 26], [21, 24], [8, 16], [4, 20], [18, 14], [26, -19], [1, -31], [-13, -30], [-44, -16]], [[55490, 92290], [15, -7], [14, 4], [11, -6], [23, -30], [25, -12], [2, -15], [-23, -15], [-31, -4], [-32, 5], [-9, 19], [-10, 31], [-27, 31], [-4, 27], [23, 5], [23, -33]], [[56511, 92635], [-6, -18], [-9, -18], [-23, -18], [-66, -74], [-38, -11], [-13, -12], [-15, -7], [-48, 10], [-14, -15], [-14, -10], [-34, -4], [-21, 4], [-53, 27], [-31, 29], [-17, 26], [49, -1], [17, 6], [33, -5], [19, 26], [42, -3], [80, 18], [29, -10], [67, 60], [21, -2], [32, 17], [13, -15]], [[55771, 92217], [-15, -14], [-23, -5], [-12, 8], [-17, 6], [-20, -3], [-16, 25], [1, 20], [23, 28], [45, 16], [36, -6], [10, -9], [-12, -66]], [[57107, 92823], [74, -22], [25, 0], [37, -41], [19, 4], [-3, -25], [-37, -12], [-58, -7], [-9, -5], [-49, 4], [-28, 33], [-47, 9], [0, 11], [30, 25], [46, 26]], [[56559, 92482], [5, -27], [2, -23], [-26, -32], [-59, -42], [3, -11], [-20, -11], [-31, -8], [-17, 8], [2, 36], [-5, 11], [-23, -15], [-24, 19], [-1, 18], [7, 16], [23, 25], [37, 16], [25, -6], [83, 65], [9, -14], [10, -25]], [[56671, 92492], [-53, -23], [-31, 20], [-13, 20], [-1, 45], [7, 27], [25, 15], [16, -11], [4, -8], [29, -9], [34, -28], [-17, -48]], [[53853, 91166], [17, -10], [43, 3], [8, -4], [-6, -16], [-19, -18], [-39, -11], [-18, -27], [-12, -9], [-34, -1], [-20, -6], [-25, -24], [-20, 18], [-5, -13], [-4, -23], [-11, -6], [-34, -9], [-8, 53], [16, 20], [12, 22], [19, 4], [17, -2], [30, 50], [42, 14], [26, 1], [25, -6]], [[53603, 90941], [-41, -31], [15, 56], [22, 56], [30, 32], [16, -12], [-7, -27], [0, -27], [-7, -13], [-28, -34]], [[54861, 91933], [34, -33], [15, 10], [29, 3], [22, -11], [18, -21], [22, -1], [13, -27], [7, -36], [-16, -27], [-22, -12], [-6, -31], [9, -44], [-49, -15], [-58, -7], [-22, 21], [-45, -38], [-46, -60], [-21, -7], [-2, 19], [-32, 13], [-42, 1], [1, 14], [8, 10], [36, 15], [7, 30], [-7, 54], [7, 26], [1, 19], [23, 21], [77, -10], [9, 20], [-6, 13], [-39, 22], [6, 15], [28, 14], [28, 2], [8, 22], [1, 10], [4, 6]], [[55348, 92203], [25, -31], [22, 3], [6, 12], [15, 6], [30, -17], [-4, -28], [-42, -36], [-30, -50], [-38, -12], [-18, 6], [-35, -29], [-27, -31], [-28, -38], [-2, -20], [-5, -15], [-104, -15], [-37, -10], [-40, 12], [-19, 26], [6, 14], [40, 5], [1, 24], [10, 14], [13, 8], [9, 30], [16, 8], [30, -7], [20, 22], [11, 3], [14, -18], [6, 25], [-6, 23], [3, 15], [38, 40], [17, 29], [24, 19], [22, -3], [7, 28], [-7, 28], [3, 18], [20, 45], [22, 2], [11, -40], [1, -65]], [[54377, 91336], [4, -4], [38, 56], [41, 17], [3, 19], [16, 19], [-2, 31], [9, 24], [21, 7], [13, 8], [15, 5], [27, -20], [15, -22], [19, -50], [-8, -48], [-50, -38], [-40, -17], [-41, -43], [-20, -35], [-17, -8], [-11, 3], [-10, 9], [-21, 0], [-22, -31], [-68, -25], [-27, 7], [-1, 31], [-16, -3], [-26, -36], [-25, -12], [-16, -4], [-31, 14], [-83, -63], [-78, -11], [-25, 7], [0, 38], [50, 49], [41, 34], [142, 23], [88, 101], [21, 109], [21, 39], [-10, 23], [-24, 4], [-1, 34], [12, 37], [47, 51], [25, 22], [42, 62], [20, 14], [23, 0], [23, -16], [-4, -33], [-34, -60], [-50, -51], [6, -37], [20, -30], [5, -51], [1, -50], [-38, -66], [-9, -33]], [[54224, 91556], [36, -58], [16, -34], [-13, -64], [-35, -32], [-54, -6], [-38, 3], [-24, 16], [-3, 17], [-14, 5], [-37, -22], [-25, -3], [-32, 17], [-9, 28], [34, 35], [16, 27], [38, -3], [10, -8], [21, -5], [13, 32], [-3, 23], [10, 15], [46, -11], [0, 61], [17, 5], [8, -3], [13, -13], [9, -22]], [[53119, 89208], [-14, -16], [-33, 13], [-63, -10], [-26, 15], [20, 31], [58, 32], [31, -2], [31, -39], [-4, -24]], [[51412, 86582], [1, -68], [-25, 5], [-12, 26], [-3, 17], [2, 39], [-6, 41], [7, 20], [10, 3], [16, -36], [10, -47]], [[53324, 89646], [-18, -18], [-35, 5], [-3, 15], [9, 31], [21, 13], [27, -3], [9, -13], [-10, -30]], [[28038, 95579], [3, -34], [-20, 1], [-65, -22], [-52, -3], [-26, 10], [-17, 23], [41, 43], [47, 31], [57, 47], [47, 30], [23, -6], [22, -16], [-28, -47], [-30, -23], [-2, -34]], [[30092, 96385], [-99, -5], [-97, 22], [-34, 17], [2, 27], [14, 9], [53, 9], [44, 2], [29, -4], [70, -16], [50, -16], [33, -5], [-9, -24], [-56, -16]], [[37537, 99126], [-56, -10], [-118, 61], [-186, 61], [-164, 40], [-154, 107], [-12, 38], [21, 33], [135, 5], [108, 15], [274, -66], [138, -56], [46, -45], [-7, -92], [-25, -91]], [[44815, 98989], [-29, -18], [-73, 7], [-94, 52], [-62, 43], [-5, 50], [32, 22], [50, 4], [69, -43], [71, -58], [41, -59]], [[45107, 97825], [-117, -66], [-174, 5], [-103, 31], [-30, 45], [40, 51], [125, 41], [156, 25], [142, -15], [20, -51], [-59, -66]], [[44723, 96758], [-37, -20], [-25, 61], [-22, 81], [-5, 92], [57, 45], [29, 11], [20, -11], [-5, -40], [0, -82], [19, -55], [-31, -82]], [[44838, 95646], [-32, -16], [-108, 239], [0, 87], [7, 66], [49, 5], [42, -36], [20, -137], [22, -208]], [[44999, 95280], [22, -61], [10, -56], [35, -35], [73, 5], [29, -66], [-53, -26], [-214, 10], [-88, -5], [-61, 41], [2, 71], [8, 71], [61, 41], [51, -36], [62, 26], [63, 20]], [[45012, 96567], [-54, 0], [-20, 15], [13, 27], [75, 85], [25, 7], [37, -9], [11, -44], [-24, -44], [-63, -37]], [[41679, 99979], [267, -35], [141, -40], [30, 1], [191, -15], [182, -19], [302, -51], [42, -16], [-32, -14], [-75, -9], [-386, -16], [-700, -21], [-401, -39], [-127, -2], [-11, -59], [54, -3], [89, 8], [314, 59], [117, 9], [219, -5], [285, -22], [114, 8], [205, -6], [239, 17], [283, 37], [77, -82], [104, -81], [83, 9], [70, -5], [24, -26], [39, -12], [80, 6], [245, -23], [168, -42], [63, -19], [30, -28], [18, -22], [-27, -28], [-105, -49], [-133, -45], [-179, -34], [-207, -22], [-1588, -73], [-54, -17], [-31, -44], [21, -57], [74, -9], [173, 32], [300, 31], [221, -2], [527, -26], [155, -68], [82, -105], [183, 24], [39, 18], [29, 31], [22, 33], [18, 36], [19, 24], [21, 13], [45, 11], [105, 13], [274, 13], [66, -4], [48, -49], [10, -28], [3, -38], [-1, -45], [-6, -55], [-24, -54], [-76, -94], [-61, -52], [-66, -37], [-126, -84], [-44, -23], [-138, -99], [-35, -45], [-2, -34], [24, -6], [40, 31], [15, 23], [26, 23], [205, 62], [44, 17], [133, 74], [86, 28], [70, 29], [37, 20], [206, 146], [107, 43], [112, 0], [20, -73], [135, -12], [59, 3], [94, -18], [41, -14], [70, -8], [73, -17], [63, 18], [19, 12], [62, 54], [83, 47], [77, 59], [26, 15], [41, 13], [42, 5], [115, 28], [29, 2], [62, -9], [273, -5], [150, -14], [208, -40], [145, -21], [67, -20], [97, -41], [79, -43], [37, -13], [-2, -13], [-27, -19], [-195, -66], [-64, -45], [-185, -83], [-90, -29], [-98, -11], [-109, -2], [-71, -12], [-10, -12], [50, -34], [22, -25], [-3, -22], [-53, -32], [-20, -8], [-192, -24], [-97, -41], [-126, -5], [-89, 5], [-123, -44], [48, -36], [44, -16], [137, -32], [1, -19], [-66, -38], [-89, -44], [-105, -31], [-40, -5], [-50, 8], [-46, -2], [-101, -14], [-97, -2], [-173, 20], [-93, 23], [-49, 8], [-62, -2], [-24, -9], [-98, -56], [-48, -38], [-31, -39], [-13, -42], [5, -46], [12, -32], [19, -17], [23, -10], [41, -6], [89, 6], [35, -3], [11, -10], [19, -29], [-3, -28], [-17, -39], [-12, -45], [-9, -52], [5, -29], [36, -6], [17, 2], [19, -9], [23, -21], [17, -22], [11, -23], [-6, -19], [-23, -15], [-52, -17], [-128, -33], [-13, -10], [-10, -21], [-7, -30], [-16, -28], [-23, -25], [-22, -15], [-42, -6], [-54, -1], [-61, -14], [-144, -84], [-2, -9], [54, -27], [-2, -24], [-67, -101], [-18, -50], [-14, -68], [-24, -58], [-33, -47], [-33, -55], [-31, -61], [5, -47], [41, -33], [56, 26], [69, 86], [74, 38], [81, -12], [70, -17], [90, -34], [76, -21], [65, -28], [26, -23], [27, -33], [1, -20], [-48, -12], [-16, 4], [-119, 54], [-58, 14], [-77, -16], [-67, -25], [60, -99], [65, -45], [117, -21], [62, -22], [44, -28], [35, -14], [47, 6], [64, 28], [88, 1], [40, -13], [28, -26], [13, -47], [-3, -70], [-9, -52], [-16, -35], [-32, -47], [-27, -9], [-37, 3], [-35, 9], [-32, 17], [-49, 13], [-98, 14], [-98, 31], [-56, 8], [-117, -4], [-127, -20], [-5, -25], [-182, -89], [-37, 1], [-50, 30], [-71, 30], [-41, 0], [-62, -38], [-15, -14], [1, -14], [45, -32], [18, -7], [24, -6], [80, -8], [36, -8], [33, -100], [52, -61], [23, -13], [19, -5], [65, 3], [83, 20], [28, -16], [61, -20], [36, -6], [43, 1], [49, -7], [67, -57], [-26, -72], [42, -57], [67, -59], [15, -21], [7, -39], [1, -26], [5, -24], [9, -21], [9, -42], [9, -62], [-2, -51], [-15, -39], [-27, -29], [-42, -18], [-34, 5], [-26, 27], [-37, 29], [-48, 31], [-80, 3], [-117, -90], [-52, -5], [-42, -9], [-46, -39], [-66, -24], [-59, 9], [-103, 46], [37, -30], [54, -36], [33, -19], [25, -4], [27, 4], [39, 15], [88, 41], [23, 6], [20, -3], [16, -12], [19, -35], [21, -58], [-3, -49], [-26, -41], [-23, -26], [-18, -12], [0, -9], [49, -10], [69, 53], [22, 66], [32, 76], [56, 25], [64, -25], [52, -71], [72, -131], [31, -14], [39, -31], [17, -39], [-4, -45], [-9, -33], [-12, -21], [-15, -13], [-27, -8], [-50, -7], [-111, 14], [-58, 0], [7, -45], [-117, -39], [-133, -15], [-125, 30], [-104, 47], [34, 65], [20, 72], [-51, 48], [-11, 1], [18, -74], [-15, -28], [-57, -35], [-40, -15], [-3, -10], [19, -8], [13, -15], [6, -23], [-7, -23], [-19, -24], [-11, -19], [-2, -16], [18, -20], [38, -22], [41, -11], [191, -5], [77, -13], [182, -53], [8, -17], [-31, -96], [-17, -92], [-35, -17], [-191, -4], [-62, -14], [-90, -42], [-87, -51], [-45, -1], [-178, 45], [-68, 29], [-147, 84], [-110, 128], [-51, -53], [-30, -26], [-32, -13], [-31, -2], [-30, 9], [-34, 20], [-56, 47], [-68, 46], [-47, 22], [-1, -6], [27, -27], [41, -32], [103, -92], [37, -23], [-4, -16], [-65, -15], [-79, -31], [-39, -24], [-60, -56], [-20, -9], [-90, -14], [-29, 3], [-67, 32], [-99, 20], [-59, 18], [-82, 33], [29, -36], [157, -55], [17, -17], [-32, -33], [-20, -12], [-37, -3], [-56, 7], [-56, -1], [-58, -10], [-24, -12], [8, -15], [13, -14], [20, -12], [18, 0], [44, 38], [33, 2], [88, -9], [89, 29], [64, 13], [48, 3], [175, 44], [37, 50], [58, 20], [131, 15], [126, -8], [65, -6], [53, -47], [70, -34], [59, -37], [69, -13], [40, -50], [111, -57], [71, -12], [44, -27], [4, -114], [5, -49], [-19, -136], [-57, -31], [11, -72], [-15, -58], [-57, 22], [-58, 38], [-139, 59], [-130, 38], [-50, 35], [-59, 26], [-81, 109], [-52, 135], [-23, 67], [-44, 4], [-57, -18], [-49, -19], [-24, -32], [-168, -45], [-61, -30], [-35, 0], [-125, -45], [50, -22], [23, -3], [51, 12], [31, 16], [114, 44], [92, 7], [33, 19], [70, 26], [48, 8], [7, -7], [5, -12], [33, -165], [-14, -44], [-38, -19], [-80, -31], [-21, -15], [23, -27], [76, 25], [50, 27], [26, -10], [43, -41], [49, -21], [123, -64], [59, -35], [82, -34], [93, -47], [24, -17], [85, -24], [18, -8], [36, -83], [29, -10], [85, -5], [-15, -32], [-83, -72], [-43, -22], [-10, -15], [4, -25], [2, -42], [17, -78], [20, 72], [13, 34], [19, 10], [17, 2], [58, 32], [58, -17], [15, -81], [8, -76], [-5, -66], [6, -101], [-2, -35], [14, -29], [14, -124], [14, -37], [-29, -33], [-88, -14], [-35, 16], [-87, -6], [0, 30], [-5, 33], [0, 24], [-6, 21], [-4, 122], [-25, -31], [-1, -24], [-7, -25], [-15, -132], [-22, -32], [-70, 8], [-69, -5], [-38, 5], [-129, 60], [-50, 54], [-44, 82], [-28, 76], [-10, 71], [-31, 57], [-51, 45], [-61, 36], [-70, 28], [-62, 35], [-53, 44], [-58, 33], [-64, 25], [-90, 10], [-133, -4], [-89, 27], [-22, -2], [-21, -14], [16, -40], [103, -18], [79, -5], [105, 3], [64, -10], [24, -23], [16, -42], [9, -59], [-21, -47], [-76, -52], [-39, -25], [-117, -47], [-39, -10], [-97, -4], [-75, 5], [-98, 23], [-55, 5], [-115, 3], [-27, -8], [30, -25], [49, -14], [34, -17], [4, -32], [-13, -48], [-13, -33], [-21, -25], [-75, -47], [-31, -15], [-141, -50], [-10, -10], [33, 2], [89, 17], [26, 0], [146, -43], [116, 2], [236, 40], [19, -1], [16, -6], [15, -15], [16, -23], [-19, -23], [-54, -22], [-84, -22], [-36, -15], [-35, -22], [-64, -53], [-19, -56], [68, -21], [30, 27], [36, 59], [33, 35], [76, 24], [94, -12], [72, 14], [148, 58], [26, 4], [217, -34], [197, -65], [103, -25], [138, -14], [246, 7], [22, -11], [-8, -23], [-14, -20], [-41, -27], [-50, -18], [-31, -5], [-27, -13], [-59, -13], [-15, -10], [21, -45], [-10, -7], [-52, -1], [-88, -29], [-72, 2], [-15, -5], [14, -10], [14, -21], [16, -32], [-9, -22], [-32, -13], [-24, -4], [-85, 18], [-14, -3], [13, -13], [7, -20], [2, -28], [-21, -23], [-43, -18], [-81, -51], [-35, -15], [-74, -12], [-15, -7], [30, -39], [-4, -16], [-49, -42], [-76, -27], [-10, -14], [-7, -38], [-6, -15], [-20, -22], [-71, -42], [-51, -21], [-25, -17], [-31, -28], [-40, -16], [-47, -1], [-45, -11], [-74, -30], [-51, -10], [-163, -53], [-76, -8], [-66, -19], [-137, -50], [-64, -16], [-45, -19], [-49, -5], [-80, 12], [-43, 1], [-27, -8], [-24, -15], [-40, -42], [-34, -4], [-112, 34], [3, -15], [29, -36], [-1, -26], [-67, -26], [-36, -7], [-52, 11], [-70, 28], [-90, 59], [-109, 89], [-53, 30], [4, -29], [12, -28], [20, -27], [5, -20], [-13, -12], [-16, -6], [-20, 0], [-3, -7], [33, -43], [25, -44], [-2, -41], [-31, -39], [-26, -23], [-22, -7], [-130, -98], [-37, -13], [-16, -12], [-14, -18], [-38, -81], [-15, -25], [-30, -32], [-13, -6], [-4, -13], [6, -21], [-9, -34], [-22, -49], [-76, -133], [-61, -125], [-27, -41], [-20, -17], [-12, 6], [-30, -3], [-15, -22], [-13, -40], [-15, -30], [-16, -21], [-122, -89], [-32, -17], [-28, 11], [-34, -4], [-70, 47], [-12, 17], [-45, 39], [2, -20], [8, -11], [6, -17], [16, -20], [34, -105], [-27, -22], [-25, -25], [-63, -42], [-68, -70], [-25, -19], [-5, 57], [3, 17], [-39, 27], [1, -19], [-4, -19], [-27, -74], [-8, -13], [-14, 3], [-30, -14], [-30, 7], [-26, 33], [-11, 18], [-47, -48], [-23, 1], [-4, -40], [-22, -37], [-30, -16], [-41, 1], [-25, -21], [-55, 23], [-13, 44], [44, 60], [12, 25], [-8, 30], [11, 39], [84, 125], [57, 63], [-3, 12], [-77, 13], [-68, 22], [-66, 8], [-29, -8], [46, -36], [66, -35], [-33, -34], [-27, -36], [-29, -97], [-19, -40], [-72, 46], [-33, 16], [21, -51], [63, -48], [4, -16], [0, -57], [-121, -50], [-125, -8], [-91, -14], [-152, -18], [-59, 0], [-5, -19], [149, -89], [22, -16], [-21, -30], [-31, -19], [-48, -65], [-25, -23], [-63, -31], [-115, 35], [-59, -16], [-57, 11], [-1, -38], [17, -27], [17, -69], [38, 6], [48, 21], [38, -52], [24, -87], [43, -45], [19, -34], [8, -33], [-27, -32], [-55, -46], [-62, -8], [4, -36], [-27, -26], [-56, 7], [-26, 18], [-28, 9], [-112, 10], [113, -70], [40, -32], [18, 19], [39, 5], [58, -18], [-10, -118], [26, -95], [3, -21], [-62, -57], [-1, -54], [-36, -15], [-40, 4], [-2, -59], [-27, -36], [5, -23], [8, -20], [-25, -38], [-22, -45], [-31, -39], [-17, 4], [-50, -3], [-60, 3], [-49, 52], [-20, 17], [-23, 11], [9, -33], [14, -20], [45, -37], [82, -46], [-2, -33], [-22, -14], [-52, -89], [-18, -1], [-23, -23], [-72, 7], [-30, 9], [-88, -5], [-30, 7], [-26, -3], [24, -25], [51, -23], [57, -23], [87, -17], [-3, -32], [-22, -27], [13, -39], [-10, -29], [-4, -34], [-20, -78], [23, -54], [26, -26], [-3, -35], [12, -55], [-38, -50], [-33, 2], [-45, -11], [-16, -22], [73, -20], [-7, -38], [-19, -46], [-21, -100], [-42, -172], [-20, -171], [-91, -141], [-32, -3], [-8, -6], [-45, 7], [-69, 33], [-54, 10], [-36, 1], [-5, -16], [30, -27], [46, -10], [37, -18], [66, -16], [23, -31], [16, -33], [-3, -19], [0, -21], [12, -117], [-31, -40], [-24, -37], [-82, 5], [-15, 13], [-79, 38], [5, -18], [57, -52], [20, -26], [-13, -5], [-23, -2], [-33, -18], [-58, 10], [3, 26], [11, 27], [-27, -4], [-29, -14], [-18, 5], [-14, -1], [-8, 13], [-12, 53], [14, 27], [48, 69], [15, 37], [-13, 16], [-34, -39], [-36, -63], [-16, -38], [-22, -8], [-55, 20], [-158, 88], [5, 53], [-2, 45], [46, 5], [34, 20], [30, 23], [33, 43], [31, 71], [-4, 6], [-90, -91], [-56, -30], [-27, -6], [-14, 14], [-44, 29], [-29, 13], [-67, 22], [-12, 11], [-19, 9], [-27, 93], [35, 113], [23, 32], [15, 38], [9, 50], [-6, 22], [-20, -8], [-9, -17], [1, -27], [-11, -18], [-80, -43], [-79, -35], [-38, -33], [-24, -26], [-19, -25], [-29, 2], [-41, -5], [-27, -16], [-41, 10], [-26, 24], [-32, 3], [-35, -12], [-25, 1], [2, -16], [16, -41], [-27, -3], [-52, -1], [-26, 11], [-20, 16], [-17, 22], [10, 28], [83, 52], [38, 30], [-24, 10], [-80, -9], [-14, 7], [-53, -4], [2, 77], [-13, 19], [-1, 9], [-18, 21], [-18, 6], [-11, 7], [-90, 18], [-12, 43], [-6, 44], [-17, 55], [-43, 14], [-24, 24], [19, 24], [8, 31], [-20, 14], [-13, 22], [2, 14], [-16, 38], [-5, 30], [18, 27], [51, 32], [17, 13], [9, 14], [58, 23], [-50, 16], [-31, 3], [-23, -8], [-21, -31], [-19, -20], [-77, -7], [-11, 11], [-5, 43], [4, 34], [32, 47], [-37, 23], [-33, 8], [-39, 22], [-35, 23], [-30, 27], [-29, 31], [-10, 4], [11, 34], [6, 27], [1, 58], [-12, 25], [26, 50], [36, 54], [78, 82], [-83, -39], [-68, -86], [-15, -4], [-5, 16], [-26, 55], [-19, 15], [-9, 17], [-39, 29], [-17, 23], [-24, 44], [-34, 52], [-48, 103], [-78, 119], [-20, 67], [25, 84], [-27, 58], [74, 27], [106, 31], [55, 25], [32, 7], [68, 5], [22, 25], [-37, -6], [-25, 3], [-2, 12], [9, 21], [6, 27], [-13, -5], [-66, -46], [-97, -37], [-76, -21], [-13, 1], [-26, -13], [-16, -3], [-11, 3], [-27, 36], [-8, 23], [49, 63], [36, 86], [48, 56], [33, 7], [57, -3], [20, -5], [-7, 33], [3, 16], [46, 20], [53, 8], [38, -6], [24, -39], [31, -72], [41, -24], [-2, 34], [-21, 45], [-8, 68], [-27, 29], [-22, 14], [-61, -7], [-36, 50], [-9, 19], [0, 24], [-37, 72], [-12, 36], [-19, 47], [-10, 3], [13, -60], [17, -42], [24, -93], [12, -38], [-16, -29], [-31, -30], [-27, -17], [-64, -21], [14, 46], [8, 45], [-32, -16], [-30, -33], [-10, -45], [-20, -41], [-57, -101], [-23, -56], [-21, -27], [-24, -8], [-21, 22], [-18, 51], [-9, 41], [-1, 104], [3, 49], [-10, 65], [-31, 153], [-7, 54], [-52, 29], [-1, 9], [-14, 31], [-10, 31], [9, 12], [12, 8], [78, 46], [58, 51], [70, 80], [28, 25], [102, 19], [45, 3], [-1, 14], [-15, 6], [-68, -4], [-92, -32], [-16, -12], [-40, -50], [-31, -27], [-87, -62], [-56, 0], [-58, 74], [-65, -14], [-44, 5], [-13, 11], [-10, 102], [36, 119], [-38, 1], [-8, 5], [-20, 27], [-13, 8], [9, 14], [94, 56], [141, 111], [61, 43], [37, 19], [29, 21], [34, 47], [11, 20], [20, 16], [40, 19], [44, 28], [72, 63], [9, 23], [-15, 5], [-34, -21], [-68, -58], [-49, -32], [-166, -145], [-71, -52], [-38, -34], [-30, -32], [-32, -23], [-33, -14], [-71, -10], [-35, -12], [-21, 9], [-10, 69], [7, 40], [-3, 40], [18, 58], [26, 40], [11, 22], [5, 16], [55, 42], [30, 18], [21, 42], [121, 15], [31, -1], [16, 5], [13, 13], [-12, 9], [-36, 7], [-97, -2], [-89, 8], [-40, 7], [-20, -4], [-32, 12], [-35, 23], [-55, 86], [22, 110], [2, 53], [69, 46], [37, 15], [53, 35], [71, 59], [84, 36], [43, 7], [36, -6], [131, -51], [68, -10], [60, 13], [75, -18], [132, -74], [25, 11], [-7, 18], [-148, 78], [1, 23], [38, 6], [40, 22], [-22, 14], [-98, -12], [-29, -18], [-95, -10], [-49, 16], [-45, 8], [-67, 33], [-56, -11], [-35, -13], [-62, -13], [-23, -8], [-122, -106], [-51, -22], [-37, 7], [26, 69], [7, 27], [0, 30], [11, 40], [62, 77], [40, 84], [16, 53], [31, 6], [42, -8], [126, -34], [105, -40], [77, -11], [51, -1], [22, 13], [17, 22], [7, 15], [5, 32], [6, 12], [17, 13], [34, 49], [11, 34], [-11, 20], [-24, -2], [-45, -13], [-6, -6], [1, -10], [-44, -54], [-47, -12], [-110, -18], [-50, -1], [-89, 25], [-13, 9], [-9, 19], [-109, -5], [-33, -5], [-26, 2], [13, 32], [34, 35], [48, 114], [41, 29], [80, 27], [84, -4], [145, -88], [44, -8], [40, 7], [96, 30], [18, 12], [34, 36], [40, 63], [-2, 15], [-61, -35], [-33, -10], [-28, 0], [26, 115], [10, 87], [9, 22], [82, -7], [111, 12], [26, 19], [0, 9], [-45, 11], [-21, 25], [-38, -8], [-50, -16], [-62, 2], [5, 37], [46, 79], [5, 36], [18, 72], [1, 37], [24, 36], [72, 25], [31, 16], [1, 16], [-43, 64], [11, 18], [34, 16], [13, 11], [-9, 8], [-31, 7], [-49, -14], [-53, -7], [-47, 21], [-37, 10], [-24, -3], [-63, -36], [-23, -1], [-27, 10], [-183, 31], [-22, 11], [-65, 54], [-54, 36], [-72, 39], [-93, 30], [-114, 20], [-68, 19], [-34, 27], [-58, 59], [-44, 50], [-8, 24], [26, 30], [26, 22], [50, 18], [85, -6], [46, -8], [50, -17], [38, -3], [79, 4], [80, -10], [48, -12], [63, -25], [172, -106], [72, -37], [32, -4], [129, -39], [20, 0], [53, 19], [6, 12], [-18, 11], [-57, 10], [-67, 43], [-42, 34], [-4, 57], [5, 32], [10, 15], [8, 48], [-39, 29], [-27, 9], [-72, 43], [-6, 10], [34, 5], [34, -3], [73, -21], [38, -3], [28, 8], [3, 9], [-44, 24], [-56, 44], [-115, 6], [-75, -5], [-48, 15], [-51, 24], [-32, 7], [-67, -16], [-34, -1], [-31, 5], [-30, 76], [8, 23], [24, 10], [18, 25], [12, 26], [40, 25], [217, 56], [55, 42], [-2, 7], [-37, -8], [-48, -19], [-31, -4], [-128, 24], [-20, -5], [-52, -35], [-70, -38], [-32, 2], [-44, 23], [-7, 16], [-3, 19], [48, 26], [15, 14], [31, 38], [-2, 18], [-52, -10], [-7, 17], [1, 30], [-5, 37], [-13, 37], [-43, 57], [-18, 14], [-15, 21], [-33, 77], [10, 19], [29, 14], [5, 7], [-69, -12], [-7, -13], [13, -20], [9, -26], [6, -32], [9, -29], [25, -31], [20, -16], [33, -43], [14, -48], [-4, -25], [-26, -26], [-40, -27], [-13, -23], [-5, -23], [-32, -21], [-19, 8], [-16, 1], [18, -37], [12, -39], [-14, -38], [-38, -24], [-20, 0], [-41, -19], [-103, -10], [-36, 4], [-66, 20], [-78, 10], [-31, 26], [-40, 47], [-21, 42], [0, 38], [11, 27], [22, 17], [27, 109], [38, 88], [96, 91], [27, 33], [9, 17], [0, 14], [-15, 8], [-118, -112], [-73, -12], [-21, 25], [6, 45], [13, 11], [59, -5], [23, 25], [-37, 38], [-39, 10], [-9, 9], [40, 29], [93, -2], [21, 20], [34, 22], [37, 40], [14, 34], [3, 29], [-8, 23], [-1, 23], [7, 24], [-10, 26], [-26, 28], [-57, 28], [-17, -31], [-18, -13], [-25, -3], [-24, 13], [-24, 5], [-24, 12], [-24, 3], [-10, 10], [-6, 26], [-1, 34], [28, 16], [39, 13], [26, 23], [17, 34], [3, 38], [-12, 40], [-32, 37], [-58, -36], [-23, -9], [-6, 26], [-8, 19], [-24, 25], [-33, 18], [-31, 13], [-1, 19], [7, 21], [14, 24], [18, 52], [20, -5], [16, 5], [-9, 42], [-16, 36], [-19, 20], [-1, 9], [-4, 10], [-14, 25], [-16, 19], [-29, 52], [-20, 19], [-26, 11], [-28, 0], [-45, -13], [-83, -16], [-66, -8], [-11, 4], [33, 20], [49, 21], [64, 14], [19, 34], [-7, 29], [2, 28], [-17, 30], [17, 16], [58, 16], [27, 3], [26, 21], [-74, 50], [-77, 33], [-20, 14], [-17, 22], [-15, 30], [-24, 31], [-33, 31], [-48, 30], [-125, 54], [-42, 38], [-40, 57], [-19, 25], [-21, 18], [-87, 43], [-10, 18], [89, 50], [9, 20], [-36, 61], [-38, 44], [-41, 16], [-60, 8], [-56, 20], [-50, 31], [-51, 23], [-76, 22], [-126, 56], [-195, 59], [-87, 35], [-52, 13], [-68, 3], [-132, 33], [-111, 10], [-69, -4], [-22, 5], [-51, 33], [-79, 19], [-41, -7], [-51, -36], [-62, -35], [-32, -4], [-49, 32], [-24, 22], [-23, 8], [-23, -8], [-43, -29], [-41, -21], [-61, -25], [-49, -12], [-63, -3], [-16, -9], [-24, -1], [-32, 8], [-31, 17], [-28, 24], [-25, 14], [-22, 2], [-50, -13], [-63, -37], [-29, -9], [-24, 3], [-30, 12], [-59, 30], [-33, -3], [-24, -10], [6, -25], [56, -59], [50, -42], [-42, -5], [-368, 57], [-46, 14], [-68, 34], [-56, 21], [-96, 54], [-74, 30], [-24, 22], [-6, 16], [23, 22], [149, 72], [56, 14], [116, 18], [27, 11], [9, 8], [-30, 16], [-151, -6], [-135, 11], [-117, 28], [-21, 10], [-19, 17], [-20, 26], [5, 28], [28, 32], [16, 22], [5, 11], [-147, -77], [-60, -28], [-48, 9], [-34, 13], [-16, 14], [1, 16], [5, 11], [10, 7], [-78, 33], [-35, 25], [-4, 26], [28, 27], [27, 19], [27, 12], [72, 11], [263, 20], [188, -19], [64, 64], [43, 21], [127, 21], [195, 3], [138, -12], [64, -15], [88, -33], [5, 10], [-21, 30], [-2, 25], [36, 43], [16, 27], [-11, 29], [-38, 29], [-69, 38], [-36, 3], [-41, -9], [-49, -21], [-102, -53], [-49, -11], [-80, -3], [-44, 7], [-43, 8], [-67, 28], [-25, 5], [-29, -12], [-35, -30], [-34, -21], [-32, -12], [-30, -5], [-43, 2], [-173, 47], [-40, 21], [-2, 31], [-53, 30], [-60, 5], [-8, 11], [77, 46], [57, 19], [-10, 6], [-82, 1], [-56, -25], [-32, -4], [-74, -1], [-77, 13], [-33, 11], [-34, 25], [-38, 14], [-115, 21], [-26, 12], [-25, 19], [-94, 55], [-57, 40], [-8, 22], [66, 49], [3, 12], [-28, 21], [-12, 15], [10, 22], [57, 47], [22, 13], [103, 28], [104, 40], [37, 9], [34, 3], [136, -3], [42, 10], [36, 20], [58, 20], [123, 30], [272, 46], [18, 6], [1, 8], [-24, 24], [-5, 12], [55, 21], [126, 33], [86, 16], [55, 2], [45, 7], [63, 21], [35, 4], [214, 8], [95, -12], [46, 1], [30, 8], [40, 24], [74, 59], [38, 36], [37, 56], [48, 88], [35, 85], [24, 83], [18, 51], [13, 18], [44, 23], [47, 18], [79, 16], [-7, 7], [-34, 12], [-31, 5], [-29, -3], [-53, -18], [-69, -13], [-67, 2], [-48, -5], [-44, -17], [-71, -14], [-48, 3], [-86, 25], [-43, 5], [-110, -3], [-32, 10], [-28, 17], [-23, 25], [-16, 32], [2, 34], [40, 60], [15, 16], [107, 68], [66, 31], [66, 24], [48, 13], [45, 7], [43, 14], [80, 47], [82, 40], [102, 75], [50, 20], [173, 32], [47, 1], [40, -9], [38, -16], [106, -74], [9, 2], [-19, 28], [-39, 84], [7, 34], [61, 37], [25, 6], [64, -2], [103, -11], [70, -13], [52, -20], [63, -13], [32, 1], [23, 9], [33, 32], [43, 54], [17, 66], [-8, 78], [-13, 58], [-16, 36], [9, 30], [52, 36], [48, 26], [114, 38], [92, 9], [55, -2], [72, -18], [100, -10], [91, -34], [146, -78], [97, -39], [81, -18], [79, -29], [117, -64], [62, -27], [36, -10], [32, -1], [-12, 18], [-56, 37], [-85, 42], [-191, 75], [-104, 53], [-94, 60], [-69, 36], [-126, 35], [2, 14], [151, 50], [278, 44], [313, 33], [105, -3], [184, 14], [18, 22], [39, 9], [172, 30], [49, 0], [76, -15], [80, -27], [37, -24], [51, -42], [25, -59], [-4, -186], [1, -36], [10, -13], [35, 20], [42, 38], [37, 26], [29, 41], [20, 56], [12, 41], [-49, 46], [-2, 76], [24, 41], [69, 0], [284, -140], [111, -31], [127, -75], [149, 8], [137, -9], [60, 3], [30, 11], [-42, 32], [-195, 85], [-88, 67], [-62, 84], [-15, 45], [47, 8], [217, -1], [327, -39], [418, -133], [205, -45], [369, -154], [111, -23], [45, -5], [34, 19], [21, 21], [1, 27], [-18, 35], [-10, 39], [-3, 46], [25, 89], [60, 30], [26, 33], [-24, 59], [-70, 41], [-271, 105], [-1, 13], [55, 14], [81, 8], [671, -25], [116, -10], [50, -9], [21, -11], [28, -6], [144, 15], [-3, 26], [-18, 16], [-779, 45], [-145, 16], [-74, 1], [-77, -12], [-158, -6], [-73, 2], [-95, 54], [86, 64], [72, -1], [137, -25], [82, 35], [129, 29], [128, 10], [278, 63], [52, 5], [65, -3], [143, -16], [57, -15], [65, -33], [38, -10], [45, -2], [61, -15], [89, 48], [81, 52], [92, 33], [131, -19], [83, -25], [75, -30], [107, -16], [182, -102], [34, 0], [16, 8], [17, 19], [6, 28], [22, 38], [-16, 14], [-152, 42], [-29, 17], [-29, 26], [0, 22], [28, 18], [30, 8], [98, -8], [32, 6], [31, 15], [37, 27], [29, 7], [66, 1], [101, -18], [88, -1], [32, 8], [5, 17], [8, 11], [10, 5], [321, 1], [79, 4], [63, 13], [76, 2], [66, -8], [83, -17], [81, 1], [122, 27], [115, 13], [634, -4], [208, -16]], [[0, 42344], [99999, -29], [-4, -1], [0, 11], [-99995, 19]], [[0, 42538], [9, 15], [6, 0], [-3, -13], [-12, -11], [0, 9]], [[26147, 61325], [-21, -33], [-4, 15], [10, 31], [13, 17], [12, -1], [-3, -14], [-7, -15]], [[57056, 73397], [-27, -3], [2, 44], [10, 11], [31, -22], [-1, -14], [-15, -16]], [[96376, 51545], [-5, -20], [-6, 3], [-3, 13], [2, 14], [7, 6], [5, -5], [0, -11]], [[97120, 55201], [-6, -17], [-6, 1], [6, 13], [4, 18], [6, 51], [14, 19], [10, 21], [-3, -22], [-15, -23], [-10, -61]], [[98046, 53645], [-17, -19], [-6, 3], [21, 27], [0, -3], [2, -8]], [[98011, 53600], [-20, -22], [-6, 12], [8, 0], [14, 22], [16, 1], [-2, -11], [-10, -2]], [[98060, 52906], [1, -14], [-16, 37], [-9, 23], [0, 10], [5, -6], [5, -12], [3, -9], [11, -29]], [[98063, 52832], [-10, -3], [7, 9], [2, 11], [-1, 36], [4, -3], [1, -15], [1, -21], [-4, -14]], [[98064, 52426], [15, -23], [-2, -15], [-5, -18], [-20, -46], [-6, 4], [19, 42], [8, 27], [-11, 21], [-5, -5], [-1, 0], [-4, 20], [4, 0], [8, -7]], [[98474, 51381], [-9, -16], [-4, 14], [5, 18], [-8, 73], [-12, 10], [-8, 22], [4, 0], [12, -20], [10, -9], [6, -48], [4, -44]], [[98547, 51145], [2, -30], [-7, 4], [-2, 11], [-2, 30], [-7, 30], [8, -8], [6, -23], [2, -14]], [[96896, 56053], [-4, -9], [-27, 5], [-12, 11], [1, 9], [22, -8], [20, -8]], [[97659, 55903], [11, -13], [20, 1], [19, -32], [-7, 2], [-10, 14], [-10, 6], [-12, -2], [-6, 5], [-5, 19]], [[97527, 55955], [35, -30], [46, 14], [-7, -9], [-17, -8], [-12, -8], [-8, 0], [-9, 3], [-29, 21], [-17, 27], [4, 9], [14, -19]], [[543, 43595], [-16, -4], [-16, 7], [-9, 33], [4, 14], [10, -7], [10, -24], [17, -11], [0, -8]], [[10886, 41557], [2, -11], [-11, 1], [-3, 4], [1, 20], [7, 25], [6, 21], [11, 20], [21, 19], [11, 8], [3, -5], [-4, -2], [-35, -41], [-10, -29], [-5, -20], [1, -6], [5, -4]], [[12140, 41160], [-5, -12], [-1, 12], [-7, 6], [-11, 12], [-15, 14], [-8, 3], [-4, 8], [6, 4], [9, -6], [12, -13], [15, -13], [9, -15]], [[11952, 41277], [0, -11], [-26, 55], [10, -4], [16, -40]], [[11526, 39828], [-8, -11], [3, 15], [-6, 32], [-6, 5], [6, 9], [9, -25], [2, -25]], [[10921, 41255], [3, -21], [-6, 10], [-22, 20], [-2, 17], [27, -26]], [[10880, 41365], [2, -16], [-10, 11], [-10, 29], [-17, 36], [-4, 15], [13, -14], [9, -21], [17, -40]], [[10413, 42571], [-5, -7], [7, 46], [7, 6], [-9, -45]], [[10155, 42269], [15, -28], [-20, 19], [-25, 8], [9, 5], [15, 0], [6, -4]], [[10119, 42260], [-11, -3], [-27, 34], [11, 0], [15, -21], [12, -10]], [[9708, 42709], [-2, -26], [-5, 25], [-17, 40], [-7, 18], [8, -3], [23, -54]], [[9587, 42436], [1, -10], [-6, 1], [-10, 29], [-4, 25], [-6, 29], [-9, 21], [-1, 19], [0, 30], [10, -46], [9, -37], [8, -31], [8, -30]], [[98065, 52616], [-7, -2], [5, 11], [31, 13], [3, 4], [5, -7], [0, -7], [-2, -3], [-16, -1], [-12, -6], [-7, -2]], [[2846, 84466], [36, -11], [21, 7], [18, -6], [3, -13], [-31, -30], [-13, 2], [-37, 36], [3, 15]], [[29815, 63385], [12, -13], [-5, -17], [-28, 10], [-29, 19], [-9, -5], [-6, 2], [-17, 18], [15, 14], [15, 4], [17, -1], [35, -31]], [[56812, 73228], [-11, -9], [-17, 13], [5, 32], [11, 13], [13, -10], [2, -14], [-3, -25]], [[89496, 67175], [-5, -1], [-18, 61], [5, 3], [10, -9], [12, -36], [-4, -18]], [[86365, 73432], [-13, -18], [-15, 18], [-2, 18], [8, 15], [18, 10], [9, -14], [-5, -29]], [[0, 0], [99608, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-391, 0], [-390, 0], [-391, 0], [-390, 0], [-391, 0]], [[0, 3253], [447, 8], [89, -8], [94, -25], [207, -2], [194, -11], [50, -33], [65, -20], [137, 17], [110, 9], [89, 1], [823, -46], [843, -81], [172, -26], [154, -61], [162, 9], [957, -47], [148, 0], [586, -50], [1026, -114], [89, -4], [97, 3], [-51, 62], [-96, 56], [-129, 40], [84, 12], [184, 1], [-37, 29], [-101, 16], [-366, 19], [-1463, 144], [-32, 9], [-21, 12], [-38, 13], [-60, 14], [-223, 8], [-61, 13], [-29, 16], [15, 7], [17, -3], [340, 13], [38, 16], [2, 11], [-18, 8], [-59, 10], [-137, 48], [-44, 21], [23, 33], [28, 14], [105, 11], [31, 22], [-20, 40], [-241, 80], [-162, 29], [-107, -20], [-203, -1], [-251, -10], [-68, 11], [-70, 32], [-82, 57], [-42, 15], [-80, 47], [-106, 46], [-561, 111], [-98, 30], [-702, 175], [-29, 30], [-18, 32], [324, -71], [61, 0], [72, 18], [55, -5], [75, 18], [84, 9], [219, -55], [442, -89], [118, -31], [63, -22], [52, -7], [51, -16], [63, 9], [38, -8], [92, 5], [419, 10], [166, -8], [195, -43], [75, -71], [56, -32], [107, 25], [90, 30], [173, 25], [56, -10], [93, -37], [105, -62], [445, 17], [187, -3], [133, -28], [485, 93], [75, 20], [111, 65], [-91, 20], [-65, 7], [-25, 33], [44, 13], [140, 18], [272, 28], [161, 27], [86, 70], [369, 109], [117, 48], [108, 79], [-242, 157], [-232, 136], [74, 42], [73, 33], [35, 26], [29, 37], [-76, 45], [-71, 33], [-117, 32], [-440, 77], [-150, 33], [60, 51], [80, 39], [169, 17], [1079, 60], [1087, 74], [27, 37], [-144, 44], [-123, 11], [-45, 13], [-17, 28], [-1, 38], [-14, 6], [-46, 4], [-196, 44], [-41, 17], [-65, 41], [-17, 32], [39, 82], [60, 35], [104, 19], [75, 7], [225, -1], [88, 10], [37, 11], [-7, 39], [-25, 18], [-1, 24], [38, 14], [47, -1], [13, 29], [-26, 47], [-67, 25], [-176, 43], [-400, 65], [-155, 49], [-89, 38], [-74, 44], [-75, 21], [-52, 23], [11, 28], [-24, 44], [-29, 8], [-127, -19], [-227, 10], [-278, 41], [-192, 47], [-251, 127], [-99, 63], [73, 44], [80, 28], [334, 65], [50, 22], [68, 58], [-112, 24], [-95, -2], [-84, 16], [-342, 4], [-193, -8], [-162, 72], [-121, 71], [-34, 36], [-26, 64], [41, 94], [34, 67], [-4, 83], [9, 113], [58, 38], [45, 7], [105, -87], [90, -7], [131, 17], [83, 45], [44, 17], [81, 4], [156, -20], [71, 8], [80, -4], [251, -58], [55, -27], [30, -21], [9, -30], [31, -31], [107, -15], [299, 17], [78, -7], [212, -85], [180, -91], [62, -23], [102, -15], [36, 13], [31, 34], [97, 42], [218, 52], [52, 52], [-29, 28], [-84, 30], [-51, 10], [-28, 34], [2, 47], [17, 45], [57, 11], [104, -61], [130, -57], [45, -8], [35, 2], [65, 20], [78, 15], [149, -122], [88, -8], [110, -1], [21, 19], [-13, 32], [-18, 35], [-23, 5], [-3, 32], [48, 30], [33, 13], [-13, 22], [-53, 33], [-31, 6], [-28, 14], [9, 23], [35, 10], [49, 34], [-15, 39], [2, 51], [-20, 27], [-116, 53], [-169, 87], [-157, 39], [-350, -31], [-124, 20], [-81, 23], [-88, 30], [103, 32], [108, 22], [32, 20], [41, 40], [48, 29], [39, 8], [128, -15], [289, -108], [61, -12], [198, -49], [55, -3], [68, 11], [-55, 48], [-61, 34], [-145, 96], [16, 46], [94, 76], [245, 6], [107, 27], [139, 58], [179, 96], [154, 12], [192, 30], [65, -22], [164, -93], [103, -32], [35, -3], [37, 3], [-97, 116], [63, 14], [80, 13], [66, 29], [49, 24], [168, 111], [150, 31], [426, 48], [146, -44], [123, -5], [27, 13], [25, 59], [65, 115], [55, 41], [185, 43], [145, -2], [104, -47], [97, -31], [89, -14], [90, 1], [134, 27], [178, 9], [83, 14], [96, -26], [236, -9], [183, -37], [113, 0], [153, 36], [83, 5], [299, 58], [234, 12], [177, -26], [286, 16], [290, -12], [117, -21], [652, 13], [518, 55], [71, 19], [111, 60], [61, 55], [41, 17], [87, 6], [149, -12], [205, -41], [176, 15], [337, -23], [32, 19], [32, 104], [55, 165], [47, 49], [77, -13], [233, -94], [5, -40], [-24, -29], [-38, -11], [-11, -80], [31, -23], [52, 7], [33, -35], [-73, -60], [-52, -34], [-33, -15], [-23, -115], [-31, -38], [-4, -42], [50, 0], [50, 18], [44, 4], [140, 30], [255, 35], [84, 17], [48, 6], [31, 23], [-43, 57], [-14, 47], [26, 39], [-7, 67], [-24, 68], [49, 50], [46, -11], [79, 8], [45, -25], [69, -22], [66, -11], [63, -45], [21, -98], [-19, -100], [-65, -73], [-121, -66], [-137, -105], [29, -50], [71, 17], [309, -5], [199, 8], [125, -12], [158, -27], [125, -39], [149, -8], [93, 15], [87, -20], [339, 84], [138, 48], [79, -24], [128, 20], [71, -18], [133, 30], [84, 3], [97, -12], [296, -6], [22, -55], [90, -83], [73, -32], [93, 14], [67, 25], [106, -9], [153, 35], [153, -11], [64, 6], [29, 23], [25, 51], [-47, 28], [-134, 36], [-123, 74], [-55, 16], [-88, -9], [-41, 13], [-44, 24], [57, 29], [70, 93], [-29, 84], [-33, 18], [-81, -3], [-98, -30], [-39, 21], [-64, 11], [-25, 78], [-68, 146], [-36, 42], [-108, 38], [-93, 19], [-90, 24], [-27, 58], [17, 79], [108, 17], [104, -8], [58, -15], [67, -6], [77, -16], [50, -23], [40, -13], [75, 0], [260, 21], [35, 15], [31, 28], [55, 7], [51, -4], [74, 17], [-85, 23], [-91, 44], [-137, 53], [-115, 29], [-209, 20], [-107, -7], [-67, 11], [-239, -6], [-65, 21], [-46, 58], [-65, 138], [-18, 72], [44, 27], [29, 30], [71, 3], [103, -12], [34, -14], [25, -43], [-25, -44], [-33, -23], [20, -21], [105, -6], [52, -13], [45, -5], [97, 20], [142, 8], [71, -20], [85, -15], [125, 24], [445, -13], [54, -6], [54, -40], [46, -24], [49, 10], [145, -46], [77, -36], [79, -18], [67, -5], [75, 9], [98, 30], [81, 12], [58, -11], [123, -6], [94, -36], [73, 15], [77, 41], [244, 29], [163, -8], [298, -74], [69, -7], [136, 44], [44, 72], [-6, 81], [39, 19], [33, -9], [60, 56], [82, -5], [51, -10], [31, 36], [28, 77], [97, 6], [70, -12], [92, -49], [0, -41], [-38, -43], [-63, -107], [39, -63], [59, 6], [75, -13], [91, 27], [58, 1], [101, -93], [68, -5], [53, 5], [172, 84], [50, 9], [61, -38], [89, -89], [78, -51], [114, -32], [99, -9], [116, -42], [64, -35], [146, 0], [62, -15], [176, -72], [160, 36], [83, 33], [40, 61], [-20, 91], [-7, 92], [24, 38], [42, 7], [191, -103], [-12, 62], [-16, 47], [-49, 82], [7, 61], [41, 19], [80, -32], [96, -16], [79, -36], [155, -128], [50, -112], [105, -28], [73, 5], [83, 18], [111, 16], [86, -5], [79, 21], [24, -61], [-74, -88], [-29, -57], [24, -15], [45, 13], [37, 18], [129, -9], [104, 40], [89, 14], [84, 42], [69, -4], [53, -7], [72, -33], [69, 18], [41, -7], [56, -2], [297, 145], [67, -3], [85, 9], [107, 34], [83, 15], [68, -1], [121, 53], [193, -7], [98, 28], [191, 32], [128, 37], [228, 98], [92, 58], [100, 129], [63, 129], [70, 171], [-34, 111], [-37, 49], [-31, 54], [-73, 111], [-20, 139], [7, 131], [-26, 123], [-26, 91], [-54, 152], [-66, 99], [-77, 133], [0, 121], [-19, 95], [-46, 68], [-20, 54], [36, 11], [33, 17], [89, 21], [213, -37], [19, 54], [54, 40], [38, 50], [-13, 77], [-47, 31], [-56, 65], [26, 52], [45, 0], [22, 57], [-17, 56], [21, 70], [41, 90], [28, 33], [-51, 54], [-48, 70], [12, 54], [24, 57], [29, 80], [40, 57], [26, 20], [-7, 19], [-61, 20], [-56, 4], [-101, -36], [-16, 7], [-5, 19], [-6, 39], [10, 95], [16, 90], [14, 13], [40, 11], [38, 69], [35, 4], [22, -23], [7, -91], [12, -21], [-4, -44], [18, -15], [22, 28], [41, 14], [16, -31], [15, -15], [7, 26], [-5, 74], [-7, 30], [-5, 48], [9, 23], [10, 37], [-17, 78], [6, 29], [37, 47], [18, 9], [35, 0], [63, -31], [30, -2], [22, 14], [14, 30], [11, 98], [-27, 35], [0, 31], [16, 20], [28, 68], [42, 4], [41, -6], [40, 13], [-14, 28], [-12, 43], [45, 21], [29, 6], [77, -27], [30, -15], [28, 35], [-9, 34], [-30, 19], [-5, 30], [7, 39], [48, -20], [11, 8], [13, 34], [-8, 17], [-6, 22], [63, 5], [9, 9], [13, 27], [19, 9], [56, -1], [12, 14], [6, 30], [-31, 7], [-39, 29], [-6, 80], [9, 57], [35, 50], [42, 34], [78, -30], [60, 7], [24, -30], [33, -8], [8, 34], [-15, 30], [-10, 49], [96, 59], [31, -10], [38, 14], [-14, 45], [21, 57], [27, 8], [19, -50], [26, -10], [29, 12], [71, 58], [35, 9], [35, 3], [36, 34], [9, 40], [20, 28], [62, 38], [25, 27], [55, 95], [-10, 24], [16, 20], [163, 86], [80, 8], [133, 52], [81, 61], [51, 25], [45, 68], [55, 11], [128, 47], [96, 77], [133, 53], [62, -5], [25, -16], [16, -63], [26, -77], [40, -38], [-15, -34], [-38, 4], [-41, -8], [-9, 38], [15, 28], [-15, 25], [-37, -6], [-49, -13], [-33, -19], [-43, -41], [-34, -23], [-113, -61], [-74, -88], [-53, -93], [-32, -63], [-47, -5], [-11, -23], [19, -18], [15, -8], [35, -7], [-6, -27], [-24, -7], [3, -22], [25, -32], [5, -46], [-29, -7], [-44, 49], [-50, 5], [-39, 23], [-25, 33], [-24, -7], [-18, -47], [11, -52], [-21, -31], [-24, 14], [-9, 62], [-23, 11], [-32, 1], [-77, -67], [-28, -2], [-14, -34], [-45, -38], [-29, -31], [-71, -102], [-40, -43], [-76, -24], [-30, 3], [-18, 10], [-27, 7], [-28, 1], [-9, -27], [44, -88], [-24, -30], [-53, 2], [-26, 25], [-21, -24], [-17, -23], [-17, -34], [26, -72], [41, -32], [30, -6], [11, -27], [-65, -11], [-44, -63], [-20, -44], [-23, -38], [3, -44], [34, -66], [46, -47], [46, -4], [60, 15], [14, 13], [59, 7], [26, 46], [19, 3], [17, -8], [27, -2], [15, 30], [20, 11], [28, -8], [54, 1], [15, -27], [-17, -30], [-33, -42], [-31, 23], [-27, -4], [-15, -22], [29, -47], [-11, -42], [-24, -42], [-29, 27], [-4, 45], [-40, 27], [-39, 12], [-26, -47], [-41, -13], [-6, -54], [-17, -50], [-24, 15], [-9, 62], [-67, 50], [-35, 7], [-70, -13], [-24, 1], [-28, -11], [-20, -42], [29, -31], [10, -42], [-1, -31], [-6, -12], [-5, -26], [32, -37], [1, -50], [-25, 1], [-21, 15], [-81, 130], [-51, 58], [-22, 51], [-53, 12], [-38, 1], [-46, -21], [18, -24], [9, -36], [-28, -15], [-35, -56], [-23, -48], [-14, -10], [-18, -28], [75, -61], [11, -24], [4, -41], [-24, -22], [-56, -9], [-99, 43], [-43, 1], [-15, 30], [-22, -4], [-13, -51], [-16, -45], [-24, -30], [7, -46], [19, -11], [-15, -19], [-31, -15], [-21, -18], [46, -17], [9, -15], [2, -22], [-72, -16], [-47, -4], [-28, 18], [-26, -9], [-17, -29], [-5, -39], [5, -48], [9, -34], [7, -13], [8, -29], [-43, -74], [-5, -16], [-3, -34], [21, -31], [16, -46], [-23, -23], [-25, -47], [26, -9], [44, -2], [48, 6], [72, 41], [20, 7], [9, -16], [6, -25], [-18, -24], [-130, -68], [-24, -29], [33, -16], [67, -3], [26, -22], [-16, -24], [-24, -23], [-28, -54], [23, -20], [72, -32], [131, -42], [97, -14], [-22, 49], [-3, 60], [68, 49], [35, 16], [162, 29], [44, -1], [34, -13], [-13, -25], [-37, 9], [-65, -16], [-100, -54], [-18, -23], [7, -42], [85, -34], [27, -27], [-37, -81], [6, -52], [43, -57], [57, -65], [28, -43], [43, -25], [70, -61], [38, -61], [12, -140], [57, -116], [67, -53], [8, -46], [-22, -46], [-57, 27], [-32, -27], [-12, -49], [40, -34], [64, -42], [138, 4], [4, -46], [-32, -27], [-25, -34], [-31, -19], [-52, -12], [-13, -41], [22, -58], [72, 26], [53, 3], [55, -10], [17, -77], [65, -95], [16, -45], [-12, -43], [-40, -13], [-25, -34], [-36, -29], [-41, -16], [-76, -79], [-33, -8], [-14, -16], [65, -8], [45, -2], [97, 64], [37, -14], [24, -42], [12, -49], [-24, -42], [-169, -25], [-82, -23], [-88, -66], [101, -31], [74, 11], [37, -12], [51, -23], [56, 12], [44, 24], [33, -1], [31, -12], [4, -41], [4, -72], [7, -54], [-18, -36], [-88, -26], [-64, 1], [-2, -76], [96, -57], [60, 30], [53, -15], [0, -91], [41, -101], [36, -6], [30, 46], [38, 0], [15, -54], [-17, -91], [-29, -50], [-78, 21], [-44, 16], [-35, -34], [-58, -29], [-51, -4], [-45, 45], [-52, 34], [-83, 17], [-78, 8], [26, -39], [35, -23], [14, -69], [28, -72], [65, 19], [90, -41], [56, -43], [24, -57], [-31, -91], [-51, -34], [-32, -16], [-56, 35], [-39, 0], [-41, -16], [-14, -42], [-27, -20], [144, -3], [45, -11], [33, -38], [-52, -50], [-95, 8], [-41, -19], [-35, -36], [142, -22], [59, 12], [93, 38], [22, -38], [-37, -38], [-48, -61], [-100, -19], [-75, -1], [-98, 22], [-26, 13], [-41, 7], [3, -37], [26, -26], [66, -94], [11, -36], [-21, -50], [-58, -37], [-65, -14], [-54, 32], [-39, 91], [-50, 27], [-51, 8], [-30, -4], [3, -46], [12, -49], [-20, -35], [-44, 18], [-57, -16], [-53, -27], [-48, -30], [98, -14], [65, -3], [46, -46], [-17, -23], [-88, -10], [-86, -20], [-117, -50], [86, -21], [81, 1], [57, -5], [47, -9], [13, -27], [-29, -30], [-192, -74], [-201, -91], [-74, -29], [-77, -16], [-179, -78], [-113, -36], [-318, -55], [-497, -139], [-169, -99], [-50, -76], [-32, -11], [-95, -26], [-95, -12], [-251, -8], [-257, 37], [-208, 8], [-113, -12], [-386, 66], [-49, -3], [-60, -12], [-48, 0], [-36, 9], [-78, 4], [-263, -26], [-27, -41], [33, -76], [96, -92], [160, -162], [86, -35], [53, -37], [100, -43], [224, -2], [306, -34], [174, -31], [-6, -60], [-105, -115], [-65, -44], [-155, -80], [-213, -40], [-163, 12], [-289, 65], [-362, 60], [-538, 57], [-118, 26], [-139, 26], [-79, -27], [-60, -25], [-133, -2], [39, -23], [537, -155], [458, -113], [54, -29], [65, -20], [-6, -72], [-26, -57], [-90, -50], [-234, -3], [-293, -40], [-146, -1], [-145, 39], [-309, 113], [-189, 84], [-132, 96], [-91, 76], [-102, 75], [7, -47], [18, -47], [50, -58], [73, -63], [5, -25], [-35, -4], [-53, 30], [-45, -28], [-16, -33], [19, -44], [28, -42], [93, -94], [80, -25], [106, -57], [258, -106], [44, -36], [78, -78], [16, -59], [76, -58], [52, -9], [47, 2], [16, 50], [-3, 61], [20, 15], [74, 15], [193, -21], [821, -12], [78, -35], [31, -45], [21, -93], [-87, -112], [-59, -48], [-97, -29], [-88, -23], [-133, -9], [-275, 8], [-269, 0], [209, -54], [203, -44], [282, 8], [112, 12], [97, 21], [41, -37], [77, -78], [45, -25], [31, -26], [43, -85], [17, -50], [42, -58], [30, -49], [44, -33], [75, -15], [82, 28], [159, 13], [154, -45], [99, -14], [132, 37], [105, 52], [221, 47], [41, 20], [60, 16], [91, -4], [36, -12], [46, -51], [43, -70], [63, -35], [67, -25], [38, -3], [126, -22], [164, 21], [73, -21], [12, -40], [39, -32], [49, -11], [665, -180], [229, -35], [353, -18], [274, -2], [38, -11], [53, -35], [-105, -24], [-112, -3], [-169, 9], [-60, -5], [-129, 10], [-67, -7], [-61, 11], [-91, -25], [-166, -19], [37, -27], [62, -6], [126, -10], [172, 5], [15, -43], [-158, -10], [-336, -9], [-35, -7], [-26, -22], [50, -11], [31, -12], [16, -31], [-36, -79], [56, -55], [39, -9], [41, 8], [71, -22], [69, -30], [146, -2], [173, 40], [85, -1], [228, 25], [207, -4], [289, 48], [48, -1], [44, -6], [-80, -44], [-355, -110], [-127, -21], [-51, -14], [29, -54], [46, -56], [94, -60], [59, -89], [57, -19], [110, 41], [27, -31], [5, -61], [-29, -49], [-37, -28], [-26, -27], [-17, -36], [46, -31], [123, -19], [163, -7], [151, -1], [93, -9], [341, 194], [137, 94], [67, 39], [56, 29], [288, 119], [67, 36], [76, 53], [141, 8], [193, 86], [171, 66], [68, 13], [51, 5], [60, 14], [150, -5], [107, 11], [190, 42], [145, 27], [154, 23], [174, 4], [463, 44], [132, -19], [146, -46], [95, 1], [125, 14], [86, 18], [39, -53], [20, -69], [-42, -64], [-70, -40], [-19, -66], [95, -33], [108, 10], [206, 32], [164, 42], [45, 28], [64, -8], [109, 35], [136, 146], [171, 147], [144, 94], [93, 110], [77, 63], [86, 48], [58, 24], [132, 5], [189, 76], [275, 87], [211, -42], [223, -63], [110, 51], [87, 9], [74, 23], [74, 17], [53, 45], [71, 38], [54, 55], [271, 27], [284, 36], [38, 13], [37, -7], [98, 10], [125, 30], [172, 10], [90, -3], [82, 81], [164, 17], [175, 32], [73, 24], [57, 6], [1413, 63], [61, 31], [124, 25], [47, 61], [-190, 25], [-58, 26], [-65, 7], [-38, -9], [-164, 7], [-1303, 94], [-27, 8], [-45, 57], [9, 105], [-39, 81], [-91, 22], [-94, -2], [-119, -10], [-314, -44], [-125, -4], [-335, 68], [-221, 77], [-145, 25], [-104, 52], [-97, 40], [-7, 91], [23, 85], [187, 246], [117, 118], [78, 9], [71, 53], [73, 119], [59, 56], [135, 66], [59, 17], [212, 81], [58, 2], [95, -13], [108, 73], [329, 156], [75, 59], [91, 35], [266, 132], [238, 64], [118, 19], [144, 39], [160, 59], [139, 57], [497, 109], [298, 29], [203, 32], [144, -19], [143, 6], [123, 29], [57, 23], [83, 59], [276, -28], [178, 40], [74, 4], [78, 18], [-31, 21], [-28, 3], [-28, 28], [-37, 58], [37, 73], [28, 36], [82, 45], [43, 64], [40, 94], [135, 185], [38, 26], [86, 8], [73, -5], [83, 2], [210, -48], [39, 19], [67, 54], [56, 68], [120, 100], [23, 30], [-10, 49], [-180, -21], [-136, -33], [-131, 18], [-17, 28], [28, 21], [49, 8], [19, 34], [-45, 28], [-81, 16], [-36, 21], [3, 51], [20, 75], [44, 21], [36, 31], [96, 105], [57, 32], [164, 29], [190, -44], [44, 12], [46, 59], [-47, 90], [-36, 34], [0, 30], [100, -14], [93, -20], [109, 4], [129, 90], [181, 75], [88, 31], [78, 18], [42, 76], [62, 144], [46, 75], [-1, 45], [-14, 38], [-47, -11], [-43, -5], [-101, 38], [-125, 61], [-38, 68], [-18, 61], [39, 33], [38, 20], [41, 5], [73, -25], [93, -62], [46, -24], [53, -46], [40, 4], [47, 64], [38, 85], [32, 26], [49, 28], [54, 41], [-24, 40], [-58, 21], [-8, 24], [25, 27], [47, 6], [59, -59], [80, -39], [55, -13], [47, -32], [74, -108], [89, -179], [41, -2], [78, 16], [84, 7], [56, 51], [12, 128], [22, 58], [-8, 59], [-38, 60], [-33, 44], [6, 33], [28, 24], [37, 8], [64, 24], [99, -28], [54, -5], [81, 16], [84, 35], [86, 25], [67, -19], [29, -64], [-33, -65], [-54, -48], [-49, -59], [-13, -64], [2, -35], [47, -9], [416, 8], [55, -6], [72, 0], [78, -21], [132, 8], [118, 23], [56, 0], [97, -21], [69, -44], [143, 13], [40, 14], [39, 59], [41, 11], [48, -48], [15, -110], [22, -52], [61, -47], [60, 40], [39, 48], [94, 93], [107, 71], [82, 42], [200, 70], [99, 44], [194, 60], [250, 32], [446, 108], [147, 12], [240, 28], [123, 30], [125, 23], [77, 80], [175, -61], [60, -7], [82, 48], [90, 119], [131, -49], [75, -77], [93, -60], [208, -104], [66, -24], [138, -21], [37, 17], [65, 69], [67, 100], [42, 42], [61, 35], [69, 55], [-18, 30], [-39, 10], [-36, 16], [9, 29], [122, 7], [64, -101], [66, -33], [80, -33], [186, 26], [159, 2], [138, -20], [68, 3], [61, 76], [99, 28], [56, -34], [35, -112], [127, -31], [266, -51], [30, 13], [33, 59], [23, 72], [54, 12], [69, 39], [37, -6], [52, -47], [-18, -114], [-29, -105], [35, -85], [31, -47], [40, -8], [67, -2], [82, 6], [51, -4], [261, 42], [32, 94], [42, 107], [103, 136], [40, -10], [31, -14], [70, -67], [42, -34], [9, -49], [-46, -47], [13, -31], [46, -25], [148, -41], [48, 8], [71, 43], [72, 85], [39, 98], [61, -5], [59, -20], [41, -51], [0, -97], [57, -66], [46, -42], [120, -45], [128, -11], [90, -27], [146, 10], [71, 30], [46, 8], [80, 24], [84, 57], [52, 23], [192, 52], [145, 57], [154, 102], [150, 61], [230, 31], [64, 13], [88, -1], [217, 73], [82, 42], [46, 15], [52, 52], [28, 102], [22, 63], [-4, 61], [-20, 80], [-46, 71], [-47, 104], [21, 119], [37, 49], [96, 54], [95, 11], [108, -7], [94, -11], [8, -51], [-41, -55], [-52, -54], [-31, -23], [11, -46], [68, -7], [149, 10], [43, -42], [106, -184], [26, -87], [37, -25], [58, 12], [125, -1], [87, 13], [71, 1], [37, -9], [38, -42], [72, -49], [72, 36], [52, 17], [63, -4], [99, -57], [99, -133], [107, -67], [7, 43], [-14, 53], [44, 47], [53, 79], [77, 103], [61, 105], [15, 145], [29, 119], [49, 57], [48, 37], [75, 38], [92, 8], [88, 86], [62, 35], [130, 47], [163, 47], [114, 131], [39, 16], [58, 21], [107, 8], [173, 42], [54, 6], [91, 33], [80, 78], [58, 22], [104, -3], [88, 44], [74, 2], [68, 22], [10, 49], [-32, 33], [-1, 43], [38, 56], [30, 21], [90, -4], [75, -48], [55, -2], [14, -27], [-48, -34], [-32, -61], [55, -53], [49, -36], [59, 7], [71, 32], [70, -23], [31, -49], [0, -76], [15, -41], [49, 36], [27, 76], [-8, 97], [3, 60], [117, 97], [46, 73], [-82, 15], [-58, -10], [-32, 27], [-37, 73], [101, 61], [116, -2], [67, -52], [144, -83], [80, 2], [72, -13], [15, 26], [-27, 122], [3, 68], [-60, 38], [-17, 87], [25, 91], [71, 51], [97, 24], [208, 140], [55, 30], [137, 29], [160, 14], [199, 50], [355, -34], [95, -21], [59, -28], [57, -45], [74, -74], [107, -94], [139, -30], [39, -29], [51, -80], [-55, -52], [-45, -5], [-87, 31], [-60, 32], [-42, -13], [41, -55], [45, -34], [7, -46], [-24, -66], [-164, -130], [98, -37], [59, 30], [54, 55], [55, 25], [37, 10], [130, 2], [74, 22], [56, -16], [55, -35], [81, -35], [116, -38], [143, -147], [111, 15], [60, 32], [171, 10], [147, -65], [83, -24], [240, -20], [143, -42], [91, 50], [61, 20], [128, 10], [65, -10], [178, -54], [315, -55], [217, -29], [191, -1], [91, -24], [166, -26], [63, -20], [159, 16], [74, 21], [70, 47], [39, -11], [27, -59], [-15, -101], [29, -69], [23, -69], [33, -57], [21, -49], [-15, -41], [-46, -37], [-64, -79], [4, -69], [27, -44], [-32, -53], [24, -74], [4, -45], [-22, -36], [-50, -22], [-85, -3], [-44, -21], [-7, -55], [22, -41], [49, -22], [14, -44], [-7, -66], [-22, -56], [-45, -26], [-49, -6], [-91, 12], [-66, 37], [-42, -33], [-31, -34], [-95, -77], [-44, -52], [-41, -55], [108, -31], [79, -55], [172, 6], [55, 24], [73, 26], [39, -5], [24, -56], [-14, -89], [-3, -69], [-87, -190], [-29, -32], [-41, -52], [-48, -41], [-39, -20], [-75, -60], [-46, -109], [-50, -90], [-73, -154], [-42, -165], [-18, -99], [-28, -103], [-62, -177], [-40, -30], [-69, -72], [20, -48], [54, -5], [66, -11], [89, -37], [118, 76], [62, 48], [13, 96], [-13, 97], [38, 57], [87, 78], [205, 56], [42, 6], [68, 19], [60, 70], [53, 70], [93, 44], [77, 72], [12, 51], [32, 11], [96, 50], [25, 37], [30, 28], [21, 63], [8, 118], [24, 89], [47, 118], [38, 86], [37, 54], [99, 29], [43, 33], [57, 73], [39, 44], [-5, 90], [22, 83], [61, 50], [78, 92], [98, 13], [74, 48], [79, -33], [95, -46], [161, 14], [76, -21], [59, 25], [52, 71], [19, 87], [61, 50], [69, -1], [114, 87], [118, 77], [96, 18], [77, 60], [55, 102], [59, 79], [73, 75], [20, 133], [46, 67], [85, 59], [71, 32], [298, 100], [229, 66], [231, 82], [71, -1], [93, 45], [153, 2], [40, 4], [53, 93], [114, 86], [71, 28], [90, 74], [73, 7], [103, -13], [87, -20], [78, -1], [113, 62], [176, 10], [54, 30], [38, 26], [249, 87], [93, -17], [132, 15], [80, -4], [76, -11], [96, -3], [166, 31], [70, 20], [132, 76], [146, 18], [64, 20], [82, 17], [67, -29], [48, -27], [29, -6], [39, -5], [95, 30], [79, -8], [101, -33], [67, -27], [35, 0], [62, 24], [76, 60], [71, 24], [67, -15], [46, -25], [81, -34], [126, 5], [120, 13], [101, 28], [87, 30], [80, -46], [92, -17], [149, 81], [57, -18], [39, -21], [32, -10], [39, -68], [142, 13], [126, 57], [108, 43], [105, 28], [83, 39], [122, 148], [-2, 46], [17, 28], [26, 12], [194, -1], [60, 12], [79, 39], [137, -30], [131, -47], [34, 5], [53, 1], [93, -29], [105, -57], [93, -15], [385, -142], [218, -35], [110, -47], [28, -16], [32, -48], [58, -5], [46, 19], [61, -73], [148, -55], [154, -27], [100, 43], [170, 123], [52, 55], [-10, 122], [89, 136], [151, 67], [188, 35], [116, 30], [154, 28], [74, -29], [38, -21], [57, -25], [68, -76], [106, -172], [79, -62], [69, -5], [60, -10], [63, -39], [90, -121], [-54, -108], [-46, -40], [-196, -46], [-86, -37], [-75, -23], [-21, -90], [31, -42], [81, 21], [95, 10], [74, 18], [68, 28], [59, 40], [140, 21], [91, 34], [82, 20], [57, 35], [58, -5], [58, -34], [46, 3], [124, -11], [58, 25], [51, 2], [52, -19], [54, -26], [54, -7], [70, 16], [98, 42], [125, 46], [117, 15], [28, -1], [24, -9], [-117, -53], [-187, -72], [-100, -69], [59, -29], [352, 77], [160, 58], [142, 26], [35, 19], [116, 90], [42, 24], [125, 32], [163, 34], [124, 39], [84, 40], [63, 4], [49, -29], [63, -33], [62, 8], [76, 31], [53, 72], [31, 53], [57, 18], [73, 16], [59, -18], [96, -38], [67, -20], [58, -151], [136, -133], [49, -35], [119, 13], [128, -52], [55, 7], [52, 15], [47, -10], [70, 32], [73, 167], [67, 163], [66, 72], [40, 30], [50, 14], [77, 34], [104, 10], [77, -14], [167, -12], [136, 41], [154, -7], [76, 48], [82, 7], [111, -41], [32, -29], [61, -42], [15, -41], [16, -74], [30, -2], [103, 73], [56, 13], [106, 117], [56, -30], [127, -50], [51, -15], [100, -85], [51, 18], [42, 40], [124, -4], [116, -35], [48, -29], [59, -50], [37, -12], [29, 14], [240, -19], [104, -37], [79, -45], [278, -21], [107, -46], [64, 22], [127, -7], [52, -39], [46, -43], [101, -37], [55, 7], [78, 30], [78, 41], [78, 0], [37, -35], [13, -88], [58, 2], [64, 40], [56, -10], [20, -61], [-30, -81], [-71, -114], [-29, -95], [-59, -86], [10, -41], [59, -20], [59, 61], [132, 42], [69, 55], [119, 20], [117, -19], [83, -73], [154, -123], [6, -44], [13, -46], [-5, -41], [-23, -47], [82, -55], [73, -9], [59, 5], [247, -53], [118, 21], [106, 0], [126, 8], [97, -2], [77, -9], [91, 19], [74, 26], [36, -16], [15, -137], [5, -81], [42, -30], [44, 30], [32, 41], [195, -19], [78, -2], [74, -22], [75, -51], [72, 22], [43, 31], [58, 20], [17, 51], [7, 85], [-2, 83], [34, 15], [35, -15], [46, -39], [105, -125], [80, -81], [34, -38], [49, -31], [99, -75], [136, -31], [133, -60], [155, 4], [121, -77], [82, 60], [43, 14], [63, -16], [76, -52], [60, -12], [205, -86], [110, -30], [41, -63], [54, -60], [0, -61], [24, -77], [123, -61], [48, -59], [59, -78], [107, -293], [56, -52], [81, 5], [76, -76], [24, 11], [3, 30], [-69, 198], [-5, 107], [54, 61], [127, 17], [98, -114], [90, -69], [60, -12], [120, 3], [113, 73], [86, -26], [138, -9], [179, -43], [77, 8], [137, -18], [167, -62], [95, -23], [20, -25], [44, -41], [22, -50], [24, -46], [58, -52], [58, -9], [115, -44], [241, -136], [87, -40], [51, -29], [25, 35], [7, 72], [44, 15], [47, -107], [49, -81], [22, -71], [-51, -58], [-74, 12], [-52, 0], [-53, -96], [-22, -166], [49, 3], [36, 15], [8, -61], [-22, -51], [-44, -20], [-76, 39], [-93, 27], [-102, 10], [-99, 49], [-39, 3], [-41, -3], [53, -51], [55, -46], [125, -40], [156, -62], [4, -38], [-37, -47], [-46, -100], [-142, -86], [-83, 62], [-98, 15], [-49, -37], [-98, 4], [-194, -14], [-76, 79], [-119, 43], [4, -36], [102, -130], [109, -30], [108, -35], [26, -33], [-49, -31], [-66, 5], [-83, -61], [-158, 10], [-75, -3], [-44, -25], [-39, -9], [31, -22], [38, -60], [-54, -51], [-50, -25], [-51, 12], [-56, -20], [-27, 56], [-2, 122], [-32, 109], [-34, 4], [-54, -13], [-17, -93], [38, -161], [26, -50], [-21, -45], [-36, -14], [73, -136], [62, -93], [38, -31], [3, -46], [-30, -20], [-83, 18], [-41, -9], [-46, 6], [-77, 20], [-66, 6], [-66, -26], [-56, 2], [-50, 85], [-44, 20], [-36, -26], [-28, -101], [-57, -31], [-58, -46], [-41, -50], [-20, -198], [-34, -41], [-51, 2], [-39, -16], [-49, 16], [-64, 10], [-214, -68], [34, -35], [54, 6], [188, -11], [80, -36], [13, -89], [32, -38], [63, -41], [48, -20], [18, -30], [-20, -61], [-27, -56], [-59, -61], [17, -31], [64, -10], [27, -137], [-42, -61], [20, -51], [5, -51], [-43, -47], [-33, -24], [-11, -50], [64, -29], [47, -10], [66, -5], [45, -54], [58, -82], [42, -68], [3, -113], [41, -67], [77, -43], [-2, -45], [54, -14], [53, -4], [19, -41], [-17, -50], [-89, -61], [-37, -44], [89, -7], [92, -46], [117, 52], [62, 56], [40, 50], [30, -13], [3, -52], [36, -87], [151, -84], [84, -27], [81, -14], [71, 2], [20, -50], [-22, -46], [-56, 3], [-90, -8], [-66, 38], [-47, 33], [-412, -19], [-93, -15], [-111, -50], [-110, -24], [-169, -50], [-71, -30], [-185, 117], [-60, 86], [-25, 5], [-44, -20], [-2, -61], [86, -133], [39, -35], [0, -35], [-25, -18], [-35, 0], [-53, 26], [-99, 21], [-88, -41], [-108, -87], [23, -58], [29, -33], [-7, -39], [-121, -74], [-40, -3], [-25, -15], [30, -27], [66, -1], [7, -33], [-23, -26], [-109, -30], [7, -40], [59, -19], [77, 7], [48, -29], [0, -46], [-49, -26], [-57, -19], [-392, -118], [-57, -32], [3, -43], [137, -11], [410, 10], [27, -14], [-10, -34], [-23, -43], [23, -31], [61, -21], [2, -33], [-30, -13], [-61, -15], [-67, -4], [4, -35], [92, -31], [31, -4], [3, -118], [-3, -50], [-49, -24], [-18, -17], [-2, -40], [122, -29], [187, -127], [41, 0], [74, -24], [119, -65], [42, -39], [68, -19], [9, -32], [42, -27], [166, -88], [22, -38], [-348, -73], [-350, -54], [32, -48], [378, 5], [102, -30], [45, 9], [26, 32], [204, 38], [207, 25], [65, -18], [278, -141], [129, -53], [82, -20], [60, -5], [44, -21], [43, -45], [-10, -42], [18, -19], [29, -8], [55, -28], [63, 10], [73, 32], [51, -7], [92, -45], [-35, -35], [-20, -17], [-24, -32], [-23, -11], [-74, -7], [-41, 0], [-42, 6], [-4, -23], [51, -25], [74, -27], [480, -21], [137, -46], [135, 25], [61, -8], [51, -15], [19, -46], [69, -15], [106, -36], [148, -18], [118, 1], [145, -49], [73, -2], [45, -28], [330, -17], [49, -22], [38, -36], [78, -16], [85, -3], [464, -59], [174, -31], [40, 2], [40, -6], [125, -26], [127, -14], [61, -36], [-99894, -48]], [[0, 92737], [99966, -10], [-65, -44], [-137, -11], [-81, -31], [-19, -2], [-40, 103], [-6, 26], [15, 34], [41, 42], [17, 30], [96, 54], [86, 71], [47, 11], [47, 33], [-99967, 8]], [[64077, 78881], [-27, -32], [-15, -6], [-16, 6], [-14, -2], [-32, -49], [-57, -57], [-28, -35], [-31, -23], [-35, -14], [-36, -2], [-13, -13], [-41, -4], [-25, -11], [-1, -19], [5, -43], [-21, 15], [-22, -30], [7, -28], [4, -26], [-34, -5], [-4, -31], [-8, -23], [-75, -51], [-19, 0], [-16, -8], [1, -33], [4, -30], [13, -32], [-6, -14], [-11, -5], [-14, 10], [-14, 17], [-14, 4], [-14, -4], [-64, -91], [-27, -23], [-30, -9], [-61, -34], [-19, 2], [-17, 12], [-15, -17], [-4, -42], [-17, 29], [-18, 23], [-8, 7], [-4, -4], [17, -45], [1, -41], [-4, -23], [-7, -21], [-10, -12], [-11, -7], [-6, -73], [-12, -44], [-15, -40], [-21, -72], [-16, -31], [-13, -37], [-9, -51], [-12, 12], [-10, 22], [-6, -29], [-7, -25], [-32, -37], [-24, -36], [-11, -55], [-2, -33], [3, -30], [9, -17], [46, -20], [29, -25], [28, -47], [30, -40], [21, -51], [15, -64], [19, -123], [9, -129], [28, 161], [24, 29], [-6, -46], [-16, -69], [-17, -101], [-5, -74], [6, -64], [0, -30], [-13, -106], [7, -20], [11, -19], [29, -36], [21, -54], [5, -75], [12, -20], [14, -18], [72, -150], [41, -100], [21, -58], [22, -73], [12, -17], [14, -11], [27, -34], [25, -34], [45, -90], [63, -147], [15, -42], [10, -48], [9, -59], [14, -52], [64, -130], [28, -48], [45, -63], [16, -14], [21, -3], [39, -1], [35, -24], [18, -17], [18, -25], [16, -28], [17, -77], [-62, 25], [-62, -4], [-36, -16], [-34, -22], [-32, -32], [-21, -62], [-17, -142], [-25, -134], [0, -61], [12, -59], [-2, -29], [-11, -12], [-15, -25], [-19, -122], [-10, -25], [-12, -15], [-3, 15], [0, 32], [-27, 28], [-14, -32], [-10, -67], [-20, -71], [-1, -13], [5, -219], [1, -25], [8, -143], [7, -74], [9, -72], [16, -66], [18, -62], [25, -39], [56, -47], [27, -13], [71, -9], [71, -21], [41, -22], [13, -15], [11, -23], [34, -110], [54, -78], [110, -117], [53, -39], [179, -74], [119, 4], [328, 142], [110, 36], [41, 0], [-25, -28], [-41, -17], [25, -20], [38, -3], [18, 3], [13, 18], [2, 30], [-2, 30], [-18, 132], [-10, 93], [-5, 40], [-14, 148], [-7, 148], [1, 69], [8, 138], [-1, 69], [-3, 63], [3, 61], [6, 69], [4, 71], [-5, 49], [-15, 39], [-25, 49], [-4, 29], [-2, 33], [-24, 3], [-22, 34], [-17, 18], [-39, 20], [-19, 1], [-18, -14], [-13, -30], [-9, 47], [0, 49], [31, 102], [19, -30], [24, -12], [30, -2], [29, 8], [-6, 35], [-13, 20], [-17, 15], [-6, 46], [2, 48], [8, 45], [-9, 18], [-14, 11], [-32, -1], [-42, 12], [-42, 5], [-10, -53], [23, -70], [-19, 34], [-19, 46], [-26, 81], [-16, 96], [-3, 103], [14, 85], [18, 80], [11, 102], [15, 101], [15, -45], [17, -40], [24, -38], [13, -9], [39, -15], [25, 6], [27, 22], [26, -7], [22, -42], [20, -46], [29, -10], [61, 33], [29, 8], [25, -15], [13, -3], [13, 2], [-11, 42], [-5, 40], [15, 21], [48, -23], [31, 16], [8, 8], [7, 10], [3, 35], [-1, 36], [-4, 33], [-9, 29], [-22, 42], [-86, 98], [-28, 39], [-24, 50], [-16, 72], [-12, 74], [-11, 55], [-30, 129], [-12, 15], [-14, 7], [-36, 4], [-36, -10], [-58, -22], [-34, 7], [-15, -13], [-39, -55], [-18, -46], [-25, -106], [19, -34], [0, -22], [-15, -157], [9, -76], [-3, -6], [-7, 18], [-22, 78], [-38, 94], [-32, 145], [-7, 60], [-3, 94], [1, 30], [15, 79], [16, 54], [13, 56], [5, 73], [-11, 118], [-13, 26], [-16, 9], [-17, 2], [-30, -5], [-14, -9], [-25, 40], [-30, 6], [-16, -11], [-16, -6], [-17, 11], [-15, 24], [-10, 25], [-7, 29], [-23, 57], [-24, 31], [-28, 7], [-46, -1], [-15, 3], [-1, 33], [6, 72], [0, 38], [-3, 35], [-8, 29], [-10, 25], [-27, 42], [-21, 58], [-35, 120], [-30, 135], [-13, 21], [-27, 21], [-60, 17], [-39, 18], [-15, 17], [-7, 29], [1, 32], [3, 38], [9, 31], [31, 25], [67, 5], [58, -3], [53, -56], [17, -13], [18, -4], [37, 18], [19, 5], [46, -6], [-14, 27], [-17, 14], [-18, -1], [-16, 11], [-25, 52], [-45, 59], [-10, 24], [-3, 39], [8, 34], [32, 34], [26, 47], [13, 63], [11, 28], [23, 45], [34, -8], [54, 32], [87, -6], [105, 9], [29, -3], [67, -32], [39, -14], [46, -7], [34, 14], [-32, 44], [-69, 51], [-17, 44], [31, 119], [43, 109], [26, 129], [-7, 128], [-13, 35], [4, 42], [15, 35], [11, 35], [-9, 42], [-19, 65], [-10, 22], [-33, 35], [-66, 2], [-54, 19], [-17, -16], [-10, -24], [-13, -15], [-42, -32], [-14, -6], [-14, 6], [-21, 36], [-18, -4], [-56, 22], [-26, 49], [-10, 7], [-90, 38], [-32, 8], [-71, -40], [-52, -52], [-15, -7]], [[0, 89324], [99951, -19], [-49, -66], [-56, -57], [-83, -23], [-126, -87], [-49, -16], [-65, 40], [-149, 26], [-47, 35], [-68, 88], [-23, 13], [-21, 35], [-82, 39], [-72, -25], [-58, 19], [-20, -14], [30, -12], [54, -11], [82, 5], [27, -9], [24, -31], [28, -49], [-21, -32], [-22, -11], [-66, 36], [-76, -5], [-36, 9], [-102, 60], [-78, -67], [-107, -35], [-83, -4], [-152, -53], [41, -2], [111, 38], [65, 0], [96, 21], [51, 24], [24, 23], [31, 23], [31, -11], [22, -24], [14, -35], [14, -45], [-18, -24], [-18, -12], [-22, -33], [102, 56], [62, -33], [31, 5], [58, 49], [93, 32], [11, -6], [11, -16], [-15, -94], [6, -74], [71, -81], [73, -47], [26, -2], [24, 9], [9, 43], [18, 32], [23, -29], [19, -31], [27, -76], [-1, -23], [-6, -45], [23, -20], [32, -6], [12, -71], [11, -101], [-14, -9], [-16, 0], [-51, -26], [7, -18], [52, -10], [15, -21], [-11, -47], [3, -21], [18, -5], [12, 28], [-3, 39], [5, 17], [35, -81], [0, -31], [30, -36], [85, -54], [15, -24], [5, -40], [-21, -12], [-20, -28], [12, -40], [22, -32], [36, -12], [17, -52], [0, -49], [-26, -43], [-53, -59], [-31, -24], [-12, -42], [-3, -44], [-21, 2], [-23, 19], [-262, 110], [-99, 21], [-87, 2], [-16, 7], [1, 26], [5, 24], [13, 29], [-6, 26], [-11, 2], [-11, -20], [-24, 0], [-23, 23], [-19, -7], [-9, -32], [-7, -17], [0, -20], [12, -18], [50, -20], [-8, -18], [-70, -14], [-57, -18], [-74, -54], [-30, -38], [-198, -93], [-48, -32], [-21, -4], [-27, -11], [-21, -39], [-110, -55], [-23, 5], [-29, -46], [-27, -26], [-63, -3], [-41, -13], [-88, -67], [-55, 21], [-65, -91], [-72, -87], [-21, 0], [-55, 36], [-14, -19], [9, -35], [19, -37], [-11, -10], [-22, 10], [-16, 2], [-12, -11], [2, -27], [-31, -33], [-24, -3], [-28, -11], [-10, -29], [9, -32], [-50, -36], [-41, -48], [-19, -8], [-22, -21], [-24, -16], [-28, 3], [-67, -67], [-150, -117], [-42, -15], [-53, -36], [-5, -23], [0, -30], [-21, -48], [-25, -122], [-8, -22], [-12, -25], [-55, 12], [-48, 46], [-15, 22], [-8, 25], [-3, 40], [-9, 19], [-11, 9], [-55, 99], [-95, 68], [-14, 23], [-121, -18], [-33, -1], [-58, 17], [-90, -11], [-109, -37], [-33, -23], [-111, -36], [-73, -57], [-142, -208], [-34, -43], [-16, -9], [-24, -4], [-10, 42], [-4, 33], [9, 63], [17, 52], [17, 96], [5, 39], [12, 41], [-48, -3], [-66, -71], [-100, -69], [-46, -18], [-36, -41], [-26, -5], [-30, -15], [-3, -89], [-15, -48], [-18, -10], [-28, -2], [-21, 19], [-30, 71], [-40, 37], [-24, 7], [-18, -9], [-35, -48], [-38, -44], [6, 50], [-33, 19], [-29, 11], [-36, 2], [-11, -7], [-14, -29], [-33, -37], [-22, -15], [-23, -30], [-13, -31], [-12, -44], [-14, -107], [1, -125], [-53, -99], [-20, 10], [-10, -6], [-10, -13], [18, -55], [-10, -19], [-9, -13], [-25, -14], [-56, -81], [-53, -52], [-87, -151], [-25, -100], [-25, -113], [12, -55], [10, -36], [16, -25], [28, -27], [59, -29], [-5, -19], [0, -16], [21, 28], [15, 79], [37, 26], [18, -1], [118, -63], [23, -27], [-4, -60], [-7, -28], [-22, -42], [-42, -50], [-49, -69], [-5, -43], [0, -23], [13, -81], [1, -46], [-6, -85], [3, -37], [13, -31], [20, -20], [35, 11], [33, -9], [25, -22], [-4, -71], [15, -67], [11, -124], [-21, -34], [-20, -21], [-39, -54], [-21, -6], [-37, 18], [-58, 96], [23, 57], [50, 40], [23, 28], [17, 42], [-26, -8], [-18, -18], [-57, 8], [-23, -20], [-28, -32], [11, -80], [-19, -15], [-35, -27], [-52, -34], [-17, -23], [-45, -143], [-41, -107], [-15, -92], [2, -79], [15, -88], [11, -38], [48, -82], [23, -64], [7, -77], [-38, -37], [-67, -89], [-28, -10], [-92, 2], [-46, 45], [-54, -11], [-45, -22], [-71, -63], [-63, -82], [-60, -57], [-18, -34], [-24, -71], [-22, -129], [8, -64], [12, -30], [11, -39], [-16, -61], [0, -38], [29, -61], [6, -84], [-21, -2], [-49, 60], [-52, 4], [-124, -69], [-52, -40], [-57, -80], [-17, 15], [-12, 46], [-21, 20], [-26, -10], [-11, -43], [36, -20], [13, -28], [-21, -107], [-15, -36], [6, -95], [-2, -45], [-8, -45], [-37, -123], [-63, -162], [-78, -118], [-54, -41], [-27, -31], [-12, -41], [-80, -113], [-98, -119], [-28, -21], [-6, 45], [-3, 44], [-12, 59], [-36, 49], [-6, 40], [-6, 54], [-3, 252], [-31, 262], [-3, 82], [-38, 67], [-21, 70], [-12, 68], [-3, 81], [-41, 425], [-13, 106], [-55, 342], [-24, 198], [-16, 192], [-2, 86], [24, 257], [21, 160], [74, 359], [11, 33], [12, 17], [128, 138], [56, 75], [33, 80], [36, 101], [-4, 55], [-4, 31], [-14, 36], [-30, 41], [11, 18], [12, 14], [31, 15], [64, -31], [65, 13], [60, 127], [86, -19], [65, 22], [18, -9], [13, 43], [36, 46], [66, 68], [97, 82], [48, 55], [27, 52], [40, 50], [39, 62], [71, 186], [140, 154], [55, 88], [45, 31], [40, 15], [101, 126], [64, 105], [85, 72], [25, 46], [44, 108], [18, 26], [55, 41], [124, 71], [72, 71], [106, 10], [31, 28], [33, 16], [35, 23], [-43, 63], [10, 33], [8, 16], [76, 74], [31, 60], [-4, 25], [-5, 19], [-47, 24], [9, 55], [13, 48], [38, 40], [13, 94], [2, 99], [37, 142], [22, 32], [87, 71], [20, 2], [60, -24], [66, -12], [23, -22], [5, 19], [-3, 24], [18, 9], [38, -10], [-5, 27], [-98, 14], [-70, 31], [-63, 60], [-41, 17], [-45, -5], [-257, -84], [-12, -23], [-12, -32], [16, -47], [-13, -21], [-12, -14], [-14, -31], [-12, -61], [3, -59], [-31, -92], [-3, -57], [55, -32], [14, -21], [-16, -32], [-17, -19], [-14, -24], [-11, -9], [-15, -6], [-20, 31], [-18, 62], [-29, 4], [-10, -10], [-5, -24], [-25, -2], [-28, 12], [-32, -5], [-57, -70], [-319, -333], [-34, -40], [-42, -80], [-79, -8], [-31, -18], [-23, -24], [-31, -16], [1, 30], [6, 22], [7, 59], [43, 111], [-27, 12], [-27, 1], [-50, -23], [-34, -37], [-26, 8], [13, 33], [31, 66], [-9, 61], [-9, 33], [13, 18], [65, 123], [23, 64], [20, 84], [1, 26], [-4, 32], [-19, 5], [-16, 0], [-128, -83], [-47, -23], [-15, 36], [-21, 15], [-35, 61], [-30, 9], [-31, -4], [-70, -41], [-77, -23], [-59, 8], [-51, -35], [-23, -6], [-75, 24], [-91, 2], [-28, -30], [-79, -41], [-54, -64], [-28, -20], [-31, -28], [-14, -120], [-41, -39], [-38, -29], [-80, -92], [-56, -126], [-38, -54], [-81, -76], [-126, -100], [-110, -162], [-38, -122], [-14, -4], [-27, -25], [-7, -60], [1, -41], [-17, -33], [-17, -42], [18, -26], [16, -5], [24, 4], [63, 34], [108, -52], [54, -52], [-4, -52], [2, -46], [-40, 3], [-53, -4], [-34, -27], [-68, 43], [-23, -16], [-36, -46], [-65, -19], [-33, 23], [-55, 63], [-93, -6], [-24, -71], [-21, 2], [-33, -7], [-55, -82], [-18, -8], [-67, 16], [-48, 42], [-23, 2], [-43, -19], [-21, -50], [-107, -25], [-105, 5], [-57, 119], [107, 47], [63, -10], [72, 8], [75, 37], [-26, 31], [-18, 7], [-45, -4], [-40, 23], [-87, 116], [-38, 21], [-49, 13], [-38, 1], [-14, -8], [-20, -28], [-13, -27], [-12, -9], [-26, 5], [-31, 22], [-37, -7], [16, 17], [35, 18], [-58, 20], [-37, 28], [-34, 7], [-156, 69], [-60, -6], [-37, -19], [-63, -56], [17, -41], [14, -19], [8, -22], [-20, -4], [-58, -4], [-35, 33], [-25, -48], [10, -43], [40, 15], [21, -18], [-14, -49], [-52, -15], [-65, 3], [-65, 87], [-107, -15], [-51, -56], [-49, -13], [-131, 56], [-66, 5], [-74, 48], [-26, -15], [-47, -121], [-63, -29], [-32, 16], [-29, 76], [-20, 25], [-56, 23], [-298, -22], [-100, 19], [-70, 2], [-96, -39], [-92, 15], [-170, -75], [-70, -50], [-84, -88], [-76, -147], [-42, -55], [-71, -70], [-100, -64], [-54, -65], [-30, -53], [-52, -200], [-14, -30], [-123, -72], [-39, -80], [-17, -20], [-51, -34], [-31, -56], [-17, -16], [-73, -40], [-60, -100], [-85, -70], [-123, -194], [-11, -23], [-10, -52], [-19, -38], [-106, -169], [-33, -16], [-53, -79], [-54, -47], [-49, -56], [-61, -59], [-92, -67], [-31, -39], [-48, -90], [-118, -111], [-59, -27], [-77, -98], [-8, -23], [-6, -36], [13, -63], [19, -14], [31, -9], [115, -62], [107, 17], [95, 0], [37, 6], [23, -2], [8, -34], [-1, -63], [-14, -57], [-11, -168], [-13, -75], [10, -73], [23, -13], [23, 33], [37, 5], [38, -15], [28, 117], [-23, 18], [-22, 42], [13, 31], [66, 57], [41, 5], [39, -4], [-43, -73], [-17, -15], [-13, -4], [-18, -14], [38, -42], [41, -32], [59, -14], [-14, -25], [-39, -22], [-36, -91], [-56, -44], [-26, -30], [9, -19], [21, -4], [114, 12], [59, 25], [84, 71], [35, 105], [32, 29], [9, 0], [11, -7], [1, -74], [-45, -83], [-32, -47], [-12, -40], [19, 0], [37, 8], [16, 19], [42, 101], [11, 72], [6, 100], [-5, 60], [3, 43], [-16, 43], [11, 13], [113, -59], [60, -14], [108, 48], [24, -12], [18, -29], [89, -89], [17, -29], [29, -108], [95, -125], [88, -59], [3, -23], [56, -69], [44, -24], [7, -62], [-20, -50], [-41, -48], [-82, 44], [-13, -2], [10, -28], [59, -81], [47, -34], [3, -108], [-6, -59], [-31, -66], [10, -38], [44, -56], [22, -22], [22, -32], [-28, -70], [-5, -78], [-30, -35], [-36, -76], [-55, -62], [-26, -119], [-42, -105], [-5, -104], [-7, -37], [-34, -108], [-13, -146], [17, -239], [8, -14], [16, -14], [-3, -17], [-8, -11], [-33, -71], [0, -49], [13, -37], [2, -95], [-24, -153], [-9, -24], [-10, -39], [-4, -36], [-7, -22], [-4, -39], [7, -34], [12, -17], [-43, -110], [-15, -144], [-16, -58], [-31, -57], [-66, -83], [-24, -52], [-43, -66], [-41, -51], [-57, -145], [-46, -145], [-116, -188], [-15, -46], [-9, -50], [-30, -84], [-15, -116], [-35, -46], [-29, -122], [-94, -186], [-23, -63], [-72, -103], [-77, -142], [-96, -128], [-18, -53], [-37, -58], [-40, -90], [-58, -90], [-12, -60], [-19, -42], [-43, -28], [-31, -39], [-95, -231], [-12, -42], [-2, -37], [-62, -86], [-35, -92], [-60, -57], [-62, -78], [-149, -144], [-41, -54], [-83, -68], [-34, -1], [-72, -37], [-47, -38], [-28, 14], [-17, 50], [-21, -2], [-16, -7], [-43, 48], [-37, -3], [-26, 22], [-50, -15], [9, 205], [-7, 43], [-21, -40], [-57, -72], [-23, -14], [-22, 0], [9, 44], [31, 62], [-10, 10], [-10, 3], [-40, -27], [-20, -30], [-58, -119], [-34, -100], [-28, -29], [-13, -43], [-24, -41], [-37, 11], [-22, -7], [-53, 23], [-13, -10], [35, -77], [-29, -113], [-12, -14], [-14, -16], [-19, 10], [-31, 6], [-39, -51], [-22, -17], [-16, -50], [-31, -30], [-17, -31], [-22, -54], [-14, -53], [-33, -54], [-20, -67], [-1, -58], [21, -59], [2, -51], [-15, -104], [9, -110], [-10, -43], [-102, -76], [-26, -37], [-38, -98], [-46, -36], [-28, -40], [-39, -24], [-26, -69], [-27, -39], [-33, -24], [-25, -30], [-55, -2], [-39, -21], [-27, -58], [-83, -66], [-12, -49], [6, -77], [0, -58], [-7, -49], [-18, 14], [-10, -16], [-11, -44], [4, -51], [28, -17], [23, -20], [33, -11], [24, -24], [52, -107], [42, -47], [11, -17], [24, -24], [22, -37], [13, -33], [68, -258], [64, -166], [56, -121], [79, -232], [23, -124], [2, -77], [13, -106], [-11, -60], [3, -96], [-5, -49], [-9, -36], [-1, -70], [3, -37], [1, -49], [6, -19], [9, -7], [14, 18], [18, 7], [-3, -59], [-22, -150], [-18, -109], [-25, -95], [-32, -87], [-38, -34], [-27, -13], [-51, -4], [-43, 15], [-36, -11], [-15, -18], [-11, -31], [8, -48], [-1, -36], [-16, 3], [-31, 21], [-34, 2], [-16, 11], [-16, 51], [-17, -2], [-29, -31], [-44, -6], [-15, -17], [-5, -21], [6, -26], [22, -35], [-7, -36], [-23, -18], [-19, 44], [-12, 43], [-13, 2], [-20, -12], [-4, -46], [10, -32], [15, -36], [-22, -42], [-5, -30], [-16, -21], [-42, 47], [6, 34], [18, 33], [3, 34], [-6, 20], [-61, -86], [-37, -96], [-19, 7], [-9, 25], [-11, 10], [-40, -63], [-8, -49], [-14, -2], [-7, 21], [0, 45], [-7, 37], [-41, 56], [-19, 48], [10, 27], [34, -15], [28, 2], [-6, 23], [-9, 11], [19, 12], [15, 27], [-13, 7], [-19, -15], [-16, 7], [-6, 63], [-20, 65], [-10, 63], [19, 36], [10, 56], [18, 81], [9, 27], [25, 19], [9, 21], [-14, 11], [-22, 9], [1, 24], [15, 12], [16, 26], [32, 32], [10, 59], [-9, 15], [-20, 14], [5, 30], [8, 23], [-3, 14], [-24, 38], [-16, 36], [5, 40], [-4, 60], [2, 51], [-1, 28], [-11, 62], [-5, 63], [-16, -10], [-12, -15], [-44, 22], [-14, 1], [-5, 47], [15, 57], [38, 50], [21, 6], [16, 22], [26, 7], [30, -34], [27, -7], [15, -59], [9, -12], [2, 22], [22, 25], [5, 19], [-4, 11], [-25, 10], [-23, 73], [-3, 32], [-9, 20], [13, 59], [-26, 67], [-13, 21], [2, 59], [-14, 39], [-8, 21], [-4, 36], [4, 16], [12, 6], [3, 15], [-3, 5], [-14, 4], [-56, 47], [-46, -29], [-12, -37], [-12, -12], [-19, 73], [-30, 2], [-48, 65], [-21, -13], [-5, -26], [-26, -60], [-37, -48], [-12, -7], [-13, 3], [2, 14], [-15, 55], [-58, 22], [-21, 23], [-11, 6], [57, 61], [15, 11], [-11, 14], [-12, 7], [-47, -9], [-24, 20], [-36, -7], [-24, 16], [51, 60], [2, 36], [-1, 27], [26, 80], [26, 44], [67, 62], [30, 9], [21, -3], [17, 6], [-18, 24], [-18, 11], [-35, -2], [-36, 36], [-3, 38], [70, 240], [1, 22], [-11, 58], [-3, 57], [-51, 33], [-22, 4], [-64, 64], [-26, 33], [-10, -10], [-2, -51], [-9, -12], [-17, -10], [-9, 59], [-14, 42], [-42, 44], [-16, 23], [8, 52], [-4, 4], [-3, 5], [-23, -51], [-45, -48], [-96, -10], [-30, 34], [-11, -24], [-9, -31], [-25, -11], [-39, -2], [-22, -21], [-12, -23], [-54, -8], [-20, -31], [-34, -11], [-140, -135], [-30, -57], [-29, -66], [-21, -34], [-18, -23], [-16, -10], [-17, -23], [-16, -3], [-17, 11], [-19, -4], [-12, -28], [10, -36], [-5, -16], [-37, -19], [-55, -13], [-23, -24], [-8, -14], [-12, -7], [-12, 47], [-4, 62], [23, 15], [20, 8], [116, 86], [-14, 64], [10, 28], [26, 45], [17, 23], [-10, 8], [-75, -15], [-44, 1], [-22, 5], [7, 39], [-4, 38], [-5, 15], [38, 44], [18, 11], [13, -1], [-1, 27], [-11, 40], [12, 52], [79, 61], [19, 55], [31, 51], [58, 128], [4, 22], [16, 60], [3, 24], [-26, 35], [-11, 49], [-78, 89], [-7, 76], [-7, -3], [-12, -53], [-10, -18], [-36, -1], [-18, 20], [-100, 13], [-25, -34], [-23, -53], [-22, -38], [-23, -20], [-19, -35], [-81, -206], [-31, -16], [-144, -124], [-72, -49], [-56, -87], [-19, -52], [-17, -58], [-10, -88], [-51, -107], [-18, -23], [-18, -9], [-23, 3], [-21, -7], [-35, 10], [-43, -34], [-48, -29], [-42, 73], [-30, 19], [-48, -21], [-23, -33], [-47, -162], [-17, -93], [1, -38], [27, -116], [31, -64], [69, -74], [147, -51], [34, 18], [37, 0], [39, -48], [24, -80], [3, -55], [0, -19], [9, -16], [5, -27], [-15, -23], [-12, -12], [-10, -84], [0, -94], [12, -31], [32, -44], [49, -36], [45, -8], [86, 17], [35, 57], [-2, 24], [1, 32], [76, 83], [43, 74], [-7, 19], [-8, 13], [8, 8], [23, 5], [106, 76], [83, -62], [47, -72], [47, -13], [33, -36], [37, -32], [49, -2], [41, -7], [13, 30], [13, 19], [14, -4], [17, -38], [47, -30], [43, 2], [30, 11], [18, -14], [-26, -49], [4, -79], [-20, -25], [-19, -40], [11, -26], [10, -12], [-1, -32], [-17, -18], [-32, -48], [-19, 1], [-9, 9], [-6, 18], [-4, 27], [-12, 18], [-31, 7], [-33, -6], [-73, -71], [-71, -57], [-75, -45], [-25, -28], [-18, -8], [-30, 22], [-19, -2], [-4, -14], [24, -40], [6, -31], [-3, -23], [-13, -11], [-20, 18], [-18, -25], [-8, -42], [0, -99], [-12, -22], [-33, -12], [-35, -32], [-13, 15], [-5, 17], [4, 46], [-4, 22], [-16, -1], [-25, -13], [-18, -31], [-6, -18], [24, -58], [23, -6], [6, -13], [-19, -29], [-45, -42], [-8, -36], [-13, -34], [-19, -27], [-13, -28], [-15, -15], [-25, -17], [-31, -68], [-23, -65], [-27, -32], [-21, -109], [-38, -58], [-14, -94], [10, -58], [41, 1], [21, -21], [44, -76], [52, -49], [53, -28], [66, -71], [19, -29], [15, -61], [29, -174], [20, -86], [2, -46], [31, -85], [33, -146], [37, -127], [8, -99], [-13, -46], [1, -59], [37, -55], [85, -63], [13, -18], [17, -31], [0, -95], [13, -31], [12, -18], [51, -41], [21, -33], [23, -54], [6, -48], [3, -65], [-29, -2], [-23, 7], [-91, 84], [-24, 3], [-33, -12], [-48, 16], [-51, 93], [-36, 28], [-39, 15], [-93, -81], [-24, 6], [-7, -9], [-11, -14], [44, -17], [43, 26], [42, 39], [60, -21], [10, -35], [10, -59], [42, -40], [33, -18], [41, -52], [41, -83], [86, -95], [35, -90], [13, -59], [12, -83], [-30, -27], [-26, -4], [-41, -13], [-30, -29], [-31, -52], [-86, -82], [-17, -51], [-11, -44], [-21, -22], [-54, 21], [-50, -2], [-56, -60], [-14, -24], [9, 4], [9, 8], [25, -9], [40, 32], [38, -98], [76, 16], [71, 82], [27, 1], [23, -13], [25, -32], [69, -142], [37, -16], [37, -33], [20, -4], [18, -10], [-49, -52], [-64, -113], [-28, -27], [-19, -30], [51, 15], [37, 54], [18, 13], [15, -12], [7, -67], [-14, -205], [-18, -3], [-17, 56], [-20, 17], [-18, -11], [-33, 0], [-13, -25], [-11, -36], [20, -7], [40, -62], [4, -33], [-11, -22], [-28, 9], [34, -46], [-9, -48], [-11, -19], [-20, -12], [-12, -42], [18, -69], [18, -89], [2, -43], [-28, 18], [-43, -54], [-23, -4], [-16, 71], [-19, -11], [-13, -21], [-18, -77], [-21, -69], [-19, -19], [-22, 5], [-18, -2], [5, -18], [19, -23], [0, -27], [-41, -84], [-7, -33], [1, -28], [-21, -34], [11, -57], [-6, -40], [-19, -54], [-19, -36], [-24, -58], [-29, -33], [-39, -122], [-11, -61], [-3, -63], [-13, -21], [-20, -28], [-24, 14], [-1, 42], [-10, 4], [-6, 27], [-2, 35], [3, 28], [-10, -8], [-6, -33], [-16, -27], [-16, 11], [-18, 22], [1, -32], [9, -31], [4, -32], [24, -6], [17, -37], [13, -55], [2, -21], [10, -25], [1, -21], [-23, -20], [-29, -36], [-35, -63], [-29, -42], [-26, 0], [-15, 5], [-23, 24], [-26, 10], [35, -85], [19, -15], [24, 3], [23, 32], [33, -3], [8, -49], [-9, -55], [-18, -72], [-3, -62], [22, -88], [1, -27], [-9, -13], [-26, 23], [-21, 29], [-22, -7], [-22, 12], [-23, -10], [-10, -21], [7, -34], [20, -28], [12, -43], [-14, -15], [-58, 10], [-14, -8], [-17, -47], [11, -71], [-13, -43], [-24, -11], [-32, -35], [-19, -8], [1, -15], [14, -16], [8, -21], [-18, -72], [-26, -23], [-42, 12], [-32, -17], [-28, 31], [-30, 1], [-20, -39], [-2, -45], [-20, -4], [-11, 3], [-15, -3], [2, -24], [8, -21], [41, -10], [7, -30], [2, -47], [-43, -80], [-18, -54], [-27, 1], [-20, -43], [-11, -60], [-14, 12], [-31, -9], [-10, -28], [8, -12], [1, -20], [-13, -67], [-14, -18], [-6, 27], [-4, 42], [-11, 3], [-18, -39], [-22, -28], [-18, -11], [-14, 26], [-34, 13], [-13, -112], [-29, -40], [-13, -13], [-23, -4], [15, -15], [5, -29], [-9, -28], [-23, -6], [-13, -22], [-5, -100], [-14, -35], [-35, -2], [-26, 23], [-8, -19], [-4, -17], [-14, -18], [-26, -5], [-59, -45], [-26, 13], [-32, 17], [-23, -17], [-7, -34], [-10, -26], [-32, 0], [-26, 32], [-26, 24], [-29, -20], [-22, -42], [-27, -14], [-5, -26], [-12, -13], [-29, 5], [-11, 65], [-16, 9], [-16, -32], [-6, -26], [-8, -19], [3, -53], [-16, -1], [-21, 32], [-23, 6], [-20, -30], [7, -24], [-2, -24], [11, -12], [3, -23], [-12, -13], [-1, -28], [-6, -17], [-36, 30], [-29, 16], [-27, -6], [-9, 18], [-2, 18], [31, 32], [2, 16], [-23, 11], [-29, 44], [-20, 73], [-26, 39], [-12, 35], [-4, 62], [-5, 29], [2, 33], [7, 29], [-28, -15], [-20, -27], [4, -34], [-5, -32], [-31, -16], [2, -14], [2, -14], [24, -43], [5, -36], [10, -20], [19, -56], [-1, -110], [11, -31], [-4, -30], [-8, -43], [-13, -12], [-23, -14], [-14, -8], [-11, -11], [-17, -32], [-33, -8], [-16, 76], [-23, -51], [-6, -104], [-9, -18], [-14, -15], [-26, 37], [-23, -25], [-18, -25], [-8, -22], [-13, -25], [-25, 24], [-21, 36], [5, 27], [-2, 17], [-10, 14], [-10, -2], [5, -35], [4, -67], [-10, -19], [-14, -15], [-31, 12], [-21, 25], [-26, 21], [-22, 4], [-5, -42], [-15, -35], [-13, -4], [-14, 6], [-18, -37], [-8, -27], [-22, -29], [-58, -13], [-21, -29], [-27, 5], [-21, -7], [-13, 2], [-10, 15], [-13, 0], [-5, -47], [-33, -20], [-30, -5], [-33, -62], [-24, -37], [-17, -4], [-13, 13], [-7, 56], [-6, 6], [-4, -52], [-6, -43], [-12, -24], [-38, -54], [-11, -54], [7, -49], [51, -12], [7, -27], [-5, -22], [-13, -19], [-3, -28], [55, -88], [2, -34], [-9, -19], [-10, -41], [-29, -35], [-62, -18], [-51, 18], [-16, 40], [1, 28], [13, -8], [14, 3], [-4, 26], [-6, 15], [-24, 23], [-19, 62], [4, 51], [-11, 40], [-11, 34], [-12, 20], [-6, 25], [12, 78], [-7, 45], [22, 56], [6, 63], [39, 22], [3, 60], [-29, 2], [-19, 44], [-5, -18], [-15, -2], [-26, 84], [-8, 11], [-12, 2], [6, -90], [-30, -33], [-25, -15], [-35, -6], [-20, -10], [-18, 8], [4, 27], [10, 33], [-9, 27], [-20, 20], [-30, -1], [-21, 6], [-20, -2], [-8, 12], [-19, 42], [-17, 26], [-7, 26], [7, 31], [-6, 18], [-32, 2], [1, -43], [3, -52], [9, -39], [-6, -22], [-16, -15], [-17, 42], [-8, 10], [-9, -2], [-6, -41], [-15, -37], [-28, 4], [-22, -23], [-26, -10], [-13, -5], [-33, -1], [-28, -53], [-20, -22], [-30, -18], [-33, -30], [-9, -52], [-1, -38], [-5, -42], [-53, -61], [-15, 6], [-10, 23], [-15, -5], [-11, -11], [-12, 1], [-14, -13], [-18, 4], [-17, 19], [-10, 5], [-12, 1], [-2, -23], [17, -89], [5, -41], [-56, -120], [6, -78], [-15, -59], [-34, -48], [-64, -123], [-29, -3], [-22, -28], [-47, -202], [-1, -70], [-7, -50], [2, -49], [-21, -96], [-22, -41], [-4, -52], [30, -108], [4, -19], [17, -58], [9, -41], [14, -41], [49, -107], [22, -33], [26, -23], [48, -96], [24, -62], [-11, -41], [6, -89], [-35, 26], [5, -11], [40, -48], [61, -170], [53, -84], [54, -96], [17, -91], [48, -60], [54, -87], [-2, -19], [14, -24], [37, -46], [22, -49], [8, -46], [13, -7], [16, 11], [15, 4], [10, -3], [17, -51], [22, -46], [11, -41], [9, 5], [7, -6], [2, -35], [4, -23], [30, -67], [14, -63], [37, -103], [26, -58], [20, -33], [21, -28], [22, -114], [11, -103], [23, -114], [18, -50], [0, -95], [14, -97], [15, -65], [5, -67], [4, -33], [6, -25], [16, -114], [-4, -52], [-11, 51], [1, -152], [10, -80], [-5, -99], [11, -35], [19, -111], [13, -40], [-1, -137], [7, -69], [-18, 41], [-13, 47], [-17, -25], [-15, -36], [24, -147], [-28, 14], [3, -197], [11, -46], [1, -22], [-3, -27], [-8, 29], [-1, 30], [-5, -6], [1, -16], [-10, -35], [-2, -43], [9, -36], [2, -28], [-7, -35], [-11, -37], [-26, -5], [-6, -71], [-9, -76], [-46, -12], [-33, -67], [-42, -25], [-37, -67], [-40, -61], [-27, -8], [-22, -13], [-26, -102], [-44, -12], [-78, -83], [-26, -40], [-24, -16], [-34, -35], [-7, 13], [-12, 30], [-29, 15], [-15, 33], [-4, 43], [-4, 17], [-6, -24], [-5, -102], [-5, -23], [-13, -10], [-25, 29], [-23, 59], [-34, -41], [10, -5], [16, 3], [12, -10], [10, -39], [-1, -22], [-5, -25], [-32, -4], [-42, 9], [-7, -3], [38, -39], [35, -22], [16, -24], [0, -20], [-20, -32], [-15, -40], [-1, -25], [0, -27], [-17, -24], [-11, 5], [-30, 41], [-86, 163], [13, -46], [90, -185], [15, -61], [3, -43], [-10, -21], [-15, -26], [-29, -2], [-49, 69], [-77, 165], [-26, 22], [78, -188], [13, -46], [13, -53], [-4, -31], [-7, -30], [-185, -174], [-28, -76], [-22, -93], [-36, -51], [-21, -48], [-62, -26], [-34, 8], [35, 86], [-22, 32], [-1, 221], [9, 242], [16, 121], [23, 30], [30, 19], [0, 25], [-3, 30], [-15, 41], [-18, 19], [-25, 8], [-20, 51], [-15, -2], [-24, -17], [-14, 22], [-5, 34], [-22, 42], [-24, 41], [-46, 75], [-90, 26], [-10, 33], [-9, 6], [-8, -43], [-50, -41], [-21, 25], [-15, 30], [2, 37], [15, 30], [24, 22], [12, 76], [-19, 97], [-16, 28], [-18, 23], [-18, -37], [-15, -61], [-16, -32], [-23, -7], [-33, 2], [-13, 93], [-4, 79], [4, 90], [5, 53], [-32, 74], [-2, 70], [-15, 37], [-4, -19], [0, -20], [-6, -2], [-8, 40], [-26, 67], [-8, 71], [-30, 79], [-16, 31], [-6, -26], [-9, -28], [-30, 40], [-25, 43], [-23, 81], [-3, -19], [-6, -17], [-26, 64], [-28, 51], [-25, 19], [-15, 17], [-15, 27], [-31, 28], [-78, -40], [-98, 31], [-38, -30], [-16, 19], [-9, 35], [9, 59], [2, 125], [12, 88], [-6, 67], [6, 31], [4, 43], [-15, 17], [-70, 34], [-15, 27], [-18, -31], [-84, -17], [-31, -26], [-29, -49], [-8, -64], [17, -41], [11, -73], [-30, -158], [-5, -46], [12, -194], [-5, -106], [-16, -71], [-26, -63], [-11, -109], [-20, -50], [-28, -114], [-18, -143], [-13, -66], [-8, -122], [-56, -184], [-13, -104], [-20, -40], [7, -31], [1, -52], [-7, -139], [-2, -115], [8, -62], [27, -122], [-6, -36], [-3, -50], [22, -23], [17, -7], [91, 58], [31, -15], [12, -54], [8, -47], [15, -254], [8, -48], [19, -45], [20, -47], [7, 8], [1, 18], [1, 20], [19, -48], [14, -90], [48, -476], [14, -61], [11, -63], [-29, 31], [-8, 105], [-8, 45], [-11, 6], [-16, 0], [-1, 18], [12, 35], [-2, 41], [-17, 34], [-27, -27], [1, -74], [12, -57], [46, -127], [15, -53], [18, -15], [27, 8], [32, -54], [25, -50], [63, -77], [38, 8], [41, 19], [27, -5], [27, -20], [32, -64], [52, -161], [84, -134], [48, -22], [18, -18], [54, -178], [71, -126], [30, -46], [23, -23], [32, -67], [28, -84], [61, -237], [10, -105], [5, -159], [-14, -240], [-16, -119], [3, -57], [22, -86], [-6, -82], [4, -68], [-2, -189], [13, -55], [15, -36], [76, -112], [6, -41], [37, -143], [70, -310], [19, -139], [-2, -38], [-8, -15], [-21, -14], [-17, 27], [-6, 20], [2, 24], [-7, 24], [-16, 28], [-10, 26], [3, -42], [0, -55], [-21, -5], [-28, 17], [-34, -15], [-40, -68], [-19, -2], [-15, 58], [-8, 39], [-12, 28], [-127, 142], [-47, 37], [-50, 107], [-112, 119], [-71, 116], [-30, 71], [-73, 64], [-31, 74], [-16, 15], [-15, 27], [16, 72], [-7, 76], [-8, 64], [-51, 126], [-25, 88], [-49, 87], [-19, 51], [-18, 58], [11, 21], [11, 12], [-10, 43], [-27, 74], [-13, 85], [0, 160], [-39, 226], [-34, 313], [6, 110], [-9, 119], [-22, 114], [-29, 82], [-11, 67], [-69, 178], [-48, 73], [6, 132], [-14, 26], [-18, 2], [-14, 37], [12, 79], [-19, -15], [-26, 3], [-21, 21], [-16, 109], [-11, 33], [-22, 58], [-29, 0], [-10, 27], [2, 70], [-21, 43], [-28, 36], [-23, 20], [-24, 114], [-19, 28], [-16, 22], [-22, -15], [-7, -41], [-15, -39], [-16, 5], [-16, 22], [-18, 114], [-4, 69], [5, 129], [23, 116], [13, 185], [20, 117], [13, 39], [20, 159], [39, 204], [-13, -7], [-26, -83], [-12, 42], [-7, 43], [8, 98], [-16, 186], [10, 25], [9, 13], [18, 71], [21, 70], [2, 85], [17, 61], [-4, 52], [1, 61], [4, 49], [-2, 41], [14, 42], [24, 32], [-10, 11], [-10, 23], [-31, -35], [-16, 11], [-3, 37], [4, 39], [2, 23], [12, 27], [-1, 52], [-6, 46], [9, 57], [-18, 0], [-9, 11], [5, 32], [17, 28], [-15, 53], [11, 57], [0, 71], [-8, 62], [0, 45], [-11, 79], [-6, 101], [-24, 76], [-19, 110], [-48, 144], [0, 61], [-2, 54], [-11, 27], [-14, -192], [-11, 38], [-3, 107], [-7, 50], [7, 101], [-28, 100], [-6, 73], [-19, 110], [6, 25], [25, -25], [-23, 64], [-19, -14], [-16, 69], [-3, 188], [-16, 70], [9, 71], [-18, 257], [-35, 82], [7, 72], [9, 63], [-2, 118], [8, 36], [17, 28], [-16, -10], [-13, -8], [-32, -7], [-36, -2], [-12, 86], [-18, 41], [-16, 86], [-9, 98], [6, 19], [-27, 40], [-8, 24], [-29, 64], [-33, 48], [8, -34], [9, -21], [-17, -59], [16, -99], [-14, -63], [-13, -82], [-12, -40], [-40, -84], [-32, -29], [-21, -5], [-19, 9], [-23, 44], [-5, 36], [-4, 61], [-8, 9], [-9, -7], [14, -79], [0, -37], [24, -71], [-9, -20], [-44, -38], [-15, 6], [-10, -8], [-3, -32], [-6, -18], [-69, -48], [-14, -56], [-9, -55], [-35, -80], [-46, -66], [-11, 3], [-13, 16], [2, 71], [15, 61], [-5, 64], [-3, -37], [-30, -90], [-14, -29], [-27, 8], [-38, -12], [-14, 92], [0, 34], [-3, 29], [5, 30], [-2, 25], [-9, -47], [-3, -40], [-14, -35], [-38, -39], [-1, 49], [-2, 44], [8, 39], [-1, 63], [12, 90], [-1, 31], [-3, 34], [-7, -50], [-4, -51], [-8, -16], [-13, -11], [-26, -60], [-15, -52], [-40, -50], [-20, 5], [-3, 63], [16, 225], [15, 32], [8, 39], [12, 131], [15, 50], [6, 104], [6, 18], [19, 82], [7, 150], [-8, 75], [-18, 72], [-18, 217], [-46, 176], [-4, 59], [-22, 71], [21, 5], [-43, 62], [-6, 26], [-9, 146], [2, 81], [-6, -11], [-6, -50], [-17, -21], [7, -87], [-1, -21], [-9, -33], [-36, 35], [-26, 38], [-30, 93], [-29, 104], [10, 16], [13, 2], [42, -77], [27, -16], [17, 19], [21, 33], [10, 64], [-11, 24], [-20, 13], [-13, 17], [-20, 43], [-2, 23], [-6, 28], [-20, 20], [-16, 25], [14, 45], [13, 34], [-35, -2], [-39, 58], [-9, 16], [-13, 12], [-31, 7], [-26, -17], [12, -82], [-2, -27], [-17, 4], [-36, 124], [11, 32], [15, 30], [-7, 4], [-15, -2], [14, 111], [-9, 16], [-4, -34], [-8, -34], [-30, -78], [-15, 15], [-10, 19], [14, 41], [8, 11], [5, 22], [-11, 43], [-18, 32], [-14, 53], [-7, 1], [6, -63], [-2, -91], [-32, 100], [-64, 143], [-15, 42], [-5, 0], [-16, 53], [-15, 58], [-39, 110], [-12, 197], [-1, 97], [-26, 114], [-18, 158], [-7, 41], [9, 51], [2, 19], [-5, -4], [-14, -26], [-17, 63], [-11, 56], [-46, 117], [-13, 52], [-1, 50], [-19, -50], [-27, -36], [-27, -54], [-18, -16], [-57, -10], [-33, 72], [-47, 175], [-7, 40], [6, 103], [-11, 97], [0, 52], [-3, 34], [-8, -8], [-4, -23], [2, -36], [-3, -31], [-41, 6], [-39, 14], [34, -51], [36, -12], [19, -46], [3, -36], [-1, -40], [-19, -29], [-17, -17], [3, -39], [21, -47], [-26, -14], [-6, -31], [-1, -43], [13, -39], [5, -29], [-3, -26], [12, -29], [18, -60], [5, -42], [-7, -60], [-10, -23], [-16, -23], [-39, -75], [-19, -86], [-16, -40], [-20, -7], [-7, 18], [-17, 22], [0, 42], [5, 33], [33, 81], [-18, -11], [-21, -23], [-31, -43], [-11, 53], [-6, 50], [0, 61], [25, 91], [-29, -45], [-8, -57], [4, -67], [-4, -47], [-11, -62], [-15, -37], [-25, -24], [-11, -37], [-17, -27], [0, 54], [-5, 71], [-18, 168], [-4, -36], [9, -104], [0, -68], [-14, -54], [-27, -57], [-21, -8], [-12, 8], [-19, 36], [-20, 51], [-4, 82], [-8, 45], [-7, -90], [-22, 1], [20, -60], [6, -44], [3, -60], [-24, -7], [-16, 7], [-14, 52], [-7, -48], [-24, -44], [-9, 22], [-5, 23], [-1, 41], [13, 157], [-2, 17], [-7, 12], [-13, 6], [-5, 32], [-21, -167], [9, -68], [-4, -32], [-38, -26], [-39, 63], [-5, 20], [-3, -35], [-7, -43], [-36, 8], [-19, 33], [12, 58], [23, 137], [4, 62], [-30, 45], [-26, 27], [-15, 63], [6, -69], [14, -24], [20, -17], [21, -35], [-15, -43], [-15, -27], [-29, -101], [-34, -57], [-41, -42], [-132, -63], [-28, -25], [-41, -78], [-26, -74], [-5, -75], [15, -81], [12, -127], [10, -26], [-14, -47], [-25, -49], [-20, -66], [2, -37], [-5, -24], [-70, -82], [-15, -47], [-19, -48], [-23, 27], [-14, 0], [19, -38], [-3, -25], [-6, -14], [-18, -14], [-101, -60], [-77, -57], [-22, 3], [4, 17], [14, 15], [-1, 66], [-15, 12], [-12, 4], [-59, -79], [-23, -79], [5, -15], [13, 4], [39, 44], [19, -12], [1, -18], [-60, -68], [-126, -220], [-6, -44], [-17, -49], [-22, -46], [-41, -112], [-78, -167], [-21, -62], [-125, -128], [-23, -39], [-51, -125], [-53, -102], [-62, -85], [-106, -108], [-65, -102], [-20, -68], [-2, -25], [7, -33], [12, -30], [3, -25], [-6, -44], [-3, -24], [-19, -60], [-33, -43], [-105, -90], [-14, 3], [-86, 18], [-32, -17], [-13, -42], [-30, -174], [-28, -46], [-11, -42], [-4, -29], [-17, 1], [-14, 13], [-11, -10], [-12, 59], [-21, 12], [-17, 4], [-73, -59], [-25, -47], [-53, -223], [-14, -144], [13, -159], [18, -127], [4, -57], [-2, -75], [-10, -36], [-6, -43], [8, -88], [23, -116], [5, -48], [1, -51], [17, -115], [-12, 20], [-9, 49], [-21, 62], [-26, -62], [14, -44], [49, -53], [15, -44], [-32, -386], [-24, -138], [-29, -90], [-16, -34], [-34, -142], [-24, -172], [-5, -67], [11, -74], [-12, -43], [-16, -34], [30, 15], [10, -40], [3, -42], [1, -246], [-3, -257], [-23, -11], [-25, -2], [-22, 7], [-16, 10], [-39, -14], [-21, -28], [-17, -47], [1, -81], [-72, -203], [-16, -67], [-6, -65], [10, -34], [18, -35], [24, -14], [47, -14], [23, -19], [15, -34], [-55, 36], [-65, 8], [-155, -95], [-41, -66], [-23, -57], [-15, -131], [-3, -88], [-18, -73], [-81, -112], [-51, -34], [-19, -30], [-60, 39], [-66, 98], [-27, 53], [-97, 253], [-18, 32], [-19, 108], [-4, 41], [-5, 16], [-9, 11], [-5, 16], [-21, 124], [-9, 130], [-14, 144], [11, -10], [17, -47], [8, -70], [1, -96], [12, -11], [11, 9], [-31, 222], [-28, 55], [-7, 4], [-7, 36], [-1, 44], [2, 22], [-21, 72], [-8, 44], [-48, 220], [-22, 157], [-33, 175], [-22, 62], [-34, 135], [-28, 63], [-30, 84], [-24, 38], [-9, 19], [-70, 292], [-21, 162], [-18, 76], [-9, 58], [-25, 247], [0, 44], [-3, 49], [-17, 105], [-31, 113], [-9, 70], [1, 28], [-20, 110], [-4, 50], [-13, 47], [-15, 42], [-16, 34], [-37, 112], [-14, 27], [-25, 72], [-18, 134], [-23, 52], [36, 0], [-22, 49], [-11, 32], [-12, 20], [17, 50], [-27, -1], [-15, 30], [-20, 93], [-37, 105], [-6, 57], [-32, 177], [-27, 426], [-26, 189], [2, 54], [-30, 165], [-15, 110], [-6, 93], [-8, 61], [-7, 121], [-12, 39], [-1, 23], [8, 55], [22, 85], [8, 54], [-10, 77], [-20, -80], [-18, -23], [-9, 60], [0, 80], [-2, 20], [5, 27], [49, -13], [-56, 49], [-6, 29], [-3, 22], [12, 40], [-20, 33], [-8, 103], [-6, 24], [-2, 19], [11, 142], [48, 280], [4, 63], [-5, 90], [-10, 71], [-5, 76], [-3, 19], [-17, 7], [-16, 28], [-19, 112], [17, 36], [13, 21], [-18, -9], [-15, 3], [29, 52], [25, 39], [59, 46], [25, 30], [-37, -27], [-38, -10], [-83, 6], [14, 104], [14, 35], [16, 19], [-23, -6], [-27, 9], [9, 106], [21, 22], [22, 5], [28, 15], [-30, 17], [-31, 9], [-37, -18], [-34, 13], [-42, 0], [17, -14], [17, -33], [-8, -57], [-9, -36], [-23, -24], [-18, -38], [-6, -32], [-10, -24], [18, -16], [19, -12], [11, -26], [13, -39], [-1, -75], [-49, -177], [-17, -39], [-124, -107], [-48, -58], [-104, -75], [-40, -14], [-44, 15], [-66, 57], [-99, 147], [-26, 48], [-79, 189], [-57, 99], [-44, 93], [-54, 88], [-51, 118], [-10, 54], [3, 54], [19, 30], [22, -12], [18, -46], [12, -21], [11, -8], [76, 71], [29, -3], [20, 35], [25, -7], [52, 55], [22, 3], [26, 11], [42, 140], [31, 89], [20, 19], [-1, 22], [-5, 28], [-16, -7], [-10, -27], [-8, -33], [-8, -19], [-24, 18], [-17, -3], [-20, -11], [-75, -52], [-31, -47], [-20, -9], [-119, 51], [-117, 118], [-49, 79], [-31, 100], [-31, 120], [10, 33], [48, 72], [42, 56], [-37, -25], [-41, -35], [-20, -24], [-22, -51], [-31, -12], [-11, 76], [-8, 74], [-4, -34], [-10, -26], [-13, 38], [-9, 17], [-9, -13], [-14, 2], [-26, 42], [-11, -43], [-42, -9], [-5, 32], [-1, 30], [-23, -22], [-17, 34], [-7, 45], [-6, 12], [-8, 15], [-17, 15], [-16, 48], [-1, 51], [-4, 60], [-33, 224], [-20, 21], [-110, 39], [-6, 40], [8, 105], [-3, 66], [-36, 88], [-10, 61], [-29, 52], [-29, 15], [-30, -7], [-15, -20], [-9, -35], [63, 8], [14, -13], [17, -23], [-18, 1], [-21, 11], [-26, -1], [-98, -26], [-56, -37], [-76, 11], [-96, -36], [-79, -2], [-33, -71], [-18, 12], [-14, 18], [-109, 56], [-7, 23], [-18, 17], [-20, -30], [-15, -5], [-59, 25], [-46, -19], [-17, -32], [-1, -50], [-57, 10], [-32, 15], [-43, -17], [-98, 23], [-25, -6], [-36, -33], [-15, -26], [-21, -10], [-18, 36], [-14, 16], [-13, -10], [-18, -30], [-50, -14], [-46, 4], [-58, 33], [-12, -24], [-22, -30], [-47, 23], [-37, 24], [-124, 57], [-13, 28], [-8, 48], [-21, 13], [-31, -72], [-104, 42], [-36, -13], [-21, 22], [-57, 2], [-44, 45], [-64, -31], [-50, -6], [-69, 79], [-74, 22], [-60, -7], [-31, 6], [-50, 29], [-24, 29], [-39, -22], [-18, 41], [-110, 38], [-21, 74], [-15, 68], [-1, 70], [-27, 123], [-9, 177], [-10, 70], [-15, 60], [-20, 51], [-27, 55], [-24, 22], [-103, 42], [-20, -6], [-46, -27], [-49, -61], [-81, -34], [-17, -26], [-20, -59], [-26, -35], [-36, 9], [-39, -35], [-72, -97], [-38, -29], [-32, 2], [-34, 46], [-76, 62], [-49, 20], [-69, -14], [-32, 11], [-56, 72], [-14, 53], [-32, 35], [-99, 79], [-81, 105], [-15, 39], [-10, 59], [-35, 71], [-79, 58], [-45, 61], [-52, 14], [-49, -2], [-21, 11], [-20, 27], [-67, 127], [0, 51], [-41, 124], [-10, 45], [-9, 123], [-11, 32], [-43, 51], [-7, 33], [10, 44], [0, 34], [-23, 31], [-33, 17], [-8, 38], [6, 73], [-5, 47], [-30, 73], [-43, 76], [-44, 111], [-17, 28], [-11, 73], [-16, 87], [-24, 6], [-119, -104], [-35, 59], [-104, 102], [-8, 15], [-7, 23], [13, 14], [13, 5], [26, -18], [16, 21], [-6, 35], [-26, 21], [-36, -2], [10, -32], [-34, -30], [-7, -41], [5, -49], [3, -70], [-14, -33], [-10, -16], [-45, -4], [-21, -31], [-14, -7], [-25, -14], [-28, 11], [-59, 48], [-19, 2], [-25, -19], [-1, -16], [-2, -21], [9, -64], [20, -69], [17, -56], [2, -27], [-15, 4], [-12, 11], [-22, 11], [-42, -75], [-26, -40], [0, -14], [34, -16], [25, 1], [17, 11], [15, -18], [10, -46], [4, -37], [23, -133], [19, -45], [24, -80], [9, -41], [5, -35], [15, -51], [15, -54], [7, -54], [29, -128], [41, -100], [9, -36], [7, -55], [-7, -21], [-3, -23], [30, -55], [51, -46], [19, -12], [22, -21], [-17, -31], [30, -74], [34, -74], [37, -17], [50, -113], [74, -73], [46, -96], [-4, -2], [-14, 10], [-16, 13], [-5, -12], [0, -40], [5, -47], [23, -41], [21, -29], [8, -56], [-17, -120], [-5, 1], [-11, 10], [-12, 2], [-6, -7], [14, -86], [13, -66], [17, -52], [14, -77], [11, -32], [49, -82], [14, -68], [14, -127], [30, -70], [17, -55], [22, -46], [8, 35], [3, 22], [-19, 167], [-6, 128], [2, 26], [11, 30], [19, 66], [9, 65], [28, 148], [29, 57], [43, 42], [35, -82], [43, -63], [8, -70], [-13, -57], [-11, -90], [7, -42], [2, -36], [12, -61], [11, -78], [2, -55], [-6, -51], [-15, -42], [-29, -129], [-9, -13], [-36, -22], [20, -24], [20, 3], [2, -23], [-13, -31], [-17, -78], [24, -13], [22, -6], [17, -13], [9, 0], [10, 30], [5, -21], [12, -29], [19, 7], [9, -5], [7, -103], [14, -37], [18, -15], [59, -8], [36, 14], [73, 67], [38, 25], [105, -5], [84, -28], [131, -16], [26, 4], [70, 54], [44, 48], [26, 14], [17, 46], [11, 60], [10, 39], [13, 19], [12, 33], [9, 55], [25, 54], [97, 133], [57, 113], [5, 36], [32, 55], [24, 59], [117, 171], [23, 70], [14, 79], [1, 6], [24, 83], [9, 13], [8, -6], [22, 9], [11, 45], [9, 25], [10, -3], [4, -14], [-3, -69], [0, -57], [-12, -175], [-13, -30], [-6, -25], [-2, -34], [18, -46], [2, -318], [5, -22], [28, -152], [42, -142], [37, -78], [38, -106], [59, -98], [27, -33], [108, -69], [60, -25], [82, -25], [57, -53], [19, -3], [29, 15], [22, -1], [54, -73], [16, -69], [23, -36], [20, -57], [13, -60], [45, -92], [33, -103], [33, -76], [29, -47], [44, -19], [36, -21], [4, -51], [-4, -67], [-7, -49], [-33, -96], [-8, -59], [-37, -97], [-41, -163], [-18, -37], [-66, -84], [-48, -102], [-57, -176], [-43, -174], [-17, -56], [-35, -12], [-23, 5], [-15, 17], [6, 47], [4, 54], [-21, -6], [-19, -11], [-43, -131], [-24, -57], [-5, -73], [-12, -94], [-16, -86], [-8, -73], [0, -41], [13, -101], [1, -103], [7, -62], [6, -74], [-20, -23], [-18, -11], [-68, -8], [-70, -24], [-61, -43], [-37, -43], [-47, -95], [-29, -243], [-47, -103], [-31, -21], [-76, -9], [-106, -28], [-38, -25], [-62, -148], [-5, -47], [12, -34], [4, -37], [-5, -35], [-29, -94], [-30, -68], [-81, -43], [-30, 25], [-27, 13], [-53, 2], [-86, -17], [-31, -50], [-50, -36], [-46, -55], [-87, -21], [-59, -43], [-140, -103], [-37, -45], [-33, -57], [-25, -70], [-18, -124], [13, -113], [-1, -60], [-36, -40], [-34, -29], [-37, -44], [-23, -11], [-19, -35], [-21, -25], [-78, -63], [-86, -50], [-135, -59], [-53, -64], [-47, -44], [-73, -13], [-99, -61], [-55, -48], [-69, -80], [-15, -25], [-12, -58], [-21, -51], [-42, -83], [-31, -42], [-20, -2], [-41, -23], [-47, -5], [-80, 29], [-21, -20], [-17, -33], [-61, -56], [-63, -114], [-46, -30], [-74, -36], [-52, -47], [-35, -19], [-44, -10], [-83, 5], [-79, -17], [-73, -32], [-34, -60], [-39, -96], [-64, -40], [-15, -34], [-20, -71], [-41, -18], [-38, -12], [-38, 31], [-72, -85], [-27, -15], [-41, -3], [-30, -18], [-21, 5], [-26, 34], [-56, 40], [-41, -26], [-3, 80], [-68, 247], [14, 215], [0, 30], [-13, 96], [-40, 87], [1, 111], [-14, 80], [-10, 81], [3, 22], [1, 20], [-21, 125], [-7, 26], [-2, 26], [6, 20], [0, 24], [-11, 38], [-11, 74], [-55, 57], [11, 54], [11, -19], [14, -16], [3, 35], [0, 26], [-23, 163], [34, 218], [-11, 195], [-3, 46], [-16, 68], [-1, 49], [-8, 48], [-14, 37], [-26, 38], [-3, 53], [-19, 52], [-25, 42], [-15, 77], [-10, 103], [-67, 135], [-84, 124], [-26, 71], [-42, 143], [-21, 113], [-56, 130], [-2, 50], [-9, 61], [-13, 68], [-7, 54], [-57, 235], [-18, 37], [-16, 53], [-4, 40], [-5, 22], [-39, 39], [-38, 99], [-111, 157], [-55, 15], [-43, 56], [-32, 74], [-34, 126], [-60, 136], [-50, 194], [16, 71], [-1, 49], [-16, 84], [-17, 64], [-12, 61], [10, 88], [3, 98], [10, 52], [7, 57], [-9, 115], [-17, 61], [2, 41], [-19, 20], [-16, 45], [16, -1], [-29, 62], [-11, 34], [-11, 84], [-14, 64], [-45, 146], [-22, 89], [-49, 114], [-53, 85], [-33, 38], [-16, 35], [-28, 2], [-30, 50], [-21, 1], [-26, 8], [-31, 97], [-26, 90], [-44, 118], [11, 31], [13, 50], [-6, 65], [-7, 44], [-19, 81], [-64, 202], [-17, 29], [-27, 34], [-16, 88], [-8, 78], [-44, 38], [-74, 282], [-44, 99], [-17, 66], [-50, 109], [-24, 109], [-51, 100], [-44, 173], [-67, 174], [-29, 30], [-69, 12], [-30, 13], [-27, -38], [-2, 48], [19, 67], [26, 140], [6, 123], [42, 364], [9, 76], [-3, 40], [-19, -44], [-15, -26], [-32, -93], [-33, -296], [-47, -231], [-5, -144], [-8, -52], [-23, -73], [-27, -72], [-49, 37], [-79, 126], [-46, 120], [-49, 77], [-47, 103], [-13, 73], [1, 48], [-21, 115], [-15, 55], [-57, 123], [-16, 65], [-13, 29], [-12, 41], [-21, 160], [-23, 101], [-25, -28], [4, -43], [-22, -59], [-14, -68], [11, -56], [46, -85], [10, -37], [11, -80], [-2, -110], [7, -37], [35, -81], [13, -48], [7, -42], [12, -38], [34, -71], [50, -134], [47, -91], [35, -44], [14, -44], [3, -113], [-2, -55], [30, -101], [11, -52], [29, -42], [13, -48], [12, -78], [18, -231], [26, -56], [77, -303], [66, -192], [32, -144], [48, -174], [95, -383], [56, -118], [22, -66], [41, -51], [44, -74], [-42, 7], [-10, -5], [-15, -12], [-7, -45], [-3, -37], [5, -194], [11, -98], [37, -188], [28, -56], [14, -36], [18, -27], [88, -63], [52, -136], [115, -170], [11, -47], [0, -11], [4, -132], [12, -105], [43, -150], [36, -81], [13, -44], [1, -21], [-1, -19], [-11, 22], [-19, 15], [-3, -70], [5, -50], [4, -94], [15, -101], [-11, -93], [2, -158], [19, -190], [-4, -120], [32, -283], [30, -156], [17, -39], [19, -20], [36, -14], [53, -79], [43, -85], [15, -44], [20, -48], [14, 9], [9, 12], [13, -39], [67, -84], [10, -39], [84, -333], [34, -196], [30, -206], [23, -308], [21, -157], [34, -78], [23, -146], [21, -6], [14, -40], [25, -138], [18, -51], [9, 44], [-1, 25], [-7, 43], [7, 54], [14, 33], [31, -44], [18, -34], [5, -68], [7, -37], [33, -80], [28, -23], [37, -6], [30, -17], [25, -29], [46, -81], [104, -71], [85, -216], [49, -151], [163, -227], [28, -110], [15, -106], [34, 5], [59, -117], [17, -89], [48, -32], [9, 52], [23, -43], [9, -67], [4, -27], [47, -114], [15, -56], [16, -102], [-9, -56], [-12, -37], [-18, -33], [-62, -81], [-69, -52], [-44, -103], [-33, 7], [5, -39], [12, -5], [19, 8], [38, 30], [34, 14], [37, 1], [33, -13], [23, -38], [54, -88], [53, -180], [62, -144], [85, -135], [33, -45], [30, -24], [155, 4], [109, 122], [100, 89], [33, 18], [58, -24], [64, -7], [57, -27], [29, 7], [114, 103], [71, 101], [48, 42], [20, 1], [66, -36], [85, 15], [117, 87], [37, 18], [28, 1], [64, -39], [9, 2], [35, 7], [90, 41], [71, 63], [130, 45], [99, 114], [17, 55], [30, 70], [43, 23], [111, -82], [18, -6], [-7, -50], [-3, -50], [-23, -88], [-15, -98], [11, -149], [5, -242], [-3, -35], [-7, -34], [-3, -28], [-12, -9], [-5, -16], [9, -6], [34, 26], [0, 29], [2, 14], [28, -32], [21, -13], [5, -31], [-1, -20], [-32, 9], [-17, 16], [-48, -26], [-29, -29], [-9, -47], [-7, -190], [-11, -123], [-3, -162], [-38, -108], [-14, -76], [-57, -152], [-31, -130], [-9, -64], [-51, -178], [-70, -137], [-25, -174], [-25, -110], [-28, -99], [-62, -177], [-31, -122], [-40, -213], [-12, -135], [-111, -391], [-115, -312], [-72, -263], [-129, -305], [-176, -393], [-230, -467], [-62, -95], [-252, -288], [-163, -241], [-83, -164], [-88, -143], [-69, -136], [-210, -460], [-22, -43], [-20, -41], [-27, -77], [-18, -31], [-50, -131], [-31, -69], [-36, -67], [-14, -47], [-11, -55], [-12, -31], [-31, -130], [-28, -86], [-28, -67], [-40, -99], [-33, -45], [-45, -21], [-13, 4], [-18, 14], [-7, -24], [-5, -37], [-10, 8], [-7, 11], [4, -66], [5, -32], [-7, -44], [-22, -38], [-2, -32], [-47, -85], [-66, -10], [-35, -42], [-16, -34], [-12, -75], [5, -116], [-19, -88], [-3, -45], [-35, -57], [-15, -53], [-11, -54], [-10, -24], [-12, -120], [-16, -73], [-4, -25], [-4, -22], [-12, -43], [-8, -29], [-6, -20], [-41, -187], [-32, -85], [-24, 10], [-17, -33], [-2, -15], [-5, -49], [-22, -117], [-1, -49], [-9, -58], [-8, -38], [-22, -165], [-19, -62], [-25, -145], [-5, -111], [15, -78], [5, -72], [30, -72], [23, -25], [17, -33], [28, -74], [17, -75], [51, -37], [20, -83], [-7, -58], [-24, -48], [-22, -77], [-18, -102], [-1, -155], [13, 23], [27, -38], [3, -114], [-28, -134], [-8, -62], [-2, -53], [21, -160], [30, -81], [-2, -26], [-8, -21], [53, -144], [-5, -125], [20, -97], [9, -84], [13, -65], [2, -44], [-16, -50], [39, -12], [22, -41], [11, -39], [28, 2], [15, -26], [22, -22], [47, -65], [13, -33], [5, -19], [3, -12], [15, -60], [26, -54], [-15, -31], [-19, -28], [30, -38], [-22, -57], [-3, -40], [6, -15], [5, -24], [-15, -65], [-20, -50], [-5, -38], [18, -68], [-9, -119], [17, -108], [4, -55], [6, -37], [-8, -67], [2, -111], [4, -46], [-10, -57], [17, -20], [9, -63], [-3, -71], [-5, -38], [-29, -46], [-4, -18], [1, -27], [36, -1], [2, -42], [-3, -33], [2, -63], [-5, -40], [8, -46], [-10, -51], [4, -40], [0, -51], [9, -130], [1, -160], [2, -25], [13, -18], [18, -9], [0, -44], [-21, -58], [-1, -35], [3, -50], [22, 68], [14, -1], [12, -26], [-2, -39], [4, -20], [-2, -38], [7, -48], [-3, -42], [-16, -29], [-21, -50], [-4, -48], [2, -30], [-14, -10], [-7, -19], [10, -45], [-1, -39], [-25, -123], [-68, -167], [-30, -59], [-27, -65], [0, -27], [-3, -23], [-32, -92], [-34, -15], [-20, -25], [15, -81], [-22, -19], [-39, -64], [-106, -122], [-17, -29], [-27, -75], [-35, -19], [-20, -21], [-36, -8], [-12, 6], [-12, -3], [-10, -16], [-70, -53], [-66, -42], [-16, -19], [-11, -26], [-58, -41], [-91, -103], [-74, -97], [-54, -98], [-14, -15], [-17, -33], [-5, -50], [-6, -28], [-40, -103], [-60, -121], [-11, -34], [-24, -67], [-2, -44], [-22, -14], [-18, 42], [-7, -81], [-15, -6], [-16, 17], [-40, -41], [-35, -46], [-56, -98], [-80, -191], [-116, -183], [-16, -5], [-10, 0], [-37, 64], [-20, 5], [18, -38], [12, -32], [-3, -61], [1, -93], [-14, -181], [2, -40], [16, -51], [31, -62], [30, -79], [37, -224], [3, -115], [39, -147], [1, -64], [16, -159], [-1, -128], [-3, -79], [19, -33], [7, 30], [-2, 50], [5, 80], [10, 35], [11, -5], [3, -38], [7, -33], [3, -31], [0, -43], [-14, -162], [4, -66], [19, -110], [-22, -128], [-33, -301], [-1, -52], [7, -23], [18, -7], [6, 38], [11, 0], [5, -23], [-14, -139], [-15, -61], [-51, -149], [-27, -64], [-46, -63], [-106, -98], [-215, -142], [-85, -70], [-50, -42], [-108, -132], [-47, -88], [-19, -102], [-19, -47], [-18, -59], [16, -50], [16, -39], [18, -25], [10, -22], [12, -16], [13, 80], [6, 25], [11, 2], [-6, -98], [-13, -333], [-1, -11], [-10, -133], [-40, -208], [-13, -95], [-34, -341], [-44, -172], [-25, -71], [-72, -126], [-20, -25], [-18, -17], [-31, -14], [-123, -254], [-46, -123], [-41, -178], [-40, -98], [-60, -210], [-53, -161], [-51, -147], [-88, -203], [-39, -59], [-27, -26], [-70, -118], [-99, -189], [-75, -168], [-113, -190], [-65, -84], [-99, -164], [-27, -24], [-111, -152], [-79, -93], [-129, -107], [-51, -30], [-122, 28], [-51, -15], [-43, -65], [-4, -93], [-18, -14], [-27, 4], [-85, 39], [-46, -7], [-27, -50], [-22, -63], [-64, -3], [-115, 65], [-135, 40], [-31, 4], [-65, -48], [-23, -7], [-95, 10], [-53, 31], [-51, 0], [-38, -26], [-47, -8], [-127, -175], [-66, 0], [-56, -21], [-28, 1], [-53, 24], [-19, -1], [-30, -11], [-30, -31], [-68, -13], [-26, -27], [-115, -159], [-26, 6], [-22, 11], [-59, 1], [-68, 86], [-26, -6], [7, 26], [2, 45], [-14, 32], [-10, 14], [-26, -3], [-14, 39], [-41, 3], [-14, -9], [-20, -2], [-1, 39], [1, 24], [-1, 38], [-5, 46], [-16, 15], [-12, 6], [-28, -3], [-20, -5], [-10, -14], [-10, -33], [0, -103], [-15, 29], [-16, 62], [-5, 66], [6, 78], [31, 29], [-3, 53], [-6, 45], [-35, 117], [-13, 54], [-29, 36], [-23, 87], [-23, 32], [-9, 61], [-22, 49], [-8, 77], [12, 44], [20, 24], [20, -38], [24, 15], [35, 56], [21, 85], [1, 135], [-5, 85], [-28, 219], [-13, 50], [-63, 157], [-72, 210], [-92, 330], [-44, 199], [-66, 401], [-59, 227], [-72, 212], [-9, 14], [-31, 47], [-91, 175], [-32, 46], [-48, 107], [-105, 334], [-15, 64], [-20, 161], [-23, 120], [-3, 69], [11, 39], [-6, 53], [-12, 47], [-36, 62], [-10, 208], [-24, 134], [5, 110], [-11, 101], [-1, 65], [5, 123], [-19, 141], [-39, 138], [-35, 199], [-5, 88], [3, 235], [-6, 95], [0, 113], [-14, 117], [-6, 63], [10, 51], [6, -16], [10, -8], [7, 67], [1, 59], [-17, 146], [-39, 149], [-97, 244], [-24, 92], [-13, 77], [-108, 321], [-46, 226], [-33, 196], [-35, 90], [-162, 634], [-36, 101], [-65, 121], [-15, 41], [-25, 115], [-48, 155], [-12, 144], [-4, 164], [6, 125], [11, 218], [11, 96], [0, 116], [-7, 298], [-7, 41], [-5, 48], [27, 37], [14, 27], [19, 50], [13, 69], [16, 153], [58, 352], [27, 345], [35, 163], [13, 183], [96, 236], [24, 145], [50, 72], [70, 75], [51, 135], [24, 94], [28, 179], [-1, 187], [18, 250], [-4, 72], [-26, 99], [-5, 71], [-24, 70], [-27, 53], [-12, 94], [-45, 149], [-13, 99], [-21, 71], [-4, 88], [-11, 93], [-22, 92], [-22, 105], [0, 32], [14, 40], [12, 13], [-4, -20], [-8, -23], [2, -19], [84, 184], [6, 36], [-3, 41], [-1, 49], [4, 57], [-80, 340], [-64, 316], [-10, 159], [-84, 210], [-33, 137], [-19, 96], [-15, 36], [6, 18], [21, 5], [49, 22], [65, 24], [61, 56], [17, 24], [-19, 17], [-39, -11], [-19, -13], [-31, -48], [-46, -25], [-17, 2], [-12, 8], [-27, 53], [-20, 50], [-8, 28], [-4, 16], [-12, 57], [7, 54], [7, 41], [-8, 82], [-18, 74], [-20, 93], [-6, 18], [-4, 13], [-10, 16], [-21, 51], [-20, 63], [-5, 29], [-6, 17], [-1, 64], [-30, 75], [-77, 135], [-8, 40], [-65, 124], [-27, 51], [-24, 95], [-27, 58], [-58, 94], [-15, 69], [-66, 153], [-95, 152], [-69, 133], [-10, 29], [12, -3], [66, -66], [9, 7], [7, 15], [-28, 34], [-27, 28], [-26, 17], [-26, -2], [-14, 28], [-9, 43], [-5, 36], [-11, 38], [-37, 79], [-9, 30], [-19, 41], [12, 6], [39, -40], [3, 16], [-3, 23], [-39, 38], [-22, 2], [-5, 27], [3, 30], [-28, 115], [-29, 85], [-4, 41], [78, -186], [11, -4], [13, 2], [33, 21], [-6, 25], [-15, 26], [-14, -12], [-19, -2], [-9, 11], [-5, 19], [19, 90], [-8, -4], [-6, -16], [-10, -8], [-16, -5], [-39, 49], [-34, 130], [-9, 27], [-9, 46], [-9, 18], [-39, 186], [15, -14], [18, -53], [35, 11], [13, 31], [12, -1], [12, 7], [15, 29], [45, 128], [12, 169], [-4, 100], [-7, 100], [15, 32], [6, -21], [3, -36], [7, -26], [16, -23], [29, -7], [46, -36], [16, -24], [4, 47], [53, 40], [-16, 14], [-47, -15], [-64, 59], [-21, 38], [-20, 72], [-20, 38], [1, 34], [46, 31], [12, -4], [5, -37], [12, -15], [5, 5], [2, 31], [0, 86], [-14, 122], [5, 23], [2, 13], [-25, 35], [-18, 3], [-16, 11], [13, 90], [17, 80], [25, 61], [13, 14], [4, 30], [20, 99], [25, 80], [-8, 81], [6, 136], [6, 135], [12, 113], [5, 105], [18, 93], [-9, 93], [-11, 40], [-57, 131], [26, 50], [-34, -7], [-7, 49], [-17, 58], [10, 10], [10, 32], [31, -10], [-1, 16], [-27, 49], [3, 25], [11, 27], [-6, 12], [-19, -29], [-14, 1], [-10, 19], [-8, 3], [5, -38], [-11, -33], [-10, -12], [-18, 2], [-14, 8], [-4, 19], [-13, 15], [-38, 24], [-31, 30], [-7, 80], [-12, 34], [-6, 39], [-3, 44], [5, 69], [-8, 11], [-9, 3], [-14, -3], [-13, 4], [-15, 38], [-13, 14], [8, -69], [-9, -20], [-23, 6], [-9, 26], [-2, 20], [10, 84], [-4, 2], [-3, 1], [-8, -19], [-23, 13], [-11, 39], [-14, 6], [-25, 57], [-5, -9], [26, -145], [-10, -57], [-73, -1], [-64, -19], [-43, 1], [-22, 21], [-10, 54], [-3, -5], [-3, -30], [-13, -22], [-49, -5], [-22, 37], [-17, 42], [-19, 18], [3, -17], [22, -41], [-3, -58], [-39, -67], [-25, -4], [-16, 29], [-8, 47], [-4, 70], [-10, 46], [-6, 0], [5, -42], [2, -34], [0, -71], [19, -55], [-29, -17], [-11, -1], [-23, -1], [-4, 20], [-5, 46], [-6, 12], [-7, -78], [-15, -5], [-10, 1], [-46, -17], [-10, 3], [-2, 14], [6, 22], [-2, 35], [-15, -27], [-3, -54], [-9, -8], [-27, 7], [-29, 28], [-18, 28], [-30, 39], [-58, 111], [-10, 49], [-17, 61], [-12, 62], [-18, 105], [5, 8], [14, -9], [7, 15], [-25, 12], [-5, 12], [-1, 37], [1, 45], [19, 16], [18, 8], [8, 27], [5, 28], [-45, -42], [-43, 47], [-9, 29], [4, 22], [21, 3], [29, -1], [17, 21], [-10, 8], [-19, -1], [-7, 14], [0, 34], [-6, -7], [-8, -31], [-29, -22], [-16, 22], [-2, 50], [-4, 23], [-14, 17], [-50, 132], [-63, 110], [-57, 76], [-84, 36], [-178, -2], [-10, 11], [11, 17], [16, 12], [57, 61], [-10, 8], [-59, -38], [-21, -4], [-26, -74], [-156, -12], [-19, -3], [-116, -24], [-130, -39], [-55, -25], [-86, -41], [-35, -33], [-22, -22], [-16, -33], [-12, -50], [-16, -55], [-55, -29], [-22, -1], [-114, -1], [-108, -109], [-61, -39], [-38, -61], [-51, -44], [-36, -53], [-74, -25], [-122, -83], [-38, -33], [-38, -58], [-63, -68], [-24, 1], [-49, 63], [-37, 32], [-90, 49], [-67, 18], [-33, 21], [-8, 4], [-37, 15], [8, 19], [36, -11], [19, 1], [-2, 12], [-11, 4], [-29, 26], [5, 83], [-13, 4], [-11, -11], [-20, -101], [-10, -17], [-146, 52], [-31, 42], [-38, 9], [-66, -5], [-54, -12], [-16, -25], [137, 15], [15, -3], [7, -16], [-173, -33], [-67, -19], [-19, 5], [-15, 32], [-72, 4], [-15, -11], [-8, -23], [28, 5], [44, 1], [12, -18], [-139, -24], [-97, -45], [-41, -33], [-135, -110], [-83, -52], [-22, -20], [-37, -53], [-48, -34], [-54, -64], [-33, -14], [-32, 9], [-94, 82], [-73, 47], [-242, 267], [-68, 108], [-77, 160], [-173, 322], [-39, 51], [-50, 25], [-31, 28], [-21, 30], [-18, 89], [-43, 53], [-80, 75], [-60, 126], [-11, 23], [-52, 82], [-54, 55], [-116, 91], [-39, 25], [2, 33], [13, 59], [-22, 69], [9, 51], [-9, 0], [-16, -31], [-36, 9], [-23, 44], [-19, 15], [-9, 22], [-12, 115], [-9, 52], [-17, 32], [-36, 8], [-15, 69], [-19, 54], [3, 34], [16, -2], [13, -24], [20, -10], [25, 58], [23, 32], [5, 28], [-3, 15], [-14, -24], [-37, 6], [-9, -21], [-17, -7], [-13, 69], [1, 40], [5, 45], [38, 7], [3, 14], [-26, 10], [-33, 52], [-6, 35], [-3, 17], [10, 53], [-8, 28], [-28, 55], [-2, 27], [-9, 34], [-36, 71], [-35, -4], [10, 59], [-1, 79], [-11, 43], [3, 44], [-7, -2], [-11, -31], [-18, 10], [-38, 47], [-18, 46], [-3, 38], [-4, 15], [-11, -8], [-24, 1], [-71, 69], [-51, 174], [-1, 39], [7, 67], [-1, 19], [-23, -45], [-5, 30], [-18, 70], [-5, 40], [-17, 17], [-14, 4], [-10, -14], [-14, -81], [-11, 0], [-10, 18], [2, 61], [-14, 40], [11, 76], [-12, -1], [-23, -61], [-12, -2], [2, 72], [-13, 3], [-15, -5], [-21, 37], [-2, 28], [1, 40], [13, 25], [-2, 10], [-12, 3], [-14, -6], [-8, 11], [14, 51], [49, 43], [24, 5], [26, 9], [-14, 37], [-30, 15], [-24, -10], [-12, -27], [-15, -5], [-25, 63], [1, 31], [9, 38], [14, 16], [57, 0], [22, 21], [9, 4], [8, 19], [-2, 12], [-9, 1], [-21, -25], [-69, 10], [-22, -15], [-38, -58], [-47, -31], [-34, 13], [11, 77], [-5, 10], [-10, 13], [-50, -25], [-38, 35], [-15, 43], [3, 53], [17, 36], [3, 18], [-19, 3], [-34, -22], [-77, 86], [-9, 26], [-11, 42], [7, 31], [23, 20], [34, 26], [19, -14], [10, 0], [2, 16], [-3, 9], [-26, 22], [-14, 30], [-11, -17], [-10, -37], [-8, -10], [-12, -11], [-6, 25], [-3, 24], [5, 19], [-2, 104], [3, 55], [-2, 49], [-2, 49], [-15, 111], [21, 48], [22, 29], [15, -23], [5, -45], [12, -31], [39, -20], [40, 14], [24, -6], [-1, 25], [8, 33], [48, 15], [50, 9], [52, 20], [41, -1], [12, 6], [-3, 8], [-36, 10], [-78, -23], [-80, -7], [-60, -60], [-24, 6], [-25, 60], [-9, 74], [-7, 59], [-17, 47], [-27, 40], [-6, 37], [9, 33], [26, 26], [6, 19], [-13, -2], [-21, -18], [-14, 0], [-1, 51], [-23, 66], [-26, 112], [-30, 46], [-24, 91], [-26, 35], [-24, 16], [-20, -3], [-7, -42], [-25, 60], [34, 21], [73, 75], [85, 215], [76, 253], [9, 60], [0, 258], [15, 97], [5, 85], [33, 187], [38, 153], [36, 204], [14, 197], [-5, 193], [-11, 172], [-18, 113], [-17, 164], [-26, 87], [-47, 76], [-11, 44], [11, 16], [29, 12], [18, 59], [-38, -23], [44, 181], [14, 123], [-2, 81], [9, 50], [-35, 108], [-26, 136], [-14, 22], [-14, 11], [-1, -32], [-8, -29], [-17, 18], [-29, 99], [-41, 161], [-15, 17], [-12, -23], [-7, -21], [-14, -134], [-14, 29], [25, 300], [22, 301], [38, 149], [30, 66], [47, 35], [43, 150], [16, 138], [28, 64], [9, 50], [-11, 38], [27, 75], [32, 114], [15, 73], [38, 113], [5, 25], [-4, 29], [-15, -25], [-16, -41], [-19, -33], [8, 40], [15, 60], [34, 62], [53, 69], [110, 234], [42, 41], [37, 98], [14, 88], [4, 200], [13, 106], [24, 83], [29, 150], [22, 68], [15, 136], [16, 53], [28, 24], [40, 69], [60, 42], [71, 89], [33, 53], [23, 79], [24, 158], [42, 166], [23, 127], [37, 66], [26, 83], [43, 37], [90, 18], [134, 69], [120, 104], [34, 42], [37, 83], [60, 108], [114, 130], [52, 72], [79, 182], [53, 150], [44, 97], [30, 86], [21, 87], [12, 140], [-8, 55], [-33, 89], [-23, 24], [-6, 42], [12, 75], [0, 128], [7, 204], [37, 165], [91, 217], [17, 88], [10, 142], [1, 50], [114, 200], [67, 154], [23, 37], [59, 70], [205, 154], [116, 109], [68, 80], [40, 94], [112, 371], [110, 521], [9, 61], [49, 17], [35, 7], [28, 19], [34, 40], [33, -16], [-16, -27], [0, -64], [23, -75], [41, -85], [75, -107], [58, -43], [83, -26], [96, 47], [54, 1], [27, 20], [28, -30], [55, -9], [52, 16], [40, 45], [25, 51], [4, -25], [1, -28], [8, -16], [15, -66], [9, -25], [30, 4], [26, -13], [59, 6], [57, -11], [56, -11], [29, 5], [67, 51], [52, 69], [41, 36], [37, 75], [32, 48], [48, 52], [136, 111], [21, 1], [45, -25], [39, 8], [27, 39], [29, 93], [44, 57], [57, 58], [76, 54], [50, 51], [80, 43], [199, 28], [102, 24], [70, -5], [70, 80], [35, 26], [152, 6], [72, 58], [272, 0], [33, -19], [33, -32], [56, -75], [27, -17], [36, 16], [84, 72], [94, 37], [51, 42], [22, 62], [44, 23], [25, -47], [98, -48], [60, 13], [26, 15], [-9, 71], [63, -19], [49, -34], [51, -69], [33, -14], [60, 31], [125, 16], [68, 35], [66, 91], [23, 22], [152, 84], [19, -6], [22, -12], [-6, -31], [-9, -25], [13, -44], [18, 27], [-4, 18], [-1, 23], [31, 2], [28, -3], [30, -26], [-2, -100], [40, -97], [-11, -48], [33, -29], [29, 35], [15, 51], [54, 29], [52, 74], [28, 8], [6, -61], [14, -54], [-19, -18], [-25, -57], [-47, -144], [-43, -42], [-33, -56], [-10, -39], [-3, -46], [8, -82], [23, -84], [28, -51], [26, -15], [61, -80], [-1, -47], [9, -57], [3, -68], [21, -55], [-45, -119], [-25, -86], [-49, -118], [-43, -77], [-93, -115], [-23, -38], [-15, -39], [-7, -41], [3, -49], [30, -119], [41, -70], [41, -38], [72, 16], [-2, -46], [5, -55], [29, 3], [20, 8], [16, 54], [36, -37], [18, -111], [30, -35], [3, -13], [-10, -9], [-9, -13], [9, -9], [29, -14], [17, 9], [29, -24], [43, -37], [43, -14], [130, -136], [40, -17], [91, -16], [107, 56], [40, 10], [71, -52], [31, -15], [52, -4], [89, -47], [22, -17], [52, -75], [25, -23], [184, -69], [25, -46], [26, -87], [1, -109], [14, -79], [23, -102], [28, -72], [30, -61], [35, -37], [81, -56], [91, -21], [92, -8], [158, -76], [133, -89], [33, -44], [67, -43], [134, -208], [74, -72], [52, -14], [46, 13], [83, 72], [34, 43], [84, 180], [27, 94], [11, 66], [-3, 67], [-10, 61], [-23, 63], [-17, 84], [-9, 151], [13, 104], [16, 63], [25, 64], [69, 122], [70, 86], [122, 113], [71, 1], [30, 12], [58, 80], [24, 3], [33, -20], [97, 6], [42, -22], [51, -50], [64, -31], [45, -30], [48, -40], [11, -98], [-5, -29], [-1, -38], [50, -68], [142, -32], [28, -18], [39, -52], [25, -16], [97, -7], [57, 11], [54, -18], [20, -18], [21, -40], [25, -99], [10, -33], [21, -70], [43, -12], [142, 62], [157, -62], [86, -24], [133, -54], [81, -95], [23, -12], [58, 2], [38, -56], [152, -27], [81, -62], [46, -50], [28, -15], [24, 2], [33, 19], [42, 35], [45, 48], [94, 125], [33, 22], [22, -6], [27, 2], [11, 33], [14, 23], [8, 27], [15, 31], [48, 9], [98, 54], [-11, -25], [-89, -61], [38, -8], [39, 21], [45, 13], [8, 26], [6, 49], [9, 6], [30, -9], [92, -74], [23, -2], [65, 41], [13, 9], [21, -23], [48, -93], [-17, 2], [-51, 80], [-4, -40], [-29, -70], [36, -30], [30, -11], [16, -39], [10, -35], [29, 15], [21, 47], [-11, 27], [-8, 27], [10, 1], [20, -23], [58, -89], [20, -19], [22, 3], [48, 26], [13, -4], [63, 33], [8, -25], [10, -24], [51, 27], [80, 0], [66, 29], [76, 71], [6, 11], [52, 92], [25, 59], [2, 4], [54, 175], [35, 173], [33, 241], [23, 122], [20, 81], [9, 67], [13, 44], [13, 57], [13, 77], [24, 64], [49, 217], [28, 87], [10, 125], [43, 109], [33, 32], [15, 31], [0, 47], [-22, 129], [-3, 55], [1, 65], [15, 94], [-7, 43], [-1, 30], [-4, 40], [-38, 87], [21, 160], [15, 39], [17, 47], [-19, 93], [-21, 86], [20, 56], [41, 67], [44, 79], [0, 48], [-3, 37], [-12, 25], [-24, 34], [-40, -36], [-29, -40], [-18, -8], [-21, -23], [-10, -41], [-24, -32], [-40, -13], [-60, 35], [-65, 52], [-37, 42], [-30, 10], [-28, -18], [-84, -104], [-77, -152], [-19, -26], [-72, -65], [-48, -22], [-22, 5], [-95, -29], [-48, -4], [-37, -34], [-72, 37], [-44, 48], [-26, 48], [-42, 105], [-31, 49], [-67, 45], [-119, 108], [-31, 12], [-80, 16], [-85, 10], [-18, -40], [-6, -156], [-15, -43], [-6, -81], [-10, -24], [-17, -15], [-25, 26], [-18, 11], [-41, -33], [-82, -47], [-28, -7], [-94, 59], [-35, 38], [-22, 42], [-8, 71], [-14, 40], [-2, 28], [-5, 31], [-19, 13], [-21, -24], [-22, 1], [-27, 15], [-65, 59], [-50, 5], [-30, -73], [-24, -23], [-25, -7], [-2, 21], [20, 47], [-78, -9], [-41, -35], [-32, 5], [-24, 16], [3, 20], [25, 7], [21, 16], [84, 13], [20, 13], [21, 51], [40, 44], [5, 19], [-31, 0], [-129, -13], [-89, 7], [-10, -21], [-14, -4], [-3, 60], [14, 27], [19, -3], [46, 24], [-4, 49], [-33, 34], [-7, 19], [-24, 5], [-20, 23], [-4, 59], [-15, 65], [-23, 31], [3, 17], [41, 22], [8, 90], [-6, 56], [-20, 4], [-60, 44], [-18, -4], [-20, 48], [-35, 34], [-17, -12], [-11, -16], [-16, 7], [-26, 30], [-27, 17], [-12, 20], [15, 53], [20, -1], [4, 42], [-16, 70], [2, 36], [17, 9], [20, -6], [21, -42], [6, -41], [-4, -39], [13, -38], [9, -10], [6, 41], [9, 7], [12, -17], [25, -9], [66, 24], [12, 21], [-48, -2], [-17, 19], [-20, 44], [-11, 40], [-3, 19], [-6, 29], [7, 15], [33, 23], [29, 64], [-12, 18], [-14, 9], [-15, -6], [-14, 22], [-2, 30], [12, 25], [1, 34], [-38, 83], [-10, 18], [8, 28], [29, 45], [27, 57], [-4, 19], [-20, 7], [-95, -24], [-37, -21], [-66, -10], [-5, 31], [2, 28], [15, 50], [-2, 125], [9, 67], [37, 20], [45, 100], [73, 117], [76, -3], [30, 33], [45, 2], [9, -24], [5, -22], [40, -33], [70, 5], [17, 13], [16, 18], [-32, 57], [10, 17], [29, 2], [32, -14], [2, -13], [-9, -18], [-10, -32], [10, -6], [90, 19], [95, -15], [30, 8], [75, 0], [13, 19], [-22, 25], [-22, 9], [-15, 12], [-15, 18], [47, 55], [27, 11], [126, 34], [94, 17], [1, 13], [-14, 0], [-121, 28], [-29, 22], [-40, 52], [-9, 15], [-10, 25], [6, 55], [7, 43], [15, 25], [48, 4], [166, -44], [119, 27], [129, -65], [123, 13], [26, 29], [31, 93], [174, 156], [61, 80], [66, 45], [112, 49], [94, 65], [27, 7], [225, -31], [155, -4], [71, 62], [42, -21], [-4, -22], [-8, -19], [3, -38], [24, -55], [24, -38], [73, -55], [100, 46], [16, -5], [21, -13], [35, -147], [28, -52], [35, -36], [29, -7], [21, 37], [17, 15], [36, 6], [60, -50], [21, -53], [101, -40], [93, -20], [40, -45], [131, -44], [49, 7], [82, 46], [159, 51], [106, -71], [29, -9], [25, 6], [35, -20], [38, 11], [117, 84], [37, 48], [39, 12], [34, 29], [92, 93], [27, 54], [53, 108], [16, 65], [1, 39], [0, 49], [-27, 102], [-24, 144], [-25, 151], [-19, 45], [-81, 52], [-19, 59], [-62, 77], [-87, 33], [-17, 14], [-76, 96], [-59, 62], [-29, 31], [-99, 146], [-52, 98], [-170, 225], [-22, 17], [-90, 33], [-37, 26], [-91, 161], [-41, -22], [-37, 6], [-21, 14], [-24, 23], [-16, 30], [-19, 68], [-22, 38], [-72, 56], [-82, 33], [-6, 14], [-3, 20], [71, 38], [19, 22], [-36, 29], [-14, 5], [-11, 13], [20, 22], [20, 10], [31, -25], [35, -46], [31, -18], [14, 22], [106, 39], [7, 30], [0, 34], [-11, -2], [-6, 8], [0, 38], [16, 51], [48, 84], [25, 116], [23, 27], [16, -18], [-1, -27], [3, -20], [15, 39], [14, 53], [36, 0], [24, -9], [26, 6], [-49, 88], [-66, 87], [-28, -6], [-18, 13], [-29, 73], [-12, 60], [28, -2], [28, -9], [53, 42], [20, 6], [31, -13], [44, -8], [-3, 39], [-14, 47], [53, 34], [47, 19], [91, 68], [40, 12], [5, 15], [1, 20], [-13, 54], [-14, 40], [-48, 2], [-26, -55], [-72, -19], [-33, 4], [26, 36], [25, 13], [8, 15], [-52, -13], [-25, -37], [-76, -48], [-10, -6], [-97, 9], [-79, -13], [-56, -91], [-34, 1], [-48, -24], [-32, -29], [-38, -64], [-29, 28], [-36, 0], [-36, -18], [-42, -42], [-24, -8], [-47, 12], [-55, -24], [-118, -140], [-40, -102], [-15, -20], [-20, -25], [-21, -13], [-11, 1], [56, 73], [17, 27], [3, 20], [1, 33], [-17, 40], [-47, -100], [-26, -14], [-33, -30], [-2, -67], [4, -50], [14, -63], [32, -102], [66, -146], [31, -54], [24, -22], [28, -3], [53, 46], [23, 7], [50, -18], [18, 31], [26, 16], [33, 2], [38, -13], [41, -23], [-17, -52], [-17, -41], [-7, -45], [-9, -51], [-46, -23], [-48, 3], [-52, -15], [-18, 20], [-12, 18], [-23, 18], [-30, 10], [-27, -12], [-32, -69], [-56, -47], [-19, -54], [-56, 12], [-47, -10], [-69, -49], [-52, -106], [-57, -66], [-46, -21], [-43, 7], [-28, 20], [-57, 69], [4, 25], [8, 13], [10, 35], [23, 131], [-3, 43], [-13, 66], [-45, 52], [-36, -9], [-21, 13], [-75, 89], [-40, 6], [-45, -18], [-16, 13], [-13, 31], [89, 109], [88, 90], [38, 9], [52, 42], [55, 63], [-8, 49], [-12, 37], [-26, -10], [-20, -13], [-46, 40], [-17, 29], [-72, -30], [-40, 4], [-89, -28], [-41, 27], [-82, 76], [-30, 15], [-27, -3], [-14, 24], [18, 13], [20, 1], [21, 9], [6, 13], [-1, 25], [-43, 19], [-39, 5], [-25, 22], [-19, 26], [44, 0], [45, -19], [71, -7], [64, -20], [16, 25], [37, 42], [7, 14], [-62, -29], [-63, 18], [-23, 26], [-20, 39], [-8, 43], [5, 41], [-6, 73], [-21, 65], [-8, 36], [-22, 32], [22, -73], [8, -48], [13, -44], [-3, -118], [-8, -41], [-26, -11], [-34, 6], [-35, 13], [9, 65], [-18, -22], [-27, -64], [-23, -9], [-50, 7], [-95, -42], [-7, -45], [-14, -62], [-14, -36], [-4, -21], [-40, -93], [-5, -9], [-76, -128], [-10, -10], [-49, -30], [-30, -26], [-22, -12], [-38, 13], [-15, -19], [-8, -23], [0, -47], [19, -34], [16, -114], [-6, -48], [-5, -38], [-3, -24], [-12, -99], [-8, -37], [-13, -42], [-142, -49], [9, 23], [-3, 42], [-6, 31], [13, 29], [-31, 10], [-14, -15], [-11, -28], [9, -62], [-15, -35], [-6, -19], [-1, -46], [-9, -20], [-2, -21], [23, 5], [-10, -39], [-43, -76], [-15, -45], [4, -180], [-19, -107], [-1, -32], [-7, -139], [-27, -65], [-40, 22], [-52, -18], [-27, -73], [-16, -22], [-14, -26], [-9, -95], [-2, -156], [-19, -19], [-18, -6], [-75, -137], [43, -39], [19, -29], [32, -82], [44, -93], [9, -45], [-7, -65], [17, -73], [41, -100], [41, -51], [167, -126], [31, -11], [-7, -51], [-10, -46], [-11, -30], [-49, -20], [-135, 56], [-34, 6], [-24, -12], [-45, -40], [-49, 13], [-69, -23], [-19, -77], [-48, -88], [-79, -71], [-56, -38], [-84, -136], [-39, -80], [-16, -15], [-19, -13], [6, 39], [10, 35], [-2, 26], [0, 38], [28, 44], [26, 31], [76, 58], [20, 47], [-60, -1], [-60, -11], [-38, 7], [-33, -4], [-11, 42], [-8, 25], [-7, 24], [-43, 43], [-100, 25], [-48, 32], [-21, -6], [-40, 36], [-28, -16], [-59, -63], [-31, 7], [-34, 38], [-22, 7], [-26, -20], [-42, -73], [-42, -36], [-38, 14], [-51, 0], [-5, -41], [10, -28], [27, -48], [-13, -37], [10, -36], [18, -7], [28, 2], [50, -47], [22, -50], [14, -54], [-30, 39], [-21, 37], [-28, 14], [-40, 32], [-25, 5], [-26, -22], [-3, -25], [29, -47], [26, -29], [14, -23], [9, -52], [-5, -17], [-10, -17], [-31, 33], [-47, 116], [-66, 23], [-11, -24], [13, -61], [9, -24], [58, -67], [-5, -14], [-8, -6], [-65, 38], [-19, 58], [-4, 73], [-59, 50], [-56, 55], [-13, 53], [12, 19], [8, 38], [-31, -7], [-19, -24], [-32, -23], [-1, -39], [5, -36], [-10, -52], [-10, -90], [6, -48], [68, -136], [23, -99], [16, -37], [35, -42], [36, -76], [15, -41], [11, -65], [-30, -41], [-18, -2], [-9, 19], [13, 44], [-2, 28], [-47, 42], [-20, -15], [-22, -27], [13, -51], [14, -34], [8, -46], [28, 4], [-38, -52], [-35, -27], [-35, -1], [-23, -5], [-7, -13], [18, -10], [15, -1], [24, -28], [68, -34], [33, -42], [32, -4], [32, -78], [56, -21], [31, -79], [43, -16], [36, -29], [11, -27], [5, -50], [2, -107], [8, -79], [0, -25], [-2, -37], [-9, -19], [-14, 0], [-26, 58], [-40, 61], [-42, 73], [-12, 13], [-10, 1], [-23, -25], [-63, -19], [-29, -26], [-11, -6], [-4, -14], [14, -15], [17, -33], [0, -45], [14, -56], [18, -14], [24, 1], [13, -10], [4, -22], [14, -26], [9, -19], [-1, -13], [-66, -37], [-13, -16], [-12, -9], [-17, 18], [-1, 44], [-22, 23], [-21, 21], [-25, 9], [-21, 30], [-14, -25], [11, -85], [24, -60], [40, -158], [18, -93], [4, -46], [-9, -75], [19, -56], [14, -57], [-15, 2], [-13, 20], [-21, 24], [-42, 92], [-15, 57], [-17, 4], [-30, -8], [-34, -122], [1, -70], [-18, 17], [-14, 22], [1, 76], [-1, 32], [-40, 104], [-19, 12], [-8, 35], [-15, 38], [-19, -8], [-16, -15], [-4, -56], [-2, -51], [-11, -38], [-43, 72], [-43, 126], [-1, 68], [31, 63], [-4, 45], [-30, 89], [-43, 57], [-24, 17], [-11, 60], [-23, 31], [-19, 15], [-4, 22], [6, 16], [45, 62], [27, 97], [13, 5], [27, -23], [31, 6], [25, 57], [21, 31], [36, -4], [80, -76], [87, -44], [43, -38], [25, -38], [13, -8], [20, -5], [-1, 28], [-6, 25], [17, 14], [46, -1], [9, 14], [8, 21], [-9, 24], [-16, 12], [-16, 3], [-11, 8], [-17, -8], [-28, 19], [-14, 16], [-8, 16], [-47, 32], [-45, 54], [-10, -31], [-19, -16], [-25, -3], [-73, 35], [-45, -27], [-24, -6], [-19, -1], [-23, -12], [-26, -7], [-23, 50], [-9, 39], [-7, 7], [-1, -37], [-7, -29], [-33, -16], [-20, 23], [-15, 68], [-18, 87], [-33, 70], [-27, 18], [-3, 39], [3, 30], [32, 8], [50, -32], [11, 6], [11, 15], [-2, 33], [-7, 29], [-14, 2], [-10, -4], [-31, 6], [-39, -16], [-19, 15], [-6, 19], [-33, 46], [-29, 62], [-46, 41], [-31, 126], [-25, 55], [-28, 40], [-1, 52], [-9, 41], [-31, 99], [-102, 96], [-24, 43], [-11, 36], [-10, 35], [10, 1], [10, -9], [13, -11], [5, 18], [-6, 37], [-26, 87], [-2, 24], [13, 74], [21, 82], [-1, 99], [7, 75], [-8, 49], [-3, 60], [15, 79], [14, 20], [8, 25], [1, 85], [-31, 39], [-35, 8], [-43, 46], [-18, 64], [-63, 109], [-73, 74], [-4, 12], [4, 14], [4, 11], [-15, 1], [-11, -9], [-10, 3], [-51, 54], [-48, 61], [-93, 94], [-67, 23], [-91, 76], [-59, 27], [23, 6], [26, 0], [140, -101], [-16, 27], [-23, 24], [-13, 13], [-58, 88], [-55, 56], [-63, 104], [-84, 41], [-58, 46], [-34, -7], [-39, -14], [-23, -1], [-17, 9], [-12, 28], [2, 22], [-2, 28], [-34, 46], [-46, 44], [-43, 56], [-87, 151], [-18, 49], [17, 9], [13, 0], [15, 10], [24, 0], [28, -10], [-25, 32], [-31, 32], [-80, 127], [-24, 59], [-3, 65], [6, 88], [-14, 63], [-62, 82], [-23, 43], [-45, 25], [-21, -2], [-12, -32], [-9, -71], [-40, -93], [-14, -41], [-21, -52], [-18, -4], [-11, 5], [-33, 88], [-32, 68], [-4, 31], [-3, 40], [-24, 144], [17, 20], [17, 11], [23, 30], [17, 23], [-43, 82], [-19, 0], [-26, -35], [-72, 36], [-14, -15], [-10, -28], [-25, -35], [-35, -15], [-40, -38], [-41, -27], [-32, -21], [-18, 4], [29, 44], [-13, 1], [-38, -31], [-22, -27], [-7, -44], [-7, -74], [17, -19], [30, -97], [36, -41], [-7, -40], [-9, -31], [-22, -27], [-19, 20], [-11, 0], [-8, -64], [16, -168], [25, -119], [25, -51], [57, -81], [60, -42], [108, -136], [59, -42], [15, -24], [36, -104], [31, -121], [33, -189], [24, -94], [48, -105], [100, -151], [90, -111], [84, -68], [66, -12], [155, 15], [27, -6], [29, -19], [6, -47], [-10, -32], [-33, -33], [-33, -46], [-4, -63], [31, -44], [150, -117], [153, -98], [48, -50], [55, -78], [134, -107], [22, -52], [82, -111], [36, -87], [7, -67], [-17, -67], [-8, -48], [-14, -48], [-35, 18], [-39, 49], [-59, 197], [-108, 20], [-22, 15], [-39, 34], [-2, 22], [-10, 28], [-9, 10], [-42, 6], [-28, -32], [-34, -76], [-38, -109], [-39, -160], [-2, -64], [21, -63], [63, -35], [48, -56], [32, -58], [3, -140], [14, -80], [-21, -45], [-41, 11], [-54, -29], [-39, -51], [-16, -49], [4, -128], [-8, -48], [-73, -92], [-38, -94], [-10, -39], [-14, -45], [-93, -1], [-21, 55], [-1, 81], [16, 50], [34, 24], [22, 104], [-7, 75], [14, 33], [12, 23], [26, 14], [37, 13], [3, 105], [-28, 48], [-10, 66], [-14, 124], [-47, 157], [-25, 140], [-19, 69], [-30, 37], [-54, -1], [-27, 10], [-96, 98], [-6, 15], [0, 25], [16, 40], [-10, 52], [-12, 50], [-18, 43], [-21, 22], [-43, -14], [-15, -10], [-27, 4], [-21, -19], [-12, -1], [33, 75], [-9, 17], [-33, 31], [-45, 5], [-12, 4], [-8, -20], [-8, 11], [1, 33], [-53, 150], [-35, 61], [-17, 11], [-32, -13], [-54, 27], [-32, 6], [-17, -7], [-27, -19], [-13, 12], [-5, 20], [-48, 63], [-61, 35], [-118, 197], [-36, 74], [-75, 81], [-47, 119], [-39, 43], [-56, 35], [-13, -4], [-17, -13], [-13, -2], [-10, 15], [10, 16], [12, 7], [-4, 45], [-64, 118], [-38, 37], [-10, 24], [-8, 32], [-8, 20], [-18, 13], [-15, -3], [-21, 8], [1, 57], [4, 43], [-3, 37], [-20, 96], [-36, 82], [-20, 195], [-17, 55], [-39, 42], [-88, 46], [-122, 126], [-26, 2], [-74, 49], [-46, 8], [-59, -43], [-72, -121], [-59, -125], [-21, -25], [-75, -43], [-67, -20], [-64, -41], [-23, -21], [-88, -127], [-41, -38], [-8, -22], [-8, -42], [-24, -36], [-22, -17], [-52, -18], [-53, -38], [-23, 16], [-62, -1], [-38, 46], [-74, 29], [-24, 67], [-33, 4], [-22, -2], [-13, 10], [-4, 23], [0, 22], [-23, -10], [-18, 0], [-11, -9], [-8, -10], [-10, 7], [-6, -3], [1, -13], [-22, -3], [-23, 8], [-61, 35], [-9, 5], [-42, 13], [-17, 14], [-14, 35], [-11, 10], [-6, 7], [-39, -17], [-14, -27], [-21, -32], [-146, -155], [-27, -64], [-31, -96], [-2, -44], [13, -142], [30, -75], [4, -18], [7, -36], [14, -14], [5, -31], [-24, -17], [-15, -2], [-4, -54], [6, -16], [14, -14], [4, -16], [3, -80], [-28, -48], [-40, -54], [-193, -173], [-46, -84], [-17, -19], [-143, -53], [-101, -57], [-48, -20], [-60, -98], [-28, -40], [23, -11], [26, -47], [-9, -21], [-38, -32], [-17, -10], [-9, 5], [-9, -4], [-64, -170], [-58, -123], [-32, -53], [-32, -79], [-70, -206], [-1, -59], [35, -204], [19, -54], [28, -45], [53, -38], [12, -38], [-18, -36], [-52, -64], [-91, -86], [-39, -68], [-8, -66], [-27, -30], [-10, -92], [-16, -61], [-4, -20], [-17, -47], [-2, -33], [28, -47], [-14, -20], [-14, -9], [-32, -5], [-108, -6], [-87, -100], [-44, -89], [-39, -165], [-48, -98], [-21, -18], [-33, 43], [-41, 7], [-40, -15], [-20, -33], [-33, -19], [-32, 16], [-68, 9], [-31, -2], [-48, -27], [-41, 18], [-69, 9], [-150, -21], [-18, -11], [-19, -41], [-48, -70], [-72, -3], [-66, -45], [-16, -29], [-28, -79], [-9, -58], [-5, -1], [-7, 14], [-11, -4], [-5, -45], [-25, -20], [-20, -7], [-51, 36], [-42, 54], [-22, 3], [-36, 84], [-16, 54], [-11, 57], [2, 22], [-3, 19], [-32, 23], [-8, 53], [24, 68], [19, 30], [12, 8], [-29, -3], [-21, -44], [-27, 71], [-109, 138], [7, 31], [-1, 18], [-18, -37], [-13, -10], [-56, 6], [-64, -17], [-24, -6], [-95, -94], [-29, 0], [-55, 41], [-96, 14], [-32, 12], [-39, -27], [-30, 1], [-25, -35], [-17, 10], [20, 77], [31, 152], [-1, 93], [7, 81], [-8, 80], [-16, 50], [21, 130], [-2, 67], [-19, 84], [59, -13], [-19, 34], [-18, 20], [-17, -4], [-15, 1], [-50, -33], [-25, -10], [-8, 6], [3, 52], [-13, 68], [20, 18], [24, 5], [20, 29], [12, 33], [-7, 57], [18, 55], [40, 46], [-21, -7], [-24, -29], [-38, -104], [-12, -53], [-33, -17], [-29, -9], [-14, 6], [-18, 13], [-2, 39], [2, 31], [12, 62], [4, 88], [18, 78], [-2, 21], [-5, 31], [16, 30], [19, 20], [28, 68], [40, 160], [47, 170], [-4, 21], [-10, 15], [4, 46], [28, 200], [11, 26], [13, 59], [3, 94], [5, 65], [-1, 33], [-4, 39], [-18, 75], [-18, 159], [-2, 53], [15, 26], [-25, 4], [-11, 35], [2, 38], [28, 63], [-20, -8], [-8, 12], [-2, 91], [32, 60], [22, 37], [-10, 7], [-24, -1], [1, 29], [12, 13], [11, 31], [-13, 14], [-10, 20], [0, 53], [3, 22], [-3, 23], [-49, -32], [-13, 5], [0, 40], [27, 60], [3, 18], [-32, 9], [-24, 30], [-14, 26], [-16, 38], [0, 34], [16, 79], [23, 24], [20, 14], [42, 55], [57, -10], [36, 11], [32, 28], [19, 7], [29, 24], [-1, 33], [-10, 25], [9, 23], [33, 29], [37, 37], [42, 7], [43, 34], [29, -22], [25, 7], [29, -25], [38, -58], [56, -24], [45, 19], [78, 3], [40, -7], [70, 14], [40, -5], [64, 29], [51, -36], [97, -17], [58, -30], [162, -49], [59, -1], [82, 28], [35, 21], [32, -13], [47, 24], [23, -4], [29, -35], [104, -46], [27, 39], [20, 9], [74, -24], [75, -49], [39, -3], [57, 13], [46, 32], [9, 4], [45, 17], [41, 73], [39, 263], [28, 311], [20, 58], [26, 17], [-21, 42], [-13, -21], [-5, -23], [-7, -12], [15, 285], [11, 105], [19, 109], [39, -43], [32, -44], [17, -39], [21, -127], [15, -27], [24, -26], [-9, 29], [-17, 22], [-25, 170], [-16, 48], [-25, 40], [-80, 85], [-8, 17], [-4, 32], [27, -1], [23, -16], [-3, 18], [-7, 19], [-10, 69], [-9, 161], [1, 28], [-4, 34], [-26, 7], [-20, 2], [-22, 13], [-110, 95], [-37, 98], [-39, 72], [-9, 32], [1, 32], [20, 67], [-18, 43], [-17, 8], [-15, 21], [14, 35], [11, 23], [22, 6], [30, -8], [28, -20], [21, -5], [-64, 54], [-105, -18], [-23, 7], [-19, 12], [-7, 40], [15, 18], [13, 34], [-15, 23], [-20, 9], [-31, -1], [-29, -7], [-7, 14], [17, 37], [-15, 14], [-20, -7], [-29, -7], [-28, 11], [-26, 42], [-17, 0], [-12, -5], [-18, 16], [-19, 4], [-13, -5], [-18, 24], [-109, 49], [-47, 6], [-43, -22], [-24, 7], [-18, 32], [-14, 52], [-70, 41], [14, 27], [32, 6], [37, 19], [14, 23], [-29, 28], [-22, 7], [-9, 10], [-9, 24], [13, 12], [9, -6], [26, -4], [45, 6], [-16, 25], [-18, 6], [-8, 6], [-36, 3], [-17, -9], [-37, 4], [-9, 27], [-3, 23], [11, 51], [53, 46], [131, 51], [56, -7], [40, 9], [47, 31], [20, 28], [67, 16], [63, -29], [59, -109], [28, -37], [68, 64], [102, -2], [21, -36], [8, 30], [19, 36], [15, -16], [8, -22], [107, 6], [17, 6], [-29, 26], [-23, 62], [-5, 229], [-30, 64], [-34, 102], [-16, 60], [-1, 21], [5, 30], [42, -1], [32, -8], [62, 23], [30, -16], [-2, -47], [9, -60], [11, -28], [15, -33], [50, 3], [54, -19], [68, -3], [99, -34], [42, 20], [41, 41], [78, 27], [7, 14], [-45, -6], [-42, 26], [-5, 29], [5, 25], [16, 58], [120, 92], [85, 28], [89, 50], [45, 52], [30, 68], [10, 14], [12, 13], [-12, 24], [8, 256], [9, 46], [17, 38], [27, 29], [40, 32], [148, 44], [22, 17], [121, 97], [73, 50], [35, 15], [21, 9], [46, 4], [35, -18], [46, -8], [36, 24], [28, -21], [31, 15], [-24, 9], [-37, 24], [-51, -20], [-36, 24], [-29, 2], [-19, 19], [-19, 31], [14, 21], [13, 7], [54, 4], [40, -13], [71, -68], [18, 1], [19, 8], [-10, 19], [-18, 9], [-26, 18], [-21, 26], [49, 8], [-7, 13], [-6, 23], [-52, 79], [9, 22], [13, 46], [16, 38], [13, 10], [22, 27], [46, 80], [30, 65], [22, 76], [32, 212], [10, 36], [15, 40], [20, -8], [13, -11], [48, 30], [83, 78], [24, 68], [24, 31], [95, 62], [52, 18], [81, 5], [59, 11], [70, 4], [27, -38], [15, -28], [25, -15], [39, -11], [-13, 26], [-27, 28], [6, 59], [9, 45], [27, 57], [22, 15], [96, 9], [105, -4], [44, -84], [-16, -44], [25, -20], [13, 7], [9, 38], [6, 42], [9, 13], [33, -32], [12, -21], [0, -69], [12, 93], [-9, 66], [6, 63], [14, 34], [12, 21], [77, -23], [86, 12], [32, -25], [73, -123], [24, -20], [31, -6], [-42, 26], [-89, 149], [-26, 19], [-41, 5], [-26, 15], [-16, 23], [-4, 20], [1, 150], [-16, 22], [-20, 8], [-12, -10], [-25, -1], [-5, 34], [6, 26], [51, 17], [33, 23], [2, 41], [-22, 32], [-25, 58], [-30, 56], [-6, 112], [-6, 34], [-18, 51], [27, 12], [-5, 100], [-10, 52], [-75, 53], [-60, 51], [14, 174], [6, 46], [-23, 91], [3, 105], [9, 164], [19, 7], [14, -1], [53, -30], [22, -3], [15, -26], [18, -11], [13, 28], [5, 48], [42, 62], [30, 23], [20, 11], [20, -25], [16, -28], [4, 61], [12, 117], [-40, 19], [-33, -16], [-32, -74], [-29, -94], [-47, -8], [-37, -27], [-34, 28], [-22, 24], [0, 35], [5, 22], [39, 76], [54, 73], [53, -1], [39, 23], [24, 3], [72, -5], [38, 16], [33, 34], [73, 141], [41, 59], [82, 21], [76, 68], [22, 1], [-36, -51], [-6, -19], [-4, -30], [25, -66], [-5, -40], [2, -78], [-24, -41], [-28, -87], [-12, -13], [-2, -101], [3, -25], [-4, -92], [28, -38], [29, -20], [99, 1], [10, -16], [13, -29], [-9, -49], [-11, -36], [-28, -31], [-37, -23], [-23, -1], [-31, 44], [-15, -14], [-15, -23], [-26, -119], [-12, -81], [-6, -7], [-15, 12], [-25, 1], [-31, -19], [16, -17], [17, -30], [-7, -15], [-28, -16], [-24, -32], [-11, -25], [-31, -29], [-19, -37], [9, -46], [4, -40], [9, -45], [-8, -35], [-38, -51], [-14, -45], [32, 1], [21, -10], [12, -13], [12, -19], [-8, -23], [12, -69], [40, -16], [17, -24], [19, -37], [2, -54], [-24, -38], [-20, -24], [76, 9], [8, -22], [11, -24], [41, 17], [103, -70], [63, 34], [16, 2], [14, -57], [-16, -57], [-55, -61], [13, -38], [17, -8], [52, 8], [82, -37], [17, 11], [67, 86], [26, 18], [88, 14], [16, 33], [35, 33], [23, 36], [55, 70], [56, -13], [33, -13], [37, -7], [33, -74], [83, -81], [77, 7], [27, -77], [12, -96], [24, -30], [20, -19], [63, -21], [66, -34], [26, -19], [-3, 21], [-5, 18], [3, 27], [-2, 40], [-57, 20], [-50, 9], [-34, -6], [-34, 9], [-7, 34], [6, 34], [-14, 22], [-13, 14], [-2, 19], [2, 20], [59, -54], [48, -48], [11, -11], [37, -4], [92, 54], [159, 70], [170, 66], [40, 7], [40, 14], [14, 24], [15, 17], [23, 43], [51, 68], [91, 24], [34, 32], [70, 45], [162, 50], [67, 11], [66, 1], [59, -39], [62, -49], [12, -30], [-34, 19], [-49, 44], [-18, 2], [42, -134], [22, -47], [47, -36], [39, -11], [119, 21], [43, 28], [12, 14], [43, 49], [28, 52], [23, 67], [3, 46], [6, 52], [37, 21], [80, -3], [35, 25], [44, 62], [46, 74], [15, 32], [32, 66], [12, 43], [8, 61], [8, 20], [0, -28], [-3, -46], [-20, -80], [-48, -96], [-74, -116], [23, -15], [27, -5], [32, -22], [30, -3], [53, 18], [10, 100], [3, 94], [-9, 42], [10, 64], [-19, 93], [-30, 113], [-2, 121], [-2, 27], [-9, 109], [5, 217], [11, 108], [51, 63], [26, 49], [15, 65], [5, 61], [10, 49], [75, 144], [60, 15], [80, 40], [90, 33], [17, -42], [9, -32], [108, -117], [27, -40], [42, -135], [100, -68], [79, 22], [34, 33], [63, 61], [28, 45], [6, 43], [-11, 184], [-17, 80], [6, 50], [2, 23], [37, 113], [7, 89], [13, 13], [4, 12], [-6, 29], [-38, 18], [-15, -3], [-14, -30], [-14, -22], [-34, -14], [-29, 23], [-67, 32], [-18, 41], [-4, 42], [-35, 40], [-15, 48], [6, 33], [32, 22], [9, 19], [-40, -3], [-9, 5], [-2, 17], [-18, 58], [16, 23], [7, 22], [-13, 19], [4, 22], [10, 22], [-6, 50], [40, 27], [40, 19], [83, 10], [-8, 46], [34, 2], [57, 56], [56, -10], [82, 38], [157, 0], [22, 22], [-4, 22], [0, 24], [30, -7], [49, 4], [186, -46], [45, 0], [63, -47], [34, -13], [101, 0], [154, -21], [31, 32], [3, 9], [14, 40], [-5, 54], [-9, 44], [12, 33], [21, 3], [22, -36], [34, -18], [25, 24], [8, 46], [18, 20], [24, -18], [40, -7], [33, 3], [22, 10], [10, 15], [9, 27], [18, 34], [19, 23], [145, -26], [126, -47], [9, 18], [5, 30], [-32, 26], [-23, 14], [-29, 54], [-42, 43], [-42, 4], [-55, -15], [-84, 9], [-71, 81], [-47, 25], [-34, 62], [-8, 33], [36, -28], [5, 29], [3, 40], [-20, 24], [-18, 14], [-93, -61], [-106, -20], [-10, -2], [-26, -20], [-40, -5], [-17, -14], [-61, 42], [-11, 3], [-36, -11], [-34, -31], [-64, -9], [-32, -10], [-20, -14], [-4, 33], [9, 43], [14, 29], [1, 18], [-10, -1], [-21, -42], [-11, -49], [-21, -25], [-48, -10], [-47, 39], [-23, 0], [14, -28], [10, -31], [-1, -17], [-25, 3], [-28, -19], [-25, -27], [-11, 0], [-17, 38], [-30, -18], [-26, -24], [-52, -7], [-31, -31], [-55, -22], [-30, 1], [-69, -25], [-23, -40], [-20, -14], [-29, 12], [-88, -19], [-84, -25], [-36, 1], [-36, 11], [-38, -35], [-40, -47], [-45, -16], [-16, 6], [13, 24], [29, 25], [21, 35], [2, 28], [-13, 12], [-19, 3], [-24, 30], [-23, 64], [-13, 3], [-6, -17], [-7, -49], [-7, -14], [-12, -11], [-15, -12], [-14, -5], [-51, 1], [-7, 24], [0, 11], [9, 32], [-7, 6], [7, 26], [12, -2], [14, 4], [7, 13], [0, 16], [-20, 4], [-1, 11], [18, 45], [2, 12], [-7, 3], [-11, -5], [-73, 14], [-90, 57], [-22, 3], [-14, 51], [-21, -6], [-32, -30], [-24, 22], [-25, 15], [-7, 24], [0, 34], [-2, 41], [-7, 47], [-5, 68], [5, 53], [20, 39], [8, 25], [9, 64], [3, 74], [-6, 26], [2, 17], [16, 0], [-4, 14], [-7, 8], [-8, 17], [7, 9], [19, 0], [2, 6], [2, 8], [-15, 43], [-2, 21], [-21, 62], [-23, 60], [-36, 43], [13, 71], [14, 64], [-3, 31], [-5, 37], [-44, 41], [-7, 58], [-10, 63], [4, 38], [7, 29], [14, 29], [73, 92], [4, 48], [50, 4], [-23, 42], [-6, 24], [-1, 29], [71, 19], [27, -16], [62, 20], [55, 38], [-1, 20], [-8, 18], [-12, 35], [8, 10], [21, -7], [-10, 17], [2, 18], [22, -7], [36, 51], [1, 39], [63, 21], [71, 79], [33, 25], [32, 18], [69, 80], [29, 3], [15, 54], [58, 72], [17, 9], [27, 64], [71, 75], [45, 95], [25, 33], [8, 36], [28, 3], [25, 27], [54, 18], [53, -5], [22, -12], [21, 4], [-2, 32], [-15, 20], [12, 19], [28, 14], [-2, 32], [-7, 20], [-23, 25], [12, 58], [2, 63], [11, 73], [-29, 39], [-112, 65], [-21, -2], [-24, 8], [-26, 50], [11, 43], [2, 16], [-11, -1], [-16, -21], [-36, -23], [-46, 18], [-23, -4], [-73, -13], [-56, 26], [-27, -13], [-48, -1], [-55, -10], [-19, -21], [-14, -8], [-51, 29], [-48, 49], [-35, -37], [-23, -7], [-20, 33], [-18, 6], [-10, -12], [-8, -29], [-14, -24], [-3, -14], [-2, -60], [-4, -14], [-46, 8], [2, -16], [10, -8], [5, -10], [-17, -13], [-47, 2], [-4, -14], [13, -22], [-10, -19], [-10, -8], [-55, -12], [-32, 3], [-9, -12], [-3, -16], [6, -16], [14, -9], [5, -10], [-1, -21], [-12, -4], [-33, 38], [-10, -2], [7, -20], [19, -22], [11, -22], [10, -26], [-2, -21], [-41, -65], [-37, -41], [-27, -37], [-16, -39], [19, -20], [20, -29], [15, -55], [17, -49], [35, -46], [-7, -27], [-8, -21], [-58, -47], [-66, -70], [-71, -178], [-24, -24], [-62, -30], [-23, -30], [-46, -35], [-81, -29], [-37, -42], [-16, -43], [-19, -3], [-18, 17], [-24, 12], [-3, -28], [1, -21], [-39, 31], [-19, -28], [-14, -47], [-56, -63], [-61, 11], [-6, -11], [16, -8], [2, -10], [-11, -5], [-17, 0], [-25, -12], [-17, 1], [-8, -30], [-13, -37], [-34, -15], [-18, -3], [-9, -20], [53, -5], [-4, -17], [-1, -17], [-6, -19], [-60, -27], [-9, -21], [-12, -13], [-27, 0], [1, 13], [4, 13], [-39, -1], [-12, 31], [-8, -8], [4, -25], [11, -25], [11, -38], [-9, -24], [-10, -11], [7, -11], [21, -8], [9, -15], [-25, -13], [-32, -44], [-32, -1], [-20, -28], [-21, 0], [-17, 18], [-27, 15], [-9, -27], [-2, -20], [16, -53], [29, -41], [28, -18], [-20, -12], [-15, -26], [-17, -83], [-10, -33], [-10, -57], [6, -49], [6, -24], [13, -32], [-36, 4], [-39, 19], [6, -39], [-24, -47], [4, -40], [5, -27], [-7, -44], [11, -14], [6, -26], [-10, -20], [5, -17], [1, -59], [8, -92], [-3, -20], [21, -80], [-5, -29], [-3, -36], [31, -34], [27, 0], [27, 1], [10, -9], [11, -24], [8, -29], [23, 2], [36, 24], [23, 6], [16, -46], [42, -59], [24, -27], [42, -14], [43, -48], [-6, -58], [18, -20], [52, -22], [18, -31], [9, -27], [14, -21], [16, -66], [-6, -41], [-21, -14], [-49, -44], [-22, -32], [-17, -20], [-49, -44], [-18, -8], [-17, -22], [-16, -10], [-15, 6], [-55, -41], [4, -18], [42, -7], [22, 9], [17, 20], [18, 5], [16, -4], [18, 16], [14, 7], [14, -8], [16, -39], [-33, -20], [-23, -1], [-12, -64], [-14, -27], [-10, -13], [-52, -27], [-35, -35], [-40, -27], [-18, 6], [-26, -29], [-59, -33], [-31, -45], [-68, -40], [-34, -32], [-95, -2], [-89, 7], [-29, -16], [29, -4], [20, -16], [25, 7], [57, -8], [29, -8], [38, -54], [-28, -19], [-48, -14], [18, -76], [15, -51], [-20, -31], [-1, -140], [-27, -2], [-12, -58], [9, -30], [-1, -69], [6, -42], [13, -39], [-6, -41], [-43, -95], [1, -44], [8, -27], [6, -42], [-20, -81], [-14, -69], [-16, -57], [-37, -69], [-18, -51], [-43, -160], [-21, -32], [-26, -24], [-29, 22], [-27, 13], [-32, -2], [-51, -18], [-77, 12], [-74, -6], [-19, -16], [11, -58], [-28, -8], [-26, 17], [-24, -20], [-20, -22], [-39, -51], [-13, -32], [-3, -59], [20, -54], [18, -62], [-46, -76], [-26, -2], [-76, 20], [-135, -47], [-121, 38], [15, 40], [0, 30], [6, 45], [4, 47], [-1, 32], [-9, 33], [-29, 44], [-68, 147], [-19, 62], [-14, 26], [10, 1], [55, -33], [13, 4], [13, 13], [-16, 47], [-14, 22], [-10, 32], [33, 9], [23, -2], [17, 37], [-10, 58], [-25, 19], [-21, 7], [-40, 93], [-42, 48], [-75, 184], [-27, 127], [-26, -12], [-12, 55], [-9, 53], [-2, 38], [-40, 22], [-1, 27], [-8, 120], [-42, 16], [-28, 68], [-5, 128], [-28, 23], [-23, -7], [1, 32], [5, 30], [-13, 117], [-4, 108], [-11, 32], [-6, 38], [5, 33], [8, 19], [28, 5], [26, -29], [-1, 17], [-5, 22], [-65, 22], [-12, -1], [-25, 13], [-15, 4], [-31, 8], [-25, 64], [-28, 54], [-3, 22], [0, 101], [-8, 44], [-2, 49], [-17, -39], [9, -63], [-21, -26], [-26, -13], [2, -37], [11, -7], [3, -38], [-7, -56], [-52, -126], [-11, -13], [-7, -17], [-27, 11], [-34, -35], [-32, -5], [-12, 39], [-46, 53], [-22, -3], [20, -26], [19, -34], [-11, -22], [-11, -14], [-18, -8], [-67, -44], [23, -29], [-20, -34], [-23, -5], [-13, -15], [-4, -21], [-69, -61], [-113, -155], [-59, -44], [-40, -46], [-36, 2], [-45, -39], [-114, -34], [-75, 15], [-53, -13], [-28, 26], [-4, 19], [2, 10], [5, 13], [-10, 5], [-21, 2], [-9, -13], [-1, -29], [-10, -8], [-39, 17], [-10, 15], [14, 30], [25, 28], [-5, 5], [-5, 17], [-11, 2], [-35, -4], [-29, 5], [-93, 62], [-21, 33], [-75, 52], [-34, 56], [-19, 61], [2, 56], [9, 87], [15, 22], [68, -31], [68, -51], [10, 3], [22, 40], [41, 32], [-12, 9], [-61, -37], [-23, 21], [-36, 42], [0, 21], [17, 22], [5, 29], [-8, 28], [4, 37], [27, 40], [41, 40], [30, 39], [31, 24], [-4, 8], [-34, -15], [-34, -26], [-39, -44], [-48, -35], [-35, -13], [-17, -12], [-26, -11], [-27, -50], [-29, -21], [-53, -3], [-11, 37], [15, 131], [16, 64], [17, 45], [27, 7], [20, 34], [16, 0], [13, -16], [54, -15], [26, 43], [35, 6], [62, 42], [-1, 8], [-42, -9], [-26, -2], [-37, -10], [-20, 7], [-9, 32], [15, 29], [59, 68], [21, 30], [11, 28], [-2, 19], [10, 39], [58, 69], [47, 32], [15, -28], [-13, -84], [0, -35], [38, 123], [16, 30], [19, 20], [45, 14], [13, 20], [-53, -7], [-127, -47], [-54, -42], [-15, -32], [-37, -49], [-17, -31], [-8, -47], [-21, -25], [-29, -9], [-39, -59], [-17, -48], [-39, -37], [-25, -29], [-8, -11], [-14, -28], [-11, -2], [-10, 16], [-1, 37], [3, 59], [19, 42], [9, 42], [-12, 38], [9, 24], [16, 0], [31, -11], [33, 1], [54, 31], [-9, 18], [-23, 2], [-44, -2], [-36, 29], [-29, 59], [-13, 79], [9, 23], [105, 81], [28, 36], [-16, 4], [-39, -45], [-57, -27], [-35, 38], [-19, 41], [-11, 87], [4, 45], [-4, 59], [24, 19], [27, -10], [26, -4], [61, 5], [133, 35], [85, -21], [35, 2], [54, 31], [46, 3], [35, -23], [19, -27], [3, -36], [16, -23], [11, 7], [-9, 29], [-2, 43], [140, 50], [17, 19], [-56, 7], [-16, 45], [30, 68], [-3, 9], [-31, -36], [-15, -51], [6, -40], [-6, -19], [-29, -9], [-64, -3], [-41, 17], [-38, 10], [-13, 13], [4, 29], [-7, 6], [-16, -26], [-14, -52], [-30, -12], [-84, 19], [-121, -11], [-54, -26], [-35, 3], [-61, 46], [-24, 36], [-8, 73], [3, 33], [47, 13], [24, -1], [22, 17], [-19, 12], [-28, 22], [-19, 44], [-29, 14], [-19, 38], [-5, 57], [6, 40], [15, 13], [37, -9], [97, 6], [91, -40], [62, -23], [125, 12], [73, 36], [-13, 10], [-80, -21], [-73, 1], [-130, 40], [-53, 14], [-57, -6], [-30, 12], [-18, 40], [13, 77], [27, 17], [15, -20], [18, -2], [18, 32], [17, 19], [14, 41], [51, 39], [22, 3], [31, 18], [20, -5], [12, -18], [16, -15], [35, 2], [103, 31], [11, 10], [20, 25], [-65, -11], [-54, -18], [-35, -5], [-5, 22], [13, 21], [20, 21], [10, 37], [22, 16], [24, -1], [50, 7], [35, 9], [60, -6], [90, -14], [58, -34], [21, 3], [23, 9], [11, 12], [-46, 14], [-2, 21], [5, 15], [74, 28], [81, 6], [-14, 23], [-177, -34], [-46, 23], [-36, 0], [-24, -13], [-68, -16], [-13, 11], [13, 40], [41, 65], [3, 16], [19, 16], [106, 37], [51, 44], [23, 6], [22, -3], [35, 5], [67, -13], [30, -55], [28, -17], [87, -69], [-4, 20], [-75, 93], [-29, 23], [-21, 46], [7, 43], [24, 29], [86, 15], [15, 17], [2, 29], [-13, 19], [-32, -1], [-26, 12], [-7, 31], [10, 21], [50, 38], [27, 13], [47, 13], [81, -30], [6, -16], [-22, -38], [2, -21], [20, -3], [46, 64], [55, 9], [23, 14], [26, 9], [38, -58], [16, -19], [12, -7], [12, -48], [12, -3], [17, 24], [30, 13], [42, 8], [69, -12], [32, 9], [15, -1], [-14, 43], [-10, 12], [15, 39], [15, 15], [48, 27], [46, 12], [30, 26], [40, 24], [-6, 18], [-12, 22], [-26, 2], [-10, 12], [33, 28], [45, 32], [-8, 12], [-34, 14], [-26, -10], [-38, -25], [-45, -39], [15, -11], [22, -32], [-31, -43], [-166, -115], [-78, -34], [-37, 5], [-9, 32], [-16, 23], [-18, 48], [-31, -1], [-17, -11], [-8, 16], [13, 51], [26, 40], [44, 31], [20, 36], [20, 59], [63, 55], [91, 138], [75, 44], [27, 48], [44, 21], [38, 37], [29, 4], [54, 34], [30, 40], [-20, 2], [-47, -26], [-27, -10], [2, 43], [13, 44], [39, 40], [186, 117], [19, -19], [22, -35], [56, 8], [64, 66], [49, 72], [-26, -12], [-29, -30], [-57, -41], [-26, -6], [-15, 5], [-8, 28], [-20, 8], [-18, -6], [-18, 20], [-3, 48], [23, 71], [19, 47], [20, 36], [78, 101], [17, 56], [36, 29], [46, -7], [14, 9], [-16, 36], [-50, 29], [-3, 18], [167, 47], [80, -1], [24, 23], [43, 15], [33, 29], [-17, 13], [-81, -26], [-51, -13], [-23, 0], [-18, -9], [-64, -3], [-14, 115], [10, 63], [24, -2], [5, 60], [28, 35], [39, 8], [19, 15], [28, 31], [46, -7], [48, 7], [-12, 14], [-59, 19], [-14, 32], [20, 17], [23, 13], [20, 3], [40, 62], [24, 27], [26, -5], [38, 28], [37, -10], [35, 18], [49, 12], [178, 5], [5, 25], [-38, 6], [-132, 7], [-67, -1], [-29, -7], [-10, 9], [2, 16], [24, 24], [12, 26], [49, 65], [58, 44], [44, -11], [46, -42], [34, -5], [15, -13], [25, -57], [11, -2], [-5, 55], [32, 44], [-8, 13], [-49, -16], [-37, 16], [-29, 34], [-8, 31], [18, 30], [17, 15], [-11, 18], [-74, -48], [-51, -11], [-21, 7], [11, 43], [-6, 34], [70, 85], [23, 9], [39, -6], [35, -24], [30, 4], [32, 12], [-5, 23], [-69, 9], [-18, 19], [7, 19], [47, 19], [48, 36], [54, 10], [43, 27], [8, -6], [8, -11], [15, -99], [39, -81], [15, -3], [-15, 69], [14, 20], [17, 15], [6, 17], [-20, 6], [-17, 24], [-24, 79], [9, 21], [51, 41], [64, 10], [68, -29], [24, -1], [40, 8], [67, 24], [40, 10], [20, 0], [5, 12], [-19, 8], [-6, 7], [-15, 5], [-62, -13], [-172, 4], [-16, 14], [-3, 24], [18, 34], [20, 20], [65, 34], [68, 5], [72, 61], [28, 45], [15, 71], [44, 57], [111, 32], [4, 14], [-12, 30], [1, 53], [31, 63], [20, 21], [9, 3], [24, -21], [29, -43], [45, -24], [59, -5], [16, 12], [-46, 25], [-35, 32], [-3, 33], [17, 17], [25, -2], [33, 4], [30, 21], [4, 16], [1, 20], [8, 22], [44, 50], [136, 33], [10, -14], [-7, -97], [-16, -63], [0, -46], [27, 46], [35, 126], [27, 59], [30, 34], [22, 8], [21, 17], [28, 11], [9, -14], [9, -31], [-16, -110], [2, -35], [-17, -46], [-65, -104], [3, -13], [15, 5], [25, 17], [80, 98], [70, -12], [1, 8], [-22, 29], [-28, 28], [-8, 34], [4, 91], [21, 37], [60, -4], [37, 5], [17, -17], [36, 1], [25, 66], [50, 6], [44, -44], [52, -29], [43, -42], [12, 12], [-23, 98], [-25, 35], [-54, 19], [-58, 44], [-15, 19], [3, 15], [50, 14], [68, -16], [59, 36], [17, -10], [46, 19], [28, -25], [17, 7], [11, 35], [73, 21], [46, -20], [25, -20], [12, -39], [17, -78], [36, -42], [23, -21], [27, -5], [12, 21], [-24, 25], [-7, 24], [12, 59], [14, 23], [78, 87], [66, 46], [39, 4], [68, 102], [20, 18], [18, 5], [-5, 24], [-37, 16], [-2, 31], [50, 38], [60, 63], [30, 4], [18, -17], [59, -29], [35, -33], [26, -16], [17, 3], [14, 25], [17, 11], [37, -6], [22, -16], [18, -2], [15, -9], [4, -21], [-32, -23], [-55, -61], [-54, -69], [-18, -36], [-17, -95], [-43, -61], [-3, -43], [17, -20], [47, 16], [57, 57], [15, 60], [143, 164], [68, 91], [76, 75], [43, 15], [21, -49], [-17, -65], [-32, -41], [24, -19], [-5, -50], [-7, -27], [-5, -28], [0, -26], [23, 7], [89, 52], [23, 56], [21, 42], [10, 36], [35, 34], [66, 0], [3, 14], [-80, 47], [-9, 22], [27, 28], [73, 55], [38, -6], [23, -13], [91, -9], [69, -39], [-2, -61], [-16, -26], [-15, -15], [-89, -47], [-15, -22], [28, -8], [60, 23], [16, -21], [-19, -53], [-4, -78], [-7, -46], [0, -42], [8, -23], [24, 90], [8, 22], [36, 34], [13, 68], [34, 81], [39, 47], [23, 13], [75, -2], [33, -18], [28, -39], [21, -16], [67, -17], [24, -21], [4, -12], [16, -3], [45, 30], [30, 5], [48, -46], [-10, -35], [3, -11], [58, 2], [48, -13], [92, -71], [10, -33], [-5, -40], [-132, -44], [-57, -42], [-94, -16], [-318, 28], [7, -31], [221, -66], [13, -19], [-7, -40], [-1, -33], [5, -22], [16, -20], [27, -10], [55, 5], [27, -11], [19, 17], [7, 55], [16, 12], [31, -16], [13, -59], [9, -6], [15, 42], [31, -3], [33, 3], [43, -7], [50, -8], [112, -46], [26, 5], [34, 13], [34, 55], [25, 9], [33, -12], [9, 14], [-17, 46], [4, 22], [113, -48], [48, -36], [105, -32], [18, -17], [2, -30], [-5, -25], [-23, -14], [-44, 2], [-161, 39], [-23, -24], [19, -20], [47, -25], [13, -43], [72, 6], [69, -16], [32, 5], [6, -14], [-22, -36], [10, -9], [77, 34], [36, 10], [19, -9], [3, -29], [-13, -36], [-1, -28], [-24, -66], [-36, -21], [-16, -27], [54, 17], [28, 18], [53, 92], [16, 12], [152, 1], [34, -5], [142, -44], [40, -3], [46, 5], [16, 20], [16, 6], [158, -48], [211, -109], [309, -179], [174, -160], [20, -34], [63, -20], [14, 14], [35, -12], [205, -146], [70, -7], [-9, 31], [-12, 29], [18, -7], [24, -21], [38, -57], [48, -42], [48, -64], [41, -24], [36, -9], [30, -18], [56, -17], [26, -155], [20, -34], [0, -68], [36, -28], [27, -5], [-1, -51], [-22, -119], [-24, -51], [-186, -219], [-116, -84], [-226, -97], [-176, -36], [-72, -3], [-138, 18], [-75, 20], [-93, 55], [-86, 27], [-60, 12], [-110, 5], [-239, 54], [-41, 19], [-150, 105], [-60, -30], [-35, -5], [-24, 36], [10, 10], [5, 12], [-85, 30], [-70, 2], [-37, 26], [-46, 19], [-20, -12], [-11, 0], [-92, 46], [-41, 37], [-43, 65], [10, 23], [13, 15], [-148, 38], [-140, 5], [25, -18], [60, -10], [39, -26], [44, -37], [-10, -50], [62, -50], [47, -48], [2, -14], [18, -10], [70, -14], [12, -44], [-11, -17], [9, -25], [53, -27], [31, -7], [38, -17], [-17, -33], [-32, -22], [-33, -10], [16, -8], [41, 3], [152, -55], [80, -56], [81, -102], [26, -50], [2, -28], [-4, -27], [-12, -30], [-5, -31], [-28, -88], [-20, -31], [-38, -35], [36, -68], [37, -63], [37, -105], [7, -42], [1, -65], [33, -26], [-13, -10], [-13, -18], [3, -84], [46, -69], [70, -45], [41, -9], [59, 18], [43, -25], [96, -84], [43, -89], [18, -18], [97, -34], [72, -20], [111, -54], [19, -2], [54, 47], [92, 32], [29, 44], [-3, 37], [-23, 67], [-7, 65], [-31, 27], [-28, 18], [-86, -14], [-39, 3], [-30, 17], [-40, 47], [-75, 113], [-40, 37], [-13, 24], [-14, 32], [2, 53], [33, -2], [37, 30], [27, 106], [46, 14], [25, -1], [108, -50], [134, -132], [29, -14], [31, -2], [51, 4], [9, -18], [27, -20], [20, -3], [123, -42], [142, -82], [53, 3], [21, 46], [4, 20], [59, 46], [40, 8], [57, -17], [10, 13], [-19, 68], [-26, 59], [-39, 37], [-68, 111], [-28, 54], [-13, 57], [9, 50], [10, 36], [142, 89], [51, 53], [50, 69], [23, 14], [83, 19], [111, 59], [85, 78], [84, 119], [36, 31], [28, -2], [38, -19], [42, -35], [57, -6], [55, 5], [64, -3], [88, -54], [14, -17], [14, -23], [-28, -45], [-3, -29], [23, 14], [32, 6], [29, -9], [28, -25], [20, -28], [25, -24], [7, 32], [4, 28], [-13, 70], [34, 99], [26, 43], [48, 110], [-14, 71], [-2, 82], [-7, 38], [-31, 55], [-61, 39], [-61, 13], [-20, 38], [4, 43], [17, 63], [50, 133], [52, 188], [2, 43], [-5, 24], [4, 24], [-7, 57], [-9, 42], [-213, 163], [-13, 15], [-7, 22], [23, 5], [16, -1], [160, -76], [35, -4], [251, 21], [123, -18], [103, -39], [74, -108], [76, -99], [70, -86], [2, -70], [-73, -14], [-70, -4], [-180, -35], [-43, -39], [-120, -122], [-11, -37], [11, -36], [55, -38], [118, -57], [52, -113], [37, -57], [28, -22], [27, -5], [60, -1], [42, -13], [12, -11], [17, 11], [38, 4], [224, 60], [44, 26], [15, 40], [16, 133], [20, 46], [19, 57], [-7, 35], [-2, 40], [112, 38], [104, 26], [50, -8], [13, 28], [-32, 55], [-19, 28], [16, 12], [24, -15], [32, -9], [56, 9], [215, 113], [84, 63], [50, 25], [80, 57], [38, 19], [67, 7], [71, 23], [78, 42], [105, 36], [17, 2], [21, -5], [43, -42], [-16, -24], [-12, -25], [21, -14], [17, -6], [21, 7], [22, 17], [54, 26], [15, 33], [-21, 13], [-27, 49], [-32, 11], [-26, -2], [95, 71], [202, 105], [108, 48], [107, 4], [85, -6], [-32, -16], [-140, -22], [-21, -11], [0, -13], [34, -8], [14, -16], [-11, -18], [-11, -6], [-16, -54], [-21, -43], [44, -56], [4, -58], [-28, -31], [-39, 12], [-34, -20], [-62, -14], [-14, -18], [-9, -26], [40, -6], [31, 2], [110, -17], [15, -2], [37, 18], [37, 4], [45, 6], [23, 11], [23, -13], [44, -51], [40, 10], [17, 99], [63, 62], [74, 50], [72, 5], [69, 35], [33, 7], [64, -14], [96, -3], [81, -30], [60, -8], [88, 51], [203, 143], [17, -33], [33, 48], [157, 50], [38, 2], [1, -20], [14, -44], [30, -27], [42, -64], [-20, -17], [-21, -10], [-31, -43], [-3, -99], [59, -25], [81, -29], [34, 1], [28, 16], [9, 9], [10, 15], [8, 29], [5, 22], [-21, 55], [8, 58], [74, -4], [91, 17], [41, 33], [49, 63], [33, 52], [-21, 92], [-53, -20], [-91, 199], [-47, 77], [30, 36], [78, 23], [71, 74], [27, 15], [29, 3], [210, -51], [239, -12], [203, -39], [230, -81], [112, -57], [93, -63], [-9, -45], [38, 13], [82, -40], [56, -16], [57, -24], [22, -32], [75, -23], [92, -51], [95, -32], [68, -11], [41, -69], [136, -100], [25, -38], [119, -63], [59, -52], [37, 20], [91, 126], [54, 144], [32, 77], [-60, 3], [-45, -22], [-29, 5], [-32, 23], [-52, 58], [-66, 97], [-13, 106], [-18, 35], [-64, 28], [-42, 32], [-156, 63], [-28, -22], [-8, -34], [-10, -25], [-16, 32], [-10, 29], [0, 46], [8, 59], [26, 99], [40, -5], [21, 15], [26, 44], [-12, 37], [-14, 28], [3, 43], [25, 118], [11, 138], [-21, 34], [-19, 23], [-89, -24], [-33, 13], [-8, 26], [-2, 21], [25, 35], [25, 59], [-43, -13], [-15, 23], [36, 34], [42, 82], [99, 38], [74, 37], [116, 78], [86, 77], [56, 98], [38, 93], [62, 218], [58, 160], [98, 165], [61, 15], [23, -3], [4, -12], [-14, -14], [-4, -20], [26, -7], [42, -1], [79, 10], [134, -6], [234, 14], [33, -7], [87, -48], [47, 6], [96, -23], [52, -26], [50, -31], [-7, -120], [-10, -80], [-35, -152], [-14, -39], [-56, -110], [-26, -72], [-42, -50], [-60, -35], [-8, -21], [-5, -31], [59, -87], [140, -90], [34, -108], [8, -81], [-9, -210], [-13, -31], [-26, -34], [-25, -40], [16, -59], [20, -219], [4, -178], [-16, -61], [-8, -129], [0, -43], [14, -64], [28, -54], [37, -34], [105, -63], [99, -76], [7, -24], [5, -29], [-35, -30], [-55, -78], [-35, -65], [-3, -53], [12, -67], [-6, -63], [-23, -56], [-33, -41], [-99, -63], [-207, -334], [-50, -39], [-84, 13], [23, -48], [29, -68], [-4, -45], [-54, 3], [-77, -48], [-35, -32], [-60, -17], [-45, 17], [-50, 31], [7, 26], [10, 12], [35, 19], [34, 25], [-17, 5], [-14, 0], [-38, -32], [-45, -7], [-52, 40], [-41, 43], [-19, 9], [-38, -18], [-146, 8], [-38, -7], [-18, -16], [10, -13], [11, -24], [15, -48], [14, -36], [60, -39], [81, -15], [78, -48], [99, -34], [224, 14], [59, -4], [58, -15], [97, -50], [42, 4], [71, 45], [17, 101], [9, 31], [257, 142], [48, 31], [77, 77], [25, 52], [29, 140], [25, 50], [167, 161], [26, 41], [5, 76], [-3, 51], [-10, 50], [-30, 84], [-34, 49], [-33, 67], [24, 138], [28, 53], [151, 63], [129, 23], [144, 43], [58, 9], [40, -7], [41, -47], [36, -69], [104, -105], [35, -72], [7, -89], [-4, -216], [-20, -94], [41, -24], [20, -22], [51, -31], [27, -31], [27, -11], [59, -7], [168, 11], [92, 6], [-9, 14], [-14, 11], [-78, 4], [-110, 23], [-159, 42], [-19, 91], [4, 56], [36, 106], [25, 18], [31, 7], [36, 15], [-11, 67], [-14, 61], [-34, 85], [-37, 157], [-51, 1], [-39, 31], [-189, 92], [-179, 68], [-123, 9], [-39, -7], [-102, -71], [-66, -15], [-125, 31], [-107, -17], [-40, 17], [-16, 31], [32, 127], [-17, 49], [-47, 66], [-28, 51], [5, 56], [70, 214], [29, 56], [75, 100], [38, 76], [-9, 44], [-161, 239], [-43, 85], [-19, 27], [-39, 32], [-60, 38], [-18, 34], [163, 231], [74, 40], [103, 25], [50, 22], [87, 47], [52, 39], [17, 31], [11, 37], [2, 91], [-11, 73], [-14, 41], [-31, 52], [-31, 59], [22, 15], [22, 9], [58, -1], [60, -32], [30, -64], [35, -60], [0, -40], [-3, -31], [15, -44], [13, -18], [14, -31], [-13, -25], [-14, -12], [-27, -35], [-43, -108], [-33, -14], [-8, -84], [71, -92], [-9, -69], [-14, -23], [-39, -37], [5, -30], [10, -21], [111, -44], [105, -27], [176, -9], [51, -43], [19, 30], [165, -7], [133, -105], [70, -32], [57, -11], [116, 13], [20, 9], [19, 30], [-54, -2], [-24, -14], [-22, 1], [-38, 11], [-27, 18], [-29, 35], [-48, 104], [-84, 33], [-57, -14], [-62, 7], [-102, 56], [-68, 21], [-121, 61], [-34, 25], [-27, 51], [-31, 84], [-20, 47], [26, 9], [83, 46], [124, 15], [53, -16], [136, -94], [63, -3], [114, 41], [13, 26], [-26, 53], [-34, 27], [-66, 13], [-80, -24], [-23, 20], [8, 28], [9, 21], [43, 5], [30, 16], [65, 58], [72, 28], [71, 10], [261, -8], [148, -91], [144, -41], [63, -31], [17, -5], [15, -21], [11, -48], [182, -129], [42, -17], [116, -6], [130, 30], [59, 3], [63, -9], [33, -16], [36, -30], [-19, -38], [-17, -23], [-36, -64], [-16, -18], [-118, -73], [-47, -19], [-13, -96], [-6, -21], [-5, -34], [22, -68], [5, -42], [-18, -58], [-30, -62], [6, -50], [10, -67], [5, 20], [-2, 30], [8, 35], [54, 85], [39, 115], [40, 30], [36, 7], [40, -34], [11, -46], [2, -70], [-8, -65], [-30, -100], [-50, -70], [-16, -39], [23, -37], [25, -29], [29, -9], [33, 3], [8, 9], [6, 28], [-10, 36], [-6, 33], [61, 25], [57, 14], [45, 42], [11, 28], [10, 46], [-23, 72], [-20, 54], [-68, 129], [-51, 66], [32, 99], [53, 110], [20, 27], [6, 17], [6, 30], [-5, 31], [-6, 20], [-54, 83], [-39, 27], [-123, 16], [-31, 13], [-90, 85], [-11, 19], [-20, 61], [-7, 15], [-25, 16], [-83, 35], [-58, 15], [-84, 4], [-51, 18], [-76, 56], [-8, 19], [-22, 73], [-17, 37], [5, 28], [27, 58], [19, 51], [-23, 44], [-33, 14], [-36, 21], [-15, 40], [-9, 43], [-1, 34], [-6, 39], [17, 33], [38, 34], [-9, 24], [5, 31], [247, 41], [96, 11], [480, 4], [34, 12], [209, 20], [89, 24], [94, -25], [34, 1], [69, 7], [45, 51], [102, 20], [170, 21], [84, -4], [19, -15], [19, -21], [-92, -62], [-92, -56], [-76, -24], [-74, -49], [-7, -19], [-2, -12], [2, -39], [5, -25], [77, -32], [59, -44], [57, -32], [45, -19], [11, 11], [-165, 104], [-42, 23], [-17, 25], [8, 38], [17, 17], [26, 19], [17, 9], [62, 20], [206, 27], [49, 51], [21, 30], [56, 31], [-19, 13], [-46, 8], [-36, 18], [-142, 183], [-35, 28], [-109, 20], [-49, 21], [50, 62], [59, 16], [40, -4], [35, -17], [65, -51], [92, 22], [-35, 23], [-58, 26], [-54, 42], [-77, 37], [-86, 24], [-90, 10], [25, 55], [50, -7], [16, 17], [23, 33], [125, -77], [59, 21], [50, 35], [104, 93], [14, 42], [-50, 23], [-41, 11], [-56, -2], [-5, 25], [24, 33], [45, 13], [139, -36], [232, 93], [63, 45], [161, 58], [79, -7], [164, 77], [227, 33], [132, 1], [102, 42], [156, 15], [54, 17], [263, 43], [146, 34], [23, 27], [-131, -22], [-31, 20], [-27, -13], [-20, -19], [-63, 34], [-17, -9], [-13, -18], [-23, -6], [-27, 4], [-9, 41], [32, 55], [37, -29], [43, 42], [27, 1], [81, -26], [54, 27], [72, 13], [79, -12], [33, 3], [19, 25], [129, -22], [89, 15], [61, -2], [95, -13], [43, -18], [-25, -42], [-92, -68], [25, -11], [53, 31], [159, 46], [26, -9], [-18, -40], [-11, -17], [106, 23], [91, 50], [40, 9], [41, -31], [39, 28], [9, 28], [69, 6], [28, 26], [49, 19], [40, 8], [89, 36], [31, -11], [59, -9], [56, -17], [105, -40], [14, -15], [13, -3], [30, -28], [-22, -42], [-24, -60], [-45, -28], [27, -3], [19, 8], [36, 40], [32, 28], [-8, 119], [-57, 60], [-44, 20], [-102, 63], [-34, 27], [-46, 28], [18, 17], [196, -22], [100, 11], [108, -7], [144, 27], [61, -28], [69, 1], [80, -23], [24, 27], [-131, 29], [-58, -3], [-21, 15], [22, 34], [25, 51], [-25, 44], [-24, 24], [-4, 45], [23, 52], [54, 22], [30, 42], [63, 55], [303, 179], [145, 68], [55, 9], [64, -6], [126, 57], [47, 0], [175, -45], [42, -33], [96, -26], [111, -14], [51, -21], [25, -24], [21, -33], [-90, -22], [-97, -66], [-132, -36], [-163, -24], [-34, -18], [311, -5], [90, 4], [19, -57], [30, -2], [90, 27], [54, 2], [102, -20], [21, 11], [44, 1], [94, -25], [42, -37], [-67, -60], [-69, -53], [-84, -90], [-26, 7], [-44, 2], [8, -45], [74, 2], [40, -20], [92, 25], [130, -8], [27, 7], [50, 28], [13, 52], [22, 33], [43, 11], [47, -10], [80, 0], [203, 17], [170, -22], [136, 27], [178, -20], [78, -21], [57, -37], [52, -11], [42, -29], [43, -42], [-21, -34], [-21, -23], [56, 25], [43, 6], [32, -15], [57, -15], [18, -95], [17, -18], [15, -33], [-21, -30], [-18, -14], [45, 3], [63, 32], [13, 11], [16, 24], [-24, 23], [-21, 14], [27, 11], [52, -4], [26, -42], [17, -38], [38, -127], [81, 17], [4, -38], [-34, -87], [-36, -64], [-14, -14], [-23, -3], [9, 34], [-14, 20], [-21, 12], [-74, 12], [-138, 79], [-37, 8], [-8, -4], [-4, -7], [77, -54], [63, -95], [57, 28], [23, -5], [31, -45], [56, -18], [47, -30], [-31, -91], [-192, -160], [-203, -93], [-90, -65], [-158, -47], [-113, -64], [-144, -47], [-42, -51], [-107, -32], [8, -17], [12, -18], [-13, -30], [-15, -23], [-83, -47], [-121, -32], [-243, -195], [-121, -40], [-137, -2], [-29, -18], [-104, -123], [-32, -26], [-136, -13], [-142, -201], [-79, -68], [-69, -37], [72, 7], [85, 27], [99, 65], [26, 30], [14, 34], [29, 27], [45, 19], [176, 21], [72, -8], [106, 6], [70, 36], [41, 13], [37, 4], [19, 26], [62, 5], [143, 34], [21, 12], [46, 51], [85, -19], [61, 10], [159, 91], [96, 34], [26, 24], [-19, 17], [-22, 12], [-92, -32], [-83, -10], [-94, 8], [-13, 13], [-11, 32], [30, 47], [26, 28], [60, 37], [49, 13], [183, -40], [38, -5], [21, 66], [58, -3], [58, -11], [-25, -14], [-64, -21], [20, -48], [28, -33], [112, -47], [95, -21], [70, 1], [110, 20], [17, 14], [23, 38], [-28, 72], [27, -9], [27, -18], [42, -44], [40, -75], [25, -35], [-15, -37], [-57, -71], [33, -39], [59, -26], [0, -116], [-4, -56], [-29, -61], [-34, -26], [-33, -38], [8, -36], [8, -22], [35, -42], [98, -13], [13, 11], [-23, 13], [-66, 20], [-26, 16], [-23, 38], [27, 42], [29, 31], [35, 71], [11, 50], [-7, 52], [23, 24], [35, 25], [17, 5], [16, 11], [-25, 13], [-23, 6], [-48, 32], [-8, 41], [96, 17], [57, 29], [210, 13], [144, 55], [322, -15], [226, -45], [317, -5], [117, -30], [11, -11], [7, -22], [-50, -9], [-83, 0], [-22, -56], [14, -70], [148, -74], [129, -31], [90, -49], [48, -4], [188, 5], [110, -25], [100, 19], [109, 0], [38, -5], [40, -37], [64, -10], [77, -1], [43, 7], [17, 9], [-6, 15], [-64, 22], [7, 27], [25, 6], [107, -36], [44, -6], [39, 27], [29, 49], [16, 33], [17, 17], [14, 2], [14, 10], [-34, 39], [-33, 49], [-7, 32], [-10, 16], [-4, 59], [30, 60], [21, 17], [85, -23], [38, 36], [24, 14], [102, 24], [43, -2], [71, -23], [228, -110], [-5, -42], [54, 12], [26, 17], [61, 11], [41, 18], [11, -7], [14, -17], [-10, -25], [-14, -25], [9, -15], [12, -3], [61, -31], [79, 57], [32, 55], [22, 11], [197, -38], [59, -21], [12, -12], [8, -20], [32, -22], [39, -12], [-5, -18], [-2, -19], [92, -3], [40, -16], [44, -25], [-5, -29], [11, -17], [41, -2], [11, 3], [-13, -39], [-55, -42], [-33, -16], [-38, -28], [21, -5], [95, -8], [59, -56], [6, -41], [-37, -16], [-84, -52], [-50, -21], [-35, -2], [-25, -7], [36, -22], [158, -6], [46, -28], [36, -70], [0, -86], [-36, -43], [-97, -7], [-127, 96], [-78, 37], [-109, 71], [-21, -12], [32, -60], [51, -34], [92, -93], [154, -192], [36, 16], [21, 24], [10, 31], [-9, 43], [25, -21], [23, -38], [46, -64], [-62, 3], [-80, -21], [-29, -26], [22, -35], [59, -5], [25, -49], [46, -60], [103, -164], [73, -31], [71, -68], [71, -32], [37, -2], [25, 42], [20, -15], [19, -76], [34, -33], [38, -2], [31, 13], [45, 36], [36, 42], [58, 116], [38, 58], [36, 24], [-13, 28], [4, 33], [26, 77], [36, 91], [27, 49], [66, 97], [25, 18], [18, -32], [14, -42], [10, -18], [10, -7], [81, -85], [82, -67], [73, -33], [115, -32], [167, 5], [30, 42], [58, 32], [94, 16], [55, 39], [91, 11], [57, -6], [88, -28], [197, -89], [55, -33], [29, -35], [64, -52], [41, -25], [40, -18], [14, 5], [-5, 15], [-20, 15], [-16, 19], [47, 19], [5, 15], [17, 12], [62, 11], [-61, 19], [-20, 3], [-29, 11], [2, 27], [19, 19], [15, 36], [19, 23], [32, 18], [24, 3], [57, -23], [41, 42], [30, -3], [63, -43], [56, -64], [31, 0], [87, 26], [98, 1], [-13, 38], [-68, 83], [8, 106], [-47, 24], [-54, 14], [78, 27], [58, 87], [46, 8], [48, 16], [-15, 11], [-143, 9], [-31, -10], [-21, -26], [-71, 0], [-8, 59], [-2, 37], [93, 79], [35, 17], [236, -2], [71, 15], [104, 39], [-27, 25], [-3, 50], [-89, 73], [7, 16], [9, 11], [27, 0], [140, -19], [58, -39], [151, -40], [404, -13], [45, -14], [174, -17], [73, -19], [175, -23], [80, -17], [63, -25], [103, -15], [47, -17], [-5, -53], [-213, 7], [-71, 17], [-88, 2], [-33, -8], [-53, -44], [-63, -23], [-53, -4], [35, -38], [49, -10], [158, 49], [432, 24], [66, -4], [-7, -34], [-58, -65], [-55, -50], [-80, -52], [-30, 0], [63, 110], [-26, 6], [-24, -3], [-70, 46], [-11, 2], [-14, -11], [0, -16], [-13, -64], [26, -27], [0, -46], [-97, -29], [-38, 3], [-40, 18], [-17, 0], [-5, -15], [8, -27], [-1, -13], [-15, -22], [-8, -23], [24, -26], [31, -7], [171, 29], [75, 36], [82, 65], [146, 159], [65, 54], [37, 21], [48, 8], [269, -17], [156, -34], [149, -51], [74, -42], [54, -57], [10, -24], [5, -32], [-37, -30], [-167, -10], [-64, -17], [-24, -19], [-3, -11], [-8, -17], [12, -14], [75, -2], [72, -13], [100, -36], [15, -12], [32, -35], [10, -6], [149, 6], [10, -12], [9, -26], [-39, -40], [-39, -27], [-80, -64], [40, 23], [161, 55], [41, 10], [49, -4], [121, -50], [50, -39], [92, -112], [-26, -12], [-66, -12], [208, -85], [80, 1], [184, 24], [93, 1], [172, 54], [171, 35], [157, 2], [83, 33], [220, -1], [211, -11], [164, -20], [185, -60], [180, -83], [105, -82], [21, -25], [30, -57], [13, -48], [13, -65], [-6, -51], [-26, -36], [-16, -45], [2, -53], [-31, -69], [29, -49], [80, -32], [172, -42], [47, -29], [6, -85], [14, -71], [15, -136], [29, -35], [47, -32], [9, -45], [-59, -144], [-37, -27], [-39, -40], [69, 14], [35, 53], [38, 97], [36, 16], [19, 31], [0, 92], [-23, 79], [0, 57], [15, 46], [114, 95], [61, 38], [58, 22], [158, 19], [72, 19], [82, -13], [58, 5], [67, 20], [59, -10], [98, -63], [347, -14], [61, -22], [233, -27], [18, 0], [52, 31], [154, 108], [64, -7], [26, -17], [27, -43], [28, -27], [23, -75], [20, -102], [33, -18], [46, -6], [100, -38], [101, -48], [29, -92], [54, -77], [126, 7], [132, 16], [127, 126], [0, 52], [-31, 74], [-47, 72], [-37, 112], [-117, 25], [11, 33], [44, 39], [40, 61], [6, 46], [-11, 98], [106, -7], [106, -11], [201, -44], [163, -18], [86, -28], [52, -32], [62, -23], [21, 57], [23, 14], [82, -33], [60, -9], [103, 4], [130, -15], [141, 3], [127, 25], [47, -5], [52, -20], [84, -53], [143, -71], [130, -20], [150, -66], [141, -25], [113, -38], [16, -14], [5, -21], [8, -18], [89, -20], [165, -143], [-99962, -16]], [[90522, 76877], [4, -3], [5, 0], [5, 1], [2, -6], [1, -11], [-3, -1], [-7, -2], [-4, -1], [-2, 8], [-1, 6], [-4, 4], [0, 4], [4, 1]], [[90654, 76972], [-7, -3], [-12, 3], [-4, 3], [2, 5], [8, 8], [6, -3], [5, -2], [2, -11]], [[90567, 76848], [-3, -1], [-2, 7], [6, 8], [11, 9], [4, -5], [-4, -7], [-5, -4], [-7, -7]], [[5628, 39602], [-9, 0], [-12, 4], [-7, 3], [-1, 5], [3, 16], [6, 9], [12, -2], [8, -11], [1, -19], [-1, -5]], [[2089, 46900], [-1, -1], [-1, 6], [-2, 7], [-1, 7], [0, 1], [3, -6], [2, -7], [0, -7]], [[2448, 46454], [0, -2], [-2, 3], [-2, 5], [-1, 6], [1, 1], [2, -4], [1, -4], [1, -5]], [[2163, 49244], [1, -4], [4, 1], [4, 1], [-2, -4], [-8, -2], [-3, 10], [4, 8], [4, 1], [1, -2], [-1, -2], [-1, 0], [-3, -2], [0, -5]], [[2306, 50249], [9, -11], [7, -15], [4, -20], [-1, -5], [-5, 0], [-6, 6], [-5, 9], [-2, 2], [-1, 2], [6, -1], [6, -9], [5, -4], [-1, 10], [-5, 18], [-4, 6], [-4, 5], [-5, 3], [-4, -3], [-1, -2], [-1, 5], [1, 3], [1, 4], [6, -3]], [[2476, 50037], [-1, -5], [-2, 4], [1, 6], [2, 6], [1, -3], [-1, -8]], [[2435, 49272], [-3, -3], [-3, 1], [-2, 4], [0, 6], [3, 4], [3, -1], [3, -6], [-1, -5]], [[1524, 49150], [3, -8], [0, -4], [-1, 1], [-5, 2], [-1, 5], [3, -3], [2, 1], [-4, 6], [-2, 5], [-3, 2], [0, 3], [3, -1], [5, -9]], [[6957, 49488], [-1, -4], [-4, 5], [-6, 9], [-6, 9], [0, 4], [8, 5], [10, 5], [2, -6], [-2, -9], [-1, -18]], [[7838, 45252], [-2, -9], [-5, 3], [-2, 12], [-1, 12], [2, 11], [2, -1], [4, -12], [2, -16]], [[6704, 48601], [-6, -2], [-8, 0], [-3, 7], [-1, 6], [3, 1], [2, -2], [11, -1], [3, -4], [-1, -5]], [[407, 40802], [-3, -5], [-8, 6], [-6, 8], [-1, 8], [3, 10], [6, 6], [3, -2], [-2, -3], [-3, -4], [0, -11], [5, -6], [4, -1], [2, -6]], [[56, 40932], [0, -17], [-4, 1], [-5, 8], [-2, -4], [-2, -5], [-1, -12], [-1, -7], [-4, 3], [0, 11], [1, 9], [2, 12], [7, 11], [9, -10]], [[358, 39937], [0, -1], [-1, 0], [-2, 2], [-2, 4], [0, 4], [0, 4], [1, 0], [2, -4], [1, -4], [1, -5]], [[28110, 32461], [-50, -12], [-2, 3], [3, 10], [11, 18], [14, 21], [3, 1], [5, -2], [6, -4], [15, -14], [4, -10], [-1, -8], [-8, -3]], [[46009, 47249], [-9, -1], [-3, 5], [-2, 14], [5, 22], [4, 13], [7, -2], [8, -15], [8, -13], [-4, -12], [-14, -11]], [[70216, 58296], [-2, -4], [0, 10], [2, 17], [3, 11], [1, -1], [0, -11], [-2, -15], [-2, -7]], [[70296, 56606], [-4, -7], [-4, -3], [-3, 1], [-1, 7], [0, 6], [4, -7], [5, 6], [5, 18], [1, 6], [1, -3], [-1, -10], [-3, -14]], [[70393, 53704], [-6, -1], [-4, 10], [1, 14], [5, 10], [7, 1], [4, -9], [-2, -14], [-5, -11]], [[70419, 54242], [-4, -6], [-5, 2], [-2, 7], [3, 10], [3, 13], [3, 14], [4, 7], [3, -2], [0, -8], [-2, -11], [-1, -14], [-2, -12]], [[86436, 53586], [-6, -3], [-4, 2], [0, 8], [4, 9], [6, 4], [4, -3], [0, -8], [-4, -9]], [[92123, 56074], [-2, -7], [-17, 3], [-2, 4], [1, 3], [8, 4], [1, 10], [-4, 2], [4, 6], [6, 1], [4, -7], [2, -9], [-1, -10]], [[92188, 56124], [-4, -3], [-3, 3], [1, 14], [2, 5], [4, 1], [8, -4], [1, -4], [-9, -12]], [[96357, 58267], [-7, -4], [-5, 4], [4, 8], [8, 1], [3, -2], [-3, -7]], [[99199, 44639], [-10, -6], [-18, 5], [-4, 9], [6, 2], [11, 6], [14, -3], [3, -6], [-2, -7]], [[98507, 39346], [-2, -7], [-8, 2], [-2, 13], [5, 7], [7, -4], [0, -11]], [[99781, 46932], [-4, -6], [-1, 0], [1, 13], [-1, 14], [0, 11], [2, 2], [2, -13], [1, -15], [0, -6]], [[99636, 47532], [0, -7], [-2, 1], [-3, 8], [-2, 13], [2, -3], [4, -7], [1, -5]], [[99552, 47208], [-4, -13], [-2, 4], [3, 8], [2, 9], [1, -8]], [[97097, 51339], [-3, -1], [-5, 6], [0, 7], [4, 4], [5, -6], [-1, -10]], [[14364, 37789], [-3, -9], [-6, 8], [-6, 16], [-2, 18], [6, 10], [7, -6], [4, -18], [0, -19]], [[3858, 89992], [-10, -3], [0, 9], [32, 23], [58, 29], [-2, -6], [-31, -23], [-47, -29]], [[25913, 64077], [4, -28], [-4, 4], [-7, 21], [-4, 26], [4, 1], [3, -9], [4, -15]], [[65129, 65923], [-3, -12], [-8, 1], [-19, 11], [-7, 16], [13, 19], [5, 1], [8, -20], [11, -16]], [[27282, 65981], [-7, -1], [-1, 9], [12, 11], [9, -1], [-1, -12], [-12, -6]], [[84650, 73721], [3, -6], [0, -9], [-4, -4], [-6, -9], [-6, -7], [-11, 3], [-9, 11], [3, 21], [7, -4], [16, 9], [7, -5]]],
  "bbox": [-180, -89.999, 180, 83.599609375],
  "transform": {
    "scale": [0.0036000360003600037, 0.001736003453784538],
    "translate": [-180, -89.999]
  }
};

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}]},["1j6wU","3Imd1","5rkFb"], "5rkFb", "parcelRequire2285")

//# sourceMappingURL=index.3fafb3e2.js.map
